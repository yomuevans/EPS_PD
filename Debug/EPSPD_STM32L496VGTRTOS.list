
EPSPD_STM32L496VGTRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f78  08009f78  0000b010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f78  08009f78  0000af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f80  08009f80  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f80  08009f80  0000af80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009f88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ce0  20000010  08009f98  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003cf0  08009f98  0000bcf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026713  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a60  00000000  00000000  00031753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002190  00000000  00000000  000361b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a9a  00000000  00000000  00038348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c1e  00000000  00000000  00039de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026835  00000000  00000000  0003ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001253e8  00000000  00000000  00065235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a61d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090bc  00000000  00000000  0018a660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0019371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e6c 	.word	0x08009e6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08009e6c 	.word	0x08009e6c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <SSP_GetRxBuffer>:
// Output:
//   - Returns a pointer to a uint8_t array, the appropriate receive buffer (rx_buffer1 or rx_buffer2)
// Significance:
//   - A helper function that selects the correct receive buffer based on the UART interface,
//     used to manage DMA reception of SSP frames. It’s marked "inline" for faster execution.
static inline uint8_t* SSP_GetRxBuffer(UART_HandleTypeDef *huart) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    // Check if the UART handle matches ssp_uart1; if so, return rx_buffer1, else return rx_buffer2
    return (huart == ssp_uart1) ? rx_buffer1 : rx_buffer2;
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <SSP_GetRxBuffer+0x24>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	429a      	cmp	r2, r3
 800052c:	d101      	bne.n	8000532 <SSP_GetRxBuffer+0x16>
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <SSP_GetRxBuffer+0x28>)
 8000530:	e000      	b.n	8000534 <SSP_GetRxBuffer+0x18>
 8000532:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <SSP_GetRxBuffer+0x2c>)
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	2000002c 	.word	0x2000002c
 8000544:	20000034 	.word	0x20000034
 8000548:	20000134 	.word	0x20000134

0800054c <HAL_UART_TxCpltCallback>:
// Output:
//   - None (void), resets the RS485 driver enable pin
// Significance:
//   - Called when a UART DMA transmission completes, resets the RS485 driver enable
//     pin to allow reception, critical for RS485 communication (Reference Manual, Section 36.8).
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces (UART2 or UART3)
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <HAL_UART_TxCpltCallback+0x48>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	429a      	cmp	r2, r3
 800055c:	d004      	beq.n	8000568 <HAL_UART_TxCpltCallback+0x1c>
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <HAL_UART_TxCpltCallback+0x4c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	d111      	bne.n	800058c <HAL_UART_TxCpltCallback+0x40>
        // Select the correct driver enable pin based on UART
        GPIO_PinState de_pin = (huart->Instance == USART2) ? RS4852_DE_Pin : RS4851_DE_Pin;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <HAL_UART_TxCpltCallback+0x50>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d101      	bne.n	8000576 <HAL_UART_TxCpltCallback+0x2a>
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_UART_TxCpltCallback+0x2c>
 8000576:	2310      	movs	r3, #16
 8000578:	73fb      	strb	r3, [r7, #15]
        // Both pins are on GPIOD
        GPIO_TypeDef *de_port = (huart->Instance == USART2) ? GPIOD : GPIOD;
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_UART_TxCpltCallback+0x54>)
 800057c:	60bb      	str	r3, [r7, #8]
        // Reset the driver enable pin to disable RS485 transmission
        HAL_GPIO_WritePin(de_port, de_pin, GPIO_PIN_RESET);
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	b29b      	uxth	r3, r3
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	68b8      	ldr	r0, [r7, #8]
 8000588:	f002 fffc 	bl	8003584 <HAL_GPIO_WritePin>
    }
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000030 	.word	0x20000030
 800059c:	40004400 	.word	0x40004400
 80005a0:	48000c00 	.word	0x48000c00

080005a4 <HAL_UART_ErrorCallback>:
// Output:
//   - None (void), handles UART errors by restarting DMA reception
// Significance:
//   - Handles UART errors (e.g., framing errors) by incrementing an error counter and
//     restarting DMA reception to recover, ensuring robust communication.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <HAL_UART_ErrorCallback+0x44>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d004      	beq.n	80005c0 <HAL_UART_ErrorCallback+0x1c>
 80005b6:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <HAL_UART_ErrorCallback+0x48>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d10e      	bne.n	80005de <HAL_UART_ErrorCallback+0x3a>
        // Increment the framing error counter
        framing_errors++;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <HAL_UART_ErrorCallback+0x4c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <HAL_UART_ErrorCallback+0x4c>)
 80005c8:	6013      	str	r3, [r2, #0]

        // Get the correct receive buffer for this UART
        uint8_t *rx_buffer = SSP_GetRxBuffer(huart);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ffa6 	bl	800051c <SSP_GetRxBuffer>
 80005d0:	60f8      	str	r0, [r7, #12]
        // Restart DMA reception to recover from the error
        HAL_UART_Receive_DMA(huart, rx_buffer, SSP_MAX_DATA_LEN + SSP_FRAME_OVERHEAD);
 80005d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d6:	68f9      	ldr	r1, [r7, #12]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f005 fb95 	bl	8005d08 <HAL_UART_Receive_DMA>
    }
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	20000030 	.word	0x20000030
 80005f0:	20000234 	.word	0x20000234

080005f4 <main>:
void StartDefaultTask(void *argument);
void StartTask02(void *argument);
void StartTask03(void *argument);

int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  HAL_Init();
 80005f8:	f001 facb 	bl	8001b92 <HAL_Init>
  SystemClock_Config();
 80005fc:	f000 f84a 	bl	8000694 <SystemClock_Config>
  MX_GPIO_Init();
 8000600:	f000 fbd0 	bl	8000da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fb88 	bl	8000d18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000608:	f000 fb22 	bl	8000c50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800060c:	f000 fb52 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000610:	f000 faee 	bl	8000bf0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000614:	f000 f884 	bl	8000720 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000618:	f000 f8f8 	bl	800080c <MX_I2C2_Init>
  MX_SPI1_Init();
 800061c:	f000 f936 	bl	800088c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000620:	f000 f96e 	bl	8000900 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000624:	f000 f9a6 	bl	8000974 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000628:	f000 f9f8 	bl	8000a1c <MX_TIM2_Init>
  MX_TIM3_Init();
 800062c:	f000 fa44 	bl	8000ab8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000630:	f000 fa90 	bl	8000b54 <MX_TIM4_Init>

  osKernelInitialize();
 8000634:	f006 fe5e 	bl	80072f4 <osKernelInitialize>

  NormalTaskHandle = osThreadNew(StartDefaultTask, NULL, &NormalTask_attributes);
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <main+0x7c>)
 800063a:	2100      	movs	r1, #0
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <main+0x80>)
 800063e:	f006 fea3 	bl	8007388 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <main+0x84>)
 8000646:	6013      	str	r3, [r2, #0]
  FaultTask02Handle = osThreadNew(StartTask02, NULL, &FaultTask02_attributes);
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <main+0x88>)
 800064a:	2100      	movs	r1, #0
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <main+0x8c>)
 800064e:	f006 fe9b 	bl	8007388 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <main+0x90>)
 8000656:	6013      	str	r3, [r2, #0]
  SSPmasterTask03Handle = osThreadNew(StartTask03, NULL, &SSPmasterTask03_attributes);
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <main+0x94>)
 800065a:	2100      	movs	r1, #0
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <main+0x98>)
 800065e:	f006 fe93 	bl	8007388 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <main+0x9c>)
 8000666:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000668:	f006 fe68 	bl	800733c <osKernelStart>

  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x78>
 8000670:	08009ec4 	.word	0x08009ec4
 8000674:	08000ff9 	.word	0x08000ff9
 8000678:	20000834 	.word	0x20000834
 800067c:	08009ee8 	.word	0x08009ee8
 8000680:	08001009 	.word	0x08001009
 8000684:	20000838 	.word	0x20000838
 8000688:	08009f0c 	.word	0x08009f0c
 800068c:	08001019 	.word	0x08001019
 8000690:	2000083c 	.word	0x2000083c

08000694 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	@ 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f009 fba8 	bl	8009df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ba:	f003 f8df 	bl	800387c <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 fcc2 	bl	800104c <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f922 	bl	8003928 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006ea:	f000 fcaf 	bl	800104c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2301      	movs	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fd28 	bl	800415c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000712:	f000 fc9b 	bl	800104c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	@ 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000744:	4a2f      	ldr	r2, [pc, #188]	@ (8000804 <MX_ADC1_Init+0xe4>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_ADC1_Init+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075a:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <MX_ADC1_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000762:	2204      	movs	r2, #4
 8000764:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_ADC1_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000772:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_ADC1_Init+0xe0>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_ADC1_Init+0xe0>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	4817      	ldr	r0, [pc, #92]	@ (8000800 <MX_ADC1_Init+0xe0>)
 80007a4:	f001 fbce 	bl	8001f44 <HAL_ADC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ae:	f000 fc4d 	bl	800104c <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4810      	ldr	r0, [pc, #64]	@ (8000800 <MX_ADC1_Init+0xe0>)
 80007be:	f002 f947 	bl	8002a50 <HAL_ADCEx_MultiModeConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c8:	f000 fc40 	bl	800104c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_ADC1_Init+0xe8>)
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d0:	2306      	movs	r3, #6
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d8:	237f      	movs	r3, #127	@ 0x7f
 80007da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007dc:	2304      	movs	r3, #4
 80007de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_ADC1_Init+0xe0>)
 80007ea:	f001 fcff 	bl	80021ec <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007f4:	f000 fc2a 	bl	800104c <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000238 	.word	0x20000238
 8000804:	50040000 	.word	0x50040000
 8000808:	04300002 	.word	0x04300002

0800080c <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_I2C2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <MX_I2C2_Init+0x7c>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000824:	2201      	movs	r2, #1
 8000826:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000848:	f002 fed7 	bl	80035fa <HAL_I2C_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000852:	f000 fbfb 	bl	800104c <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_I2C2_Init+0x74>)
 800085a:	f002 ff69 	bl	8003730 <HAL_I2CEx_ConfigAnalogFilter>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000864:	f000 fbf2 	bl	800104c <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_I2C2_Init+0x74>)
 800086c:	f002 ffab 	bl	80037c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fbe9 	bl	800104c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200002a0 	.word	0x200002a0
 8000884:	40005800 	.word	0x40005800
 8000888:	00503d58 	.word	0x00503d58

0800088c <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 8000892:	4a1a      	ldr	r2, [pc, #104]	@ (80008fc <MX_SPI1_Init+0x70>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008a4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008d2:	2207      	movs	r2, #7
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_SPI1_Init+0x6c>)
 80008e4:	f004 fb5a 	bl	8004f9c <HAL_SPI_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008ee:	f000 fbad 	bl	800104c <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000384 	.word	0x20000384
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  hspi3.Instance = SPI3;
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000906:	4a1a      	ldr	r2, [pc, #104]	@ (8000970 <MX_SPI3_Init+0x70>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_SPI3_Init+0x6c>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000918:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800091c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <MX_SPI3_Init+0x6c>)
 800092c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_SPI3_Init+0x6c>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000946:	2207      	movs	r2, #7
 8000948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_SPI3_Init+0x6c>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_SPI3_Init+0x6c>)
 8000958:	f004 fb20 	bl	8004f9c <HAL_SPI_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8000962:	f000 fb73 	bl	800104c <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200003e8 	.word	0x200003e8
 8000970:	40003c00 	.word	0x40003c00

08000974 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 8000994:	4a20      	ldr	r2, [pc, #128]	@ (8000a18 <MX_TIM1_Init+0xa4>)
 8000996:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 800099a:	224f      	movs	r2, #79	@ 0x4f
 800099c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009be:	4815      	ldr	r0, [pc, #84]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009c0:	f004 fcaf 	bl	8005322 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009ca:	f000 fb3f 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009dc:	f004 fe6f 	bl	80056be <HAL_TIM_ConfigClockSource>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009e6:	f000 fb31 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_TIM1_Init+0xa0>)
 80009fc:	f005 f890 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a06:	f000 fb21 	bl	800104c <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000044c 	.word	0x2000044c
 8000a18:	40012c00 	.word	0x40012c00

08000a1c <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a44:	224f      	movs	r2, #79	@ 0x4f
 8000a46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a62:	4814      	ldr	r0, [pc, #80]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a64:	f004 fc5d 	bl	8005322 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a6e:	f000 faed 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a80:	f004 fe1d 	bl	80056be <HAL_TIM_ConfigClockSource>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a8a:	f000 fadf 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a9c:	f005 f840 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000aa6:	f000 fad1 	bl	800104c <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000498 	.word	0x20000498

08000ab8 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <MX_TIM3_Init+0x98>)
 8000ada:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000ade:	224f      	movs	r2, #79	@ 0x4f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000afe:	f004 fc10 	bl	8005322 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b08:	f000 faa0 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000b1a:	f004 fdd0 	bl	80056be <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b24:	f000 fa92 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000b36:	f004 fff3 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 fa84 	bl	800104c <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200004e4 	.word	0x200004e4
 8000b50:	40000400 	.word	0x40000400

08000b54 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b74:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <MX_TIM4_Init+0x98>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b7a:	224f      	movs	r2, #79	@ 0x4f
 8000b7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b98:	4813      	ldr	r0, [pc, #76]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000b9a:	f004 fbc2 	bl	8005322 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000ba4:	f000 fa52 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000bb6:	f004 fd82 	bl	80056be <HAL_TIM_ConfigClockSource>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000bc0:	f000 fa44 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_TIM4_Init+0x94>)
 8000bd2:	f004 ffa5 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 fa36 	bl	800104c <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000530 	.word	0x20000530
 8000bec:	40000800 	.word	0x40000800

08000bf0 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000bf6:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <MX_USART1_UART_Init+0x5c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART1_UART_Init+0x58>)
 8000c34:	f005 f81a 	bl	8005c6c <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 fa05 	bl	800104c <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000057c 	.word	0x2000057c
 8000c4c:	40013800 	.word	0x40013800

08000c50 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c56:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <MX_USART2_UART_Init+0x60>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000c92:	2300      	movs	r3, #0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c9a:	f006 fa75 	bl	8007188 <HAL_RS485Ex_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f000 f9d2 	bl	800104c <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000604 	.word	0x20000604
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cba:	4a16      	ldr	r2, [pc, #88]	@ (8000d14 <MX_USART3_UART_Init+0x60>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cfe:	f006 fa43 	bl	8007188 <HAL_RS485Ex_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d08:	f000 f9a0 	bl	800104c <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000068c 	.word	0x2000068c
 8000d14:	40004800 	.word	0x40004800

08000d18 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_DMA_Init+0x88>)
 8000d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d22:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <MX_DMA_Init+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_DMA_Init+0x88>)
 8000d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2105      	movs	r1, #5
 8000d3a:	200c      	movs	r0, #12
 8000d3c:	f001 fff0 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d40:	200c      	movs	r0, #12
 8000d42:	f002 f809 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	200d      	movs	r0, #13
 8000d4c:	f001 ffe8 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d50:	200d      	movs	r0, #13
 8000d52:	f002 f801 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2105      	movs	r1, #5
 8000d5a:	200e      	movs	r0, #14
 8000d5c:	f001 ffe0 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d60:	200e      	movs	r0, #14
 8000d62:	f001 fff9 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2105      	movs	r1, #5
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f001 ffd8 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d70:	200f      	movs	r0, #15
 8000d72:	f001 fff1 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2010      	movs	r0, #16
 8000d7c:	f001 ffd0 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d80:	2010      	movs	r0, #16
 8000d82:	f001 ffe9 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2105      	movs	r1, #5
 8000d8a:	2011      	movs	r0, #17
 8000d8c:	f001 ffc8 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d90:	2011      	movs	r0, #17
 8000d92:	f001 ffe1 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	4b89      	ldr	r3, [pc, #548]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a88      	ldr	r2, [pc, #544]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b86      	ldr	r3, [pc, #536]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b83      	ldr	r3, [pc, #524]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a82      	ldr	r2, [pc, #520]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b80      	ldr	r3, [pc, #512]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b7d      	ldr	r3, [pc, #500]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a7c      	ldr	r2, [pc, #496]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b7a      	ldr	r3, [pc, #488]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b77      	ldr	r3, [pc, #476]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a76      	ldr	r2, [pc, #472]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b74      	ldr	r3, [pc, #464]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b71      	ldr	r3, [pc, #452]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a70      	ldr	r2, [pc, #448]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b6e      	ldr	r3, [pc, #440]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b6b      	ldr	r3, [pc, #428]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a6a      	ldr	r2, [pc, #424]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b68      	ldr	r3, [pc, #416]	@ (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOE, RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f240 511c 	movw	r1, #1308	@ 0x51c
 8000e50:	4864      	ldr	r0, [pc, #400]	@ (8000fe4 <MX_GPIO_Init+0x240>)
 8000e52:	f002 fb97 	bl	8003584 <HAL_GPIO_WritePin>
                          |CCU5V_EN_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000e5c:	4862      	ldr	r0, [pc, #392]	@ (8000fe8 <MX_GPIO_Init+0x244>)
 8000e5e:	f002 fb91 	bl	8003584 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, PL_EN_Pin|UHF_EN_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8000e68:	4860      	ldr	r0, [pc, #384]	@ (8000fec <MX_GPIO_Init+0x248>)
 8000e6a:	f002 fb8b 	bl	8003584 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000e74:	485e      	ldr	r0, [pc, #376]	@ (8000ff0 <MX_GPIO_Init+0x24c>)
 8000e76:	f002 fb85 	bl	8003584 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ADCS_EN_GPIO_Port, ADCS_EN_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f002 fb7e 	bl	8003584 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	4859      	ldr	r0, [pc, #356]	@ (8000ff4 <MX_GPIO_Init+0x250>)
 8000e8e:	f002 fb79 	bl	8003584 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8000e92:	f240 531c 	movw	r3, #1308	@ 0x51c
 8000e96:	61fb      	str	r3, [r7, #28]
                          |CCU5V_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	484e      	ldr	r0, [pc, #312]	@ (8000fe4 <MX_GPIO_Init+0x240>)
 8000eac:	f002 f9d8 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin;
 8000eb0:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4847      	ldr	r0, [pc, #284]	@ (8000fe8 <MX_GPIO_Init+0x244>)
 8000eca:	f002 f9c9 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_FLT_Pin|XB12V_FLT_Pin|CCU5V_FLT_Pin|PL5V_FLT_Pin
 8000ece:	f640 2383 	movw	r3, #2691	@ 0xa83
 8000ed2:	61fb      	str	r3, [r7, #28]
                          |RS5V_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4840      	ldr	r0, [pc, #256]	@ (8000fe4 <MX_GPIO_Init+0x240>)
 8000ee4:	f002 f9bc 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS3V3_FLT_Pin|CCU_FAULT_Pin|PL_FLT_Pin|ADCS_FAULT_Pin
 8000ee8:	f244 3305 	movw	r3, #17157	@ 0x4305
 8000eec:	61fb      	str	r3, [r7, #28]
                          |OBC_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	483b      	ldr	r0, [pc, #236]	@ (8000fec <MX_GPIO_Init+0x248>)
 8000efe:	f002 f9af 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PL_EN_Pin|UHF_EN_Pin;
 8000f02:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4834      	ldr	r0, [pc, #208]	@ (8000fec <MX_GPIO_Init+0x248>)
 8000f1c:	f002 f9a0 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin;
 8000f20:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	482d      	ldr	r0, [pc, #180]	@ (8000ff0 <MX_GPIO_Init+0x24c>)
 8000f3a:	f002 f991 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCS_EN_Pin;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADCS_EN_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f002 f981 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SYNC_PULSE_Pin;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SYNC_PULSE_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481e      	ldr	r0, [pc, #120]	@ (8000fec <MX_GPIO_Init+0x248>)
 8000f74:	f002 f974 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = UHF_FLT_Pin|GPS_FLT_Pin|ADCS12V_FLT_Pin|ADCS5V_FLT_Pin;
 8000f78:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4816      	ldr	r0, [pc, #88]	@ (8000fe8 <MX_GPIO_Init+0x244>)
 8000f8e:	f002 f967 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS_EN_Pin;
 8000f92:	2340      	movs	r3, #64	@ 0x40
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <MX_GPIO_Init+0x244>)
 8000fa8:	f002 f95a 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BOOT0_Pin;
 8000fac:	2308      	movs	r3, #8
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <MX_GPIO_Init+0x250>)
 8000fc4:	f002 f94c 	bl	8003260 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2105      	movs	r1, #5
 8000fcc:	2007      	movs	r0, #7
 8000fce:	f001 fea7 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fd2:	2007      	movs	r0, #7
 8000fd4:	f001 fec0 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	@ 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48001000 	.word	0x48001000
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48001c00 	.word	0x48001c00

08000ff8 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f006 fa53 	bl	80074ac <osDelay>
 8001006:	e7fb      	b.n	8001000 <StartDefaultTask+0x8>

08001008 <StartTask02>:
  }
}

void StartTask02(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f006 fa4b 	bl	80074ac <osDelay>
 8001016:	e7fb      	b.n	8001010 <StartTask02+0x8>

08001018 <StartTask03>:
  }
}

void StartTask03(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f006 fa43 	bl	80074ac <osDelay>
 8001026:	e7fb      	b.n	8001020 <StartTask03+0x8>

08001028 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800103a:	f000 fdc3 	bl	8001bc4 <HAL_IncTick>
  }
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40001000 	.word	0x40001000

0800104c <Error_Handler>:

void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  __disable_irq();
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <Error_Handler+0x8>

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001062:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6613      	str	r3, [r2, #96]	@ 0x60
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_MspInit+0x4c>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_MspInit+0x4c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001080:	6593      	str	r3, [r2, #88]	@ 0x58
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	210f      	movs	r1, #15
 8001092:	f06f 0001 	mvn.w	r0, #1
 8001096:	f001 fe43 	bl	8002d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ae      	sub	sp, #184	@ 0xb8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	228c      	movs	r2, #140	@ 0x8c
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fe95 	bl	8009df8 <memset>
  if(hadc->Instance==ADC1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a42      	ldr	r2, [pc, #264]	@ (80011dc <HAL_ADC_MspInit+0x134>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d17d      	bne.n	80011d4 <HAL_ADC_MspInit+0x12c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010ee:	2308      	movs	r3, #8
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001102:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fa7d 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001114:	f7ff ff9a 	bl	800104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001118:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	4a30      	ldr	r2, [pc, #192]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 800111e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001122:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001134:	4a2a      	ldr	r2, [pc, #168]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113c:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	4a24      	ldr	r2, [pc, #144]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_ADC_MspInit+0x138>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = RS5V_I_Pin|PS5V_I_Pin|ADCS5V_1_Pin|GPS_I_Pin
 8001178:	233f      	movs	r3, #63	@ 0x3f
 800117a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |PL_I_Pin|ADCS12V_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800118e:	4619      	mov	r1, r3
 8001190:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <HAL_ADC_MspInit+0x13c>)
 8001192:	f002 f865 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M_OUT_Pin|SA2_I_Pin|SA3_I_Pin|XB12V_I_Pin
 8001196:	23ff      	movs	r3, #255	@ 0xff
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |CCU5V_I_Pin|CCU_I_Pin|RS3V3_I_Pin|ADCS_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b2:	f002 f855 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF_I_Pin|OBC_I_Pin;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <HAL_ADC_MspInit+0x140>)
 80011d0:	f002 f846 	bl	8003260 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011d4:	bf00      	nop
 80011d6:	37b8      	adds	r7, #184	@ 0xb8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	50040000 	.word	0x50040000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000800 	.word	0x48000800
 80011e8:	48000400 	.word	0x48000400

080011ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ac      	sub	sp, #176	@ 0xb0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	228c      	movs	r2, #140	@ 0x8c
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f008 fdf3 	bl	8009df8 <memset>
  if(hi2c->Instance==I2C2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a4b      	ldr	r2, [pc, #300]	@ (8001344 <HAL_I2C_MspInit+0x158>)
 8001218:	4293      	cmp	r3, r2
 800121a:	f040 808e 	bne.w	800133a <HAL_I2C_MspInit+0x14e>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001222:	2300      	movs	r3, #0
 8001224:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f9ec 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff ff09 	bl	800104c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <HAL_I2C_MspInit+0x15c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <HAL_I2C_MspInit+0x15c>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <HAL_I2C_MspInit+0x15c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001252:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125a:	2312      	movs	r3, #18
 800125c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800126c:	2304      	movs	r3, #4
 800126e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001276:	4619      	mov	r1, r3
 8001278:	4834      	ldr	r0, [pc, #208]	@ (800134c <HAL_I2C_MspInit+0x160>)
 800127a:	f001 fff1 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800127e:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <HAL_I2C_MspInit+0x15c>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	4a31      	ldr	r2, [pc, #196]	@ (8001348 <HAL_I2C_MspInit+0x15c>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001288:	6593      	str	r3, [r2, #88]	@ 0x58
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <HAL_I2C_MspInit+0x15c>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8001296:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 8001298:	4a2e      	ldr	r2, [pc, #184]	@ (8001354 <HAL_I2C_MspInit+0x168>)
 800129a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 800129e:	2203      	movs	r2, #3
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80012cc:	4820      	ldr	r0, [pc, #128]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012ce:	f001 fd51 	bl	8002d74 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80012d8:	f7ff feb8 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <HAL_I2C_MspInit+0x164>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <HAL_I2C_MspInit+0x170>)
 80012ec:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012f6:	2210      	movs	r2, #16
 80012f8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800131e:	480e      	ldr	r0, [pc, #56]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001320:	f001 fd28 	bl	8002d74 <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 800132a:	f7ff fe8f 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	37b0      	adds	r7, #176	@ 0xb0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005800 	.word	0x40005800
 8001348:	40021000 	.word	0x40021000
 800134c:	48000400 	.word	0x48000400
 8001350:	200002f4 	.word	0x200002f4
 8001354:	40020058 	.word	0x40020058
 8001358:	2000033c 	.word	0x2000033c
 800135c:	40020044 	.word	0x40020044

08001360 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	@ 0x30
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a42      	ldr	r2, [pc, #264]	@ (8001488 <HAL_SPI_MspInit+0x128>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d129      	bne.n	80013d6 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001382:	4b42      	ldr	r3, [pc, #264]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	4a41      	ldr	r2, [pc, #260]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800138c:	6613      	str	r3, [r2, #96]	@ 0x60
 800138e:	4b3f      	ldr	r3, [pc, #252]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b39      	ldr	r3, [pc, #228]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SS_Pin|SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c4:	2305      	movs	r3, #5
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4830      	ldr	r0, [pc, #192]	@ (8001490 <HAL_SPI_MspInit+0x130>)
 80013d0:	f001 ff46 	bl	8003260 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013d4:	e053      	b.n	800147e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <HAL_SPI_MspInit+0x134>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d14e      	bne.n	800147e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	4a29      	ldr	r2, [pc, #164]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	4a23      	ldr	r2, [pc, #140]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001404:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_SPI_MspInit+0x12c>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SS_Pin;
 8001428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800143a:	2306      	movs	r3, #6
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001448:	f001 ff0a 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SP13_SCK_Pin|SPI3_MISO_Pin|SP13_MOSI_Pin;
 800144c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800145e:	2306      	movs	r3, #6
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	@ (8001498 <HAL_SPI_MspInit+0x138>)
 800146a:	f001 fef9 	bl	8003260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	2033      	movs	r0, #51	@ 0x33
 8001474:	f001 fc54 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001478:	2033      	movs	r0, #51	@ 0x33
 800147a:	f001 fc6d 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	@ 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40013000 	.word	0x40013000
 800148c:	40021000 	.word	0x40021000
 8001490:	48001000 	.word	0x48001000
 8001494:	40003c00 	.word	0x40003c00
 8001498:	48000800 	.word	0x48000800

0800149c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_TIM_Base_MspInit+0xa4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10c      	bne.n	80014c8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ae:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	4a24      	ldr	r2, [pc, #144]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014c6:	e034      	b.n	8001532 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d0:	d10c      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
}
 80014ea:	e022      	b.n	8001532 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <HAL_TIM_Base_MspInit+0xac>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10c      	bne.n	8001510 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6593      	str	r3, [r2, #88]	@ 0x58
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	e010      	b.n	8001532 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <HAL_TIM_Base_MspInit+0xb0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10b      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6593      	str	r3, [r2, #88]	@ 0x58
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <HAL_TIM_Base_MspInit+0xa8>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
}
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40012c00 	.word	0x40012c00
 8001544:	40021000 	.word	0x40021000
 8001548:	40000400 	.word	0x40000400
 800154c:	40000800 	.word	0x40000800

08001550 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0b2      	sub	sp, #200	@ 0xc8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156c:	228c      	movs	r2, #140	@ 0x8c
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f008 fc41 	bl	8009df8 <memset>
  if(huart->Instance==USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a72      	ldr	r2, [pc, #456]	@ (8001744 <HAL_UART_MspInit+0x1f4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d145      	bne.n	800160c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001580:	2301      	movs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001584:	2300      	movs	r3, #0
 8001586:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158c:	4618      	mov	r0, r3
 800158e:	f003 f83b 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001598:	f7ff fd58 	bl	800104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159c:	4b6a      	ldr	r3, [pc, #424]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	4a69      	ldr	r2, [pc, #420]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a8:	4b67      	ldr	r3, [pc, #412]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b64      	ldr	r3, [pc, #400]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b8:	4a63      	ldr	r2, [pc, #396]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c0:	4b61      	ldr	r3, [pc, #388]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80015cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e6:	2307      	movs	r3, #7
 80015e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f6:	f001 fe33 	bl	8003260 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	2025      	movs	r0, #37	@ 0x25
 8001600:	f001 fb8e 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001604:	2025      	movs	r0, #37	@ 0x25
 8001606:	f001 fba7 	bl	8002d58 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800160a:	e169      	b.n	80018e0 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a4e      	ldr	r2, [pc, #312]	@ (800174c <HAL_UART_MspInit+0x1fc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 80a6 	bne.w	8001764 <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800161c:	2300      	movs	r3, #0
 800161e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001624:	4618      	mov	r0, r3
 8001626:	f002 ffef 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001630:	f7ff fd0c 	bl	800104c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001634:	4b44      	ldr	r3, [pc, #272]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001638:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 800163a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800163e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001640:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164c:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001650:	4a3d      	ldr	r2, [pc, #244]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001658:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_UART_MspInit+0x1f8>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RS4851_DE_Pin|RS4851_TX_Pin|RS4851_RX_Pin;
 8001664:	2370      	movs	r3, #112	@ 0x70
 8001666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167c:	2307      	movs	r3, #7
 800167e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001686:	4619      	mov	r1, r3
 8001688:	4831      	ldr	r0, [pc, #196]	@ (8001750 <HAL_UART_MspInit+0x200>)
 800168a:	f001 fde9 	bl	8003260 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <HAL_UART_MspInit+0x204>)
 8001690:	4a31      	ldr	r2, [pc, #196]	@ (8001758 <HAL_UART_MspInit+0x208>)
 8001692:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_UART_MspInit+0x204>)
 8001696:	2202      	movs	r2, #2
 8001698:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169a:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <HAL_UART_MspInit+0x204>)
 800169c:	2210      	movs	r2, #16
 800169e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b2:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016b8:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016c4:	4823      	ldr	r0, [pc, #140]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016c6:	f001 fb55 	bl	8002d74 <HAL_DMA_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0x184>
      Error_Handler();
 80016d0:	f7ff fcbc 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_UART_MspInit+0x204>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_UART_MspInit+0x20c>)
 80016e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001760 <HAL_UART_MspInit+0x210>)
 80016e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_UART_MspInit+0x20c>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_UART_MspInit+0x20c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_UART_MspInit+0x20c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_UART_MspInit+0x20c>)
 80016fa:	2280      	movs	r2, #128	@ 0x80
 80016fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_UART_MspInit+0x20c>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_UART_MspInit+0x20c>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_UART_MspInit+0x20c>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_UART_MspInit+0x20c>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001716:	4811      	ldr	r0, [pc, #68]	@ (800175c <HAL_UART_MspInit+0x20c>)
 8001718:	f001 fb2c 	bl	8002d74 <HAL_DMA_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8001722:	f7ff fc93 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <HAL_UART_MspInit+0x20c>)
 800172a:	675a      	str	r2, [r3, #116]	@ 0x74
 800172c:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_UART_MspInit+0x20c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2105      	movs	r1, #5
 8001736:	2026      	movs	r0, #38	@ 0x26
 8001738:	f001 faf2 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800173c:	2026      	movs	r0, #38	@ 0x26
 800173e:	f001 fb0b 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 8001742:	e0cd      	b.n	80018e0 <HAL_UART_MspInit+0x390>
 8001744:	40013800 	.word	0x40013800
 8001748:	40021000 	.word	0x40021000
 800174c:	40004400 	.word	0x40004400
 8001750:	48000c00 	.word	0x48000c00
 8001754:	20000714 	.word	0x20000714
 8001758:	40020080 	.word	0x40020080
 800175c:	2000075c 	.word	0x2000075c
 8001760:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <HAL_UART_MspInit+0x398>)
 800176a:	4293      	cmp	r3, r2
 800176c:	f040 80b8 	bne.w	80018e0 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001770:	2304      	movs	r3, #4
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001774:	2300      	movs	r3, #0
 8001776:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001778:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800177c:	4618      	mov	r0, r3
 800177e:	f002 ff43 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8001788:	f7ff fc60 	bl	800104c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800178c:	4b57      	ldr	r3, [pc, #348]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	4a56      	ldr	r2, [pc, #344]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 8001792:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001796:	6593      	str	r3, [r2, #88]	@ 0x58
 8001798:	4b54      	ldr	r3, [pc, #336]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b51      	ldr	r3, [pc, #324]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a8:	4a50      	ldr	r2, [pc, #320]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b0:	4b4e      	ldr	r3, [pc, #312]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b4b      	ldr	r3, [pc, #300]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	4a4a      	ldr	r2, [pc, #296]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c8:	4b48      	ldr	r3, [pc, #288]	@ (80018ec <HAL_UART_MspInit+0x39c>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS4852_TX_Pin|RS4852_RX_Pin;
 80017d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ee:	2307      	movs	r3, #7
 80017f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017f8:	4619      	mov	r1, r3
 80017fa:	483d      	ldr	r0, [pc, #244]	@ (80018f0 <HAL_UART_MspInit+0x3a0>)
 80017fc:	f001 fd30 	bl	8003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8001800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800181a:	2307      	movs	r3, #7
 800181c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001824:	4619      	mov	r1, r3
 8001826:	4833      	ldr	r0, [pc, #204]	@ (80018f4 <HAL_UART_MspInit+0x3a4>)
 8001828:	f001 fd1a 	bl	8003260 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 800182e:	4a33      	ldr	r2, [pc, #204]	@ (80018fc <HAL_UART_MspInit+0x3ac>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001832:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001834:	2202      	movs	r2, #2
 8001836:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001838:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 800183a:	2210      	movs	r2, #16
 800183c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001846:	2280      	movs	r2, #128	@ 0x80
 8001848:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001850:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001856:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001862:	4825      	ldr	r0, [pc, #148]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001864:	f001 fa86 	bl	8002d74 <HAL_DMA_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0x322>
      Error_Handler();
 800186e:	f7ff fbed 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a20      	ldr	r2, [pc, #128]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 8001876:	671a      	str	r2, [r3, #112]	@ 0x70
 8001878:	4a1f      	ldr	r2, [pc, #124]	@ (80018f8 <HAL_UART_MspInit+0x3a8>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 8001880:	4a20      	ldr	r2, [pc, #128]	@ (8001904 <HAL_UART_MspInit+0x3b4>)
 8001882:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 8001886:	2202      	movs	r2, #2
 8001888:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 8001898:	2280      	movs	r2, #128	@ 0x80
 800189a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80018b4:	4812      	ldr	r0, [pc, #72]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 80018b6:	f001 fa5d 	bl	8002d74 <HAL_DMA_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x374>
      Error_Handler();
 80018c0:	f7ff fbc4 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 80018c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80018ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <HAL_UART_MspInit+0x3b0>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2105      	movs	r1, #5
 80018d4:	2027      	movs	r0, #39	@ 0x27
 80018d6:	f001 fa23 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018da:	2027      	movs	r0, #39	@ 0x27
 80018dc:	f001 fa3c 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 80018e0:	bf00      	nop
 80018e2:	37c8      	adds	r7, #200	@ 0xc8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40004800 	.word	0x40004800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	200007a4 	.word	0x200007a4
 80018fc:	4002001c 	.word	0x4002001c
 8001900:	200007ec 	.word	0x200007ec
 8001904:	40020030 	.word	0x40020030

08001908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	@ 0x38
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_InitTick+0xe0>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	4a33      	ldr	r2, [pc, #204]	@ (80019e8 <HAL_InitTick+0xe0>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6593      	str	r3, [r2, #88]	@ 0x58
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_InitTick+0xe0>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800192e:	f107 0210 	add.w	r2, r7, #16
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fdd3 	bl	80044e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d103      	bne.n	8001950 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001948:	f002 fda0 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 800194c:	6378      	str	r0, [r7, #52]	@ 0x34
 800194e:	e004      	b.n	800195a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001950:	f002 fd9c 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8001954:	4603      	mov	r3, r0
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800195a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195c:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <HAL_InitTick+0xe4>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	3b01      	subs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_InitTick+0xe8>)
 800196a:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <HAL_InitTick+0xec>)
 800196c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800196e:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <HAL_InitTick+0xe8>)
 8001970:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001974:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001976:	4a1e      	ldr	r2, [pc, #120]	@ (80019f0 <HAL_InitTick+0xe8>)
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_InitTick+0xe8>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_InitTick+0xe8>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_InitTick+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800198e:	4818      	ldr	r0, [pc, #96]	@ (80019f0 <HAL_InitTick+0xe8>)
 8001990:	f003 fcc7 	bl	8005322 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800199a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11b      	bne.n	80019da <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019a2:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <HAL_InitTick+0xe8>)
 80019a4:	f003 fd14 	bl	80053d0 <HAL_TIM_Base_Start_IT>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d111      	bne.n	80019da <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019b6:	2036      	movs	r0, #54	@ 0x36
 80019b8:	f001 f9ce 	bl	8002d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	d808      	bhi.n	80019d4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019c2:	2200      	movs	r2, #0
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	2036      	movs	r0, #54	@ 0x36
 80019c8:	f001 f9aa 	bl	8002d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_InitTick+0xf0>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e002      	b.n	80019da <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3738      	adds	r7, #56	@ 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	20000840 	.word	0x20000840
 80019f4:	40001000 	.word	0x40001000
 80019f8:	20000004 	.word	0x20000004

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <NMI_Handler+0x4>

08001a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SYNC_PULSE_Pin);
 8001a36:	2002      	movs	r0, #2
 8001a38:	f001 fdbc 	bl	80035b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <DMA1_Channel2_IRQHandler+0x10>)
 8001a46:	f001 fb2c 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200007a4 	.word	0x200007a4

08001a54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <DMA1_Channel3_IRQHandler+0x10>)
 8001a5a:	f001 fb22 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200007ec 	.word	0x200007ec

08001a68 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <DMA1_Channel4_IRQHandler+0x10>)
 8001a6e:	f001 fb18 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000033c 	.word	0x2000033c

08001a7c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <DMA1_Channel5_IRQHandler+0x10>)
 8001a82:	f001 fb0e 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002f4 	.word	0x200002f4

08001a90 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <DMA1_Channel6_IRQHandler+0x10>)
 8001a96:	f001 fb04 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000075c 	.word	0x2000075c

08001aa4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <DMA1_Channel7_IRQHandler+0x10>)
 8001aaa:	f001 fafa 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000714 	.word	0x20000714

08001ab8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <USART1_IRQHandler+0x10>)
 8001abe:	f004 f96f 	bl	8005da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000057c 	.word	0x2000057c

08001acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <USART2_IRQHandler+0x10>)
 8001ad2:	f004 f965 	bl	8005da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000604 	.word	0x20000604

08001ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <USART3_IRQHandler+0x10>)
 8001ae6:	f004 f95b 	bl	8005da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000068c 	.word	0x2000068c

08001af4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <SPI3_IRQHandler+0x10>)
 8001afa:	f003 faf3 	bl	80050e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003e8 	.word	0x200003e8

08001b08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <TIM6_DAC_IRQHandler+0x10>)
 8001b0e:	f003 fccf 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000840 	.word	0x20000840

08001b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b44:	f7ff ffea 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopForever+0xe>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopForever+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f008 f94b 	bl	8009e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b72:	f7fe fd3f 	bl	80005f4 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b78:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b84:	08009f88 	.word	0x08009f88
  ldr r2, =_sbss
 8001b88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b8c:	20003cf0 	.word	0x20003cf0

08001b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_2_IRQHandler>

08001b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f001 f8b4 	bl	8002d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	200f      	movs	r0, #15
 8001ba4:	f7ff feb0 	bl	8001908 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff fa50 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008
 8001be8:	2000088c 	.word	0x2000088c

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000088c 	.word	0x2000088c

08001c04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3360      	adds	r3, #96	@ 0x60
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <LL_ADC_SetOffset+0x44>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	03fff000 	.word	0x03fff000

08001cb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3360      	adds	r3, #96	@ 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3360      	adds	r3, #96	@ 0x60
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	615a      	str	r2, [r3, #20]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3330      	adds	r3, #48	@ 0x30
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	211f      	movs	r1, #31
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	f003 011f 	and.w	r1, r3, #31
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	431a      	orrs	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3314      	adds	r3, #20
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	0e5b      	lsrs	r3, r3, #25
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	0d1b      	lsrs	r3, r3, #20
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0d1b      	lsrs	r3, r3, #20
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0318 	and.w	r3, r3, #24
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e10:	40d9      	lsrs	r1, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	400b      	ands	r3, r1
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	0007ffff 	.word	0x0007ffff

08001e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6093      	str	r3, [r2, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e6c:	d101      	bne.n	8001e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ebc:	d101      	bne.n	8001ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_IsEnabled+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_IsEnabled+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d101      	bne.n	8001f34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e133      	b.n	80021c6 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff f89b 	bl	80010a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff67 	bl	8001e58 <LL_ADC_IsDeepPowerDownEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff4d 	bl	8001e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff82 	bl	8001ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff66 	bl	8001e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb4:	4b86      	ldr	r3, [pc, #536]	@ (80021d0 <HAL_ADC_Init+0x28c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	4a86      	ldr	r2, [pc, #536]	@ (80021d4 <HAL_ADC_Init+0x290>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff64 	bl	8001ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff75 	bl	8001ef6 <LL_ADC_REG_IsConversionOngoing>
 800200c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80cc 	bne.w	80021b4 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 80c8 	bne.w	80021b4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800202c:	f043 0202 	orr.w	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff49 	bl	8001ed0 <LL_ADC_IsEnabled>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d115      	bne.n	8002070 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002044:	4864      	ldr	r0, [pc, #400]	@ (80021d8 <HAL_ADC_Init+0x294>)
 8002046:	f7ff ff43 	bl	8001ed0 <LL_ADC_IsEnabled>
 800204a:	4604      	mov	r4, r0
 800204c:	4863      	ldr	r0, [pc, #396]	@ (80021dc <HAL_ADC_Init+0x298>)
 800204e:	f7ff ff3f 	bl	8001ed0 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	431c      	orrs	r4, r3
 8002056:	4862      	ldr	r0, [pc, #392]	@ (80021e0 <HAL_ADC_Init+0x29c>)
 8002058:	f7ff ff3a 	bl	8001ed0 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	485e      	ldr	r0, [pc, #376]	@ (80021e4 <HAL_ADC_Init+0x2a0>)
 800206c:	f7ff fdca 	bl	8001c04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7e5b      	ldrb	r3, [r3, #25]
 8002074:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002080:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002086:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	3b01      	subs	r3, #1
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b46      	ldr	r3, [pc, #280]	@ (80021e8 <HAL_ADC_Init+0x2a4>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff1b 	bl	8001f1c <LL_ADC_INJ_IsConversionOngoing>
 80020e6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d140      	bne.n	8002170 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d13d      	bne.n	8002170 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7e1b      	ldrb	r3, [r3, #24]
 80020fc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020fe:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002106:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002116:	f023 0306 	bic.w	r3, r3, #6
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	430b      	orrs	r3, r1
 8002122:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800212a:	2b01      	cmp	r3, #1
 800212c:	d118      	bne.n	8002160 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002150:	430a      	orrs	r2, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10c      	bne.n	8002192 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f023 010f 	bic.w	r1, r3, #15
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002190:	e007      	b.n	80021a2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 020f 	bic.w	r2, r2, #15
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b2:	e007      	b.n	80021c4 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	f043 0210 	orr.w	r2, r3, #16
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000
 80021d4:	053e2d63 	.word	0x053e2d63
 80021d8:	50040000 	.word	0x50040000
 80021dc:	50040100 	.word	0x50040100
 80021e0:	50040200 	.word	0x50040200
 80021e4:	50040300 	.word	0x50040300
 80021e8:	fff0c007 	.word	0xfff0c007

080021ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0b6      	sub	sp, #216	@ 0xd8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x22>
 800220a:	2302      	movs	r3, #2
 800220c:	e3e3      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x7ea>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fe6b 	bl	8001ef6 <LL_ADC_REG_IsConversionOngoing>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 83c4 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d824      	bhi.n	8002282 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	3b02      	subs	r3, #2
 800223e:	2b03      	cmp	r3, #3
 8002240:	d81b      	bhi.n	800227a <HAL_ADC_ConfigChannel+0x8e>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_ADC_ConfigChannel+0x5c>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002259 	.word	0x08002259
 800224c:	08002261 	.word	0x08002261
 8002250:	08002269 	.word	0x08002269
 8002254:	08002271 	.word	0x08002271
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002258:	230c      	movs	r3, #12
 800225a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800225e:	e010      	b.n	8002282 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002260:	2312      	movs	r3, #18
 8002262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002266:	e00c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002268:	2318      	movs	r3, #24
 800226a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800226e:	e008      	b.n	8002282 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800227a:	2306      	movs	r3, #6
 800227c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002280:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002290:	f7ff fd54 	bl	8001d3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fe2c 	bl	8001ef6 <LL_ADC_REG_IsConversionOngoing>
 800229e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe38 	bl	8001f1c <LL_ADC_INJ_IsConversionOngoing>
 80022ac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 81bf 	bne.w	8002638 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 81ba 	bne.w	8002638 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022cc:	d10f      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	f7ff fd5b 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fd15 	bl	8001d16 <LL_ADC_SetSamplingTimeCommonConfig>
 80022ec:	e00e      	b.n	800230c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f7ff fd4a 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd05 	bl	8001d16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b04      	cmp	r3, #4
 800232c:	d00a      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6919      	ldr	r1, [r3, #16]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800233e:	f7ff fc95 	bl	8001c6c <LL_ADC_SetOffset>
 8002342:	e179      	b.n	8002638 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fcb2 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x184>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fca7 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	e01e      	b.n	80023ae <HAL_ADC_ConfigChannel+0x1c2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc9c 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800238e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002392:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800239e:	2320      	movs	r3, #32
 80023a0:	e004      	b.n	80023ac <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80023a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x1da>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	e018      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x20c>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80023ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fc6b 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fc4f 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x24a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fc44 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	e01e      	b.n	8002474 <HAL_ADC_ConfigChannel+0x288>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fc39 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800245c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002464:	2320      	movs	r3, #32
 8002466:	e004      	b.n	8002472 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_ADC_ConfigChannel+0x2a0>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	e018      	b.n	80024be <HAL_ADC_ConfigChannel+0x2d2>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e004      	b.n	80024be <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80024b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024be:	429a      	cmp	r2, r3
 80024c0:	d106      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fc08 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2102      	movs	r1, #2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fbec 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x310>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fbe1 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	e01e      	b.n	800253a <HAL_ADC_ConfigChannel+0x34e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2102      	movs	r1, #2
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fbd6 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800251a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800251e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e004      	b.n	8002538 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x366>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	e014      	b.n	800257c <HAL_ADC_ConfigChannel+0x390>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002562:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002566:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e004      	b.n	800257c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002572:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	2102      	movs	r1, #2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fba9 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2103      	movs	r1, #3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fb8d 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x3ce>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2103      	movs	r1, #3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fb82 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	0e9b      	lsrs	r3, r3, #26
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	e017      	b.n	80025ea <HAL_ADC_ConfigChannel+0x3fe>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2103      	movs	r1, #3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fb77 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025d4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80025e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x416>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	e011      	b.n	8002626 <HAL_ADC_ConfigChannel+0x43a>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002612:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e003      	b.n	8002626 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800261e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002626:	429a      	cmp	r2, r3
 8002628:	d106      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	2103      	movs	r1, #3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fb54 	bl	8001ce0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fc47 	bl	8001ed0 <LL_ADC_IsEnabled>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 813f 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f7ff fbc8 	bl	8001dec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a8e      	ldr	r2, [pc, #568]	@ (800289c <HAL_ADC_ConfigChannel+0x6b0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	f040 8130 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x4a4>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	3301      	adds	r3, #1
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2b09      	cmp	r3, #9
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e019      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x4d8>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80026ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	bf94      	ite	ls
 80026be:	2301      	movls	r3, #1
 80026c0:	2300      	movhi	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d079      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x4f8>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	3301      	adds	r3, #1
 80026dc:	069b      	lsls	r3, r3, #26
 80026de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e2:	e015      	b.n	8002710 <HAL_ADC_ConfigChannel+0x524>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e003      	b.n	8002708 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	069b      	lsls	r3, r3, #26
 800270c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x544>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2101      	movs	r1, #1
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	e017      	b.n	8002760 <HAL_ADC_ConfigChannel+0x574>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800273e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002740:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800274c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	ea42 0103 	orr.w	r1, r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x59a>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	3301      	adds	r3, #1
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	051b      	lsls	r3, r3, #20
 8002784:	e018      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x5cc>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80027a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b8:	430b      	orrs	r3, r1
 80027ba:	e080      	b.n	80028be <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x5ec>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	069b      	lsls	r3, r3, #26
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d6:	e015      	b.n	8002804 <HAL_ADC_ConfigChannel+0x618>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	069b      	lsls	r3, r3, #26
 8002800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x638>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	e017      	b.n	8002854 <HAL_ADC_ConfigChannel+0x668>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	61bb      	str	r3, [r7, #24]
  return result;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e003      	b.n	8002848 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x694>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	3b1e      	subs	r3, #30
 8002878:	051b      	lsls	r3, r3, #20
 800287a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800287e:	e01d      	b.n	80028bc <HAL_ADC_ConfigChannel+0x6d0>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
  return result;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e005      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x6bc>
 800289c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	3b1e      	subs	r3, #30
 80028b6:	051b      	lsls	r3, r3, #20
 80028b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028bc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7ff fa66 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b44      	ldr	r3, [pc, #272]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7f4>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d07a      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d4:	4843      	ldr	r0, [pc, #268]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 80028d6:	f7ff f9bb 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 80028da:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a41      	ldr	r2, [pc, #260]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d12c      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d126      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a3c      	ldr	r2, [pc, #240]	@ (80029ec <HAL_ADC_ConfigChannel+0x800>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_ConfigChannel+0x71c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a3b      	ldr	r2, [pc, #236]	@ (80029f0 <HAL_ADC_ConfigChannel+0x804>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d15d      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800290c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002910:	4619      	mov	r1, r3
 8002912:	4834      	ldr	r0, [pc, #208]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002914:	f7ff f989 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002918:	4b36      	ldr	r3, [pc, #216]	@ (80029f4 <HAL_ADC_ConfigChannel+0x808>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	4a36      	ldr	r2, [pc, #216]	@ (80029f8 <HAL_ADC_ConfigChannel+0x80c>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002932:	e002      	b.n	800293a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3b01      	subs	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002940:	e040      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2d      	ldr	r2, [pc, #180]	@ (80029fc <HAL_ADC_ConfigChannel+0x810>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d118      	bne.n	800297e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800294c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d112      	bne.n	800297e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a23      	ldr	r2, [pc, #140]	@ (80029ec <HAL_ADC_ConfigChannel+0x800>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_ADC_ConfigChannel+0x780>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a22      	ldr	r2, [pc, #136]	@ (80029f0 <HAL_ADC_ConfigChannel+0x804>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d12d      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800296c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002974:	4619      	mov	r1, r3
 8002976:	481b      	ldr	r0, [pc, #108]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002978:	f7ff f957 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800297c:	e024      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_ADC_ConfigChannel+0x814>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d120      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800298c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <HAL_ADC_ConfigChannel+0x800>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d115      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029a6:	4619      	mov	r1, r3
 80029a8:	480e      	ldr	r0, [pc, #56]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7f8>)
 80029aa:	f7ff f93e 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
 80029ae:	e00c      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80029c2:	e002      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80029d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	37d8      	adds	r7, #216	@ 0xd8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	80080000 	.word	0x80080000
 80029e4:	50040300 	.word	0x50040300
 80029e8:	c7520000 	.word	0xc7520000
 80029ec:	50040000 	.word	0x50040000
 80029f0:	50040200 	.word	0x50040200
 80029f4:	20000000 	.word	0x20000000
 80029f8:	053e2d63 	.word	0x053e2d63
 80029fc:	cb840000 	.word	0xcb840000
 8002a00:	80000001 	.word	0x80000001

08002a04 <LL_ADC_IsEnabled>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <LL_ADC_IsEnabled+0x18>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <LL_ADC_IsEnabled+0x1a>
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d101      	bne.n	8002a42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b0a1      	sub	sp, #132	@ 0x84
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e093      	b.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a76:	2300      	movs	r3, #0
 8002a78:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a47      	ldr	r2, [pc, #284]	@ (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a88:	4b46      	ldr	r3, [pc, #280]	@ (8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e001      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e072      	b.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ffb9 	bl	8002a2a <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ffb3 	bl	8002a2a <LL_ADC_REG_IsConversionOngoing>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d154      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d151      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ad0:	4b35      	ldr	r3, [pc, #212]	@ (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ad2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02c      	beq.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aee:	035b      	lsls	r3, r3, #13
 8002af0:	430b      	orrs	r3, r1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002af6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002af8:	4829      	ldr	r0, [pc, #164]	@ (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002afa:	f7ff ff83 	bl	8002a04 <LL_ADC_IsEnabled>
 8002afe:	4604      	mov	r4, r0
 8002b00:	4828      	ldr	r0, [pc, #160]	@ (8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b02:	f7ff ff7f 	bl	8002a04 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	431c      	orrs	r4, r3
 8002b0a:	4828      	ldr	r0, [pc, #160]	@ (8002bac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b0c:	f7ff ff7a 	bl	8002a04 <LL_ADC_IsEnabled>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4323      	orrs	r3, r4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d137      	bne.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b20:	f023 030f 	bic.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	6811      	ldr	r1, [r2, #0]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b32:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b34:	e028      	b.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b42:	4817      	ldr	r0, [pc, #92]	@ (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b44:	f7ff ff5e 	bl	8002a04 <LL_ADC_IsEnabled>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	4816      	ldr	r0, [pc, #88]	@ (8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b4c:	f7ff ff5a 	bl	8002a04 <LL_ADC_IsEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	431c      	orrs	r4, r3
 8002b54:	4815      	ldr	r0, [pc, #84]	@ (8002bac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b56:	f7ff ff55 	bl	8002a04 <LL_ADC_IsEnabled>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d112      	bne.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b6a:	f023 030f 	bic.w	r3, r3, #15
 8002b6e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b72:	e009      	b.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b86:	e000      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3784      	adds	r7, #132	@ 0x84
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	50040000 	.word	0x50040000
 8002ba4:	50040100 	.word	0x50040100
 8002ba8:	50040300 	.word	0x50040300
 8002bac:	50040200 	.word	0x50040200

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	@ (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff4c 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d32:	f7ff ff61 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6978      	ldr	r0, [r7, #20]
 8002d3e:	f7ff ffb1 	bl	8002ca4 <NVIC_EncodePriority>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff80 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff54 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e098      	b.n	8002eb8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec4 <HAL_DMA_Init+0x150>)
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d80f      	bhi.n	8002db2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec8 <HAL_DMA_Init+0x154>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002ecc <HAL_DMA_Init+0x158>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a48      	ldr	r2, [pc, #288]	@ (8002ed0 <HAL_DMA_Init+0x15c>)
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
 8002db0:	e00e      	b.n	8002dd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <HAL_DMA_Init+0x160>)
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a43      	ldr	r2, [pc, #268]	@ (8002ecc <HAL_DMA_Init+0x158>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a42      	ldr	r2, [pc, #264]	@ (8002ed8 <HAL_DMA_Init+0x164>)
 8002dce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e2a:	d039      	beq.n	8002ea0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	4a27      	ldr	r2, [pc, #156]	@ (8002ed0 <HAL_DMA_Init+0x15c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d11a      	bne.n	8002e6c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <HAL_DMA_Init+0x168>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f003 031c 	and.w	r3, r3, #28
 8002e42:	210f      	movs	r1, #15
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	4924      	ldr	r1, [pc, #144]	@ (8002edc <HAL_DMA_Init+0x168>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e50:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <HAL_DMA_Init+0x168>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5c:	f003 031c 	and.w	r3, r3, #28
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	491d      	ldr	r1, [pc, #116]	@ (8002edc <HAL_DMA_Init+0x168>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
 8002e6a:	e019      	b.n	8002ea0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee0 <HAL_DMA_Init+0x16c>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	f003 031c 	and.w	r3, r3, #28
 8002e78:	210f      	movs	r1, #15
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4917      	ldr	r1, [pc, #92]	@ (8002ee0 <HAL_DMA_Init+0x16c>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e86:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_DMA_Init+0x16c>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f003 031c 	and.w	r3, r3, #28
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	4911      	ldr	r1, [pc, #68]	@ (8002ee0 <HAL_DMA_Init+0x16c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40020407 	.word	0x40020407
 8002ec8:	bffdfff8 	.word	0xbffdfff8
 8002ecc:	cccccccd 	.word	0xcccccccd
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	bffdfbf8 	.word	0xbffdfbf8
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	400200a8 	.word	0x400200a8
 8002ee0:	400204a8 	.word	0x400204a8

08002ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Start_IT+0x20>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e04b      	b.n	8002f9c <HAL_DMA_Start_IT+0xb8>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d13a      	bne.n	8002f8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f95f 	bl	8003200 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 020e 	orr.w	r2, r2, #14
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00f      	b.n	8002f7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 020a 	orr.w	r2, r2, #10
 8002f7a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e005      	b.n	8002f9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e022      	b.n	8003014 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020e 	bic.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f003 021c 	and.w	r2, r3, #28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d005      	beq.n	8003044 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2204      	movs	r2, #4
 800303c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e029      	b.n	8003098 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 020e 	bic.w	r2, r2, #14
 8003052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003068:	f003 021c 	and.w	r2, r3, #28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
    }
  }
  return status;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	f003 031c 	and.w	r3, r3, #28
 80030c2:	2204      	movs	r2, #4
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d026      	beq.n	800311c <HAL_DMA_IRQHandler+0x7a>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d021      	beq.n	800311c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0204 	bic.w	r2, r2, #4
 80030f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f003 021c 	and.w	r2, r3, #28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2104      	movs	r1, #4
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	2b00      	cmp	r3, #0
 8003110:	d071      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800311a:	e06c      	b.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f003 031c 	and.w	r3, r3, #28
 8003124:	2202      	movs	r2, #2
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02e      	beq.n	800318e <HAL_DMA_IRQHandler+0xec>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d029      	beq.n	800318e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 020a 	bic.w	r2, r2, #10
 8003156:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003164:	f003 021c 	and.w	r2, r3, #28
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	2102      	movs	r1, #2
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d038      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800318c:	e033      	b.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f003 031c 	and.w	r3, r3, #28
 8003196:	2208      	movs	r2, #8
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02a      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x156>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d025      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 020e 	bic.w	r2, r2, #14
 80031ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	f003 021c 	and.w	r2, r3, #28
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
}
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	f003 021c 	and.w	r2, r3, #28
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f202 	lsl.w	r2, r1, r2
 8003220:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d108      	bne.n	8003244 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003242:	e007      	b.n	8003254 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326e:	e166      	b.n	800353e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8158 	beq.w	8003538 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d005      	beq.n	80032a0 <HAL_GPIO_Init+0x40>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d6:	2201      	movs	r2, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0201 	and.w	r2, r3, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d017      	beq.n	800333e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d123      	bne.n	8003392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	6939      	ldr	r1, [r7, #16]
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80b2 	beq.w	8003538 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d4:	4b61      	ldr	r3, [pc, #388]	@ (800355c <HAL_GPIO_Init+0x2fc>)
 80033d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d8:	4a60      	ldr	r2, [pc, #384]	@ (800355c <HAL_GPIO_Init+0x2fc>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6613      	str	r3, [r2, #96]	@ 0x60
 80033e0:	4b5e      	ldr	r3, [pc, #376]	@ (800355c <HAL_GPIO_Init+0x2fc>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003560 <HAL_GPIO_Init+0x300>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003416:	d02b      	beq.n	8003470 <HAL_GPIO_Init+0x210>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a52      	ldr	r2, [pc, #328]	@ (8003564 <HAL_GPIO_Init+0x304>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d025      	beq.n	800346c <HAL_GPIO_Init+0x20c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a51      	ldr	r2, [pc, #324]	@ (8003568 <HAL_GPIO_Init+0x308>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01f      	beq.n	8003468 <HAL_GPIO_Init+0x208>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a50      	ldr	r2, [pc, #320]	@ (800356c <HAL_GPIO_Init+0x30c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d019      	beq.n	8003464 <HAL_GPIO_Init+0x204>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a4f      	ldr	r2, [pc, #316]	@ (8003570 <HAL_GPIO_Init+0x310>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_GPIO_Init+0x200>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a4e      	ldr	r2, [pc, #312]	@ (8003574 <HAL_GPIO_Init+0x314>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00d      	beq.n	800345c <HAL_GPIO_Init+0x1fc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4d      	ldr	r2, [pc, #308]	@ (8003578 <HAL_GPIO_Init+0x318>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <HAL_GPIO_Init+0x1f8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4c      	ldr	r2, [pc, #304]	@ (800357c <HAL_GPIO_Init+0x31c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_GPIO_Init+0x1f4>
 8003450:	2307      	movs	r3, #7
 8003452:	e00e      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003454:	2308      	movs	r3, #8
 8003456:	e00c      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003458:	2306      	movs	r3, #6
 800345a:	e00a      	b.n	8003472 <HAL_GPIO_Init+0x212>
 800345c:	2305      	movs	r3, #5
 800345e:	e008      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003460:	2304      	movs	r3, #4
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003464:	2303      	movs	r3, #3
 8003466:	e004      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003468:	2302      	movs	r3, #2
 800346a:	e002      	b.n	8003472 <HAL_GPIO_Init+0x212>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003470:	2300      	movs	r3, #0
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003482:	4937      	ldr	r1, [pc, #220]	@ (8003560 <HAL_GPIO_Init+0x300>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	4b3b      	ldr	r3, [pc, #236]	@ (8003580 <HAL_GPIO_Init+0x320>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b4:	4a32      	ldr	r2, [pc, #200]	@ (8003580 <HAL_GPIO_Init+0x320>)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ba:	4b31      	ldr	r3, [pc, #196]	@ (8003580 <HAL_GPIO_Init+0x320>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034de:	4a28      	ldr	r2, [pc, #160]	@ (8003580 <HAL_GPIO_Init+0x320>)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034e4:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <HAL_GPIO_Init+0x320>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003508:	4a1d      	ldr	r2, [pc, #116]	@ (8003580 <HAL_GPIO_Init+0x320>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800350e:	4b1c      	ldr	r3, [pc, #112]	@ (8003580 <HAL_GPIO_Init+0x320>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003532:	4a13      	ldr	r2, [pc, #76]	@ (8003580 <HAL_GPIO_Init+0x320>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f ae91 	bne.w	8003270 <HAL_GPIO_Init+0x10>
  }
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800
 800356c:	48000c00 	.word	0x48000c00
 8003570:	48001000 	.word	0x48001000
 8003574:	48001400 	.word	0x48001400
 8003578:	48001800 	.word	0x48001800
 800357c:	48001c00 	.word	0x48001c00
 8003580:	40010400 	.word	0x40010400

08003584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
 8003590:	4613      	mov	r3, r2
 8003592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003594:	787b      	ldrb	r3, [r7, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f806 	bl	80035e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010400 	.word	0x40010400

080035e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e08d      	b.n	8003728 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd fde3 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2224      	movs	r2, #36	@ 0x24
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800364a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800365a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	e006      	b.n	8003682 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003680:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d108      	bne.n	800369c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e007      	b.n	80036ac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036be:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69d9      	ldr	r1, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	d138      	bne.n	80037b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003750:	2302      	movs	r3, #2
 8003752:	e032      	b.n	80037ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	@ 0x24
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d139      	bne.n	8003850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e033      	b.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2224      	movs	r2, #36	@ 0x24
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003864:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_PWREx_GetVoltageRange+0x18>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388a:	d130      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800388c:	4b23      	ldr	r3, [pc, #140]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003898:	d038      	beq.n	800390c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800389a:	4b20      	ldr	r3, [pc, #128]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038a2:	4a1e      	ldr	r2, [pc, #120]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003920 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2232      	movs	r2, #50	@ 0x32
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c0:	e002      	b.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c8:	4b14      	ldr	r3, [pc, #80]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d4:	d102      	bne.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f2      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038dc:	4b0f      	ldr	r3, [pc, #60]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e8:	d110      	bne.n	800390c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d007      	beq.n	800390c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038fc:	4b07      	ldr	r3, [pc, #28]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003904:	4a05      	ldr	r2, [pc, #20]	@ (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800390a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40007000 	.word	0x40007000
 8003920:	20000000 	.word	0x20000000
 8003924:	431bde83 	.word	0x431bde83

08003928 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f000 bc08 	b.w	800414c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393c:	4b96      	ldr	r3, [pc, #600]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003946:	4b94      	ldr	r3, [pc, #592]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80e4 	beq.w	8003b26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_RCC_OscConfig+0x4c>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	f040 808b 	bne.w	8003a82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	f040 8087 	bne.w	8003a82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003974:	4b88      	ldr	r3, [pc, #544]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_OscConfig+0x64>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e3df      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	4b81      	ldr	r3, [pc, #516]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <HAL_RCC_OscConfig+0x7e>
 800399c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039a4:	e005      	b.n	80039b2 <HAL_RCC_OscConfig+0x8a>
 80039a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d223      	bcs.n	80039fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fdc4 	bl	8004548 <RCC_SetFlashLatencyFromMSIRange>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e3c0      	b.n	800414c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ca:	4b73      	ldr	r3, [pc, #460]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a72      	ldr	r2, [pc, #456]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039d0:	f043 0308 	orr.w	r3, r3, #8
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b70      	ldr	r3, [pc, #448]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	496d      	ldr	r1, [pc, #436]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	4968      	ldr	r1, [pc, #416]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
 80039fc:	e025      	b.n	8003a4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039fe:	4b66      	ldr	r3, [pc, #408]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a65      	ldr	r2, [pc, #404]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4960      	ldr	r1, [pc, #384]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	495b      	ldr	r1, [pc, #364]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fd84 	bl	8004548 <RCC_SetFlashLatencyFromMSIRange>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e380      	b.n	800414c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a4a:	f000 fc87 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b51      	ldr	r3, [pc, #324]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	4950      	ldr	r1, [pc, #320]	@ (8003b9c <HAL_RCC_OscConfig+0x274>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <HAL_RCC_OscConfig+0x278>)
 8003a68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba4 <HAL_RCC_OscConfig+0x27c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd ff4a 	bl	8001908 <HAL_InitTick>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d052      	beq.n	8003b24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	e364      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d032      	beq.n	8003af0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a8a:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a96:	f7fe f8a9 	bl	8001bec <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9e:	f7fe f8a5 	bl	8001bec <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e34d      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab0:	4b39      	ldr	r3, [pc, #228]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a35      	ldr	r2, [pc, #212]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4930      	ldr	r1, [pc, #192]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ada:	4b2f      	ldr	r3, [pc, #188]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	492b      	ldr	r1, [pc, #172]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 8003aee:	e01a      	b.n	8003b26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003af0:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003afc:	f7fe f876 	bl	8001bec <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b04:	f7fe f872 	bl	8001bec <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e31a      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1dc>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d073      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_OscConfig+0x21c>
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d10e      	bne.n	8003b5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d063      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2f0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d15f      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e2f7      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d106      	bne.n	8003b74 <HAL_RCC_OscConfig+0x24c>
 8003b66:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e025      	b.n	8003bc0 <HAL_RCC_OscConfig+0x298>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b7c:	d114      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x280>
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a05      	ldr	r2, [pc, #20]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a02      	ldr	r2, [pc, #8]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e013      	b.n	8003bc0 <HAL_RCC_OscConfig+0x298>
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08009f30 	.word	0x08009f30
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	4ba0      	ldr	r3, [pc, #640]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a9f      	ldr	r2, [pc, #636]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b9d      	ldr	r3, [pc, #628]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a9c      	ldr	r2, [pc, #624]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe f810 	bl	8001bec <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe f80c 	bl	8001bec <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	@ 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e2b4      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be2:	4b92      	ldr	r3, [pc, #584]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2a8>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fffc 	bl	8001bec <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fff8 	bl	8001bec <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	@ 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e2a0      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0a:	4b88      	ldr	r3, [pc, #544]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2d0>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d060      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_OscConfig+0x310>
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d116      	bne.n	8003c66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c38:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_OscConfig+0x328>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e27d      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b76      	ldr	r3, [pc, #472]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4973      	ldr	r1, [pc, #460]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c64:	e040      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d023      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6e      	ldr	r2, [pc, #440]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd ffb7 	bl	8001bec <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fd ffb3 	bl	8001bec <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e25b      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c94:	4b65      	ldr	r3, [pc, #404]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b62      	ldr	r3, [pc, #392]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	495f      	ldr	r1, [pc, #380]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
 8003cb4:	e018      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5c      	ldr	r2, [pc, #368]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fd ff93 	bl	8001bec <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cca:	f7fd ff8f 	bl	8001bec <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e237      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cdc:	4b53      	ldr	r3, [pc, #332]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d03c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d02:	4a4a      	ldr	r2, [pc, #296]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fd ff6e 	bl	8001bec <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fd ff6a 	bl	8001bec <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e212      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d26:	4b41      	ldr	r3, [pc, #260]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ef      	beq.n	8003d14 <HAL_RCC_OscConfig+0x3ec>
 8003d34:	e01b      	b.n	8003d6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d36:	4b3d      	ldr	r3, [pc, #244]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fd ff51 	bl	8001bec <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fd ff4d 	bl	8001bec <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1f5      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d60:	4b32      	ldr	r3, [pc, #200]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ef      	bne.n	8003d4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80a6 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d80:	4b2a      	ldr	r3, [pc, #168]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b27      	ldr	r3, [pc, #156]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d98:	4b24      	ldr	r3, [pc, #144]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da8:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ff14 	bl	8001bec <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fd ff10 	bl	8001bec <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e1b8      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4d8>
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfe:	e029      	b.n	8003e54 <HAL_RCC_OscConfig+0x52c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d115      	bne.n	8003e34 <HAL_RCC_OscConfig+0x50c>
 8003e08:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	4a07      	ldr	r2, [pc, #28]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	4a03      	ldr	r2, [pc, #12]	@ (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e28:	e014      	b.n	8003e54 <HAL_RCC_OscConfig+0x52c>
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
 8003e34:	4b9d      	ldr	r3, [pc, #628]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	4a9c      	ldr	r2, [pc, #624]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e44:	4b99      	ldr	r3, [pc, #612]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	4a98      	ldr	r2, [pc, #608]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fec6 	bl	8001bec <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e64:	f7fd fec2 	bl	8001bec <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e168      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	4b8c      	ldr	r3, [pc, #560]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ed      	beq.n	8003e64 <HAL_RCC_OscConfig+0x53c>
 8003e88:	e015      	b.n	8003eb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fd feaf 	bl	8001bec <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fd feab 	bl	8001bec <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e151      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea8:	4b80      	ldr	r3, [pc, #512]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ed      	bne.n	8003e92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	4a7a      	ldr	r2, [pc, #488]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d03c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003edc:	4b73      	ldr	r3, [pc, #460]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee2:	4a72      	ldr	r2, [pc, #456]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd fe7e 	bl	8001bec <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ef4:	f7fd fe7a 	bl	8001bec <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e122      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f06:	4b69      	ldr	r3, [pc, #420]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ef      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x5cc>
 8003f14:	e01b      	b.n	8003f4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f16:	4b65      	ldr	r3, [pc, #404]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f1c:	4a63      	ldr	r2, [pc, #396]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fd fe61 	bl	8001bec <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f2e:	f7fd fe5d 	bl	8001bec <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e105      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f40:	4b5a      	ldr	r3, [pc, #360]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ef      	bne.n	8003f2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80f9 	beq.w	800414a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f040 80cf 	bne.w	8004100 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f62:	4b52      	ldr	r3, [pc, #328]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d12c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	3b01      	subs	r3, #1
 8003f82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d123      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d11b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d113      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d109      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d071      	beq.n	80040b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d068      	beq.n	80040a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fd6:	4b35      	ldr	r3, [pc, #212]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fe2:	4b32      	ldr	r3, [pc, #200]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0ac      	b.n	800414c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8003ff8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ffc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ffe:	f7fd fdf5 	bl	8001bec <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004006:	f7fd fdf1 	bl	8001bec <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e099      	b.n	800414c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004018:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004024:	4b21      	ldr	r3, [pc, #132]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b21      	ldr	r3, [pc, #132]	@ (80040b0 <HAL_RCC_OscConfig+0x788>)
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004034:	3a01      	subs	r2, #1
 8004036:	0112      	lsls	r2, r2, #4
 8004038:	4311      	orrs	r1, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800403e:	0212      	lsls	r2, r2, #8
 8004040:	4311      	orrs	r1, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004046:	0852      	lsrs	r2, r2, #1
 8004048:	3a01      	subs	r2, #1
 800404a:	0552      	lsls	r2, r2, #21
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004052:	0852      	lsrs	r2, r2, #1
 8004054:	3a01      	subs	r2, #1
 8004056:	0652      	lsls	r2, r2, #25
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800405e:	06d2      	lsls	r2, r2, #27
 8004060:	430a      	orrs	r2, r1
 8004062:	4912      	ldr	r1, [pc, #72]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8004064:	4313      	orrs	r3, r2
 8004066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004068:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0f      	ldr	r2, [pc, #60]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 800406e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004074:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a0c      	ldr	r2, [pc, #48]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004080:	f7fd fdb4 	bl	8001bec <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd fdb0 	bl	8001bec <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e058      	b.n	800414c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409a:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <HAL_RCC_OscConfig+0x784>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a6:	e050      	b.n	800414a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e04f      	b.n	800414c <HAL_RCC_OscConfig+0x824>
 80040ac:	40021000 	.word	0x40021000
 80040b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b4:	4b27      	ldr	r3, [pc, #156]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d144      	bne.n	800414a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040c0:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a23      	ldr	r2, [pc, #140]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040cc:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a20      	ldr	r2, [pc, #128]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d8:	f7fd fd88 	bl	8001bec <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd fd84 	bl	8001bec <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e02c      	b.n	800414c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	4b18      	ldr	r3, [pc, #96]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x7b8>
 80040fe:	e024      	b.n	800414a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d01f      	beq.n	8004146 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b13      	ldr	r3, [pc, #76]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a12      	ldr	r2, [pc, #72]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 800410c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd fd6b 	bl	8001bec <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411a:	f7fd fd67 	bl	8001bec <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e00f      	b.n	800414c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	4905      	ldr	r1, [pc, #20]	@ (8004154 <HAL_RCC_OscConfig+0x82c>)
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCC_OscConfig+0x830>)
 8004140:	4013      	ands	r3, r2
 8004142:	60cb      	str	r3, [r1, #12]
 8004144:	e001      	b.n	800414a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	feeefffc 	.word	0xfeeefffc

0800415c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0e7      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b75      	ldr	r3, [pc, #468]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d910      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b72      	ldr	r3, [pc, #456]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 0207 	bic.w	r2, r3, #7
 8004186:	4970      	ldr	r1, [pc, #448]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b6e      	ldr	r3, [pc, #440]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0cf      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	4b66      	ldr	r3, [pc, #408]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d908      	bls.n	80041ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b63      	ldr	r3, [pc, #396]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4960      	ldr	r1, [pc, #384]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d04c      	beq.n	8004274 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e2:	4b5a      	ldr	r3, [pc, #360]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0a6      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041fa:	4b54      	ldr	r3, [pc, #336]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d115      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e09a      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004212:	4b4e      	ldr	r3, [pc, #312]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e08e      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004222:	4b4a      	ldr	r3, [pc, #296]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e086      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004232:	4b46      	ldr	r3, [pc, #280]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f023 0203 	bic.w	r2, r3, #3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4943      	ldr	r1, [pc, #268]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004244:	f7fd fcd2 	bl	8001bec <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	e00a      	b.n	8004262 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424c:	f7fd fcce 	bl	8001bec <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e06e      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	4b3a      	ldr	r3, [pc, #232]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 020c 	and.w	r2, r3, #12
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	429a      	cmp	r2, r3
 8004272:	d1eb      	bne.n	800424c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	4b31      	ldr	r3, [pc, #196]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800428c:	429a      	cmp	r2, r3
 800428e:	d208      	bcs.n	80042a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b2e      	ldr	r3, [pc, #184]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	492b      	ldr	r1, [pc, #172]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a2:	4b29      	ldr	r3, [pc, #164]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d210      	bcs.n	80042d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b0:	4b25      	ldr	r3, [pc, #148]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 0207 	bic.w	r2, r3, #7
 80042b8:	4923      	ldr	r1, [pc, #140]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c0:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <HAL_RCC_ClockConfig+0x1ec>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e036      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042de:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	4918      	ldr	r1, [pc, #96]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fc:	4b13      	ldr	r3, [pc, #76]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4910      	ldr	r1, [pc, #64]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004310:	f000 f824 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b0d      	ldr	r3, [pc, #52]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	490b      	ldr	r1, [pc, #44]	@ (8004350 <HAL_RCC_ClockConfig+0x1f4>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
 800432c:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800432e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004330:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_RCC_ClockConfig+0x1fc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fd fae7 	bl	8001908 <HAL_InitTick>
 800433a:	4603      	mov	r3, r0
 800433c:	72fb      	strb	r3, [r7, #11]

  return status;
 800433e:	7afb      	ldrb	r3, [r7, #11]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40022000 	.word	0x40022000
 800434c:	40021000 	.word	0x40021000
 8004350:	08009f30 	.word	0x08009f30
 8004354:	20000000 	.word	0x20000000
 8004358:	20000004 	.word	0x20000004

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436a:	4b3e      	ldr	r3, [pc, #248]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x34>
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d121      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d11e      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004390:	4b34      	ldr	r3, [pc, #208]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800439c:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e005      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d102      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d4:	4b25      	ldr	r3, [pc, #148]	@ (800446c <HAL_RCC_GetSysClockFreq+0x110>)
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	e004      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043e0:	4b23      	ldr	r3, [pc, #140]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d134      	bne.n	8004454 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0xa6>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d003      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0xac>
 8004400:	e005      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <HAL_RCC_GetSysClockFreq+0x110>)
 8004404:	617b      	str	r3, [r7, #20]
      break;
 8004406:	e005      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004408:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x114>)
 800440a:	617b      	str	r3, [r7, #20]
      break;
 800440c:	e002      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	617b      	str	r3, [r7, #20]
      break;
 8004412:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004414:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	3301      	adds	r3, #1
 8004420:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	fb03 f202 	mul.w	r2, r3, r2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800443a:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	0e5b      	lsrs	r3, r3, #25
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	3301      	adds	r3, #1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004454:	69bb      	ldr	r3, [r7, #24]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3724      	adds	r7, #36	@ 0x24
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	08009f48 	.word	0x08009f48
 800446c:	00f42400 	.word	0x00f42400
 8004470:	007a1200 	.word	0x007a1200

08004474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	@ (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4904      	ldr	r1, [pc, #16]	@ (80044b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	08009f40 	.word	0x08009f40

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044bc:	f7ff ffda 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0adb      	lsrs	r3, r3, #11
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4904      	ldr	r1, [pc, #16]	@ (80044e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	08009f40 	.word	0x08009f40

080044e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	220f      	movs	r2, #15
 80044f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044f4:	4b12      	ldr	r3, [pc, #72]	@ (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0203 	and.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800450c:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <HAL_RCC_GetClockConfig+0x5c>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004526:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <HAL_RCC_GetClockConfig+0x60>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0207 	and.w	r2, r3, #7
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	601a      	str	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	40022000 	.word	0x40022000

08004548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004554:	4b2a      	ldr	r3, [pc, #168]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f97e 	bl	8003860 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
 8004566:	e014      	b.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b25      	ldr	r3, [pc, #148]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	4a24      	ldr	r2, [pc, #144]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	@ 0x58
 8004574:	4b22      	ldr	r3, [pc, #136]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004580:	f7ff f96e 	bl	8003860 <HAL_PWREx_GetVoltageRange>
 8004584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004586:	4b1e      	ldr	r3, [pc, #120]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458a:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004598:	d10b      	bne.n	80045b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b80      	cmp	r3, #128	@ 0x80
 800459e:	d919      	bls.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80045a4:	d902      	bls.n	80045ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a6:	2302      	movs	r3, #2
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e013      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ac:	2301      	movs	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	e010      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b80      	cmp	r3, #128	@ 0x80
 80045b6:	d902      	bls.n	80045be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045b8:	2303      	movs	r3, #3
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e00a      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b80      	cmp	r3, #128	@ 0x80
 80045c2:	d102      	bne.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c4:	2302      	movs	r3, #2
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e004      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b70      	cmp	r3, #112	@ 0x70
 80045ce:	d101      	bne.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d0:	2301      	movs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 0207 	bic.w	r2, r3, #7
 80045dc:	4909      	ldr	r1, [pc, #36]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e4:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d001      	beq.n	80045f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004610:	2300      	movs	r3, #0
 8004612:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004614:	2300      	movs	r3, #0
 8004616:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004620:	2b00      	cmp	r3, #0
 8004622:	d041      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004628:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800462c:	d02a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800462e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004632:	d824      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004634:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004638:	d008      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800463a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800463e:	d81e      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004644:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004648:	d010      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800464a:	e018      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800464c:	4b86      	ldr	r3, [pc, #536]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a85      	ldr	r2, [pc, #532]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004656:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004658:	e015      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 facd 	bl	8004c00 <RCCEx_PLLSAI1_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466a:	e00c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3320      	adds	r3, #32
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fbb6 	bl	8004de4 <RCCEx_PLLSAI2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	74fb      	strb	r3, [r7, #19]
      break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800468c:	4b76      	ldr	r3, [pc, #472]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004692:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800469a:	4973      	ldr	r1, [pc, #460]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046a2:	e001      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d041      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046bc:	d02a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046c2:	d824      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046c8:	d008      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ce:	d81e      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046da:	e018      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046dc:	4b62      	ldr	r3, [pc, #392]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a61      	ldr	r2, [pc, #388]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e8:	e015      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fa85 	bl	8004c00 <RCCEx_PLLSAI1_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fa:	e00c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3320      	adds	r3, #32
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb6e 	bl	8004de4 <RCCEx_PLLSAI2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	74fb      	strb	r3, [r7, #19]
      break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800471c:	4b52      	ldr	r3, [pc, #328]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472a:	494f      	ldr	r1, [pc, #316]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a0 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800474a:	4b47      	ldr	r3, [pc, #284]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800475a:	2300      	movs	r3, #0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	4a40      	ldr	r2, [pc, #256]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	6593      	str	r3, [r2, #88]	@ 0x58
 800476c:	4b3e      	ldr	r3, [pc, #248]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800477c:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a3a      	ldr	r2, [pc, #232]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004788:	f7fd fa30 	bl	8001bec <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800478e:	e009      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004790:	f7fd fa2c 	bl	8001bec <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d902      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	74fb      	strb	r3, [r7, #19]
        break;
 80047a2:	e005      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a4:	4b31      	ldr	r3, [pc, #196]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ef      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d15c      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d019      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d4:	4b24      	ldr	r3, [pc, #144]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	4a20      	ldr	r2, [pc, #128]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004800:	4a19      	ldr	r2, [pc, #100]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd f9eb 	bl	8001bec <HAL_GetTick>
 8004816:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004818:	e00b      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd f9e7 	bl	8001bec <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d902      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	74fb      	strb	r3, [r7, #19]
            break;
 8004830:	e006      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004832:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ec      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004846:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	4904      	ldr	r1, [pc, #16]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800485e:	e009      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	74bb      	strb	r3, [r7, #18]
 8004864:	e006      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004874:	7c7b      	ldrb	r3, [r7, #17]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d105      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487a:	4ba6      	ldr	r3, [pc, #664]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	4aa5      	ldr	r2, [pc, #660]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004884:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004892:	4ba0      	ldr	r3, [pc, #640]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004898:	f023 0203 	bic.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	499c      	ldr	r1, [pc, #624]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b4:	4b97      	ldr	r3, [pc, #604]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	f023 020c 	bic.w	r2, r3, #12
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c2:	4994      	ldr	r1, [pc, #592]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	498b      	ldr	r1, [pc, #556]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f8:	4b86      	ldr	r3, [pc, #536]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	4983      	ldr	r1, [pc, #524]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004928:	497a      	ldr	r1, [pc, #488]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800493c:	4b75      	ldr	r3, [pc, #468]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004942:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	4972      	ldr	r1, [pc, #456]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496c:	4969      	ldr	r1, [pc, #420]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004980:	4b64      	ldr	r3, [pc, #400]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800498e:	4961      	ldr	r1, [pc, #388]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b0:	4958      	ldr	r1, [pc, #352]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c4:	4b53      	ldr	r3, [pc, #332]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	4950      	ldr	r1, [pc, #320]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f4:	4947      	ldr	r1, [pc, #284]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a08:	4b42      	ldr	r3, [pc, #264]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a16:	493f      	ldr	r1, [pc, #252]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d028      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4936      	ldr	r1, [pc, #216]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4a:	4b32      	ldr	r3, [pc, #200]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a31      	ldr	r2, [pc, #196]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a54:	60d3      	str	r3, [r2, #12]
 8004a56:	e011      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f8c9 	bl	8004c00 <RCCEx_PLLSAI1_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a88:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a96:	491f      	ldr	r1, [pc, #124]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a19      	ldr	r2, [pc, #100]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e011      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004abe:	d10c      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f89a 	bl	8004c00 <RCCEx_PLLSAI1_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af4:	4907      	ldr	r1, [pc, #28]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b04:	d108      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b06:	4b03      	ldr	r3, [pc, #12]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a02      	ldr	r2, [pc, #8]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b10:	60d3      	str	r3, [r2, #12]
 8004b12:	e013      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004b14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f869 	bl	8004c00 <RCCEx_PLLSAI1_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d02f      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b48:	4b2c      	ldr	r3, [pc, #176]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b56:	4929      	ldr	r1, [pc, #164]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b66:	d10d      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f846 	bl	8004c00 <RCCEx_PLLSAI1_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d014      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	74bb      	strb	r3, [r7, #18]
 8004b82:	e011      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3320      	adds	r3, #32
 8004b92:	2102      	movs	r1, #2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f925 	bl	8004de4 <RCCEx_PLLSAI2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bb4:	4b11      	ldr	r3, [pc, #68]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc4:	490d      	ldr	r1, [pc, #52]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bd8:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bde:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be8:	4904      	ldr	r1, [pc, #16]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000

08004c00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c0e:	4b74      	ldr	r3, [pc, #464]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d018      	beq.n	8004c4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c1a:	4b71      	ldr	r3, [pc, #452]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0203 	and.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d10d      	bne.n	8004c46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c32:	4b6b      	ldr	r3, [pc, #428]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
       ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d047      	beq.n	8004cd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
 8004c4a:	e044      	b.n	8004cd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d018      	beq.n	8004c86 <RCCEx_PLLSAI1_Config+0x86>
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d825      	bhi.n	8004ca4 <RCCEx_PLLSAI1_Config+0xa4>
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d002      	beq.n	8004c62 <RCCEx_PLLSAI1_Config+0x62>
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d009      	beq.n	8004c74 <RCCEx_PLLSAI1_Config+0x74>
 8004c60:	e020      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c62:	4b5f      	ldr	r3, [pc, #380]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11d      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c72:	e01a      	b.n	8004caa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c74:	4b5a      	ldr	r3, [pc, #360]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d116      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c84:	e013      	b.n	8004cae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c86:	4b56      	ldr	r3, [pc, #344]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10f      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c92:	4b53      	ldr	r3, [pc, #332]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ca2:	e006      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca8:	e004      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10d      	bne.n	8004cd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cba:	4b49      	ldr	r3, [pc, #292]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6819      	ldr	r1, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	4943      	ldr	r1, [pc, #268]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d17c      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cdc:	4b40      	ldr	r3, [pc, #256]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3f      	ldr	r2, [pc, #252]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fc ff80 	bl	8001bec <HAL_GetTick>
 8004cec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cee:	e009      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cf0:	f7fc ff7c 	bl	8001bec <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d902      	bls.n	8004d04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	73fb      	strb	r3, [r7, #15]
        break;
 8004d02:	e005      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d04:	4b36      	ldr	r3, [pc, #216]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ef      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d15f      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d110      	bne.n	8004d3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1c:	4b30      	ldr	r3, [pc, #192]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004d24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	06d2      	lsls	r2, r2, #27
 8004d34:	430a      	orrs	r2, r1
 8004d36:	492a      	ldr	r1, [pc, #168]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	610b      	str	r3, [r1, #16]
 8004d3c:	e027      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d112      	bne.n	8004d6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d44:	4b26      	ldr	r3, [pc, #152]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
 8004d54:	0211      	lsls	r1, r2, #8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6912      	ldr	r2, [r2, #16]
 8004d5a:	0852      	lsrs	r2, r2, #1
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	0552      	lsls	r2, r2, #21
 8004d60:	430a      	orrs	r2, r1
 8004d62:	491f      	ldr	r1, [pc, #124]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]
 8004d68:	e011      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d72:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6892      	ldr	r2, [r2, #8]
 8004d7a:	0211      	lsls	r1, r2, #8
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6952      	ldr	r2, [r2, #20]
 8004d80:	0852      	lsrs	r2, r2, #1
 8004d82:	3a01      	subs	r2, #1
 8004d84:	0652      	lsls	r2, r2, #25
 8004d86:	430a      	orrs	r2, r1
 8004d88:	4915      	ldr	r1, [pc, #84]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d8e:	4b14      	ldr	r3, [pc, #80]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a13      	ldr	r2, [pc, #76]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fc ff27 	bl	8001bec <HAL_GetTick>
 8004d9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da0:	e009      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004da2:	f7fc ff23 	bl	8001bec <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d902      	bls.n	8004db6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	73fb      	strb	r3, [r7, #15]
          break;
 8004db4:	e005      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004db6:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0ef      	beq.n	8004da2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4903      	ldr	r1, [pc, #12]	@ (8004de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40021000 	.word	0x40021000

08004de4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004df2:	4b69      	ldr	r3, [pc, #420]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dfe:	4b66      	ldr	r3, [pc, #408]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0203 	and.w	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d10d      	bne.n	8004e2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
       ||
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e16:	4b60      	ldr	r3, [pc, #384]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
       ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d047      	beq.n	8004eba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	e044      	b.n	8004eba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d018      	beq.n	8004e6a <RCCEx_PLLSAI2_Config+0x86>
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d825      	bhi.n	8004e88 <RCCEx_PLLSAI2_Config+0xa4>
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d002      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0x62>
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d009      	beq.n	8004e58 <RCCEx_PLLSAI2_Config+0x74>
 8004e44:	e020      	b.n	8004e88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e46:	4b54      	ldr	r3, [pc, #336]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d11d      	bne.n	8004e8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e56:	e01a      	b.n	8004e8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e58:	4b4f      	ldr	r3, [pc, #316]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d116      	bne.n	8004e92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e68:	e013      	b.n	8004e92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e76:	4b48      	ldr	r3, [pc, #288]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e86:	e006      	b.n	8004e96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e004      	b.n	8004e98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e002      	b.n	8004e98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10d      	bne.n	8004eba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	4938      	ldr	r1, [pc, #224]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d166      	bne.n	8004f8e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ec0:	4b35      	ldr	r3, [pc, #212]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a34      	ldr	r2, [pc, #208]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ecc:	f7fc fe8e 	bl	8001bec <HAL_GetTick>
 8004ed0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ed2:	e009      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ed4:	f7fc fe8a 	bl	8001bec <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d902      	bls.n	8004ee8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ee6:	e005      	b.n	8004ef4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ef      	bne.n	8004ed4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d149      	bne.n	8004f8e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d110      	bne.n	8004f22 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f00:	4b25      	ldr	r3, [pc, #148]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004f08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6892      	ldr	r2, [r2, #8]
 8004f10:	0211      	lsls	r1, r2, #8
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68d2      	ldr	r2, [r2, #12]
 8004f16:	06d2      	lsls	r2, r2, #27
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	491f      	ldr	r1, [pc, #124]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	614b      	str	r3, [r1, #20]
 8004f20:	e011      	b.n	8004f46 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f22:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6892      	ldr	r2, [r2, #8]
 8004f32:	0211      	lsls	r1, r2, #8
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6912      	ldr	r2, [r2, #16]
 8004f38:	0852      	lsrs	r2, r2, #1
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	0652      	lsls	r2, r2, #25
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	4915      	ldr	r1, [pc, #84]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f46:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fc fe4b 	bl	8001bec <HAL_GetTick>
 8004f56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f58:	e009      	b.n	8004f6e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f5a:	f7fc fe47 	bl	8001bec <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d902      	bls.n	8004f6e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f6c:	e005      	b.n	8004f7a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ef      	beq.n	8004f5a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	4903      	ldr	r1, [pc, #12]	@ (8004f98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000

08004f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e095      	b.n	80050da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d108      	bne.n	8004fc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fbe:	d009      	beq.n	8004fd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
 8004fc6:	e005      	b.n	8004fd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc f9b6 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005014:	d902      	bls.n	800501c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e002      	b.n	8005022 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800501c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005020:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800502a:	d007      	beq.n	800503c <HAL_SPI_Init+0xa0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005034:	d002      	beq.n	800503c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507e:	ea42 0103 	orr.w	r1, r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	f003 0204 	and.w	r2, r3, #4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050b8:	ea42 0103 	orr.w	r1, r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
    return;
 8005126:	e0d7      	b.n	80052d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_SPI_IRQHandler+0x66>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	09db      	lsrs	r3, r3, #7
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d004      	beq.n	800514a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
    return;
 8005148:	e0c6      	b.n	80052d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10c      	bne.n	8005170 <HAL_SPI_IRQHandler+0x8c>
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80b4 	beq.w	80052d8 <HAL_SPI_IRQHandler+0x1f4>
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80ad 	beq.w	80052d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d023      	beq.n	80051d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b03      	cmp	r3, #3
 8005194:	d011      	beq.n	80051ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	e00b      	b.n	80051d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]
        return;
 80051d0:	e082      	b.n	80052d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d014      	beq.n	8005208 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005218:	f043 0208 	orr.w	r2, r3, #8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005232:	2b00      	cmp	r3, #0
 8005234:	d04f      	beq.n	80052d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005244:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_SPI_IRQHandler+0x17e>
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d034      	beq.n	80052cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0203 	bic.w	r2, r2, #3
 8005270:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <HAL_SPI_IRQHandler+0x1fc>)
 8005280:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd feca 	bl	8003020 <HAL_DMA_Abort_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005296:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052aa:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <HAL_SPI_IRQHandler+0x1fc>)
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd feb4 	bl	8003020 <HAL_DMA_Abort_IT>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80052ca:	e003      	b.n	80052d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f809 	bl	80052e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052d2:	e000      	b.n	80052d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80052d4:	bf00      	nop
    return;
 80052d6:	bf00      	nop
  }
}
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	080052f9 	.word	0x080052f9

080052e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff ffe5 	bl	80052e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e049      	b.n	80053c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fc f8a7 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f000 fa9d 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e04f      	b.n	8005488 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a23      	ldr	r2, [pc, #140]	@ (8005494 <HAL_TIM_Base_Start_IT+0xc4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01d      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005412:	d018      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1f      	ldr	r2, [pc, #124]	@ (8005498 <HAL_TIM_Base_Start_IT+0xc8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1e      	ldr	r2, [pc, #120]	@ (800549c <HAL_TIM_Base_Start_IT+0xcc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d115      	bne.n	8005472 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	4b17      	ldr	r3, [pc, #92]	@ (80054ac <HAL_TIM_Base_Start_IT+0xdc>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b06      	cmp	r3, #6
 8005456:	d015      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0xb4>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545e:	d011      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	e008      	b.n	8005484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e000      	b.n	8005486 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	00010007 	.word	0x00010007

080054b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0202 	mvn.w	r2, #2
 80054e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f9b2 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9a4 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f9b5 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0204 	mvn.w	r2, #4
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f98c 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f97e 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f98f 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f966 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f958 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f969 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f940 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f932 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f943 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0201 	mvn.w	r2, #1
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb fd06 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fafd 	bl	8005c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 faf5 	bl	8005c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f8fd 	bl	800588c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f06f 0220 	mvn.w	r2, #32
 80056ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fabd 	bl	8005c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_TIM_ConfigClockSource+0x1c>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0b6      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x18a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005704:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005716:	d03e      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0xd8>
 8005718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800571c:	f200 8087 	bhi.w	800582e <HAL_TIM_ConfigClockSource+0x170>
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005724:	f000 8086 	beq.w	8005834 <HAL_TIM_ConfigClockSource+0x176>
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572c:	d87f      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 800572e:	2b70      	cmp	r3, #112	@ 0x70
 8005730:	d01a      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0xaa>
 8005732:	2b70      	cmp	r3, #112	@ 0x70
 8005734:	d87b      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 8005736:	2b60      	cmp	r3, #96	@ 0x60
 8005738:	d050      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0x11e>
 800573a:	2b60      	cmp	r3, #96	@ 0x60
 800573c:	d877      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 800573e:	2b50      	cmp	r3, #80	@ 0x50
 8005740:	d03c      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0xfe>
 8005742:	2b50      	cmp	r3, #80	@ 0x50
 8005744:	d873      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 8005746:	2b40      	cmp	r3, #64	@ 0x40
 8005748:	d058      	beq.n	80057fc <HAL_TIM_ConfigClockSource+0x13e>
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	d86f      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 800574e:	2b30      	cmp	r3, #48	@ 0x30
 8005750:	d064      	beq.n	800581c <HAL_TIM_ConfigClockSource+0x15e>
 8005752:	2b30      	cmp	r3, #48	@ 0x30
 8005754:	d86b      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 8005756:	2b20      	cmp	r3, #32
 8005758:	d060      	beq.n	800581c <HAL_TIM_ConfigClockSource+0x15e>
 800575a:	2b20      	cmp	r3, #32
 800575c:	d867      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x170>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d05c      	beq.n	800581c <HAL_TIM_ConfigClockSource+0x15e>
 8005762:	2b10      	cmp	r3, #16
 8005764:	d05a      	beq.n	800581c <HAL_TIM_ConfigClockSource+0x15e>
 8005766:	e062      	b.n	800582e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	f000 f9b2 	bl	8005ae0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800578a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
      break;
 8005794:	e04f      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	f000 f99b 	bl	8005ae0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057b8:	609a      	str	r2, [r3, #8]
      break;
 80057ba:	e03c      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c8:	461a      	mov	r2, r3
 80057ca:	f000 f90f 	bl	80059ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2150      	movs	r1, #80	@ 0x50
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f968 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 80057da:	e02c      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057e8:	461a      	mov	r2, r3
 80057ea:	f000 f92e 	bl	8005a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2160      	movs	r1, #96	@ 0x60
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f958 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 80057fa:	e01c      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005808:	461a      	mov	r2, r3
 800580a:	f000 f8ef 	bl	80059ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2140      	movs	r1, #64	@ 0x40
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f948 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 800581a:	e00c      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f000 f93f 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 800582c:	e003      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
      break;
 8005832:	e000      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a46      	ldr	r2, [pc, #280]	@ (80059cc <TIM_Base_SetConfig+0x12c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a43      	ldr	r2, [pc, #268]	@ (80059d0 <TIM_Base_SetConfig+0x130>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a42      	ldr	r2, [pc, #264]	@ (80059d4 <TIM_Base_SetConfig+0x134>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a41      	ldr	r2, [pc, #260]	@ (80059d8 <TIM_Base_SetConfig+0x138>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a40      	ldr	r2, [pc, #256]	@ (80059dc <TIM_Base_SetConfig+0x13c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a35      	ldr	r2, [pc, #212]	@ (80059cc <TIM_Base_SetConfig+0x12c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01f      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005900:	d01b      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a32      	ldr	r2, [pc, #200]	@ (80059d0 <TIM_Base_SetConfig+0x130>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d017      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a31      	ldr	r2, [pc, #196]	@ (80059d4 <TIM_Base_SetConfig+0x134>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a30      	ldr	r2, [pc, #192]	@ (80059d8 <TIM_Base_SetConfig+0x138>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2f      	ldr	r2, [pc, #188]	@ (80059dc <TIM_Base_SetConfig+0x13c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2e      	ldr	r2, [pc, #184]	@ (80059e0 <TIM_Base_SetConfig+0x140>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2d      	ldr	r2, [pc, #180]	@ (80059e4 <TIM_Base_SetConfig+0x144>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0x9a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2c      	ldr	r2, [pc, #176]	@ (80059e8 <TIM_Base_SetConfig+0x148>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <TIM_Base_SetConfig+0x12c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <TIM_Base_SetConfig+0x13c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <TIM_Base_SetConfig+0x140>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <TIM_Base_SetConfig+0x144>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a15      	ldr	r2, [pc, #84]	@ (80059e8 <TIM_Base_SetConfig+0x148>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]
  }
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40013400 	.word	0x40013400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800

080059ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 0201 	bic.w	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 030a 	bic.w	r3, r3, #10
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b087      	sub	sp, #28
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	f023 0210 	bic.w	r2, r3, #16
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	031b      	lsls	r3, r3, #12
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	621a      	str	r2, [r3, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f043 0307 	orr.w	r3, r3, #7
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	609a      	str	r2, [r3, #8]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e068      	b.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2d      	ldr	r2, [pc, #180]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d108      	bne.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005baa:	d018      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40014000 	.word	0x40014000

08005c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e040      	b.n	8005d00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fb fc5e 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	@ 0x24
 8005c98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fe52 	bl	800695c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb97 	bl	80063ec <UART_SetConfig>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e01b      	b.n	8005d00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fed1 	bl	8006aa0 <UART_CheckIdleState>
 8005cfe:	4603      	mov	r3, r0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	@ 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d137      	bne.n	8005d90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_UART_Receive_DMA+0x24>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e030      	b.n	8005d92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_UART_Receive_DMA+0x94>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01f      	beq.n	8005d80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d018      	beq.n	8005d80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 ffa0 	bl	8006ccc <UART_Start_Receive_DMA>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e000      	b.n	8005d92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3728      	adds	r7, #40	@ 0x28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40008000 	.word	0x40008000

08005da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b0ba      	sub	sp, #232	@ 0xe8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005dca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005dce:	4013      	ands	r3, r2
 8005dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d115      	bne.n	8005e08 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 82ca 	beq.w	8006392 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
      }
      return;
 8005e06:	e2c4      	b.n	8006392 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8117 	beq.w	8006040 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e22:	4b85      	ldr	r3, [pc, #532]	@ (8006038 <HAL_UART_IRQHandler+0x298>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 810a 	beq.w	8006040 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d011      	beq.n	8005e5c <HAL_UART_IRQHandler+0xbc>
 8005e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d011      	beq.n	8005e8c <HAL_UART_IRQHandler+0xec>
 8005e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0x11c>
 8005e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb2:	f043 0202 	orr.w	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d017      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eee:	f043 0208 	orr.w	r2, r3, #8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <HAL_UART_IRQHandler+0x18a>
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8230 	beq.w	8006396 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b40      	cmp	r3, #64	@ 0x40
 8005f74:	d005      	beq.n	8005f82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d04f      	beq.n	8006022 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 ff68 	bl	8006e58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d141      	bne.n	800601a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1d9      	bne.n	8005f96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d013      	beq.n	8006012 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fee:	4a13      	ldr	r2, [pc, #76]	@ (800603c <HAL_UART_IRQHandler+0x29c>)
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fd f812 	bl	8003020 <HAL_DMA_Abort_IT>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d017      	beq.n	8006032 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e00f      	b.n	8006032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fa fac6 	bl	80005a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e00b      	b.n	8006032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fa fac2 	bl	80005a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	e007      	b.n	8006032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fa fabe 	bl	80005a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006030:	e1b1      	b.n	8006396 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006032:	bf00      	nop
    return;
 8006034:	e1af      	b.n	8006396 <HAL_UART_IRQHandler+0x5f6>
 8006036:	bf00      	nop
 8006038:	04000120 	.word	0x04000120
 800603c:	08007109 	.word	0x08007109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006044:	2b01      	cmp	r3, #1
 8006046:	f040 816a 	bne.w	800631e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800604a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8163 	beq.w	800631e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 815c 	beq.w	800631e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	f040 80d4 	bne.w	8006226 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800608a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80ad 	beq.w	80061ee <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800609a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609e:	429a      	cmp	r2, r3
 80060a0:	f080 80a5 	bcs.w	80061ee <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 8086 	bne.w	80061cc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1da      	bne.n	80060c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800611a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800612e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006132:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e1      	bne.n	800610a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800616a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800616c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006170:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800619a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e4      	bne.n	800618c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fc feec 	bl	8002fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8f4 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80061ec:	e0d5      	b.n	800639a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f8:	429a      	cmp	r2, r3
 80061fa:	f040 80ce 	bne.w	800639a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b20      	cmp	r3, #32
 800620c:	f040 80c5 	bne.w	800639a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f8d8 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
      return;
 8006224:	e0b9      	b.n	800639a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006232:	b29b      	uxth	r3, r3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80ab 	beq.w	800639e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80a6 	beq.w	800639e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006274:	647b      	str	r3, [r7, #68]	@ 0x44
 8006276:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800627a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e4      	bne.n	8006252 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	623b      	str	r3, [r7, #32]
   return(result);
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e3      	bne.n	8006288 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f023 0310 	bic.w	r3, r3, #16
 80062e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	69b9      	ldr	r1, [r7, #24]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	617b      	str	r3, [r7, #20]
   return(result);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e4      	bne.n	80062d4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f85c 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800631c:	e03f      	b.n	800639e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <HAL_UART_IRQHandler+0x5a8>
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800632e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800633e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ff88 	bl	8007256 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006346:	e02d      	b.n	80063a4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00e      	beq.n	8006372 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01c      	beq.n	80063a2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
    }
    return;
 8006370:	e017      	b.n	80063a2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d012      	beq.n	80063a4 <HAL_UART_IRQHandler+0x604>
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fed2 	bl	8007134 <UART_EndTransmit_IT>
    return;
 8006390:	e008      	b.n	80063a4 <HAL_UART_IRQHandler+0x604>
      return;
 8006392:	bf00      	nop
 8006394:	e006      	b.n	80063a4 <HAL_UART_IRQHandler+0x604>
    return;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <HAL_UART_IRQHandler+0x604>
      return;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <HAL_UART_IRQHandler+0x604>
      return;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <HAL_UART_IRQHandler+0x604>
    return;
 80063a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80063a4:	37e8      	adds	r7, #232	@ 0xe8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop

080063ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f0:	b08a      	sub	sp, #40	@ 0x28
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	431a      	orrs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	431a      	orrs	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	4313      	orrs	r3, r2
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4ba4      	ldr	r3, [pc, #656]	@ (80066ac <UART_SetConfig+0x2c0>)
 800641c:	4013      	ands	r3, r2
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006424:	430b      	orrs	r3, r1
 8006426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a99      	ldr	r2, [pc, #612]	@ (80066b0 <UART_SetConfig+0x2c4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d004      	beq.n	8006458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006454:	4313      	orrs	r3, r2
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a90      	ldr	r2, [pc, #576]	@ (80066b4 <UART_SetConfig+0x2c8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d126      	bne.n	80064c4 <UART_SetConfig+0xd8>
 8006476:	4b90      	ldr	r3, [pc, #576]	@ (80066b8 <UART_SetConfig+0x2cc>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d81b      	bhi.n	80064bc <UART_SetConfig+0xd0>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0xa0>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064b5 	.word	0x080064b5
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a2:	e116      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80064a4:	2302      	movs	r3, #2
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064aa:	e112      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e10e      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ba:	e10a      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e106      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a7c      	ldr	r2, [pc, #496]	@ (80066bc <UART_SetConfig+0x2d0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d138      	bne.n	8006540 <UART_SetConfig+0x154>
 80064ce:	4b7a      	ldr	r3, [pc, #488]	@ (80066b8 <UART_SetConfig+0x2cc>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d4:	f003 030c 	and.w	r3, r3, #12
 80064d8:	2b0c      	cmp	r3, #12
 80064da:	d82d      	bhi.n	8006538 <UART_SetConfig+0x14c>
 80064dc:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <UART_SetConfig+0xf8>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006519 	.word	0x08006519
 80064e8:	08006539 	.word	0x08006539
 80064ec:	08006539 	.word	0x08006539
 80064f0:	08006539 	.word	0x08006539
 80064f4:	08006529 	.word	0x08006529
 80064f8:	08006539 	.word	0x08006539
 80064fc:	08006539 	.word	0x08006539
 8006500:	08006539 	.word	0x08006539
 8006504:	08006521 	.word	0x08006521
 8006508:	08006539 	.word	0x08006539
 800650c:	08006539 	.word	0x08006539
 8006510:	08006539 	.word	0x08006539
 8006514:	08006531 	.word	0x08006531
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e0d8      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e0d4      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652e:	e0d0      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006536:	e0cc      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653e:	e0c8      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a5e      	ldr	r2, [pc, #376]	@ (80066c0 <UART_SetConfig+0x2d4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d125      	bne.n	8006596 <UART_SetConfig+0x1aa>
 800654a:	4b5b      	ldr	r3, [pc, #364]	@ (80066b8 <UART_SetConfig+0x2cc>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006550:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006554:	2b30      	cmp	r3, #48	@ 0x30
 8006556:	d016      	beq.n	8006586 <UART_SetConfig+0x19a>
 8006558:	2b30      	cmp	r3, #48	@ 0x30
 800655a:	d818      	bhi.n	800658e <UART_SetConfig+0x1a2>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d00a      	beq.n	8006576 <UART_SetConfig+0x18a>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d814      	bhi.n	800658e <UART_SetConfig+0x1a2>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <UART_SetConfig+0x182>
 8006568:	2b10      	cmp	r3, #16
 800656a:	d008      	beq.n	800657e <UART_SetConfig+0x192>
 800656c:	e00f      	b.n	800658e <UART_SetConfig+0x1a2>
 800656e:	2300      	movs	r3, #0
 8006570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006574:	e0ad      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006576:	2302      	movs	r3, #2
 8006578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657c:	e0a9      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800657e:	2304      	movs	r3, #4
 8006580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006584:	e0a5      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006586:	2308      	movs	r3, #8
 8006588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658c:	e0a1      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800658e:	2310      	movs	r3, #16
 8006590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006594:	e09d      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a4a      	ldr	r2, [pc, #296]	@ (80066c4 <UART_SetConfig+0x2d8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d125      	bne.n	80065ec <UART_SetConfig+0x200>
 80065a0:	4b45      	ldr	r3, [pc, #276]	@ (80066b8 <UART_SetConfig+0x2cc>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80065ac:	d016      	beq.n	80065dc <UART_SetConfig+0x1f0>
 80065ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80065b0:	d818      	bhi.n	80065e4 <UART_SetConfig+0x1f8>
 80065b2:	2b80      	cmp	r3, #128	@ 0x80
 80065b4:	d00a      	beq.n	80065cc <UART_SetConfig+0x1e0>
 80065b6:	2b80      	cmp	r3, #128	@ 0x80
 80065b8:	d814      	bhi.n	80065e4 <UART_SetConfig+0x1f8>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <UART_SetConfig+0x1d8>
 80065be:	2b40      	cmp	r3, #64	@ 0x40
 80065c0:	d008      	beq.n	80065d4 <UART_SetConfig+0x1e8>
 80065c2:	e00f      	b.n	80065e4 <UART_SetConfig+0x1f8>
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ca:	e082      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80065cc:	2302      	movs	r3, #2
 80065ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d2:	e07e      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065da:	e07a      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e2:	e076      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ea:	e072      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a35      	ldr	r2, [pc, #212]	@ (80066c8 <UART_SetConfig+0x2dc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d12a      	bne.n	800664c <UART_SetConfig+0x260>
 80065f6:	4b30      	ldr	r3, [pc, #192]	@ (80066b8 <UART_SetConfig+0x2cc>)
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006604:	d01a      	beq.n	800663c <UART_SetConfig+0x250>
 8006606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800660a:	d81b      	bhi.n	8006644 <UART_SetConfig+0x258>
 800660c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006610:	d00c      	beq.n	800662c <UART_SetConfig+0x240>
 8006612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006616:	d815      	bhi.n	8006644 <UART_SetConfig+0x258>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <UART_SetConfig+0x238>
 800661c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006620:	d008      	beq.n	8006634 <UART_SetConfig+0x248>
 8006622:	e00f      	b.n	8006644 <UART_SetConfig+0x258>
 8006624:	2300      	movs	r3, #0
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662a:	e052      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800662c:	2302      	movs	r3, #2
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006632:	e04e      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006634:	2304      	movs	r3, #4
 8006636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663a:	e04a      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800663c:	2308      	movs	r3, #8
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006642:	e046      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006644:	2310      	movs	r3, #16
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664a:	e042      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a17      	ldr	r2, [pc, #92]	@ (80066b0 <UART_SetConfig+0x2c4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d13a      	bne.n	80066cc <UART_SetConfig+0x2e0>
 8006656:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <UART_SetConfig+0x2cc>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006660:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006664:	d01a      	beq.n	800669c <UART_SetConfig+0x2b0>
 8006666:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800666a:	d81b      	bhi.n	80066a4 <UART_SetConfig+0x2b8>
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006670:	d00c      	beq.n	800668c <UART_SetConfig+0x2a0>
 8006672:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006676:	d815      	bhi.n	80066a4 <UART_SetConfig+0x2b8>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <UART_SetConfig+0x298>
 800667c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006680:	d008      	beq.n	8006694 <UART_SetConfig+0x2a8>
 8006682:	e00f      	b.n	80066a4 <UART_SetConfig+0x2b8>
 8006684:	2300      	movs	r3, #0
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668a:	e022      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800668c:	2302      	movs	r3, #2
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006692:	e01e      	b.n	80066d2 <UART_SetConfig+0x2e6>
 8006694:	2304      	movs	r3, #4
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669a:	e01a      	b.n	80066d2 <UART_SetConfig+0x2e6>
 800669c:	2308      	movs	r3, #8
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a2:	e016      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80066a4:	2310      	movs	r3, #16
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066aa:	e012      	b.n	80066d2 <UART_SetConfig+0x2e6>
 80066ac:	efff69f3 	.word	0xefff69f3
 80066b0:	40008000 	.word	0x40008000
 80066b4:	40013800 	.word	0x40013800
 80066b8:	40021000 	.word	0x40021000
 80066bc:	40004400 	.word	0x40004400
 80066c0:	40004800 	.word	0x40004800
 80066c4:	40004c00 	.word	0x40004c00
 80066c8:	40005000 	.word	0x40005000
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006954 <UART_SetConfig+0x568>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d17a      	bne.n	80067d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d824      	bhi.n	800672e <UART_SetConfig+0x342>
 80066e4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <UART_SetConfig+0x300>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006711 	.word	0x08006711
 80066f0:	0800672f 	.word	0x0800672f
 80066f4:	08006719 	.word	0x08006719
 80066f8:	0800672f 	.word	0x0800672f
 80066fc:	0800671f 	.word	0x0800671f
 8006700:	0800672f 	.word	0x0800672f
 8006704:	0800672f 	.word	0x0800672f
 8006708:	0800672f 	.word	0x0800672f
 800670c:	08006727 	.word	0x08006727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fd febc 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8006714:	61f8      	str	r0, [r7, #28]
        break;
 8006716:	e010      	b.n	800673a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006718:	4b8f      	ldr	r3, [pc, #572]	@ (8006958 <UART_SetConfig+0x56c>)
 800671a:	61fb      	str	r3, [r7, #28]
        break;
 800671c:	e00d      	b.n	800673a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671e:	f7fd fe1d 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8006722:	61f8      	str	r0, [r7, #28]
        break;
 8006724:	e009      	b.n	800673a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800672a:	61fb      	str	r3, [r7, #28]
        break;
 800672c:	e005      	b.n	800673a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80fb 	beq.w	8006938 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	4413      	add	r3, r2
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	429a      	cmp	r2, r3
 8006750:	d305      	bcc.n	800675e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	429a      	cmp	r2, r3
 800675c:	d903      	bls.n	8006766 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006764:	e0e8      	b.n	8006938 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2200      	movs	r2, #0
 800676a:	461c      	mov	r4, r3
 800676c:	4615      	mov	r5, r2
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	022b      	lsls	r3, r5, #8
 8006778:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800677c:	0222      	lsls	r2, r4, #8
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	6849      	ldr	r1, [r1, #4]
 8006782:	0849      	lsrs	r1, r1, #1
 8006784:	2000      	movs	r0, #0
 8006786:	4688      	mov	r8, r1
 8006788:	4681      	mov	r9, r0
 800678a:	eb12 0a08 	adds.w	sl, r2, r8
 800678e:	eb43 0b09 	adc.w	fp, r3, r9
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a0:	4650      	mov	r0, sl
 80067a2:	4659      	mov	r1, fp
 80067a4:	f7f9 fd24 	bl	80001f0 <__aeabi_uldivmod>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4613      	mov	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b6:	d308      	bcc.n	80067ca <UART_SetConfig+0x3de>
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067be:	d204      	bcs.n	80067ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	60da      	str	r2, [r3, #12]
 80067c8:	e0b6      	b.n	8006938 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067d0:	e0b2      	b.n	8006938 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067da:	d15e      	bne.n	800689a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d828      	bhi.n	8006836 <UART_SetConfig+0x44a>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0x400>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006811 	.word	0x08006811
 80067f0:	08006819 	.word	0x08006819
 80067f4:	08006821 	.word	0x08006821
 80067f8:	08006837 	.word	0x08006837
 80067fc:	08006827 	.word	0x08006827
 8006800:	08006837 	.word	0x08006837
 8006804:	08006837 	.word	0x08006837
 8006808:	08006837 	.word	0x08006837
 800680c:	0800682f 	.word	0x0800682f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006810:	f7fd fe3c 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8006814:	61f8      	str	r0, [r7, #28]
        break;
 8006816:	e014      	b.n	8006842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006818:	f7fd fe4e 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 800681c:	61f8      	str	r0, [r7, #28]
        break;
 800681e:	e010      	b.n	8006842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006820:	4b4d      	ldr	r3, [pc, #308]	@ (8006958 <UART_SetConfig+0x56c>)
 8006822:	61fb      	str	r3, [r7, #28]
        break;
 8006824:	e00d      	b.n	8006842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006826:	f7fd fd99 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800682a:	61f8      	str	r0, [r7, #28]
        break;
 800682c:	e009      	b.n	8006842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006832:	61fb      	str	r3, [r7, #28]
        break;
 8006834:	e005      	b.n	8006842 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d077      	beq.n	8006938 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	005a      	lsls	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b0f      	cmp	r3, #15
 8006862:	d916      	bls.n	8006892 <UART_SetConfig+0x4a6>
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800686a:	d212      	bcs.n	8006892 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f023 030f 	bic.w	r3, r3, #15
 8006874:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	b29b      	uxth	r3, r3
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	b29a      	uxth	r2, r3
 8006882:	8afb      	ldrh	r3, [r7, #22]
 8006884:	4313      	orrs	r3, r2
 8006886:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	8afa      	ldrh	r2, [r7, #22]
 800688e:	60da      	str	r2, [r3, #12]
 8006890:	e052      	b.n	8006938 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006898:	e04e      	b.n	8006938 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800689a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d827      	bhi.n	80068f2 <UART_SetConfig+0x506>
 80068a2:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <UART_SetConfig+0x4bc>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068d5 	.word	0x080068d5
 80068b0:	080068dd 	.word	0x080068dd
 80068b4:	080068f3 	.word	0x080068f3
 80068b8:	080068e3 	.word	0x080068e3
 80068bc:	080068f3 	.word	0x080068f3
 80068c0:	080068f3 	.word	0x080068f3
 80068c4:	080068f3 	.word	0x080068f3
 80068c8:	080068eb 	.word	0x080068eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068cc:	f7fd fdde 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 80068d0:	61f8      	str	r0, [r7, #28]
        break;
 80068d2:	e014      	b.n	80068fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d4:	f7fd fdf0 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 80068d8:	61f8      	str	r0, [r7, #28]
        break;
 80068da:	e010      	b.n	80068fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006958 <UART_SetConfig+0x56c>)
 80068de:	61fb      	str	r3, [r7, #28]
        break;
 80068e0:	e00d      	b.n	80068fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e2:	f7fd fd3b 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80068e6:	61f8      	str	r0, [r7, #28]
        break;
 80068e8:	e009      	b.n	80068fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ee:	61fb      	str	r3, [r7, #28]
        break;
 80068f0:	e005      	b.n	80068fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068fc:	bf00      	nop
    }

    if (pclk != 0U)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d019      	beq.n	8006938 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	085a      	lsrs	r2, r3, #1
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b0f      	cmp	r3, #15
 800691c:	d909      	bls.n	8006932 <UART_SetConfig+0x546>
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006924:	d205      	bcs.n	8006932 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60da      	str	r2, [r3, #12]
 8006930:	e002      	b.n	8006938 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006944:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006948:	4618      	mov	r0, r3
 800694a:	3728      	adds	r7, #40	@ 0x28
 800694c:	46bd      	mov	sp, r7
 800694e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006952:	bf00      	nop
 8006954:	40008000 	.word	0x40008000
 8006958:	00f42400 	.word	0x00f42400

0800695c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d10a      	bne.n	8006a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b098      	sub	sp, #96	@ 0x60
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ab0:	f7fb f89c 	bl	8001bec <HAL_GetTick>
 8006ab4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d12e      	bne.n	8006b22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006acc:	2200      	movs	r2, #0
 8006ace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f88c 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d021      	beq.n	8006b22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e6      	bne.n	8006ade <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e062      	b.n	8006be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d149      	bne.n	8006bc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f856 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d03c      	beq.n	8006bc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	623b      	str	r3, [r7, #32]
   return(result);
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b9c:	61fa      	str	r2, [r7, #28]
 8006b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e011      	b.n	8006be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3758      	adds	r7, #88	@ 0x58
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c00:	e04f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d04b      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0a:	f7fa ffef 	bl	8001bec <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e04e      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d037      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b80      	cmp	r3, #128	@ 0x80
 8006c36:	d034      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d031      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d110      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f8ff 	bl	8006e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e029      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7c:	d111      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f8e5 	bl	8006e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e00f      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	2300      	movne	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d0a0      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b096      	sub	sp, #88	@ 0x58
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2222      	movs	r2, #34	@ 0x22
 8006cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d028      	beq.n	8006d52 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d04:	4a3e      	ldr	r2, [pc, #248]	@ (8006e00 <UART_Start_Receive_DMA+0x134>)
 8006d06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e04 <UART_Start_Receive_DMA+0x138>)
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d14:	4a3c      	ldr	r2, [pc, #240]	@ (8006e08 <UART_Start_Receive_DMA+0x13c>)
 8006d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3324      	adds	r3, #36	@ 0x24
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d30:	461a      	mov	r2, r3
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	f7fc f8d6 	bl	8002ee4 <HAL_DMA_Start_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2210      	movs	r2, #16
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e051      	b.n	8006df6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d018      	beq.n	8006d8c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dac:	637a      	str	r2, [r7, #52]	@ 0x34
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006de0:	623a      	str	r2, [r7, #32]
 8006de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69f9      	ldr	r1, [r7, #28]
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3758      	adds	r7, #88	@ 0x58
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	08006f21 	.word	0x08006f21
 8006e04:	0800704d 	.word	0x0800704d
 8006e08:	0800708b 	.word	0x0800708b

08006e0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	@ 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6979      	ldr	r1, [r7, #20]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e6      	bne.n	8006e14 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006e4c:	bf00      	nop
 8006e4e:	3724      	adds	r7, #36	@ 0x24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b095      	sub	sp, #84	@ 0x54
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e6      	bne.n	8006e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d118      	bne.n	8006f00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6979      	ldr	r1, [r7, #20]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e6      	bne.n	8006ece <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f14:	bf00      	nop
 8006f16:	3754      	adds	r7, #84	@ 0x54
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b09c      	sub	sp, #112	@ 0x70
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d171      	bne.n	8007020 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e6      	bne.n	8006f44 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	f023 0301 	bic.w	r3, r3, #1
 8006f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f96:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e5      	bne.n	8006f76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fca:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e5      	bne.n	8006faa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d118      	bne.n	8007020 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0310 	bic.w	r3, r3, #16
 8007002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	69b9      	ldr	r1, [r7, #24]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	617b      	str	r3, [r7, #20]
   return(result);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e6      	bne.n	8006fee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007022:	2200      	movs	r2, #0
 8007024:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800702a:	2b01      	cmp	r3, #1
 800702c:	d107      	bne.n	800703e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800702e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007030:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007034:	4619      	mov	r1, r3
 8007036:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007038:	f7ff f9cc 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800703c:	e002      	b.n	8007044 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800703e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007040:	f7ff f9b4 	bl	80063ac <HAL_UART_RxCpltCallback>
}
 8007044:	bf00      	nop
 8007046:	3770      	adds	r7, #112	@ 0x70
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007064:	2b01      	cmp	r3, #1
 8007066:	d109      	bne.n	800707c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	b29b      	uxth	r3, r3
 8007072:	4619      	mov	r1, r3
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7ff f9ad 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800707a:	e002      	b.n	8007082 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff f99f 	bl	80063c0 <HAL_UART_RxHalfCpltCallback>
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800709c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b0:	2b80      	cmp	r3, #128	@ 0x80
 80070b2:	d109      	bne.n	80070c8 <UART_DMAError+0x3e>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b21      	cmp	r3, #33	@ 0x21
 80070b8:	d106      	bne.n	80070c8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f7ff fea2 	bl	8006e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d2:	2b40      	cmp	r3, #64	@ 0x40
 80070d4:	d109      	bne.n	80070ea <UART_DMAError+0x60>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b22      	cmp	r3, #34	@ 0x22
 80070da:	d106      	bne.n	80070ea <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80070e4:	6978      	ldr	r0, [r7, #20]
 80070e6:	f7ff feb7 	bl	8006e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070f0:	f043 0210 	orr.w	r2, r3, #16
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	f7f9 fa52 	bl	80005a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007100:	bf00      	nop
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7f9 fa3c 	bl	80005a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	60bb      	str	r3, [r7, #8]
   return(result);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	613b      	str	r3, [r7, #16]
   return(result);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7f9 f9e6 	bl	800054c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007180:	bf00      	nop
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e056      	b.n	800724e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7fa f9cd 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2224      	movs	r2, #36	@ 0x24
 80071ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0201 	bic.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff fbc1 	bl	800695c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff f906 	bl	80063ec <UART_SetConfig>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e031      	b.n	800724e <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071f8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	430a      	orrs	r2, r1
 800720c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	055b      	lsls	r3, r3, #21
 8007212:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	041b      	lsls	r3, r3, #16
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8007228:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	6979      	ldr	r1, [r7, #20]
 8007232:	430b      	orrs	r3, r1
 8007234:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0201 	orr.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f7ff fc2a 	bl	8006aa0 <UART_CheckIdleState>
 800724c:	4603      	mov	r3, r0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <__NVIC_SetPriority>:
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	6039      	str	r1, [r7, #0]
 8007276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727c:	2b00      	cmp	r3, #0
 800727e:	db0a      	blt.n	8007296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	490c      	ldr	r1, [pc, #48]	@ (80072b8 <__NVIC_SetPriority+0x4c>)
 8007286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728a:	0112      	lsls	r2, r2, #4
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	440b      	add	r3, r1
 8007290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007294:	e00a      	b.n	80072ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	4908      	ldr	r1, [pc, #32]	@ (80072bc <__NVIC_SetPriority+0x50>)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	3b04      	subs	r3, #4
 80072a4:	0112      	lsls	r2, r2, #4
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	440b      	add	r3, r1
 80072aa:	761a      	strb	r2, [r3, #24]
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	e000e100 	.word	0xe000e100
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <SysTick_Handler+0x1c>)
 80072c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072c8:	f001 fd18 	bl	8008cfc <xTaskGetSchedulerState>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d001      	beq.n	80072d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072d2:	f002 fb11 	bl	80098f8 <xPortSysTickHandler>
  }
}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	e000e010 	.word	0xe000e010

080072e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072e4:	2100      	movs	r1, #0
 80072e6:	f06f 0004 	mvn.w	r0, #4
 80072ea:	f7ff ffbf 	bl	800726c <__NVIC_SetPriority>
#endif
}
 80072ee:	bf00      	nop
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fa:	f3ef 8305 	mrs	r3, IPSR
 80072fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007306:	f06f 0305 	mvn.w	r3, #5
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e00c      	b.n	8007328 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800730e:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <osKernelInitialize+0x44>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <osKernelInitialize+0x44>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	607b      	str	r3, [r7, #4]
 8007320:	e002      	b.n	8007328 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007322:	f04f 33ff 	mov.w	r3, #4294967295
 8007326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007328:	687b      	ldr	r3, [r7, #4]
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000890 	.word	0x20000890

0800733c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007342:	f3ef 8305 	mrs	r3, IPSR
 8007346:	603b      	str	r3, [r7, #0]
  return(result);
 8007348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <osKernelStart+0x1a>
    stat = osErrorISR;
 800734e:	f06f 0305 	mvn.w	r3, #5
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	e010      	b.n	8007378 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007356:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <osKernelStart+0x48>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d109      	bne.n	8007372 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800735e:	f7ff ffbf 	bl	80072e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007362:	4b08      	ldr	r3, [pc, #32]	@ (8007384 <osKernelStart+0x48>)
 8007364:	2202      	movs	r2, #2
 8007366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007368:	f001 f87a 	bl	8008460 <vTaskStartScheduler>
      stat = osOK;
 800736c:	2300      	movs	r3, #0
 800736e:	607b      	str	r3, [r7, #4]
 8007370:	e002      	b.n	8007378 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295
 8007376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007378:	687b      	ldr	r3, [r7, #4]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000890 	.word	0x20000890

08007388 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b08e      	sub	sp, #56	@ 0x38
 800738c:	af04      	add	r7, sp, #16
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007398:	f3ef 8305 	mrs	r3, IPSR
 800739c:	617b      	str	r3, [r7, #20]
  return(result);
 800739e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d17e      	bne.n	80074a2 <osThreadNew+0x11a>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d07b      	beq.n	80074a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073aa:	2380      	movs	r3, #128	@ 0x80
 80073ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073ae:	2318      	movs	r3, #24
 80073b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d045      	beq.n	800744e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <osThreadNew+0x48>
        name = attr->name;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <osThreadNew+0x6e>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b38      	cmp	r3, #56	@ 0x38
 80073e8:	d805      	bhi.n	80073f6 <osThreadNew+0x6e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <osThreadNew+0x72>
        return (NULL);
 80073f6:	2300      	movs	r3, #0
 80073f8:	e054      	b.n	80074a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <osThreadNew+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	2b5b      	cmp	r3, #91	@ 0x5b
 8007418:	d90a      	bls.n	8007430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <osThreadNew+0xa8>
        mem = 1;
 800742a:	2301      	movs	r3, #1
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	e010      	b.n	8007452 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10c      	bne.n	8007452 <osThreadNew+0xca>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <osThreadNew+0xca>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <osThreadNew+0xca>
          mem = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e001      	b.n	8007452 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d110      	bne.n	800747a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007460:	9202      	str	r2, [sp, #8]
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fe1a 	bl	80080a8 <xTaskCreateStatic>
 8007474:	4603      	mov	r3, r0
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e013      	b.n	80074a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d110      	bne.n	80074a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	b29a      	uxth	r2, r3
 8007484:	f107 0310 	add.w	r3, r7, #16
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fe68 	bl	8008168 <xTaskCreate>
 8007498:	4603      	mov	r3, r0
 800749a:	2b01      	cmp	r3, #1
 800749c:	d001      	beq.n	80074a2 <osThreadNew+0x11a>
            hTask = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074a2:	693b      	ldr	r3, [r7, #16]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	@ 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b4:	f3ef 8305 	mrs	r3, IPSR
 80074b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <osDelay+0x1c>
    stat = osErrorISR;
 80074c0:	f06f 0305 	mvn.w	r3, #5
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e007      	b.n	80074d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 ff8e 	bl	80083f4 <vTaskDelay>
    }
  }

  return (stat);
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4a07      	ldr	r2, [pc, #28]	@ (8007510 <vApplicationGetIdleTaskMemory+0x2c>)
 80074f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4a06      	ldr	r2, [pc, #24]	@ (8007514 <vApplicationGetIdleTaskMemory+0x30>)
 80074fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2280      	movs	r2, #128	@ 0x80
 8007500:	601a      	str	r2, [r3, #0]
}
 8007502:	bf00      	nop
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000894 	.word	0x20000894
 8007514:	200008f0 	.word	0x200008f0

08007518 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4a07      	ldr	r2, [pc, #28]	@ (8007544 <vApplicationGetTimerTaskMemory+0x2c>)
 8007528:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4a06      	ldr	r2, [pc, #24]	@ (8007548 <vApplicationGetTimerTaskMemory+0x30>)
 800752e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007536:	601a      	str	r2, [r3, #0]
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000af0 	.word	0x20000af0
 8007548:	20000b4c 	.word	0x20000b4c

0800754c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f103 0208 	add.w	r2, r3, #8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f103 0208 	add.w	r2, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f103 0208 	add.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d103      	bne.n	800760e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	e00c      	b.n	8007628 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3308      	adds	r3, #8
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e002      	b.n	800761c <vListInsert+0x2e>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	429a      	cmp	r2, r3
 8007626:	d2f6      	bcs.n	8007616 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6892      	ldr	r2, [r2, #8]
 8007676:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6852      	ldr	r2, [r2, #4]
 8007680:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	d103      	bne.n	8007694 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	1e5a      	subs	r2, r3, #1
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076e0:	f002 f87a 	bl	80097d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007710:	3b01      	subs	r3, #1
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	441a      	add	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	22ff      	movs	r2, #255	@ 0xff
 8007724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	22ff      	movs	r2, #255	@ 0xff
 800772c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d114      	bne.n	8007760 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01a      	beq.n	8007774 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3310      	adds	r3, #16
 8007742:	4618      	mov	r0, r3
 8007744:	f001 f91a 	bl	800897c <xTaskRemoveFromEventList>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d012      	beq.n	8007774 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <xQueueGenericReset+0xd0>)
 8007750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	e009      	b.n	8007774 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3310      	adds	r3, #16
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fef1 	bl	800754c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3324      	adds	r3, #36	@ 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff feec 	bl	800754c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007774:	f002 f862 	bl	800983c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007778:	2301      	movs	r3, #1
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08e      	sub	sp, #56	@ 0x38
 800778c:	af02      	add	r7, sp, #8
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <xQueueGenericCreateStatic+0x56>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <xQueueGenericCreateStatic+0x5a>
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <xQueueGenericCreateStatic+0x5c>
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	623b      	str	r3, [r7, #32]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <xQueueGenericCreateStatic+0x84>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <xQueueGenericCreateStatic+0x88>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <xQueueGenericCreateStatic+0x8a>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	61fb      	str	r3, [r7, #28]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800782e:	2350      	movs	r3, #80	@ 0x50
 8007830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b50      	cmp	r3, #80	@ 0x50
 8007836:	d00b      	beq.n	8007850 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	61bb      	str	r3, [r7, #24]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007850:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00d      	beq.n	8007878 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007864:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f805 	bl	8007882 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800787a:	4618      	mov	r0, r3
 800787c:	3730      	adds	r7, #48	@ 0x30
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d103      	bne.n	800789e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e002      	b.n	80078a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078b0:	2101      	movs	r1, #1
 80078b2:	69b8      	ldr	r0, [r7, #24]
 80078b4:	f7ff fefe 	bl	80076b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08e      	sub	sp, #56	@ 0x38
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078d6:	2300      	movs	r3, #0
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <xQueueGenericSend+0x34>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	e7fd      	b.n	80078f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <xQueueGenericSend+0x42>
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <xQueueGenericSend+0x46>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <xQueueGenericSend+0x48>
 800790e:	2300      	movs	r3, #0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10b      	bne.n	800792c <xQueueGenericSend+0x64>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	e7fd      	b.n	8007928 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d103      	bne.n	800793a <xQueueGenericSend+0x72>
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <xQueueGenericSend+0x76>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueGenericSend+0x78>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <xQueueGenericSend+0x94>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	623b      	str	r3, [r7, #32]
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800795c:	f001 f9ce 	bl	8008cfc <xTaskGetSchedulerState>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <xQueueGenericSend+0xa4>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <xQueueGenericSend+0xa8>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <xQueueGenericSend+0xaa>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <xQueueGenericSend+0xc6>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	61fb      	str	r3, [r7, #28]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800798e:	f001 ff23 	bl	80097d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	429a      	cmp	r2, r3
 800799c:	d302      	bcc.n	80079a4 <xQueueGenericSend+0xdc>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d129      	bne.n	80079f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079aa:	f000 fa0f 	bl	8007dcc <prvCopyDataToQueue>
 80079ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d010      	beq.n	80079da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	3324      	adds	r3, #36	@ 0x24
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 ffdd 	bl	800897c <xTaskRemoveFromEventList>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d013      	beq.n	80079f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079c8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac8 <xQueueGenericSend+0x200>)
 80079ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	e00a      	b.n	80079f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d007      	beq.n	80079f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079e0:	4b39      	ldr	r3, [pc, #228]	@ (8007ac8 <xQueueGenericSend+0x200>)
 80079e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079f0:	f001 ff24 	bl	800983c <vPortExitCritical>
				return pdPASS;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e063      	b.n	8007ac0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079fe:	f001 ff1d 	bl	800983c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e05c      	b.n	8007ac0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d106      	bne.n	8007a1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a0c:	f107 0314 	add.w	r3, r7, #20
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 f817 	bl	8008a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a1a:	f001 ff0f 	bl	800983c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a1e:	f000 fd87 	bl	8008530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a22:	f001 fed9 	bl	80097d8 <vPortEnterCritical>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a2c:	b25b      	sxtb	r3, r3
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d103      	bne.n	8007a3c <xQueueGenericSend+0x174>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a42:	b25b      	sxtb	r3, r3
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d103      	bne.n	8007a52 <xQueueGenericSend+0x18a>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a52:	f001 fef3 	bl	800983c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a56:	1d3a      	adds	r2, r7, #4
 8007a58:	f107 0314 	add.w	r3, r7, #20
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 f806 	bl	8008a70 <xTaskCheckForTimeOut>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d124      	bne.n	8007ab4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a6c:	f000 faa6 	bl	8007fbc <prvIsQueueFull>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d018      	beq.n	8007aa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	3310      	adds	r3, #16
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 ff2a 	bl	80088d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a86:	f000 fa31 	bl	8007eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a8a:	f000 fd5f 	bl	800854c <xTaskResumeAll>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f47f af7c 	bne.w	800798e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <xQueueGenericSend+0x200>)
 8007a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	e772      	b.n	800798e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aaa:	f000 fa1f 	bl	8007eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aae:	f000 fd4d 	bl	800854c <xTaskResumeAll>
 8007ab2:	e76c      	b.n	800798e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ab6:	f000 fa19 	bl	8007eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aba:	f000 fd47 	bl	800854c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3738      	adds	r7, #56	@ 0x38
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b090      	sub	sp, #64	@ 0x40
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <xQueueGenericSendFromISR+0x3e>
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <xQueueGenericSendFromISR+0x42>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <xQueueGenericSendFromISR+0x44>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d103      	bne.n	8007b3a <xQueueGenericSendFromISR+0x6e>
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <xQueueGenericSendFromISR+0x72>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <xQueueGenericSendFromISR+0x74>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10b      	bne.n	8007b5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	623b      	str	r3, [r7, #32]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b5c:	f001 ff1c 	bl	8009998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b60:	f3ef 8211 	mrs	r2, BASEPRI
 8007b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	61fa      	str	r2, [r7, #28]
 8007b76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d302      	bcc.n	8007b8e <xQueueGenericSendFromISR+0xc2>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d12f      	bne.n	8007bee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ba4:	f000 f912 	bl	8007dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ba8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb0:	d112      	bne.n	8007bd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d016      	beq.n	8007be8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	3324      	adds	r3, #36	@ 0x24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fedc 	bl	800897c <xTaskRemoveFromEventList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00e      	beq.n	8007be8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e007      	b.n	8007be8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007bdc:	3301      	adds	r3, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	b25a      	sxtb	r2, r3
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007be8:	2301      	movs	r3, #1
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007bec:	e001      	b.n	8007bf2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3740      	adds	r7, #64	@ 0x40
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	@ 0x30
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c14:	2300      	movs	r3, #0
 8007c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <xQueueReceive+0x32>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	623b      	str	r3, [r7, #32]
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop
 8007c38:	e7fd      	b.n	8007c36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <xQueueReceive+0x40>
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <xQueueReceive+0x44>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <xQueueReceive+0x46>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <xQueueReceive+0x62>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	61fb      	str	r3, [r7, #28]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c6a:	f001 f847 	bl	8008cfc <xTaskGetSchedulerState>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <xQueueReceive+0x72>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <xQueueReceive+0x76>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <xQueueReceive+0x78>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <xQueueReceive+0x94>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	61bb      	str	r3, [r7, #24]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c9c:	f001 fd9c 	bl	80097d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01f      	beq.n	8007cec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb0:	f000 f8f6 	bl	8007ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	1e5a      	subs	r2, r3, #1
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00f      	beq.n	8007ce4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	3310      	adds	r3, #16
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fe57 	bl	800897c <xTaskRemoveFromEventList>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8007dc8 <xQueueReceive+0x1c0>)
 8007cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ce4:	f001 fdaa 	bl	800983c <vPortExitCritical>
				return pdPASS;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e069      	b.n	8007dc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d103      	bne.n	8007cfa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cf2:	f001 fda3 	bl	800983c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e062      	b.n	8007dc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d00:	f107 0310 	add.w	r3, r7, #16
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fe9d 	bl	8008a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d0e:	f001 fd95 	bl	800983c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d12:	f000 fc0d 	bl	8008530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d16:	f001 fd5f 	bl	80097d8 <vPortEnterCritical>
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d20:	b25b      	sxtb	r3, r3
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d103      	bne.n	8007d30 <xQueueReceive+0x128>
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d103      	bne.n	8007d46 <xQueueReceive+0x13e>
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d46:	f001 fd79 	bl	800983c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d4a:	1d3a      	adds	r2, r7, #4
 8007d4c:	f107 0310 	add.w	r3, r7, #16
 8007d50:	4611      	mov	r1, r2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fe8c 	bl	8008a70 <xTaskCheckForTimeOut>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d123      	bne.n	8007da6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d60:	f000 f916 	bl	8007f90 <prvIsQueueEmpty>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d017      	beq.n	8007d9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	3324      	adds	r3, #36	@ 0x24
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fdb0 	bl	80088d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d7a:	f000 f8b7 	bl	8007eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d7e:	f000 fbe5 	bl	800854c <xTaskResumeAll>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d189      	bne.n	8007c9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d88:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <xQueueReceive+0x1c0>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	e780      	b.n	8007c9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d9c:	f000 f8a6 	bl	8007eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da0:	f000 fbd4 	bl	800854c <xTaskResumeAll>
 8007da4:	e77a      	b.n	8007c9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007da8:	f000 f8a0 	bl	8007eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dac:	f000 fbce 	bl	800854c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007db2:	f000 f8ed 	bl	8007f90 <prvIsQueueEmpty>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f43f af6f 	beq.w	8007c9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3730      	adds	r7, #48	@ 0x30
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d14d      	bne.n	8007e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 ff9e 	bl	8008d38 <xTaskPriorityDisinherit>
 8007dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	e043      	b.n	8007e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d119      	bne.n	8007e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6858      	ldr	r0, [r3, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e14:	461a      	mov	r2, r3
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	f002 f81a 	bl	8009e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e24:	441a      	add	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d32b      	bcc.n	8007e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	e026      	b.n	8007e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68d8      	ldr	r0, [r3, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e48:	461a      	mov	r2, r3
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	f002 f800 	bl	8009e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	425b      	negs	r3, r3
 8007e5a:	441a      	add	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d207      	bcs.n	8007e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e74:	425b      	negs	r3, r3
 8007e76:	441a      	add	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d105      	bne.n	8007e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e96:	697b      	ldr	r3, [r7, #20]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d018      	beq.n	8007ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	441a      	add	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d303      	bcc.n	8007ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68d9      	ldr	r1, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	461a      	mov	r2, r3
 8007ede:	6838      	ldr	r0, [r7, #0]
 8007ee0:	f001 ffb6 	bl	8009e50 <memcpy>
	}
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ef4:	f001 fc70 	bl	80097d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f00:	e011      	b.n	8007f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d012      	beq.n	8007f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3324      	adds	r3, #36	@ 0x24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fd34 	bl	800897c <xTaskRemoveFromEventList>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f1a:	f000 fe0d 	bl	8008b38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dce9      	bgt.n	8007f02 <prvUnlockQueue+0x16>
 8007f2e:	e000      	b.n	8007f32 <prvUnlockQueue+0x46>
					break;
 8007f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	22ff      	movs	r2, #255	@ 0xff
 8007f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f3a:	f001 fc7f 	bl	800983c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f3e:	f001 fc4b 	bl	80097d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f4a:	e011      	b.n	8007f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d012      	beq.n	8007f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3310      	adds	r3, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fd0f 	bl	800897c <xTaskRemoveFromEventList>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f64:	f000 fde8 	bl	8008b38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dce9      	bgt.n	8007f4c <prvUnlockQueue+0x60>
 8007f78:	e000      	b.n	8007f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	22ff      	movs	r2, #255	@ 0xff
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f84:	f001 fc5a 	bl	800983c <vPortExitCritical>
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f98:	f001 fc1e 	bl	80097d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e001      	b.n	8007fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fae:	f001 fc45 	bl	800983c <vPortExitCritical>

	return xReturn;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc4:	f001 fc08 	bl	80097d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d102      	bne.n	8007fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e001      	b.n	8007fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fde:	f001 fc2d 	bl	800983c <vPortExitCritical>

	return xReturn;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	e014      	b.n	8008026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800803c <vQueueAddToRegistry+0x50>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008008:	490c      	ldr	r1, [pc, #48]	@ (800803c <vQueueAddToRegistry+0x50>)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008012:	4a0a      	ldr	r2, [pc, #40]	@ (800803c <vQueueAddToRegistry+0x50>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800801e:	e006      	b.n	800802e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b07      	cmp	r3, #7
 800802a:	d9e7      	bls.n	8007ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000f4c 	.word	0x20000f4c

08008040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008050:	f001 fbc2 	bl	80097d8 <vPortEnterCritical>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800805a:	b25b      	sxtb	r3, r3
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d103      	bne.n	800806a <vQueueWaitForMessageRestricted+0x2a>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008070:	b25b      	sxtb	r3, r3
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d103      	bne.n	8008080 <vQueueWaitForMessageRestricted+0x40>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008080:	f001 fbdc 	bl	800983c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	3324      	adds	r3, #36	@ 0x24
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fc45 	bl	8008924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800809a:	6978      	ldr	r0, [r7, #20]
 800809c:	f7ff ff26 	bl	8007eec <prvUnlockQueue>
	}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08e      	sub	sp, #56	@ 0x38
 80080ac:	af04      	add	r7, sp, #16
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10b      	bne.n	80080d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	623b      	str	r3, [r7, #32]
}
 80080ce:	bf00      	nop
 80080d0:	bf00      	nop
 80080d2:	e7fd      	b.n	80080d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	61fb      	str	r3, [r7, #28]
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	e7fd      	b.n	80080ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080f2:	235c      	movs	r3, #92	@ 0x5c
 80080f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80080fa:	d00b      	beq.n	8008114 <xTaskCreateStatic+0x6c>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	61bb      	str	r3, [r7, #24]
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	e7fd      	b.n	8008110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01e      	beq.n	800815a <xTaskCreateStatic+0xb2>
 800811c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01b      	beq.n	800815a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800812a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	2202      	movs	r2, #2
 8008130:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008134:	2300      	movs	r3, #0
 8008136:	9303      	str	r3, [sp, #12]
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	9302      	str	r3, [sp, #8]
 800813c:	f107 0314 	add.w	r3, r7, #20
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f850 	bl	80081f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008154:	f000 f8de 	bl	8008314 <prvAddNewTaskToReadyList>
 8008158:	e001      	b.n	800815e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800815e:	697b      	ldr	r3, [r7, #20]
	}
 8008160:	4618      	mov	r0, r3
 8008162:	3728      	adds	r7, #40	@ 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08c      	sub	sp, #48	@ 0x30
 800816c:	af04      	add	r7, sp, #16
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4618      	mov	r0, r3
 800817e:	f001 fc4d 	bl	8009a1c <pvPortMalloc>
 8008182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800818a:	205c      	movs	r0, #92	@ 0x5c
 800818c:	f001 fc46 	bl	8009a1c <pvPortMalloc>
 8008190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	631a      	str	r2, [r3, #48]	@ 0x30
 800819e:	e005      	b.n	80081ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081a0:	6978      	ldr	r0, [r7, #20]
 80081a2:	f001 fd09 	bl	8009bb8 <vPortFree>
 80081a6:	e001      	b.n	80081ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d017      	beq.n	80081e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	2300      	movs	r3, #0
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f80e 	bl	80081f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081d6:	69f8      	ldr	r0, [r7, #28]
 80081d8:	f000 f89c 	bl	8008314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	e002      	b.n	80081e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081e8:	69bb      	ldr	r3, [r7, #24]
	}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b088      	sub	sp, #32
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	461a      	mov	r2, r3
 800820a:	21a5      	movs	r1, #165	@ 0xa5
 800820c:	f001 fdf4 	bl	8009df8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800821a:	3b01      	subs	r3, #1
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	617b      	str	r3, [r7, #20]
}
 8008246:	bf00      	nop
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01f      	beq.n	8008292 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	e012      	b.n	800827e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	7819      	ldrb	r1, [r3, #0]
 8008260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4413      	add	r3, r2
 8008266:	3334      	adds	r3, #52	@ 0x34
 8008268:	460a      	mov	r2, r1
 800826a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	3301      	adds	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b0f      	cmp	r3, #15
 8008282:	d9e9      	bls.n	8008258 <prvInitialiseNewTask+0x66>
 8008284:	e000      	b.n	8008288 <prvInitialiseNewTask+0x96>
			{
				break;
 8008286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008290:	e003      	b.n	800829a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	2b37      	cmp	r3, #55	@ 0x37
 800829e:	d901      	bls.n	80082a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082a0:	2337      	movs	r3, #55	@ 0x37
 80082a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	3304      	adds	r3, #4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff f966 	bl	800758c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	3318      	adds	r3, #24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff f961 	bl	800758c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	2200      	movs	r2, #0
 80082e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	68f9      	ldr	r1, [r7, #12]
 80082f2:	69b8      	ldr	r0, [r7, #24]
 80082f4:	f001 f93e 	bl	8009574 <pxPortInitialiseStack>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800830a:	bf00      	nop
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800831c:	f001 fa5c 	bl	80097d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008320:	4b2d      	ldr	r3, [pc, #180]	@ (80083d8 <prvAddNewTaskToReadyList+0xc4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	4a2c      	ldr	r2, [pc, #176]	@ (80083d8 <prvAddNewTaskToReadyList+0xc4>)
 8008328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800832a:	4b2c      	ldr	r3, [pc, #176]	@ (80083dc <prvAddNewTaskToReadyList+0xc8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d109      	bne.n	8008346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008332:	4a2a      	ldr	r2, [pc, #168]	@ (80083dc <prvAddNewTaskToReadyList+0xc8>)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008338:	4b27      	ldr	r3, [pc, #156]	@ (80083d8 <prvAddNewTaskToReadyList+0xc4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d110      	bne.n	8008362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008340:	f000 fc1e 	bl	8008b80 <prvInitialiseTaskLists>
 8008344:	e00d      	b.n	8008362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008346:	4b26      	ldr	r3, [pc, #152]	@ (80083e0 <prvAddNewTaskToReadyList+0xcc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d109      	bne.n	8008362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800834e:	4b23      	ldr	r3, [pc, #140]	@ (80083dc <prvAddNewTaskToReadyList+0xc8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	429a      	cmp	r2, r3
 800835a:	d802      	bhi.n	8008362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800835c:	4a1f      	ldr	r2, [pc, #124]	@ (80083dc <prvAddNewTaskToReadyList+0xc8>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008362:	4b20      	ldr	r3, [pc, #128]	@ (80083e4 <prvAddNewTaskToReadyList+0xd0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	4a1e      	ldr	r2, [pc, #120]	@ (80083e4 <prvAddNewTaskToReadyList+0xd0>)
 800836a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800836c:	4b1d      	ldr	r3, [pc, #116]	@ (80083e4 <prvAddNewTaskToReadyList+0xd0>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	4b1b      	ldr	r3, [pc, #108]	@ (80083e8 <prvAddNewTaskToReadyList+0xd4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d903      	bls.n	8008388 <prvAddNewTaskToReadyList+0x74>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008384:	4a18      	ldr	r2, [pc, #96]	@ (80083e8 <prvAddNewTaskToReadyList+0xd4>)
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4a15      	ldr	r2, [pc, #84]	@ (80083ec <prvAddNewTaskToReadyList+0xd8>)
 8008396:	441a      	add	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7ff f901 	bl	80075a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083a4:	f001 fa4a 	bl	800983c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083a8:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <prvAddNewTaskToReadyList+0xcc>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00e      	beq.n	80083ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083b0:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <prvAddNewTaskToReadyList+0xc8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d207      	bcs.n	80083ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083be:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <prvAddNewTaskToReadyList+0xdc>)
 80083c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20001460 	.word	0x20001460
 80083dc:	20000f8c 	.word	0x20000f8c
 80083e0:	2000146c 	.word	0x2000146c
 80083e4:	2000147c 	.word	0x2000147c
 80083e8:	20001468 	.word	0x20001468
 80083ec:	20000f90 	.word	0x20000f90
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d018      	beq.n	8008438 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008406:	4b14      	ldr	r3, [pc, #80]	@ (8008458 <vTaskDelay+0x64>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <vTaskDelay+0x32>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	60bb      	str	r3, [r7, #8]
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	e7fd      	b.n	8008422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008426:	f000 f883 	bl	8008530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fcf3 	bl	8008e18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008432:	f000 f88b 	bl	800854c <xTaskResumeAll>
 8008436:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800843e:	4b07      	ldr	r3, [pc, #28]	@ (800845c <vTaskDelay+0x68>)
 8008440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20001488 	.word	0x20001488
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	@ 0x28
 8008464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800846a:	2300      	movs	r3, #0
 800846c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800846e:	463a      	mov	r2, r7
 8008470:	1d39      	adds	r1, r7, #4
 8008472:	f107 0308 	add.w	r3, r7, #8
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f834 	bl	80074e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	9202      	str	r2, [sp, #8]
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	2300      	movs	r3, #0
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	460a      	mov	r2, r1
 800848e:	4922      	ldr	r1, [pc, #136]	@ (8008518 <vTaskStartScheduler+0xb8>)
 8008490:	4822      	ldr	r0, [pc, #136]	@ (800851c <vTaskStartScheduler+0xbc>)
 8008492:	f7ff fe09 	bl	80080a8 <xTaskCreateStatic>
 8008496:	4603      	mov	r3, r0
 8008498:	4a21      	ldr	r2, [pc, #132]	@ (8008520 <vTaskStartScheduler+0xc0>)
 800849a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800849c:	4b20      	ldr	r3, [pc, #128]	@ (8008520 <vTaskStartScheduler+0xc0>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084a4:	2301      	movs	r3, #1
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	e001      	b.n	80084ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d102      	bne.n	80084ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084b4:	f000 fd04 	bl	8008ec0 <xTimerCreateTimerTask>
 80084b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d116      	bne.n	80084ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	613b      	str	r3, [r7, #16]
}
 80084d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084d4:	4b13      	ldr	r3, [pc, #76]	@ (8008524 <vTaskStartScheduler+0xc4>)
 80084d6:	f04f 32ff 	mov.w	r2, #4294967295
 80084da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084dc:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <vTaskStartScheduler+0xc8>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084e2:	4b12      	ldr	r3, [pc, #72]	@ (800852c <vTaskStartScheduler+0xcc>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084e8:	f001 f8d2 	bl	8009690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084ec:	e00f      	b.n	800850e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d10b      	bne.n	800850e <vTaskStartScheduler+0xae>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60fb      	str	r3, [r7, #12]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <vTaskStartScheduler+0xaa>
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	08009eac 	.word	0x08009eac
 800851c:	08008b51 	.word	0x08008b51
 8008520:	20001484 	.word	0x20001484
 8008524:	20001480 	.word	0x20001480
 8008528:	2000146c 	.word	0x2000146c
 800852c:	20001464 	.word	0x20001464

08008530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008534:	4b04      	ldr	r3, [pc, #16]	@ (8008548 <vTaskSuspendAll+0x18>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	4a03      	ldr	r2, [pc, #12]	@ (8008548 <vTaskSuspendAll+0x18>)
 800853c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800853e:	bf00      	nop
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	20001488 	.word	0x20001488

0800854c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800855a:	4b42      	ldr	r3, [pc, #264]	@ (8008664 <xTaskResumeAll+0x118>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10b      	bne.n	800857a <xTaskResumeAll+0x2e>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	603b      	str	r3, [r7, #0]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800857a:	f001 f92d 	bl	80097d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800857e:	4b39      	ldr	r3, [pc, #228]	@ (8008664 <xTaskResumeAll+0x118>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3b01      	subs	r3, #1
 8008584:	4a37      	ldr	r2, [pc, #220]	@ (8008664 <xTaskResumeAll+0x118>)
 8008586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008588:	4b36      	ldr	r3, [pc, #216]	@ (8008664 <xTaskResumeAll+0x118>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d162      	bne.n	8008656 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008590:	4b35      	ldr	r3, [pc, #212]	@ (8008668 <xTaskResumeAll+0x11c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05e      	beq.n	8008656 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008598:	e02f      	b.n	80085fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859a:	4b34      	ldr	r3, [pc, #208]	@ (800866c <xTaskResumeAll+0x120>)
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3318      	adds	r3, #24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff f85a 	bl	8007660 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff f855 	bl	8007660 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008670 <xTaskResumeAll+0x124>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d903      	bls.n	80085ca <xTaskResumeAll+0x7e>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008670 <xTaskResumeAll+0x124>)
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4a27      	ldr	r2, [pc, #156]	@ (8008674 <xTaskResumeAll+0x128>)
 80085d8:	441a      	add	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fe ffe0 	bl	80075a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4b23      	ldr	r3, [pc, #140]	@ (8008678 <xTaskResumeAll+0x12c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d302      	bcc.n	80085fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80085f4:	4b21      	ldr	r3, [pc, #132]	@ (800867c <xTaskResumeAll+0x130>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085fa:	4b1c      	ldr	r3, [pc, #112]	@ (800866c <xTaskResumeAll+0x120>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1cb      	bne.n	800859a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008608:	f000 fb58 	bl	8008cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800860c:	4b1c      	ldr	r3, [pc, #112]	@ (8008680 <xTaskResumeAll+0x134>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d010      	beq.n	800863a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008618:	f000 f846 	bl	80086a8 <xTaskIncrementTick>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008622:	4b16      	ldr	r3, [pc, #88]	@ (800867c <xTaskResumeAll+0x130>)
 8008624:	2201      	movs	r2, #1
 8008626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3b01      	subs	r3, #1
 800862c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1f1      	bne.n	8008618 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008634:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <xTaskResumeAll+0x134>)
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800863a:	4b10      	ldr	r3, [pc, #64]	@ (800867c <xTaskResumeAll+0x130>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008642:	2301      	movs	r3, #1
 8008644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008646:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <xTaskResumeAll+0x138>)
 8008648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008656:	f001 f8f1 	bl	800983c <vPortExitCritical>

	return xAlreadyYielded;
 800865a:	68bb      	ldr	r3, [r7, #8]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20001488 	.word	0x20001488
 8008668:	20001460 	.word	0x20001460
 800866c:	20001420 	.word	0x20001420
 8008670:	20001468 	.word	0x20001468
 8008674:	20000f90 	.word	0x20000f90
 8008678:	20000f8c 	.word	0x20000f8c
 800867c:	20001474 	.word	0x20001474
 8008680:	20001470 	.word	0x20001470
 8008684:	e000ed04 	.word	0xe000ed04

08008688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800868e:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <xTaskGetTickCount+0x1c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008694:	687b      	ldr	r3, [r7, #4]
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20001464 	.word	0x20001464

080086a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086b2:	4b4f      	ldr	r3, [pc, #316]	@ (80087f0 <xTaskIncrementTick+0x148>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f040 8090 	bne.w	80087dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086bc:	4b4d      	ldr	r3, [pc, #308]	@ (80087f4 <xTaskIncrementTick+0x14c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086c4:	4a4b      	ldr	r2, [pc, #300]	@ (80087f4 <xTaskIncrementTick+0x14c>)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d121      	bne.n	8008714 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086d0:	4b49      	ldr	r3, [pc, #292]	@ (80087f8 <xTaskIncrementTick+0x150>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	603b      	str	r3, [r7, #0]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <xTaskIncrementTick+0x46>
 80086f2:	4b41      	ldr	r3, [pc, #260]	@ (80087f8 <xTaskIncrementTick+0x150>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	4b40      	ldr	r3, [pc, #256]	@ (80087fc <xTaskIncrementTick+0x154>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a3e      	ldr	r2, [pc, #248]	@ (80087f8 <xTaskIncrementTick+0x150>)
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4a3e      	ldr	r2, [pc, #248]	@ (80087fc <xTaskIncrementTick+0x154>)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	4b3e      	ldr	r3, [pc, #248]	@ (8008800 <xTaskIncrementTick+0x158>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	4a3c      	ldr	r2, [pc, #240]	@ (8008800 <xTaskIncrementTick+0x158>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	f000 fad4 	bl	8008cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008714:	4b3b      	ldr	r3, [pc, #236]	@ (8008804 <xTaskIncrementTick+0x15c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	429a      	cmp	r2, r3
 800871c:	d349      	bcc.n	80087b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800871e:	4b36      	ldr	r3, [pc, #216]	@ (80087f8 <xTaskIncrementTick+0x150>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008728:	4b36      	ldr	r3, [pc, #216]	@ (8008804 <xTaskIncrementTick+0x15c>)
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	601a      	str	r2, [r3, #0]
					break;
 8008730:	e03f      	b.n	80087b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008732:	4b31      	ldr	r3, [pc, #196]	@ (80087f8 <xTaskIncrementTick+0x150>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d203      	bcs.n	8008752 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800874a:	4a2e      	ldr	r2, [pc, #184]	@ (8008804 <xTaskIncrementTick+0x15c>)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008750:	e02f      	b.n	80087b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	3304      	adds	r3, #4
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe ff82 	bl	8007660 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	3318      	adds	r3, #24
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe ff79 	bl	8007660 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008772:	4b25      	ldr	r3, [pc, #148]	@ (8008808 <xTaskIncrementTick+0x160>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d903      	bls.n	8008782 <xTaskIncrementTick+0xda>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	4a22      	ldr	r2, [pc, #136]	@ (8008808 <xTaskIncrementTick+0x160>)
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4a1f      	ldr	r2, [pc, #124]	@ (800880c <xTaskIncrementTick+0x164>)
 8008790:	441a      	add	r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3304      	adds	r3, #4
 8008796:	4619      	mov	r1, r3
 8008798:	4610      	mov	r0, r2
 800879a:	f7fe ff04 	bl	80075a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008810 <xTaskIncrementTick+0x168>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d3b8      	bcc.n	800871e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087b0:	e7b5      	b.n	800871e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087b2:	4b17      	ldr	r3, [pc, #92]	@ (8008810 <xTaskIncrementTick+0x168>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b8:	4914      	ldr	r1, [pc, #80]	@ (800880c <xTaskIncrementTick+0x164>)
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d901      	bls.n	80087ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087ce:	4b11      	ldr	r3, [pc, #68]	@ (8008814 <xTaskIncrementTick+0x16c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d007      	beq.n	80087e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80087d6:	2301      	movs	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e004      	b.n	80087e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <xTaskIncrementTick+0x170>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	4a0d      	ldr	r2, [pc, #52]	@ (8008818 <xTaskIncrementTick+0x170>)
 80087e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087e6:	697b      	ldr	r3, [r7, #20]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20001488 	.word	0x20001488
 80087f4:	20001464 	.word	0x20001464
 80087f8:	20001418 	.word	0x20001418
 80087fc:	2000141c 	.word	0x2000141c
 8008800:	20001478 	.word	0x20001478
 8008804:	20001480 	.word	0x20001480
 8008808:	20001468 	.word	0x20001468
 800880c:	20000f90 	.word	0x20000f90
 8008810:	20000f8c 	.word	0x20000f8c
 8008814:	20001474 	.word	0x20001474
 8008818:	20001470 	.word	0x20001470

0800881c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008822:	4b28      	ldr	r3, [pc, #160]	@ (80088c4 <vTaskSwitchContext+0xa8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800882a:	4b27      	ldr	r3, [pc, #156]	@ (80088c8 <vTaskSwitchContext+0xac>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008830:	e042      	b.n	80088b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008832:	4b25      	ldr	r3, [pc, #148]	@ (80088c8 <vTaskSwitchContext+0xac>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b24      	ldr	r3, [pc, #144]	@ (80088cc <vTaskSwitchContext+0xb0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e011      	b.n	8008864 <vTaskSwitchContext+0x48>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <vTaskSwitchContext+0x42>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	607b      	str	r3, [r7, #4]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <vTaskSwitchContext+0x3e>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3b01      	subs	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	491a      	ldr	r1, [pc, #104]	@ (80088d0 <vTaskSwitchContext+0xb4>)
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0e3      	beq.n	8008840 <vTaskSwitchContext+0x24>
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4a13      	ldr	r2, [pc, #76]	@ (80088d0 <vTaskSwitchContext+0xb4>)
 8008884:	4413      	add	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	3308      	adds	r3, #8
 800889a:	429a      	cmp	r2, r3
 800889c:	d104      	bne.n	80088a8 <vTaskSwitchContext+0x8c>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	4a09      	ldr	r2, [pc, #36]	@ (80088d4 <vTaskSwitchContext+0xb8>)
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	4a06      	ldr	r2, [pc, #24]	@ (80088cc <vTaskSwitchContext+0xb0>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6013      	str	r3, [r2, #0]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	20001488 	.word	0x20001488
 80088c8:	20001474 	.word	0x20001474
 80088cc:	20001468 	.word	0x20001468
 80088d0:	20000f90 	.word	0x20000f90
 80088d4:	20000f8c 	.word	0x20000f8c

080088d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	60fb      	str	r3, [r7, #12]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <vTaskPlaceOnEventList+0x48>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3318      	adds	r3, #24
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fe fe70 	bl	80075ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800890e:	2101      	movs	r1, #1
 8008910:	6838      	ldr	r0, [r7, #0]
 8008912:	f000 fa81 	bl	8008e18 <prvAddCurrentTaskToDelayedList>
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000f8c 	.word	0x20000f8c

08008924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	617b      	str	r3, [r7, #20]
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800894e:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <vTaskPlaceOnEventListRestricted+0x54>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3318      	adds	r3, #24
 8008954:	4619      	mov	r1, r3
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7fe fe25 	bl	80075a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295
 8008966:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	68b8      	ldr	r0, [r7, #8]
 800896c:	f000 fa54 	bl	8008e18 <prvAddCurrentTaskToDelayedList>
	}
 8008970:	bf00      	nop
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000f8c 	.word	0x20000f8c

0800897c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60fb      	str	r3, [r7, #12]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fe56 	bl	8007660 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a2c <xTaskRemoveFromEventList+0xb0>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11d      	bne.n	80089f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	3304      	adds	r3, #4
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fe4d 	bl	8007660 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	4b19      	ldr	r3, [pc, #100]	@ (8008a30 <xTaskRemoveFromEventList+0xb4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d903      	bls.n	80089da <xTaskRemoveFromEventList+0x5e>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	4a16      	ldr	r2, [pc, #88]	@ (8008a30 <xTaskRemoveFromEventList+0xb4>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4a13      	ldr	r2, [pc, #76]	@ (8008a34 <xTaskRemoveFromEventList+0xb8>)
 80089e8:	441a      	add	r2, r3
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fe fdd8 	bl	80075a6 <vListInsertEnd>
 80089f6:	e005      	b.n	8008a04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	3318      	adds	r3, #24
 80089fc:	4619      	mov	r1, r3
 80089fe:	480e      	ldr	r0, [pc, #56]	@ (8008a38 <xTaskRemoveFromEventList+0xbc>)
 8008a00:	f7fe fdd1 	bl	80075a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a08:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <xTaskRemoveFromEventList+0xc0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d905      	bls.n	8008a1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a16:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <xTaskRemoveFromEventList+0xc4>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	e001      	b.n	8008a22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a22:	697b      	ldr	r3, [r7, #20]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20001488 	.word	0x20001488
 8008a30:	20001468 	.word	0x20001468
 8008a34:	20000f90 	.word	0x20000f90
 8008a38:	20001420 	.word	0x20001420
 8008a3c:	20000f8c 	.word	0x20000f8c
 8008a40:	20001474 	.word	0x20001474

08008a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a4c:	4b06      	ldr	r3, [pc, #24]	@ (8008a68 <vTaskInternalSetTimeOutState+0x24>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <vTaskInternalSetTimeOutState+0x28>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	605a      	str	r2, [r3, #4]
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	20001478 	.word	0x20001478
 8008a6c:	20001464 	.word	0x20001464

08008a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10b      	bne.n	8008a98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	613b      	str	r3, [r7, #16]
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60fb      	str	r3, [r7, #12]
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	e7fd      	b.n	8008ab2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ab6:	f000 fe8f 	bl	80097d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008aba:	4b1d      	ldr	r3, [pc, #116]	@ (8008b30 <xTaskCheckForTimeOut+0xc0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad2:	d102      	bne.n	8008ada <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	e023      	b.n	8008b22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4b15      	ldr	r3, [pc, #84]	@ (8008b34 <xTaskCheckForTimeOut+0xc4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d007      	beq.n	8008af6 <xTaskCheckForTimeOut+0x86>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d302      	bcc.n	8008af6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008af0:	2301      	movs	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e015      	b.n	8008b22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d20b      	bcs.n	8008b18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff99 	bl	8008a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	61fb      	str	r3, [r7, #28]
 8008b16:	e004      	b.n	8008b22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b22:	f000 fe8b 	bl	800983c <vPortExitCritical>

	return xReturn;
 8008b26:	69fb      	ldr	r3, [r7, #28]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20001464 	.word	0x20001464
 8008b34:	20001478 	.word	0x20001478

08008b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b3c:	4b03      	ldr	r3, [pc, #12]	@ (8008b4c <vTaskMissedYield+0x14>)
 8008b3e:	2201      	movs	r2, #1
 8008b40:	601a      	str	r2, [r3, #0]
}
 8008b42:	bf00      	nop
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	20001474 	.word	0x20001474

08008b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b58:	f000 f852 	bl	8008c00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b5c:	4b06      	ldr	r3, [pc, #24]	@ (8008b78 <prvIdleTask+0x28>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d9f9      	bls.n	8008b58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b64:	4b05      	ldr	r3, [pc, #20]	@ (8008b7c <prvIdleTask+0x2c>)
 8008b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b74:	e7f0      	b.n	8008b58 <prvIdleTask+0x8>
 8008b76:	bf00      	nop
 8008b78:	20000f90 	.word	0x20000f90
 8008b7c:	e000ed04 	.word	0xe000ed04

08008b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b86:	2300      	movs	r3, #0
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	e00c      	b.n	8008ba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4a12      	ldr	r2, [pc, #72]	@ (8008be0 <prvInitialiseTaskLists+0x60>)
 8008b98:	4413      	add	r3, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fcd6 	bl	800754c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b37      	cmp	r3, #55	@ 0x37
 8008baa:	d9ef      	bls.n	8008b8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bac:	480d      	ldr	r0, [pc, #52]	@ (8008be4 <prvInitialiseTaskLists+0x64>)
 8008bae:	f7fe fccd 	bl	800754c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bb2:	480d      	ldr	r0, [pc, #52]	@ (8008be8 <prvInitialiseTaskLists+0x68>)
 8008bb4:	f7fe fcca 	bl	800754c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bb8:	480c      	ldr	r0, [pc, #48]	@ (8008bec <prvInitialiseTaskLists+0x6c>)
 8008bba:	f7fe fcc7 	bl	800754c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bbe:	480c      	ldr	r0, [pc, #48]	@ (8008bf0 <prvInitialiseTaskLists+0x70>)
 8008bc0:	f7fe fcc4 	bl	800754c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bc4:	480b      	ldr	r0, [pc, #44]	@ (8008bf4 <prvInitialiseTaskLists+0x74>)
 8008bc6:	f7fe fcc1 	bl	800754c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bca:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf8 <prvInitialiseTaskLists+0x78>)
 8008bcc:	4a05      	ldr	r2, [pc, #20]	@ (8008be4 <prvInitialiseTaskLists+0x64>)
 8008bce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <prvInitialiseTaskLists+0x7c>)
 8008bd2:	4a05      	ldr	r2, [pc, #20]	@ (8008be8 <prvInitialiseTaskLists+0x68>)
 8008bd4:	601a      	str	r2, [r3, #0]
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000f90 	.word	0x20000f90
 8008be4:	200013f0 	.word	0x200013f0
 8008be8:	20001404 	.word	0x20001404
 8008bec:	20001420 	.word	0x20001420
 8008bf0:	20001434 	.word	0x20001434
 8008bf4:	2000144c 	.word	0x2000144c
 8008bf8:	20001418 	.word	0x20001418
 8008bfc:	2000141c 	.word	0x2000141c

08008c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c06:	e019      	b.n	8008c3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c08:	f000 fde6 	bl	80097d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c0c:	4b10      	ldr	r3, [pc, #64]	@ (8008c50 <prvCheckTasksWaitingTermination+0x50>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fd21 	bl	8007660 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <prvCheckTasksWaitingTermination+0x54>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	4a0b      	ldr	r2, [pc, #44]	@ (8008c54 <prvCheckTasksWaitingTermination+0x54>)
 8008c26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c28:	4b0b      	ldr	r3, [pc, #44]	@ (8008c58 <prvCheckTasksWaitingTermination+0x58>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008c58 <prvCheckTasksWaitingTermination+0x58>)
 8008c30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c32:	f000 fe03 	bl	800983c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f810 	bl	8008c5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c3c:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <prvCheckTasksWaitingTermination+0x58>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e1      	bne.n	8008c08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20001434 	.word	0x20001434
 8008c54:	20001460 	.word	0x20001460
 8008c58:	20001448 	.word	0x20001448

08008c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d108      	bne.n	8008c80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 ffa0 	bl	8009bb8 <vPortFree>
				vPortFree( pxTCB );
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 ff9d 	bl	8009bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c7e:	e019      	b.n	8008cb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d103      	bne.n	8008c92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 ff94 	bl	8009bb8 <vPortFree>
	}
 8008c90:	e010      	b.n	8008cb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d00b      	beq.n	8008cb4 <prvDeleteTCB+0x58>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	60fb      	str	r3, [r7, #12]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <prvDeleteTCB+0x54>
	}
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <prvResetNextTaskUnblockTime+0x38>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cd4:	e008      	b.n	8008ce8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd6:	4b07      	ldr	r3, [pc, #28]	@ (8008cf4 <prvResetNextTaskUnblockTime+0x38>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a04      	ldr	r2, [pc, #16]	@ (8008cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ce6:	6013      	str	r3, [r2, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	20001418 	.word	0x20001418
 8008cf8:	20001480 	.word	0x20001480

08008cfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d02:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <xTaskGetSchedulerState+0x34>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	e008      	b.n	8008d22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d10:	4b08      	ldr	r3, [pc, #32]	@ (8008d34 <xTaskGetSchedulerState+0x38>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	607b      	str	r3, [r7, #4]
 8008d1c:	e001      	b.n	8008d22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d22:	687b      	ldr	r3, [r7, #4]
	}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	2000146c 	.word	0x2000146c
 8008d34:	20001488 	.word	0x20001488

08008d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d058      	beq.n	8008e00 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8008e0c <xTaskPriorityDisinherit+0xd4>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d00b      	beq.n	8008d70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	60fb      	str	r3, [r7, #12]
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10b      	bne.n	8008d90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60bb      	str	r3, [r7, #8]
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d02c      	beq.n	8008e00 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d128      	bne.n	8008e00 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe fc54 	bl	8007660 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8008e10 <xTaskPriorityDisinherit+0xd8>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d903      	bls.n	8008de0 <xTaskPriorityDisinherit+0xa8>
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8008e10 <xTaskPriorityDisinherit+0xd8>)
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4a09      	ldr	r2, [pc, #36]	@ (8008e14 <xTaskPriorityDisinherit+0xdc>)
 8008dee:	441a      	add	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3304      	adds	r3, #4
 8008df4:	4619      	mov	r1, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	f7fe fbd5 	bl	80075a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e00:	697b      	ldr	r3, [r7, #20]
	}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000f8c 	.word	0x20000f8c
 8008e10:	20001468 	.word	0x20001468
 8008e14:	20000f90 	.word	0x20000f90

08008e18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e22:	4b21      	ldr	r3, [pc, #132]	@ (8008ea8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e28:	4b20      	ldr	r3, [pc, #128]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x94>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fc16 	bl	8007660 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d10a      	bne.n	8008e52 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e42:	4b1a      	ldr	r3, [pc, #104]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x94>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4819      	ldr	r0, [pc, #100]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e4c:	f7fe fbab 	bl	80075a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e50:	e026      	b.n	8008ea0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4413      	add	r3, r2
 8008e58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e5a:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x94>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d209      	bcs.n	8008e7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e6a:	4b12      	ldr	r3, [pc, #72]	@ (8008eb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x94>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f7fe fbb9 	bl	80075ee <vListInsert>
}
 8008e7c:	e010      	b.n	8008ea0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b0a      	ldr	r3, [pc, #40]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x94>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fe fbaf 	bl	80075ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e90:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d202      	bcs.n	8008ea0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e9a:	4a08      	ldr	r2, [pc, #32]	@ (8008ebc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6013      	str	r3, [r2, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20001464 	.word	0x20001464
 8008eac:	20000f8c 	.word	0x20000f8c
 8008eb0:	2000144c 	.word	0x2000144c
 8008eb4:	2000141c 	.word	0x2000141c
 8008eb8:	20001418 	.word	0x20001418
 8008ebc:	20001480 	.word	0x20001480

08008ec0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08a      	sub	sp, #40	@ 0x28
 8008ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008eca:	f000 fb13 	bl	80094f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ece:	4b1d      	ldr	r3, [pc, #116]	@ (8008f44 <xTimerCreateTimerTask+0x84>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d021      	beq.n	8008f1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ede:	1d3a      	adds	r2, r7, #4
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	f107 030c 	add.w	r3, r7, #12
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fb15 	bl	8007518 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	9202      	str	r2, [sp, #8]
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	2302      	movs	r3, #2
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	2300      	movs	r3, #0
 8008efe:	460a      	mov	r2, r1
 8008f00:	4911      	ldr	r1, [pc, #68]	@ (8008f48 <xTimerCreateTimerTask+0x88>)
 8008f02:	4812      	ldr	r0, [pc, #72]	@ (8008f4c <xTimerCreateTimerTask+0x8c>)
 8008f04:	f7ff f8d0 	bl	80080a8 <xTaskCreateStatic>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4a11      	ldr	r2, [pc, #68]	@ (8008f50 <xTimerCreateTimerTask+0x90>)
 8008f0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f0e:	4b10      	ldr	r3, [pc, #64]	@ (8008f50 <xTimerCreateTimerTask+0x90>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f16:	2301      	movs	r3, #1
 8008f18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10b      	bne.n	8008f38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f38:	697b      	ldr	r3, [r7, #20]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	200014bc 	.word	0x200014bc
 8008f48:	08009eb4 	.word	0x08009eb4
 8008f4c:	0800908d 	.word	0x0800908d
 8008f50:	200014c0 	.word	0x200014c0

08008f54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	@ 0x28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10b      	bne.n	8008f84 <xTimerGenericCommand+0x30>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	623b      	str	r3, [r7, #32]
}
 8008f7e:	bf00      	nop
 8008f80:	bf00      	nop
 8008f82:	e7fd      	b.n	8008f80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f84:	4b19      	ldr	r3, [pc, #100]	@ (8008fec <xTimerGenericCommand+0x98>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d02a      	beq.n	8008fe2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	dc18      	bgt.n	8008fd0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f9e:	f7ff fead 	bl	8008cfc <xTaskGetSchedulerState>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d109      	bne.n	8008fbc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fa8:	4b10      	ldr	r3, [pc, #64]	@ (8008fec <xTimerGenericCommand+0x98>)
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	f107 0110 	add.w	r1, r7, #16
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb4:	f7fe fc88 	bl	80078c8 <xQueueGenericSend>
 8008fb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fba:	e012      	b.n	8008fe2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008fec <xTimerGenericCommand+0x98>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	f107 0110 	add.w	r1, r7, #16
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f7fe fc7e 	bl	80078c8 <xQueueGenericSend>
 8008fcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fce:	e008      	b.n	8008fe2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <xTimerGenericCommand+0x98>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	f107 0110 	add.w	r1, r7, #16
 8008fd8:	2300      	movs	r3, #0
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	f7fe fd76 	bl	8007acc <xQueueGenericSendFromISR>
 8008fe0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3728      	adds	r7, #40	@ 0x28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200014bc 	.word	0x200014bc

08008ff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffa:	4b23      	ldr	r3, [pc, #140]	@ (8009088 <prvProcessExpiredTimer+0x98>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fb29 	bl	8007660 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d023      	beq.n	8009064 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	699a      	ldr	r2, [r3, #24]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	18d1      	adds	r1, r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	6978      	ldr	r0, [r7, #20]
 800902a:	f000 f8d5 	bl	80091d8 <prvInsertTimerInActiveList>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d020      	beq.n	8009076 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009034:	2300      	movs	r3, #0
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	2300      	movs	r3, #0
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	2100      	movs	r1, #0
 800903e:	6978      	ldr	r0, [r7, #20]
 8009040:	f7ff ff88 	bl	8008f54 <xTimerGenericCommand>
 8009044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d114      	bne.n	8009076 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	60fb      	str	r3, [r7, #12]
}
 800905e:	bf00      	nop
 8009060:	bf00      	nop
 8009062:	e7fd      	b.n	8009060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	b2da      	uxtb	r2, r3
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	6978      	ldr	r0, [r7, #20]
 800907c:	4798      	blx	r3
}
 800907e:	bf00      	nop
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200014b4 	.word	0x200014b4

0800908c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f859 	bl	8009150 <prvGetNextExpireTime>
 800909e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4619      	mov	r1, r3
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f805 	bl	80090b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090aa:	f000 f8d7 	bl	800925c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090ae:	bf00      	nop
 80090b0:	e7f0      	b.n	8009094 <prvTimerTask+0x8>
	...

080090b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090be:	f7ff fa37 	bl	8008530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f866 	bl	8009198 <prvSampleTimeNow>
 80090cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d130      	bne.n	8009136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <prvProcessTimerOrBlockTask+0x3c>
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d806      	bhi.n	80090f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090e2:	f7ff fa33 	bl	800854c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ff81 	bl	8008ff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ee:	e024      	b.n	800913a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d008      	beq.n	8009108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090f6:	4b13      	ldr	r3, [pc, #76]	@ (8009144 <prvProcessTimerOrBlockTask+0x90>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <prvProcessTimerOrBlockTask+0x50>
 8009100:	2301      	movs	r3, #1
 8009102:	e000      	b.n	8009106 <prvProcessTimerOrBlockTask+0x52>
 8009104:	2300      	movs	r3, #0
 8009106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009108:	4b0f      	ldr	r3, [pc, #60]	@ (8009148 <prvProcessTimerOrBlockTask+0x94>)
 800910a:	6818      	ldr	r0, [r3, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4619      	mov	r1, r3
 8009116:	f7fe ff93 	bl	8008040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800911a:	f7ff fa17 	bl	800854c <xTaskResumeAll>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009124:	4b09      	ldr	r3, [pc, #36]	@ (800914c <prvProcessTimerOrBlockTask+0x98>)
 8009126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	f3bf 8f6f 	isb	sy
}
 8009134:	e001      	b.n	800913a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009136:	f7ff fa09 	bl	800854c <xTaskResumeAll>
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200014b8 	.word	0x200014b8
 8009148:	200014bc 	.word	0x200014bc
 800914c:	e000ed04 	.word	0xe000ed04

08009150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009158:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <prvGetNextExpireTime+0x44>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <prvGetNextExpireTime+0x16>
 8009162:	2201      	movs	r2, #1
 8009164:	e000      	b.n	8009168 <prvGetNextExpireTime+0x18>
 8009166:	2200      	movs	r2, #0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d105      	bne.n	8009180 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009174:	4b07      	ldr	r3, [pc, #28]	@ (8009194 <prvGetNextExpireTime+0x44>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	e001      	b.n	8009184 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	200014b4 	.word	0x200014b4

08009198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091a0:	f7ff fa72 	bl	8008688 <xTaskGetTickCount>
 80091a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091a6:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <prvSampleTimeNow+0x3c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d205      	bcs.n	80091bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091b0:	f000 f93a 	bl	8009428 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091c2:	4a04      	ldr	r2, [pc, #16]	@ (80091d4 <prvSampleTimeNow+0x3c>)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091c8:	68fb      	ldr	r3, [r7, #12]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	200014c4 	.word	0x200014c4

080091d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d812      	bhi.n	8009224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	1ad2      	subs	r2, r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	429a      	cmp	r2, r3
 800920a:	d302      	bcc.n	8009212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800920c:	2301      	movs	r3, #1
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	e01b      	b.n	800924a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009212:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <prvInsertTimerInActiveList+0x7c>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3304      	adds	r3, #4
 800921a:	4619      	mov	r1, r3
 800921c:	4610      	mov	r0, r2
 800921e:	f7fe f9e6 	bl	80075ee <vListInsert>
 8009222:	e012      	b.n	800924a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d206      	bcs.n	800923a <prvInsertTimerInActiveList+0x62>
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d302      	bcc.n	800923a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009234:	2301      	movs	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	e007      	b.n	800924a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800923a:	4b07      	ldr	r3, [pc, #28]	@ (8009258 <prvInsertTimerInActiveList+0x80>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7fe f9d2 	bl	80075ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800924a:	697b      	ldr	r3, [r7, #20]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	200014b8 	.word	0x200014b8
 8009258:	200014b4 	.word	0x200014b4

0800925c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08e      	sub	sp, #56	@ 0x38
 8009260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009262:	e0ce      	b.n	8009402 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da19      	bge.n	800929e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800926a:	1d3b      	adds	r3, r7, #4
 800926c:	3304      	adds	r3, #4
 800926e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10b      	bne.n	800928e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	61fb      	str	r3, [r7, #28]
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800928e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009294:	6850      	ldr	r0, [r2, #4]
 8009296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009298:	6892      	ldr	r2, [r2, #8]
 800929a:	4611      	mov	r1, r2
 800929c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f2c0 80ae 	blt.w	8009402 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b4:	3304      	adds	r3, #4
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe f9d2 	bl	8007660 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092bc:	463b      	mov	r3, r7
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff ff6a 	bl	8009198 <prvSampleTimeNow>
 80092c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	f200 8097 	bhi.w	80093fc <prvProcessReceivedCommands+0x1a0>
 80092ce:	a201      	add	r2, pc, #4	@ (adr r2, 80092d4 <prvProcessReceivedCommands+0x78>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	080092fd 	.word	0x080092fd
 80092e0:	08009373 	.word	0x08009373
 80092e4:	08009387 	.word	0x08009387
 80092e8:	080093d3 	.word	0x080093d3
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	080092fd 	.word	0x080092fd
 80092f4:	08009373 	.word	0x08009373
 80092f8:	08009387 	.word	0x08009387
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	18d1      	adds	r1, r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800931a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800931c:	f7ff ff5c 	bl	80091d8 <prvInsertTimerInActiveList>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d06c      	beq.n	8009400 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800932c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d061      	beq.n	8009400 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	441a      	add	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	2100      	movs	r1, #0
 800934c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800934e:	f7ff fe01 	bl	8008f54 <xTimerGenericCommand>
 8009352:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d152      	bne.n	8009400 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	61bb      	str	r3, [r7, #24]
}
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	e7fd      	b.n	800936e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009380:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009384:	e03d      	b.n	8009402 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800938c:	f043 0301 	orr.w	r3, r3, #1
 8009390:	b2da      	uxtb	r2, r3
 8009392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009394:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10b      	bne.n	80093be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	617b      	str	r3, [r7, #20]
}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	e7fd      	b.n	80093ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	18d1      	adds	r1, r2, r3
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093cc:	f7ff ff04 	bl	80091d8 <prvInsertTimerInActiveList>
					break;
 80093d0:	e017      	b.n	8009402 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80093e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093e2:	f000 fbe9 	bl	8009bb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093e6:	e00c      	b.n	8009402 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093fa:	e002      	b.n	8009402 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <prvProcessReceivedCommands+0x1a6>
					break;
 8009400:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009402:	4b08      	ldr	r3, [pc, #32]	@ (8009424 <prvProcessReceivedCommands+0x1c8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	1d39      	adds	r1, r7, #4
 8009408:	2200      	movs	r2, #0
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fbfc 	bl	8007c08 <xQueueReceive>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	f47f af26 	bne.w	8009264 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	3730      	adds	r7, #48	@ 0x30
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200014bc 	.word	0x200014bc

08009428 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800942e:	e049      	b.n	80094c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009430:	4b2e      	ldr	r3, [pc, #184]	@ (80094ec <prvSwitchTimerLists+0xc4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943a:	4b2c      	ldr	r3, [pc, #176]	@ (80094ec <prvSwitchTimerLists+0xc4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3304      	adds	r3, #4
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe f909 	bl	8007660 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d02f      	beq.n	80094c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	4413      	add	r3, r2
 800946c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	429a      	cmp	r2, r3
 8009474:	d90e      	bls.n	8009494 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009482:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <prvSwitchTimerLists+0xc4>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f7fe f8ae 	bl	80075ee <vListInsert>
 8009492:	e017      	b.n	80094c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009494:	2300      	movs	r3, #0
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	2100      	movs	r1, #0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff fd58 	bl	8008f54 <xTimerGenericCommand>
 80094a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	603b      	str	r3, [r7, #0]
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094c4:	4b09      	ldr	r3, [pc, #36]	@ (80094ec <prvSwitchTimerLists+0xc4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1b0      	bne.n	8009430 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094ce:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <prvSwitchTimerLists+0xc4>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094d4:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <prvSwitchTimerLists+0xc8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a04      	ldr	r2, [pc, #16]	@ (80094ec <prvSwitchTimerLists+0xc4>)
 80094da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094dc:	4a04      	ldr	r2, [pc, #16]	@ (80094f0 <prvSwitchTimerLists+0xc8>)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	6013      	str	r3, [r2, #0]
}
 80094e2:	bf00      	nop
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	200014b4 	.word	0x200014b4
 80094f0:	200014b8 	.word	0x200014b8

080094f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094fa:	f000 f96d 	bl	80097d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094fe:	4b15      	ldr	r3, [pc, #84]	@ (8009554 <prvCheckForValidListAndQueue+0x60>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d120      	bne.n	8009548 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009506:	4814      	ldr	r0, [pc, #80]	@ (8009558 <prvCheckForValidListAndQueue+0x64>)
 8009508:	f7fe f820 	bl	800754c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800950c:	4813      	ldr	r0, [pc, #76]	@ (800955c <prvCheckForValidListAndQueue+0x68>)
 800950e:	f7fe f81d 	bl	800754c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009512:	4b13      	ldr	r3, [pc, #76]	@ (8009560 <prvCheckForValidListAndQueue+0x6c>)
 8009514:	4a10      	ldr	r2, [pc, #64]	@ (8009558 <prvCheckForValidListAndQueue+0x64>)
 8009516:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009518:	4b12      	ldr	r3, [pc, #72]	@ (8009564 <prvCheckForValidListAndQueue+0x70>)
 800951a:	4a10      	ldr	r2, [pc, #64]	@ (800955c <prvCheckForValidListAndQueue+0x68>)
 800951c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800951e:	2300      	movs	r3, #0
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	4b11      	ldr	r3, [pc, #68]	@ (8009568 <prvCheckForValidListAndQueue+0x74>)
 8009524:	4a11      	ldr	r2, [pc, #68]	@ (800956c <prvCheckForValidListAndQueue+0x78>)
 8009526:	2110      	movs	r1, #16
 8009528:	200a      	movs	r0, #10
 800952a:	f7fe f92d 	bl	8007788 <xQueueGenericCreateStatic>
 800952e:	4603      	mov	r3, r0
 8009530:	4a08      	ldr	r2, [pc, #32]	@ (8009554 <prvCheckForValidListAndQueue+0x60>)
 8009532:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009534:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <prvCheckForValidListAndQueue+0x60>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800953c:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <prvCheckForValidListAndQueue+0x60>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	490b      	ldr	r1, [pc, #44]	@ (8009570 <prvCheckForValidListAndQueue+0x7c>)
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe fd52 	bl	8007fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009548:	f000 f978 	bl	800983c <vPortExitCritical>
}
 800954c:	bf00      	nop
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200014bc 	.word	0x200014bc
 8009558:	2000148c 	.word	0x2000148c
 800955c:	200014a0 	.word	0x200014a0
 8009560:	200014b4 	.word	0x200014b4
 8009564:	200014b8 	.word	0x200014b8
 8009568:	20001568 	.word	0x20001568
 800956c:	200014c8 	.word	0x200014c8
 8009570:	08009ebc 	.word	0x08009ebc

08009574 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3b04      	subs	r3, #4
 8009584:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800958c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3b04      	subs	r3, #4
 8009592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3b04      	subs	r3, #4
 80095a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095a4:	4a0c      	ldr	r2, [pc, #48]	@ (80095d8 <pxPortInitialiseStack+0x64>)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3b14      	subs	r3, #20
 80095ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3b04      	subs	r3, #4
 80095ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f06f 0202 	mvn.w	r2, #2
 80095c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3b20      	subs	r3, #32
 80095c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095ca:	68fb      	ldr	r3, [r7, #12]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	080095dd 	.word	0x080095dd

080095dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095e6:	4b13      	ldr	r3, [pc, #76]	@ (8009634 <prvTaskExitError+0x58>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ee:	d00b      	beq.n	8009608 <prvTaskExitError+0x2c>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	60fb      	str	r3, [r7, #12]
}
 8009602:	bf00      	nop
 8009604:	bf00      	nop
 8009606:	e7fd      	b.n	8009604 <prvTaskExitError+0x28>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60bb      	str	r3, [r7, #8]
}
 800961a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800961c:	bf00      	nop
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0fc      	beq.n	800961e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	2000000c 	.word	0x2000000c
	...

08009640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009640:	4b07      	ldr	r3, [pc, #28]	@ (8009660 <pxCurrentTCBConst2>)
 8009642:	6819      	ldr	r1, [r3, #0]
 8009644:	6808      	ldr	r0, [r1, #0]
 8009646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964a:	f380 8809 	msr	PSP, r0
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f04f 0000 	mov.w	r0, #0
 8009656:	f380 8811 	msr	BASEPRI, r0
 800965a:	4770      	bx	lr
 800965c:	f3af 8000 	nop.w

08009660 <pxCurrentTCBConst2>:
 8009660:	20000f8c 	.word	0x20000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop

08009668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009668:	4808      	ldr	r0, [pc, #32]	@ (800968c <prvPortStartFirstTask+0x24>)
 800966a:	6800      	ldr	r0, [r0, #0]
 800966c:	6800      	ldr	r0, [r0, #0]
 800966e:	f380 8808 	msr	MSP, r0
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f380 8814 	msr	CONTROL, r0
 800967a:	b662      	cpsie	i
 800967c:	b661      	cpsie	f
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	df00      	svc	0
 8009688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800968a:	bf00      	nop
 800968c:	e000ed08 	.word	0xe000ed08

08009690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009696:	4b47      	ldr	r3, [pc, #284]	@ (80097b4 <xPortStartScheduler+0x124>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a47      	ldr	r2, [pc, #284]	@ (80097b8 <xPortStartScheduler+0x128>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d10b      	bne.n	80096b8 <xPortStartScheduler+0x28>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	60fb      	str	r3, [r7, #12]
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096b8:	4b3e      	ldr	r3, [pc, #248]	@ (80097b4 <xPortStartScheduler+0x124>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a3f      	ldr	r2, [pc, #252]	@ (80097bc <xPortStartScheduler+0x12c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d10b      	bne.n	80096da <xPortStartScheduler+0x4a>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	613b      	str	r3, [r7, #16]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096da:	4b39      	ldr	r3, [pc, #228]	@ (80097c0 <xPortStartScheduler+0x130>)
 80096dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	22ff      	movs	r2, #255	@ 0xff
 80096ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	4b31      	ldr	r3, [pc, #196]	@ (80097c4 <xPortStartScheduler+0x134>)
 8009700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009702:	4b31      	ldr	r3, [pc, #196]	@ (80097c8 <xPortStartScheduler+0x138>)
 8009704:	2207      	movs	r2, #7
 8009706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009708:	e009      	b.n	800971e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800970a:	4b2f      	ldr	r3, [pc, #188]	@ (80097c8 <xPortStartScheduler+0x138>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3b01      	subs	r3, #1
 8009710:	4a2d      	ldr	r2, [pc, #180]	@ (80097c8 <xPortStartScheduler+0x138>)
 8009712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	b2db      	uxtb	r3, r3
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	b2db      	uxtb	r3, r3
 800971c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009726:	2b80      	cmp	r3, #128	@ 0x80
 8009728:	d0ef      	beq.n	800970a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800972a:	4b27      	ldr	r3, [pc, #156]	@ (80097c8 <xPortStartScheduler+0x138>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1c3 0307 	rsb	r3, r3, #7
 8009732:	2b04      	cmp	r3, #4
 8009734:	d00b      	beq.n	800974e <xPortStartScheduler+0xbe>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	60bb      	str	r3, [r7, #8]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800974e:	4b1e      	ldr	r3, [pc, #120]	@ (80097c8 <xPortStartScheduler+0x138>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	4a1c      	ldr	r2, [pc, #112]	@ (80097c8 <xPortStartScheduler+0x138>)
 8009756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009758:	4b1b      	ldr	r3, [pc, #108]	@ (80097c8 <xPortStartScheduler+0x138>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009760:	4a19      	ldr	r2, [pc, #100]	@ (80097c8 <xPortStartScheduler+0x138>)
 8009762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	b2da      	uxtb	r2, r3
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800976c:	4b17      	ldr	r3, [pc, #92]	@ (80097cc <xPortStartScheduler+0x13c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a16      	ldr	r2, [pc, #88]	@ (80097cc <xPortStartScheduler+0x13c>)
 8009772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009778:	4b14      	ldr	r3, [pc, #80]	@ (80097cc <xPortStartScheduler+0x13c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a13      	ldr	r2, [pc, #76]	@ (80097cc <xPortStartScheduler+0x13c>)
 800977e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009784:	f000 f8da 	bl	800993c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009788:	4b11      	ldr	r3, [pc, #68]	@ (80097d0 <xPortStartScheduler+0x140>)
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800978e:	f000 f8f9 	bl	8009984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009792:	4b10      	ldr	r3, [pc, #64]	@ (80097d4 <xPortStartScheduler+0x144>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a0f      	ldr	r2, [pc, #60]	@ (80097d4 <xPortStartScheduler+0x144>)
 8009798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800979c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800979e:	f7ff ff63 	bl	8009668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097a2:	f7ff f83b 	bl	800881c <vTaskSwitchContext>
	prvTaskExitError();
 80097a6:	f7ff ff19 	bl	80095dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	e000ed00 	.word	0xe000ed00
 80097b8:	410fc271 	.word	0x410fc271
 80097bc:	410fc270 	.word	0x410fc270
 80097c0:	e000e400 	.word	0xe000e400
 80097c4:	200015b8 	.word	0x200015b8
 80097c8:	200015bc 	.word	0x200015bc
 80097cc:	e000ed20 	.word	0xe000ed20
 80097d0:	2000000c 	.word	0x2000000c
 80097d4:	e000ef34 	.word	0xe000ef34

080097d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	607b      	str	r3, [r7, #4]
}
 80097f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097f2:	4b10      	ldr	r3, [pc, #64]	@ (8009834 <vPortEnterCritical+0x5c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3301      	adds	r3, #1
 80097f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009834 <vPortEnterCritical+0x5c>)
 80097fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009834 <vPortEnterCritical+0x5c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d110      	bne.n	8009826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009804:	4b0c      	ldr	r3, [pc, #48]	@ (8009838 <vPortEnterCritical+0x60>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <vPortEnterCritical+0x4e>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	603b      	str	r3, [r7, #0]
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	e7fd      	b.n	8009822 <vPortEnterCritical+0x4a>
	}
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	2000000c 	.word	0x2000000c
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009842:	4b12      	ldr	r3, [pc, #72]	@ (800988c <vPortExitCritical+0x50>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <vPortExitCritical+0x26>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	607b      	str	r3, [r7, #4]
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	e7fd      	b.n	800985e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009862:	4b0a      	ldr	r3, [pc, #40]	@ (800988c <vPortExitCritical+0x50>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3b01      	subs	r3, #1
 8009868:	4a08      	ldr	r2, [pc, #32]	@ (800988c <vPortExitCritical+0x50>)
 800986a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800986c:	4b07      	ldr	r3, [pc, #28]	@ (800988c <vPortExitCritical+0x50>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <vPortExitCritical+0x44>
 8009874:	2300      	movs	r3, #0
 8009876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f383 8811 	msr	BASEPRI, r3
}
 800987e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	2000000c 	.word	0x2000000c

08009890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009890:	f3ef 8009 	mrs	r0, PSP
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	4b15      	ldr	r3, [pc, #84]	@ (80098f0 <pxCurrentTCBConst>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	f01e 0f10 	tst.w	lr, #16
 80098a0:	bf08      	it	eq
 80098a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098aa:	6010      	str	r0, [r2, #0]
 80098ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098b4:	f380 8811 	msr	BASEPRI, r0
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f7fe ffac 	bl	800881c <vTaskSwitchContext>
 80098c4:	f04f 0000 	mov.w	r0, #0
 80098c8:	f380 8811 	msr	BASEPRI, r0
 80098cc:	bc09      	pop	{r0, r3}
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	6808      	ldr	r0, [r1, #0]
 80098d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d6:	f01e 0f10 	tst.w	lr, #16
 80098da:	bf08      	it	eq
 80098dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098e0:	f380 8809 	msr	PSP, r0
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w

080098f0 <pxCurrentTCBConst>:
 80098f0:	20000f8c 	.word	0x20000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop

080098f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	607b      	str	r3, [r7, #4]
}
 8009910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009912:	f7fe fec9 	bl	80086a8 <xTaskIncrementTick>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800991c:	4b06      	ldr	r3, [pc, #24]	@ (8009938 <xPortSysTickHandler+0x40>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f383 8811 	msr	BASEPRI, r3
}
 800992e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009940:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <vPortSetupTimerInterrupt+0x34>)
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009946:	4b0b      	ldr	r3, [pc, #44]	@ (8009974 <vPortSetupTimerInterrupt+0x38>)
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800994c:	4b0a      	ldr	r3, [pc, #40]	@ (8009978 <vPortSetupTimerInterrupt+0x3c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a0a      	ldr	r2, [pc, #40]	@ (800997c <vPortSetupTimerInterrupt+0x40>)
 8009952:	fba2 2303 	umull	r2, r3, r2, r3
 8009956:	099b      	lsrs	r3, r3, #6
 8009958:	4a09      	ldr	r2, [pc, #36]	@ (8009980 <vPortSetupTimerInterrupt+0x44>)
 800995a:	3b01      	subs	r3, #1
 800995c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800995e:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <vPortSetupTimerInterrupt+0x34>)
 8009960:	2207      	movs	r2, #7
 8009962:	601a      	str	r2, [r3, #0]
}
 8009964:	bf00      	nop
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	e000e010 	.word	0xe000e010
 8009974:	e000e018 	.word	0xe000e018
 8009978:	20000000 	.word	0x20000000
 800997c:	10624dd3 	.word	0x10624dd3
 8009980:	e000e014 	.word	0xe000e014

08009984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009994 <vPortEnableVFP+0x10>
 8009988:	6801      	ldr	r1, [r0, #0]
 800998a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800998e:	6001      	str	r1, [r0, #0]
 8009990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009992:	bf00      	nop
 8009994:	e000ed88 	.word	0xe000ed88

08009998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b0f      	cmp	r3, #15
 80099a8:	d915      	bls.n	80099d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099aa:	4a18      	ldr	r2, [pc, #96]	@ (8009a0c <vPortValidateInterruptPriority+0x74>)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099b4:	4b16      	ldr	r3, [pc, #88]	@ (8009a10 <vPortValidateInterruptPriority+0x78>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	7afa      	ldrb	r2, [r7, #11]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d20b      	bcs.n	80099d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	607b      	str	r3, [r7, #4]
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	e7fd      	b.n	80099d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a14 <vPortValidateInterruptPriority+0x7c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099de:	4b0e      	ldr	r3, [pc, #56]	@ (8009a18 <vPortValidateInterruptPriority+0x80>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d90b      	bls.n	80099fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	603b      	str	r3, [r7, #0]
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	e7fd      	b.n	80099fa <vPortValidateInterruptPriority+0x62>
	}
 80099fe:	bf00      	nop
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	e000e3f0 	.word	0xe000e3f0
 8009a10:	200015b8 	.word	0x200015b8
 8009a14:	e000ed0c 	.word	0xe000ed0c
 8009a18:	200015bc 	.word	0x200015bc

08009a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	@ 0x28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a28:	f7fe fd82 	bl	8008530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ba0 <pvPortMalloc+0x184>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a34:	f000 f924 	bl	8009c80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba4 <pvPortMalloc+0x188>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 8095 	bne.w	8009b70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01e      	beq.n	8009a8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f003 0307 	and.w	r3, r3, #7
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d015      	beq.n	8009a8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f023 0307 	bic.w	r3, r3, #7
 8009a64:	3308      	adds	r3, #8
 8009a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00b      	beq.n	8009a8a <pvPortMalloc+0x6e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	617b      	str	r3, [r7, #20]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d06f      	beq.n	8009b70 <pvPortMalloc+0x154>
 8009a90:	4b45      	ldr	r3, [pc, #276]	@ (8009ba8 <pvPortMalloc+0x18c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d86a      	bhi.n	8009b70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a9a:	4b44      	ldr	r3, [pc, #272]	@ (8009bac <pvPortMalloc+0x190>)
 8009a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a9e:	4b43      	ldr	r3, [pc, #268]	@ (8009bac <pvPortMalloc+0x190>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aa4:	e004      	b.n	8009ab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d903      	bls.n	8009ac2 <pvPortMalloc+0xa6>
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f1      	bne.n	8009aa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ac2:	4b37      	ldr	r3, [pc, #220]	@ (8009ba0 <pvPortMalloc+0x184>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d051      	beq.n	8009b70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	4413      	add	r3, r2
 8009ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	1ad2      	subs	r2, r2, r3
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d920      	bls.n	8009b30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4413      	add	r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <pvPortMalloc+0xfc>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b2a:	69b8      	ldr	r0, [r7, #24]
 8009b2c:	f000 f90a 	bl	8009d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ba8 <pvPortMalloc+0x18c>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ba8 <pvPortMalloc+0x18c>)
 8009b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba8 <pvPortMalloc+0x18c>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb0 <pvPortMalloc+0x194>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d203      	bcs.n	8009b52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ba8 <pvPortMalloc+0x18c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a18      	ldr	r2, [pc, #96]	@ (8009bb0 <pvPortMalloc+0x194>)
 8009b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	4b13      	ldr	r3, [pc, #76]	@ (8009ba4 <pvPortMalloc+0x188>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b66:	4b13      	ldr	r3, [pc, #76]	@ (8009bb4 <pvPortMalloc+0x198>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	4a11      	ldr	r2, [pc, #68]	@ (8009bb4 <pvPortMalloc+0x198>)
 8009b6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b70:	f7fe fcec 	bl	800854c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	f003 0307 	and.w	r3, r3, #7
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00b      	beq.n	8009b96 <pvPortMalloc+0x17a>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	60fb      	str	r3, [r7, #12]
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	e7fd      	b.n	8009b92 <pvPortMalloc+0x176>
	return pvReturn;
 8009b96:	69fb      	ldr	r3, [r7, #28]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3728      	adds	r7, #40	@ 0x28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20003cd8 	.word	0x20003cd8
 8009ba4:	20003cec 	.word	0x20003cec
 8009ba8:	20003cdc 	.word	0x20003cdc
 8009bac:	20003cd0 	.word	0x20003cd0
 8009bb0:	20003ce0 	.word	0x20003ce0
 8009bb4:	20003ce4 	.word	0x20003ce4

08009bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d04f      	beq.n	8009c6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bca:	2308      	movs	r3, #8
 8009bcc:	425b      	negs	r3, r3
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4b25      	ldr	r3, [pc, #148]	@ (8009c74 <vPortFree+0xbc>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4013      	ands	r3, r2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <vPortFree+0x46>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <vPortFree+0x66>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60bb      	str	r3, [r7, #8]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	4b14      	ldr	r3, [pc, #80]	@ (8009c74 <vPortFree+0xbc>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4013      	ands	r3, r2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d01e      	beq.n	8009c6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11a      	bne.n	8009c6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	4b0e      	ldr	r3, [pc, #56]	@ (8009c74 <vPortFree+0xbc>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	43db      	mvns	r3, r3
 8009c3e:	401a      	ands	r2, r3
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c44:	f7fe fc74 	bl	8008530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c78 <vPortFree+0xc0>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4413      	add	r3, r2
 8009c52:	4a09      	ldr	r2, [pc, #36]	@ (8009c78 <vPortFree+0xc0>)
 8009c54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c56:	6938      	ldr	r0, [r7, #16]
 8009c58:	f000 f874 	bl	8009d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c5c:	4b07      	ldr	r3, [pc, #28]	@ (8009c7c <vPortFree+0xc4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3301      	adds	r3, #1
 8009c62:	4a06      	ldr	r2, [pc, #24]	@ (8009c7c <vPortFree+0xc4>)
 8009c64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c66:	f7fe fc71 	bl	800854c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c6a:	bf00      	nop
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20003cec 	.word	0x20003cec
 8009c78:	20003cdc 	.word	0x20003cdc
 8009c7c:	20003ce8 	.word	0x20003ce8

08009c80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c86:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009c8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c8c:	4b27      	ldr	r3, [pc, #156]	@ (8009d2c <prvHeapInit+0xac>)
 8009c8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3307      	adds	r3, #7
 8009c9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	4a1f      	ldr	r2, [pc, #124]	@ (8009d2c <prvHeapInit+0xac>)
 8009cb0:	4413      	add	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d30 <prvHeapInit+0xb0>)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8009d30 <prvHeapInit+0xb0>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	4413      	add	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ccc:	2208      	movs	r2, #8
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a15      	ldr	r2, [pc, #84]	@ (8009d34 <prvHeapInit+0xb4>)
 8009ce0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ce2:	4b14      	ldr	r3, [pc, #80]	@ (8009d34 <prvHeapInit+0xb4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cea:	4b12      	ldr	r3, [pc, #72]	@ (8009d34 <prvHeapInit+0xb4>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	1ad2      	subs	r2, r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d00:	4b0c      	ldr	r3, [pc, #48]	@ (8009d34 <prvHeapInit+0xb4>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d38 <prvHeapInit+0xb8>)
 8009d0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4a09      	ldr	r2, [pc, #36]	@ (8009d3c <prvHeapInit+0xbc>)
 8009d16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d18:	4b09      	ldr	r3, [pc, #36]	@ (8009d40 <prvHeapInit+0xc0>)
 8009d1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d1e:	601a      	str	r2, [r3, #0]
}
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	200015c0 	.word	0x200015c0
 8009d30:	20003cd0 	.word	0x20003cd0
 8009d34:	20003cd8 	.word	0x20003cd8
 8009d38:	20003ce0 	.word	0x20003ce0
 8009d3c:	20003cdc 	.word	0x20003cdc
 8009d40:	20003cec 	.word	0x20003cec

08009d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d4c:	4b28      	ldr	r3, [pc, #160]	@ (8009df0 <prvInsertBlockIntoFreeList+0xac>)
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e002      	b.n	8009d58 <prvInsertBlockIntoFreeList+0x14>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d8f7      	bhi.n	8009d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d108      	bne.n	8009d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	441a      	add	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	441a      	add	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d118      	bne.n	8009dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b15      	ldr	r3, [pc, #84]	@ (8009df4 <prvInsertBlockIntoFreeList+0xb0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d00d      	beq.n	8009dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	441a      	add	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	e008      	b.n	8009dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009df4 <prvInsertBlockIntoFreeList+0xb0>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e003      	b.n	8009dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d002      	beq.n	8009de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20003cd0 	.word	0x20003cd0
 8009df4:	20003cd8 	.word	0x20003cd8

08009df8 <memset>:
 8009df8:	4402      	add	r2, r0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d100      	bne.n	8009e02 <memset+0xa>
 8009e00:	4770      	bx	lr
 8009e02:	f803 1b01 	strb.w	r1, [r3], #1
 8009e06:	e7f9      	b.n	8009dfc <memset+0x4>

08009e08 <__libc_init_array>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e40 <__libc_init_array+0x38>)
 8009e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e44 <__libc_init_array+0x3c>)
 8009e0e:	1b64      	subs	r4, r4, r5
 8009e10:	10a4      	asrs	r4, r4, #2
 8009e12:	2600      	movs	r6, #0
 8009e14:	42a6      	cmp	r6, r4
 8009e16:	d109      	bne.n	8009e2c <__libc_init_array+0x24>
 8009e18:	4d0b      	ldr	r5, [pc, #44]	@ (8009e48 <__libc_init_array+0x40>)
 8009e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e4c <__libc_init_array+0x44>)
 8009e1c:	f000 f826 	bl	8009e6c <_init>
 8009e20:	1b64      	subs	r4, r4, r5
 8009e22:	10a4      	asrs	r4, r4, #2
 8009e24:	2600      	movs	r6, #0
 8009e26:	42a6      	cmp	r6, r4
 8009e28:	d105      	bne.n	8009e36 <__libc_init_array+0x2e>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e30:	4798      	blx	r3
 8009e32:	3601      	adds	r6, #1
 8009e34:	e7ee      	b.n	8009e14 <__libc_init_array+0xc>
 8009e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3a:	4798      	blx	r3
 8009e3c:	3601      	adds	r6, #1
 8009e3e:	e7f2      	b.n	8009e26 <__libc_init_array+0x1e>
 8009e40:	08009f80 	.word	0x08009f80
 8009e44:	08009f80 	.word	0x08009f80
 8009e48:	08009f80 	.word	0x08009f80
 8009e4c:	08009f84 	.word	0x08009f84

08009e50 <memcpy>:
 8009e50:	440a      	add	r2, r1
 8009e52:	4291      	cmp	r1, r2
 8009e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e58:	d100      	bne.n	8009e5c <memcpy+0xc>
 8009e5a:	4770      	bx	lr
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e66:	4291      	cmp	r1, r2
 8009e68:	d1f9      	bne.n	8009e5e <memcpy+0xe>
 8009e6a:	bd10      	pop	{r4, pc}

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
