
EPSPD_STM32L496VGTRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd20  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800ced0  0800ced0  0000ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d268  0800d268  0000f218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d268  0800d268  0000e268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d270  0800d270  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d270  0800d270  0000e270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d274  0800d274  0000e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800d278  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f18  20000218  0800d490  0000f218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004130  0800d490  00010130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b5b9  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000594a  00000000  00000000  0003a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  00040150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc7  00000000  00000000  00042498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030834  00000000  00000000  0004405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc87  00000000  00000000  00074893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126689  00000000  00000000  000a051a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c6ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cd8  00000000  00000000  001c6be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001d08c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ceb8 	.word	0x0800ceb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	0800ceb8 	.word	0x0800ceb8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <EPS_Log_Message>:

void EPS_Log_SetLevel(EPS_LogLevel level) {
    current_log_level = level;
}

void EPS_Log_Message(EPS_LogLevel level, const char *format, ...) {
 8000da8:	b40e      	push	{r1, r2, r3}
 8000daa:	b590      	push	{r4, r7, lr}
 8000dac:	b0cc      	sub	sp, #304	@ 0x130
 8000dae:	af04      	add	r7, sp, #16
 8000db0:	4602      	mov	r2, r0
 8000db2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000db6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dba:	701a      	strb	r2, [r3, #0]
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <EPS_Log_Message+0x10c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000dc4:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d867      	bhi.n	8000e9e <EPS_Log_Message+0xf6>
 8000dce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dd2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d060      	beq.n	8000e9e <EPS_Log_Message+0xf6>

    char buffer[LOG_BUFFER_SIZE];
    int offset = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    uint64_t counter;
    uint32_t subtick;
    GetSyncTimestamp(&counter, &subtick);
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fd15 	bl	800181c <GetSyncTimestamp>

    offset += snprintf(buffer, LOG_BUFFER_SIZE, "%s[%llu.%06lu] ",
 8000df2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000df6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <EPS_Log_Message+0x110>)
 8000dfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e06:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000e0a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000e0e:	6809      	ldr	r1, [r1, #0]
 8000e10:	f107 0018 	add.w	r0, r7, #24
 8000e14:	9102      	str	r1, [sp, #8]
 8000e16:	e9cd 2300 	strd	r2, r3, [sp]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <EPS_Log_Message+0x114>)
 8000e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e22:	f00b fb39 	bl	800c498 <sniprintf>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                       log_prefixes[level], counter, (unsigned long)subtick);

    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db33      	blt.n	8000ea2 <EPS_Log_Message+0xfa>
 8000e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e3e:	2bff      	cmp	r3, #255	@ 0xff
 8000e40:	dc2f      	bgt.n	8000ea2 <EPS_Log_Message+0xfa>

    va_list args;
    va_start(args, format);
 8000e42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e4e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, LOG_BUFFER_SIZE - offset, format, args);
 8000e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e54:	f107 0218 	add.w	r2, r7, #24
 8000e58:	18d0      	adds	r0, r2, r3
 8000e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e5e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e62:	4619      	mov	r1, r3
 8000e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e72:	f00b fb75 	bl	800c560 <vsniprintf>
    va_end(args);

    size_t msg_len = strnlen(buffer, LOG_BUFFER_SIZE);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00b fb97 	bl	800c5b2 <strnlen>
 8000e84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, msg_len, HAL_MAX_DELAY);
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0118 	add.w	r1, r7, #24
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <EPS_Log_Message+0x118>)
 8000e98:	f007 f9fe 	bl	8008298 <HAL_UART_Transmit>
 8000e9c:	e002      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000ea2:	bf00      	nop
}
 8000ea4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000eae:	b003      	add	sp, #12
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000018 	.word	0x20000018
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	0800cefc 	.word	0x0800cefc
 8000ec0:	20000868 	.word	0x20000868

08000ec4 <software_delay_start>:
#include "delay.h" // Include the header file for software delay functions
#include "stm32l4xx_hal.h" // Include HAL library for STM32



static inline void software_delay_start(SoftwareDelay_t* timer, uint32_t delay_ms) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    timer->start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <software_delay_start+0x28>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
    timer->delay_ms = delay_ms;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000784 	.word	0x20000784

08000ef0 <software_delay_elapsed>:

static inline uint8_t software_delay_elapsed(SoftwareDelay_t* timer) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    uint32_t elapsed_us = (__HAL_TIM_GET_COUNTER(&htim2) - timer->start_time);
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <software_delay_elapsed+0x3c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	60fb      	str	r3, [r7, #12]
    return (elapsed_us >= (timer->delay_ms * 1000));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	bf2c      	ite	cs
 8000f18:	2301      	movcs	r3, #1
 8000f1a:	2300      	movcc	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000784 	.word	0x20000784

08000f30 <SoftwareDelay>:

void SoftwareDelay(uint32_t delay_ms) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    SoftwareDelay_t timer;
    software_delay_start(&timer, delay_ms);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffc0 	bl	8000ec4 <software_delay_start>
    while (!software_delay_elapsed(&timer));
 8000f44:	bf00      	nop
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffd0 	bl	8000ef0 <software_delay_elapsed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f7      	beq.n	8000f46 <SoftwareDelay+0x16>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <epspd_WriteTelemetry>:
//   - Returns HAL_StatusTypeDef, HAL_OK if write succeeds, HAL_ERROR if it fails
// Significance:
//   - Writes telemetry data (12V, 5V, 3.3V bus voltages, subtick, and sync counter) to EEPROM, ensuring persistent storage across power cycles. Called by telemetry.c to save data periodically.
// Function:
HAL_StatusTypeDef epspd_WriteTelemetry(I2C_HandleTypeDef *hi2c, EEPROM_TelemetryWithTimestamp *telemetry)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    // Declare a 20-byte buffer for I2C transmission (2 bytes address + 18 bytes data)
    uint8_t buffer[20]; // Increased to 20 bytes (2 address + 18 data)
    // Set high byte of telemetry address
    buffer[0] = epspd_ADDR_TELEMETRY >> 8;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	723b      	strb	r3, [r7, #8]
    // Set low byte of telemetry address
    buffer[1] = epspd_ADDR_TELEMETRY & 0xFF;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	727b      	strb	r3, [r7, #9]
    // Store high byte of 12V bus voltage (uint16_t, shift right by 8)
    buffer[2] = (uint8_t)(telemetry->telemetry.Bus12V >> 8);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	0a1b      	lsrs	r3, r3, #8
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	72bb      	strb	r3, [r7, #10]
    // Store low byte of 12V bus voltage
    buffer[3] = (uint8_t)(telemetry->telemetry.Bus12V);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	72fb      	strb	r3, [r7, #11]
    // Store high byte of 5V bus voltage
    buffer[4] = (uint8_t)(telemetry->telemetry.Bus5V >> 8);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	733b      	strb	r3, [r7, #12]
    // Store low byte of 5V bus voltage
    buffer[5] = (uint8_t)(telemetry->telemetry.Bus5V);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	885b      	ldrh	r3, [r3, #2]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	737b      	strb	r3, [r7, #13]
    // Store high byte of 3.3V bus voltage
    buffer[6] = (uint8_t)(telemetry->telemetry.Bus3V3 >> 8);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	889b      	ldrh	r3, [r3, #4]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	73bb      	strb	r3, [r7, #14]
    // Store low byte of 3.3V bus voltage
    buffer[7] = (uint8_t)(telemetry->telemetry.Bus3V3);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	889b      	ldrh	r3, [r3, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
    // Store byte 3 of subtick_us (uint32_t, shift right by 24)
    buffer[8] = (uint8_t)(telemetry->telemetry.subtick_us >> 24);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	0e1b      	lsrs	r3, r3, #24
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	743b      	strb	r3, [r7, #16]
    // Store byte 2 of subtick_us
    buffer[9] = (uint8_t)(telemetry->telemetry.subtick_us >> 16);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	747b      	strb	r3, [r7, #17]
    // Store byte 1 of subtick_us
    buffer[10] = (uint8_t)(telemetry->telemetry.subtick_us >> 8);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	74bb      	strb	r3, [r7, #18]
    // Store byte 0 of subtick_us
    buffer[11] = (uint8_t)(telemetry->telemetry.subtick_us);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	74fb      	strb	r3, [r7, #19]
    // Store byte 7 of sync counter (uint64_t, shift right by 56)
    buffer[12] = (uint8_t)(telemetry->counter >> 56);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	0e0a      	lsrs	r2, r1, #24
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b2d3      	uxtb	r3, r2
 8000fe8:	753b      	strb	r3, [r7, #20]
    // Store byte 6 of sync counter
    buffer[13] = (uint8_t)(telemetry->counter >> 48);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	0c0a      	lsrs	r2, r1, #16
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	b2d3      	uxtb	r3, r2
 8000ffe:	757b      	strb	r3, [r7, #21]
    // Store byte 5 of sync counter
    buffer[14] = (uint8_t)(telemetry->counter >> 40);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	0a0a      	lsrs	r2, r1, #8
 8001010:	2300      	movs	r3, #0
 8001012:	b2d3      	uxtb	r3, r2
 8001014:	75bb      	strb	r3, [r7, #22]
    // Store byte 4 of sync counter
    buffer[15] = (uint8_t)(telemetry->counter >> 32);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	000a      	movs	r2, r1
 8001026:	2300      	movs	r3, #0
 8001028:	b2d3      	uxtb	r3, r2
 800102a:	75fb      	strb	r3, [r7, #23]
    // Store byte 3 of sync counter
    buffer[16] = (uint8_t)(telemetry->counter >> 24);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	0e02      	lsrs	r2, r0, #24
 800103c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001040:	0e0b      	lsrs	r3, r1, #24
 8001042:	b2d3      	uxtb	r3, r2
 8001044:	763b      	strb	r3, [r7, #24]
    // Store byte 2 of sync counter
    buffer[17] = (uint8_t)(telemetry->counter >> 16);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	0c02      	lsrs	r2, r0, #16
 8001056:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105a:	0c0b      	lsrs	r3, r1, #16
 800105c:	b2d3      	uxtb	r3, r2
 800105e:	767b      	strb	r3, [r7, #25]
    // Store byte 1 of sync counter
    buffer[18] = (uint8_t)(telemetry->counter >> 8);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	0a02      	lsrs	r2, r0, #8
 8001070:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001074:	0a0b      	lsrs	r3, r1, #8
 8001076:	b2d3      	uxtb	r3, r2
 8001078:	76bb      	strb	r3, [r7, #26]
    // Store byte 0 of sync counter
    buffer[19] = (uint8_t)(telemetry->counter);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001080:	b2d3      	uxtb	r3, r2
 8001082:	76fb      	strb	r3, [r7, #27]

    // Write the buffer to the EEPROM’s memory address (shifted left by 1 for HAL)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, epspd_I2C_ADDR_MEMORY << 1, buffer, 20, 100);
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2314      	movs	r3, #20
 800108e:	21a0      	movs	r1, #160	@ 0xa0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f004 fae3 	bl	800565c <HAL_I2C_Master_Transmit>
 8001096:	4603      	mov	r3, r0
 8001098:	77fb      	strb	r3, [r7, #31]
    // If write succeeds, wait 4ms for EEPROM write cycle
    if (status == HAL_OK) {
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <epspd_WriteTelemetry+0x146>
    	SoftwareDelay(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff ff45 	bl	8000f30 <SoftwareDelay>
    }
    // Return the write status
    return status;
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <EPS_LogFault>:
} FaultState;

static FaultState fault_states[sizeof(fault_config) / sizeof(FaultConfig)];
static uint8_t fault_log_index = 0;

void EPS_LogFault(I2C_HandleTypeDef *hi2c, const char *desc, uint8_t subsystem_id, uint8_t retry_count) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a2      	sub	sp, #136	@ 0x88
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71bb      	strb	r3, [r7, #6]
    EEPROM_FaultLog log;
    memset(&log, 0, sizeof(log));
 80010c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ca:	2230      	movs	r2, #48	@ 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00b fa54 	bl	800c57c <memset>
    log.subsystem_id = subsystem_id;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    log.retry_count = retry_count;
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    strncpy(log.description, desc, FAULT_DESC_LEN - 1);
 80010e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010e4:	330e      	adds	r3, #14
 80010e6:	221f      	movs	r2, #31
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00b fa4e 	bl	800c58c <strncpy>
    GetSyncTimestamp(&log.counter, &log.subtick_us);
 80010f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010f4:	f103 0208 	add.w	r2, r3, #8
 80010f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fb8c 	bl	800181c <GetSyncTimestamp>

    uint16_t eeprom_addr = FAULT_LOG_START_ADDR + (fault_log_index * FAULT_LOG_SIZE);
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <EPS_LogFault+0xd8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	4413      	add	r3, r2
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	b29b      	uxth	r3, r3
 8001112:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001116:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t buffer[2 + FAULT_LOG_SIZE];
    buffer[0] = eeprom_addr >> 8;
 800111a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	753b      	strb	r3, [r7, #20]
    buffer[1] = eeprom_addr & 0xFF;
 8001126:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800112a:	b2db      	uxtb	r3, r3
 800112c:	757b      	strb	r3, [r7, #21]
    memcpy(&buffer[2], &log, FAULT_LOG_SIZE);
 800112e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	3302      	adds	r3, #2
 8001138:	2230      	movs	r2, #48	@ 0x30
 800113a:	4618      	mov	r0, r3
 800113c:	f00b fa72 	bl	800c624 <memcpy>

    if (HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDR, buffer, sizeof(buffer), 100) == HAL_OK) {
 8001140:	f107 0214 	add.w	r2, r7, #20
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2332      	movs	r3, #50	@ 0x32
 800114a:	21a0      	movs	r1, #160	@ 0xa0
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f004 fa85 	bl	800565c <HAL_I2C_Master_Transmit>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d113      	bne.n	8001180 <EPS_LogFault+0xd0>
        SoftwareDelay(4);
 8001158:	2004      	movs	r0, #4
 800115a:	f7ff fee9 	bl	8000f30 <SoftwareDelay>
        fault_log_index = (fault_log_index + 1) % MAX_FAULT_LOGS;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <EPS_LogFault+0xd8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <EPS_LogFault+0xdc>)
 8001166:	fb83 1302 	smull	r1, r3, r3, r2
 800116a:	10d9      	asrs	r1, r3, #3
 800116c:	17d3      	asrs	r3, r2, #31
 800116e:	1ac9      	subs	r1, r1, r3
 8001170:	460b      	mov	r3, r1
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	1ad1      	subs	r1, r2, r3
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	4b02      	ldr	r3, [pc, #8]	@ (8001188 <EPS_LogFault+0xd8>)
 800117e:	701a      	strb	r2, [r3, #0]
    }
}
 8001180:	bf00      	nop
 8001182:	3780      	adds	r7, #128	@ 0x80
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000029c 	.word	0x2000029c
 800118c:	66666667 	.word	0x66666667

08001190 <Fault_PollAndHandle>:

void Fault_PollAndHandle(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart_log) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	@ 0x58
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    uint32_t now = HAL_GetTick();
 800119a:	f002 fa69 	bl	8003670 <HAL_GetTick>
 800119e:	6538      	str	r0, [r7, #80]	@ 0x50

    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80011a6:	e168      	b.n	800147a <Fault_PollAndHandle+0x2ea>
        GPIO_PinState state = HAL_GPIO_ReadPin(fault_config[i].fault_port, fault_config[i].fault_pin);
 80011a8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80011ac:	49b8      	ldr	r1, [pc, #736]	@ (8001490 <Fault_PollAndHandle+0x300>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	440b      	add	r3, r1
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80011be:	49b4      	ldr	r1, [pc, #720]	@ (8001490 <Fault_PollAndHandle+0x300>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3304      	adds	r3, #4
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f004 f956 	bl	8005480 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 80011da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d153      	bne.n	800128a <Fault_PollAndHandle+0xfa>
 80011e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011e6:	4aab      	ldr	r2, [pc, #684]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80011e8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d049      	beq.n	800128a <Fault_PollAndHandle+0xfa>
            // Fault detected
            fault_states[i].is_active = true;
 80011f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011fa:	4aa6      	ldr	r2, [pc, #664]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            fault_states[i].retry_count = 0;
 8001202:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001206:	4aa3      	ldr	r2, [pc, #652]	@ (8001494 <Fault_PollAndHandle+0x304>)
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 8001210:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001214:	4a9f      	ldr	r2, [pc, #636]	@ (8001494 <Fault_PollAndHandle+0x304>)
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800121c:	605a      	str	r2, [r3, #4]
            EPS_LogFault(hi2c, fault_config[i].description, fault_config[i].subsystem_id, 0);
 800121e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001222:	499b      	ldr	r1, [pc, #620]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	3310      	adds	r3, #16
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001236:	4896      	ldr	r0, [pc, #600]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4403      	add	r3, r0
 8001242:	3314      	adds	r3, #20
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff31 	bl	80010b0 <EPS_LogFault>

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Detected\n", fault_config[i].description);
 800124e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001252:	498f      	ldr	r1, [pc, #572]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3310      	adds	r3, #16
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f107 000c 	add.w	r0, r7, #12
 8001266:	4a8c      	ldr	r2, [pc, #560]	@ (8001498 <Fault_PollAndHandle+0x308>)
 8001268:	2140      	movs	r1, #64	@ 0x40
 800126a:	f00b f915 	bl	800c498 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4618      	mov	r0, r3
 8001274:	f7fe ffbc 	bl	80001f0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 010c 	add.w	r1, r7, #12
 8001280:	2364      	movs	r3, #100	@ 0x64
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f007 f808 	bl	8008298 <HAL_UART_Transmit>
        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 8001288:	e0f2      	b.n	8001470 <Fault_PollAndHandle+0x2e0>

        } else if (state == GPIO_PIN_SET && fault_states[i].is_active) {
 800128a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800128e:	2b01      	cmp	r3, #1
 8001290:	d135      	bne.n	80012fe <Fault_PollAndHandle+0x16e>
 8001292:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001296:	4a7f      	ldr	r2, [pc, #508]	@ (8001494 <Fault_PollAndHandle+0x304>)
 8001298:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d02e      	beq.n	80012fe <Fault_PollAndHandle+0x16e>
            if (now - fault_states[i].last_fault_time > 5) {
 80012a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012a4:	4a7b      	ldr	r2, [pc, #492]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	f240 80dd 	bls.w	8001470 <Fault_PollAndHandle+0x2e0>
                fault_states[i].is_active = false;
 80012b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012ba:	4a76      	ldr	r2, [pc, #472]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80012bc:	2100      	movs	r1, #0
 80012be:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

                char msg[64];
                snprintf(msg, sizeof(msg), "%s Fault Cleared\n", fault_config[i].description);
 80012c2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80012c6:	4972      	ldr	r1, [pc, #456]	@ (8001490 <Fault_PollAndHandle+0x300>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3310      	adds	r3, #16
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f107 000c 	add.w	r0, r7, #12
 80012da:	4a70      	ldr	r2, [pc, #448]	@ (800149c <Fault_PollAndHandle+0x30c>)
 80012dc:	2140      	movs	r1, #64	@ 0x40
 80012de:	f00b f8db 	bl	800c498 <sniprintf>
                HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff82 	bl	80001f0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f107 010c 	add.w	r1, r7, #12
 80012f4:	2364      	movs	r3, #100	@ 0x64
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f006 ffce 	bl	8008298 <HAL_UART_Transmit>
            if (now - fault_states[i].last_fault_time > 5) {
 80012fc:	e0b8      	b.n	8001470 <Fault_PollAndHandle+0x2e0>
            }

        } else if (fault_states[i].is_active && fault_states[i].retry_count < 5 && fault_config[i].en_port) {
 80012fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001302:	4a64      	ldr	r2, [pc, #400]	@ (8001494 <Fault_PollAndHandle+0x304>)
 8001304:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <Fault_PollAndHandle+0x234>
 800130c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001310:	4a60      	ldr	r2, [pc, #384]	@ (8001494 <Fault_PollAndHandle+0x304>)
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d853      	bhi.n	80013c4 <Fault_PollAndHandle+0x234>
 800131c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001320:	495b      	ldr	r1, [pc, #364]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3308      	adds	r3, #8
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d047      	beq.n	80013c4 <Fault_PollAndHandle+0x234>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 8001334:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001338:	4955      	ldr	r1, [pc, #340]	@ (8001490 <Fault_PollAndHandle+0x300>)
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	3308      	adds	r3, #8
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800134c:	4950      	ldr	r1, [pc, #320]	@ (8001490 <Fault_PollAndHandle+0x300>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	330c      	adds	r3, #12
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f004 f8a6 	bl	80054b0 <HAL_GPIO_WritePin>
            SoftwareDelay(100);
 8001364:	2064      	movs	r0, #100	@ 0x64
 8001366:	f7ff fde3 	bl	8000f30 <SoftwareDelay>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_SET);
 800136a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800136e:	4948      	ldr	r1, [pc, #288]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3308      	adds	r3, #8
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001382:	4943      	ldr	r1, [pc, #268]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	330c      	adds	r3, #12
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4619      	mov	r1, r3
 8001396:	f004 f88b 	bl	80054b0 <HAL_GPIO_WritePin>
            fault_states[i].retry_count++;
 800139a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800139e:	493d      	ldr	r1, [pc, #244]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80013a0:	00d3      	lsls	r3, r2, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2d8      	uxtb	r0, r3
 80013aa:	493a      	ldr	r1, [pc, #232]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80013ac:	00d3      	lsls	r3, r2, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	4602      	mov	r2, r0
 80013b2:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 80013b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013b8:	4a36      	ldr	r2, [pc, #216]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	e055      	b.n	8001470 <Fault_PollAndHandle+0x2e0>

        } else if (fault_states[i].is_active && fault_states[i].retry_count >= 5 && fault_config[i].en_port) {
 80013c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013c8:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80013ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d04e      	beq.n	8001470 <Fault_PollAndHandle+0x2e0>
 80013d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001494 <Fault_PollAndHandle+0x304>)
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d946      	bls.n	8001470 <Fault_PollAndHandle+0x2e0>
 80013e2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80013e6:	492a      	ldr	r1, [pc, #168]	@ (8001490 <Fault_PollAndHandle+0x300>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03a      	beq.n	8001470 <Fault_PollAndHandle+0x2e0>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 80013fa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80013fe:	4924      	ldr	r1, [pc, #144]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3308      	adds	r3, #8
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001412:	491f      	ldr	r1, [pc, #124]	@ (8001490 <Fault_PollAndHandle+0x300>)
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	330c      	adds	r3, #12
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	f004 f843 	bl	80054b0 <HAL_GPIO_WritePin>
            fault_states[i].is_active = false;
 800142a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <Fault_PollAndHandle+0x304>)
 8001430:	2100      	movs	r1, #0
 8001432:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Persistent: Disabled\n", fault_config[i].description);
 8001436:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800143a:	4915      	ldr	r1, [pc, #84]	@ (8001490 <Fault_PollAndHandle+0x300>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	3310      	adds	r3, #16
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f107 000c 	add.w	r0, r7, #12
 800144e:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <Fault_PollAndHandle+0x310>)
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	f00b f821 	bl	800c498 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe fec8 	bl	80001f0 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	f107 010c 	add.w	r1, r7, #12
 8001468:	2364      	movs	r3, #100	@ 0x64
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f006 ff14 	bl	8008298 <HAL_UART_Transmit>
    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 8001470:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001474:	3301      	adds	r3, #1
 8001476:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800147a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800147e:	2b0c      	cmp	r3, #12
 8001480:	f67f ae92 	bls.w	80011a8 <Fault_PollAndHandle+0x18>
        }
    }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3758      	adds	r7, #88	@ 0x58
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000001c 	.word	0x2000001c
 8001494:	20000234 	.word	0x20000234
 8001498:	0800cfc0 	.word	0x0800cfc0
 800149c:	0800cfd4 	.word	0x0800cfd4
 80014a0:	0800cfe8 	.word	0x0800cfe8

080014a4 <EPS_I2C_CRC8>:
//#define I2C_SLAVE_ADDR_BMS        (0x08 << 1)
#define I2C_TIMEOUT_MS            100
#define MAX_FRAME_SIZE            256
#define CRC_SIZE                  1

uint8_t EPS_I2C_CRC8(const uint8_t *data, uint8_t len) {
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	73bb      	strb	r3, [r7, #14]
 80014b8:	e023      	b.n	8001502 <EPS_I2C_CRC8+0x5e>
        crc ^= data[i];
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4053      	eors	r3, r2
 80014c6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	737b      	strb	r3, [r7, #13]
 80014cc:	e013      	b.n	80014f6 <EPS_I2C_CRC8+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da08      	bge.n	80014e8 <EPS_I2C_CRC8+0x44>
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e002      	b.n	80014ee <EPS_I2C_CRC8+0x4a>
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	3301      	adds	r3, #1
 80014f4:	737b      	strb	r3, [r7, #13]
 80014f6:	7b7b      	ldrb	r3, [r7, #13]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	d9e8      	bls.n	80014ce <EPS_I2C_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	3301      	adds	r3, #1
 8001500:	73bb      	strb	r3, [r7, #14]
 8001502:	7bba      	ldrb	r2, [r7, #14]
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3d7      	bcc.n	80014ba <EPS_I2C_CRC8+0x16>
        }
    }
    return crc;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <EPS_I2C_SendCommand>:
HAL_StatusTypeDef EPS_I2C_SendCommand(I2C_HandleTypeDef *hi2c,
                                      uint8_t cmd,
                                      uint8_t *tx_data, uint8_t tx_len,
                                      uint8_t *rx_data, uint8_t rx_len,
                                      uint16_t i2c_slave_addr)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b0cb      	sub	sp, #300	@ 0x12c
 800151c:	af02      	add	r7, sp, #8
 800151e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001522:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001526:	6020      	str	r0, [r4, #0]
 8001528:	4608      	mov	r0, r1
 800152a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800152e:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8001532:	600a      	str	r2, [r1, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800153a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800153e:	4602      	mov	r2, r0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001546:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 800154a:	460a      	mov	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
    uint8_t frame[MAX_FRAME_SIZE];
    uint8_t pos = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    frame[pos++] = cmd;
 8001554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800155e:	4619      	mov	r1, r3
 8001560:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001564:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001568:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800156c:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	545a      	strb	r2, [r3, r1]
    frame[pos++] = tx_len;
 8001574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800157e:	4619      	mov	r1, r3
 8001580:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001584:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001588:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800158c:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	545a      	strb	r2, [r3, r1]

    if (tx_data && tx_len > 0) {
 8001594:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001598:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d021      	beq.n	80015e6 <EPS_I2C_SendCommand+0xce>
 80015a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015a6:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01a      	beq.n	80015e6 <EPS_I2C_SendCommand+0xce>
        memcpy(&frame[pos], tx_data, tx_len);
 80015b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80015b4:	f107 0214 	add.w	r2, r7, #20
 80015b8:	18d0      	adds	r0, r2, r3
 80015ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015be:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	f00b f829 	bl	800c624 <memcpy>
        pos += tx_len;
 80015d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015d6:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80015da:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    uint8_t *crc_start = &frame[0]; // Include CMD and LEN in CRC
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t crc = EPS_I2C_CRC8(crc_start, pos);
 80015ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80015f2:	4619      	mov	r1, r3
 80015f4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80015f8:	f7ff ff54 	bl	80014a4 <EPS_I2C_CRC8>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    frame[pos++] = crc;
 8001602:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800160c:	4619      	mov	r1, r3
 800160e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001616:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800161a:	545a      	strb	r2, [r3, r1]

    return HAL_I2C_Master_Transmit(hi2c, i2c_slave_addr, frame, pos, I2C_TIMEOUT_MS);
 800161c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001620:	b29b      	uxth	r3, r3
 8001622:	f107 0214 	add.w	r2, r7, #20
 8001626:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800162a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800162e:	f5a0 708a 	sub.w	r0, r0, #276	@ 0x114
 8001632:	2464      	movs	r4, #100	@ 0x64
 8001634:	9400      	str	r4, [sp, #0]
 8001636:	6800      	ldr	r0, [r0, #0]
 8001638:	f004 f810 	bl	800565c <HAL_I2C_Master_Transmit>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <EPS_I2C_SendSyncCounter>:


HAL_StatusTypeDef EPS_I2C_SendSyncCounter(I2C_HandleTypeDef *hi2c,
                                          uint64_t sync_counter,
                                          uint16_t i2c_slave_addr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af04      	add	r7, sp, #16
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t payload[8];
    payload[0] = (sync_counter >> 56) & 0xFF;
 8001654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	0e0a      	lsrs	r2, r1, #24
 8001662:	2300      	movs	r3, #0
 8001664:	b2d3      	uxtb	r3, r2
 8001666:	743b      	strb	r3, [r7, #16]
    payload[1] = (sync_counter >> 48) & 0xFF;
 8001668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	0c0a      	lsrs	r2, r1, #16
 8001676:	2300      	movs	r3, #0
 8001678:	b2d3      	uxtb	r3, r2
 800167a:	747b      	strb	r3, [r7, #17]
    payload[2] = (sync_counter >> 40) & 0xFF;
 800167c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	0a0a      	lsrs	r2, r1, #8
 800168a:	2300      	movs	r3, #0
 800168c:	b2d3      	uxtb	r3, r2
 800168e:	74bb      	strb	r3, [r7, #18]
    payload[3] = (sync_counter >> 32) & 0xFF;
 8001690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	000a      	movs	r2, r1
 800169e:	2300      	movs	r3, #0
 80016a0:	b2d3      	uxtb	r3, r2
 80016a2:	74fb      	strb	r3, [r7, #19]
    payload[4] = (sync_counter >> 24) & 0xFF;
 80016a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	0e02      	lsrs	r2, r0, #24
 80016b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016b6:	0e0b      	lsrs	r3, r1, #24
 80016b8:	b2d3      	uxtb	r3, r2
 80016ba:	753b      	strb	r3, [r7, #20]
    payload[5] = (sync_counter >> 16) & 0xFF;
 80016bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	0c02      	lsrs	r2, r0, #16
 80016ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016ce:	0c0b      	lsrs	r3, r1, #16
 80016d0:	b2d3      	uxtb	r3, r2
 80016d2:	757b      	strb	r3, [r7, #21]
    payload[6] = (sync_counter >> 8)  & 0xFF;
 80016d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	0a02      	lsrs	r2, r0, #8
 80016e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016e6:	0a0b      	lsrs	r3, r1, #8
 80016e8:	b2d3      	uxtb	r3, r2
 80016ea:	75bb      	strb	r3, [r7, #22]
    payload[7] =  sync_counter        & 0xFF;
 80016ec:	783b      	ldrb	r3, [r7, #0]
 80016ee:	75fb      	strb	r3, [r7, #23]

    return EPS_I2C_SendCommand(hi2c, CMD_SYNC_COUNTER,
 80016f0:	f107 0210 	add.w	r2, r7, #16
 80016f4:	8c3b      	ldrh	r3, [r7, #32]
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2300      	movs	r3, #0
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2308      	movs	r3, #8
 8001702:	2101      	movs	r1, #1
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff ff07 	bl	8001518 <EPS_I2C_SendCommand>
 800170a:	4603      	mov	r3, r0
                               payload, sizeof(payload),
                               NULL, 0, i2c_slave_addr);
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <SSP_GetRxBuffer>:
// Output:
//   - Returns a pointer to a uint8_t array, the appropriate receive buffer (rx_buffer1 or rx_buffer2)
// Significance:
//   - A helper function that selects the correct receive buffer based on the UART interface,
//     used to manage DMA reception of SSP frames. It’s marked "inline" for faster execution.
static inline uint8_t* SSP_GetRxBuffer(UART_HandleTypeDef *huart) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    // Check if the UART handle matches ssp_uart1; if so, return rx_buffer1, else return rx_buffer2
    return (huart == ssp_uart1) ? rx_buffer1 : rx_buffer2;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <SSP_GetRxBuffer+0x24>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d101      	bne.n	800172a <SSP_GetRxBuffer+0x16>
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SSP_GetRxBuffer+0x28>)
 8001728:	e000      	b.n	800172c <SSP_GetRxBuffer+0x18>
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SSP_GetRxBuffer+0x2c>)
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	200002a0 	.word	0x200002a0
 800173c:	200002a8 	.word	0x200002a8
 8001740:	200003a8 	.word	0x200003a8

08001744 <HAL_UART_TxCpltCallback>:
// Output:
//   - None (void), resets the RS485 driver enable pin
// Significance:
//   - Called when a UART DMA transmission completes, resets the RS485 driver enable
//     pin to allow reception, critical for RS485 communication (Reference Manual, Section 36.8).
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces (UART2 or UART3)
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_UART_TxCpltCallback+0x48>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	d004      	beq.n	8001760 <HAL_UART_TxCpltCallback+0x1c>
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_UART_TxCpltCallback+0x4c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d111      	bne.n	8001784 <HAL_UART_TxCpltCallback+0x40>
        // Select the correct driver enable pin based on UART
        GPIO_PinState de_pin = (huart->Instance == USART2) ? RS4852_DE_Pin : RS4851_DE_Pin;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_UART_TxCpltCallback+0x50>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_UART_TxCpltCallback+0x2a>
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_UART_TxCpltCallback+0x2c>
 800176e:	2310      	movs	r3, #16
 8001770:	73fb      	strb	r3, [r7, #15]
        // Both pins are on GPIOD
        GPIO_TypeDef *de_port = (huart->Instance == USART2) ? GPIOD : GPIOD;
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_UART_TxCpltCallback+0x54>)
 8001774:	60bb      	str	r3, [r7, #8]
        // Reset the driver enable pin to disable RS485 transmission
        HAL_GPIO_WritePin(de_port, de_pin, GPIO_PIN_RESET);
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	b29b      	uxth	r3, r3
 800177a:	2200      	movs	r2, #0
 800177c:	4619      	mov	r1, r3
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f003 fe96 	bl	80054b0 <HAL_GPIO_WritePin>
    }
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002a0 	.word	0x200002a0
 8001790:	200002a4 	.word	0x200002a4
 8001794:	40004400 	.word	0x40004400
 8001798:	48000c00 	.word	0x48000c00

0800179c <HAL_UART_ErrorCallback>:
// Output:
//   - None (void), handles UART errors by restarting DMA reception
// Significance:
//   - Handles UART errors (e.g., framing errors) by incrementing an error counter and
//     restarting DMA reception to recover, ensuring robust communication.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_UART_ErrorCallback+0x44>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d004      	beq.n	80017b8 <HAL_UART_ErrorCallback+0x1c>
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_UART_ErrorCallback+0x48>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d10e      	bne.n	80017d6 <HAL_UART_ErrorCallback+0x3a>
        // Increment the framing error counter
        framing_errors++;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_UART_ErrorCallback+0x4c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_UART_ErrorCallback+0x4c>)
 80017c0:	6013      	str	r3, [r2, #0]

        // Get the correct receive buffer for this UART
        uint8_t *rx_buffer = SSP_GetRxBuffer(huart);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa6 	bl	8001714 <SSP_GetRxBuffer>
 80017c8:	60f8      	str	r0, [r7, #12]
        // Restart DMA reception to recover from the error
        HAL_UART_Receive_DMA(huart, rx_buffer, SSP_MAX_DATA_LEN + SSP_FRAME_OVERHEAD);
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f006 fdeb 	bl	80083ac <HAL_UART_Receive_DMA>
    }
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200002a0 	.word	0x200002a0
 80017e4:	200002a4 	.word	0x200002a4
 80017e8:	200004a8 	.word	0x200004a8

080017ec <GetSyncCounter>:
    __enable_irq();
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset TIM2
}

// Get current sync counter value with race condition protection
uint64_t GetSyncCounter(void) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f2:	b672      	cpsid	i
}
 80017f4:	bf00      	nop
    uint64_t val;
    __disable_irq();
    val = sync_counter.sync_counter;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <GetSyncCounter+0x2c>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001800:	b662      	cpsie	i
}
 8001802:	bf00      	nop
    __enable_irq();
    return val;
 8001804:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200004b0 	.word	0x200004b0

0800181c <GetSyncTimestamp>:
uint32_t GetSubtickUs(void) {
    return __HAL_TIM_GET_COUNTER(&htim2); // Current TIM2 count since last pulse
}

// Get composite timestamp with race condition protection
void GetSyncTimestamp(uint64_t *counter, uint32_t *subtick) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001826:	b672      	cpsid	i
}
 8001828:	bf00      	nop
    __disable_irq();
    *counter = sync_counter.sync_counter;
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <GetSyncTimestamp+0x34>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
    *subtick = __HAL_TIM_GET_COUNTER(&htim2);
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <GetSyncTimestamp+0x38>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001840:	b662      	cpsie	i
}
 8001842:	bf00      	nop
    __enable_irq();
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	200004b0 	.word	0x200004b0
 8001854:	20000784 	.word	0x20000784

08001858 <SelectMultiplexerChannel>:
//   - None (void), sets GPIO pins to select the multiplexer channel
// Significance:
//   - Configures the multiplexer (controlled by S0, S1, S2 pins) to select a specific
//     input channel for ADC measurements (e.g., solar array voltages or currents).
static void SelectMultiplexerChannel(uint8_t channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
    // Set S0 pin (bit 0 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (channel & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	2180      	movs	r1, #128	@ 0x80
 800186e:	480f      	ldr	r0, [pc, #60]	@ (80018ac <SelectMultiplexerChannel+0x54>)
 8001870:	f003 fe1e 	bl	80054b0 <HAL_GPIO_WritePin>
    // Set S1 pin (bit 1 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (channel & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	105b      	asrs	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001886:	4809      	ldr	r0, [pc, #36]	@ (80018ac <SelectMultiplexerChannel+0x54>)
 8001888:	f003 fe12 	bl	80054b0 <HAL_GPIO_WritePin>
    // Set S2 pin (bit 2 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (channel & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	109b      	asrs	r3, r3, #2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <SelectMultiplexerChannel+0x54>)
 80018a0:	f003 fe06 	bl	80054b0 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	48000800 	.word	0x48000800

080018b0 <EPSPD_UpdateTelemetryAndParameters>:
//   - None (void), updates TelemetryData and Parameters, saves to EEPROM
// Significance:
//   - Processes raw ADC values to update telemetry (voltages, currents) and saves
//     them to EEPROM via I2C, critical for monitoring power distribution.
void EPSPD_UpdateTelemetryAndParameters(I2C_HandleTypeDef *hi2c, uint16_t *adc_values)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b090      	sub	sp, #64	@ 0x40
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
    // Declare variables for sync counter and subtick
    uint64_t counter;
    uint32_t subtick;
    // Get the sync counter and subtick timestamp from the BMS (via sync_counter.h)
    GetSyncTimestamp(&counter, &subtick);
 80018ba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80018be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffa9 	bl	800181c <GetSyncTimestamp>
    // Store subtick in telemetry (microseconds)
    TelemetryData.subtick_us = subtick;
 80018ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018cc:	4ad2      	ldr	r2, [pc, #840]	@ (8001c18 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 80018ce:	6093      	str	r3, [r2, #8]

    // Update 12V bus voltage (mV) from ADC channel 13
    TelemetryData.Bus12V = (uint16_t)(adc_values[13] * VOLTAGE_PER_COUNT);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	331a      	adds	r3, #26
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018de:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 80018e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ea:	ee17 3a90 	vmov	r3, s15
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c18 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 80018f2:	801a      	strh	r2, [r3, #0]
    // Update 5V bus voltage (mV) from ADC channel 1
    TelemetryData.Bus5V = (uint16_t)(adc_values[1] * VOLTAGE_PER_COUNT);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3302      	adds	r3, #2
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001902:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190e:	ee17 3a90 	vmov	r3, s15
 8001912:	b29a      	uxth	r2, r3
 8001914:	4bc0      	ldr	r3, [pc, #768]	@ (8001c18 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001916:	805a      	strh	r2, [r3, #2]
    // Update 3.3V bus voltage (mV) from ADC channel 10
    TelemetryData.Bus3V3 = (uint16_t)(adc_values[10] * VOLTAGE_PER_COUNT);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	3314      	adds	r3, #20
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 800192a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001932:	ee17 3a90 	vmov	r3, s15
 8001936:	b29a      	uxth	r2, r3
 8001938:	4bb7      	ldr	r3, [pc, #732]	@ (8001c18 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 800193a:	809a      	strh	r2, [r3, #4]

    // Select multiplexer channel 0 for solar array 1 current
    SelectMultiplexerChannel(0);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff ff8b 	bl	8001858 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff faf4 	bl	8000f30 <SoftwareDelay>

    // Update solar array 1 current (mA) from ADC channel 4
    Parameters[6].Value = (uint16_t)(adc_values[4] * CURRENT_SCALING_FACTOR);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	3308      	adds	r3, #8
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdf8 	bl	8000544 <__aeabi_i2d>
 8001954:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001bf8 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fe5d 	bl	8000618 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f869 	bl	8000a3c <__aeabi_d2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	b29a      	uxth	r2, r3
 800196e:	4bac      	ldr	r3, [pc, #688]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001970:	835a      	strh	r2, [r3, #26]

    // Select multiplexer channel 1 for solar array 3 voltage
    SelectMultiplexerChannel(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff ff70 	bl	8001858 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fad9 	bl	8000f30 <SoftwareDelay>
    // Update solar array 3 voltage (mV) from ADC channel 4
    Parameters[24].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	3308      	adds	r3, #8
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	a39d      	add	r3, pc, #628	@ (adr r3, 8001c00 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fe42 	bl	8000618 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f84e 	bl	8000a3c <__aeabi_d2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b9e      	ldr	r3, [pc, #632]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 80019a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

    // Select multiplexer channel 2 for solar array 2 voltage
    SelectMultiplexerChannel(2);
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7ff ff54 	bl	8001858 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fabd 	bl	8000f30 <SoftwareDelay>
    // Update solar array 2 voltage (mV) from ADC channel 4
    Parameters[23].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3308      	adds	r3, #8
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdc1 	bl	8000544 <__aeabi_i2d>
 80019c2:	a38f      	add	r3, pc, #572	@ (adr r3, 8001c00 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe26 	bl	8000618 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f832 	bl	8000a3c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b90      	ldr	r3, [pc, #576]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 80019de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    // Select multiplexer channel 3 for solar array 1 voltage
    SelectMultiplexerChannel(3);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f7ff ff38 	bl	8001858 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff faa1 	bl	8000f30 <SoftwareDelay>
    // Update solar array 1 voltage (mV) from ADC channel 4
    Parameters[22].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3308      	adds	r3, #8
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda5 	bl	8000544 <__aeabi_i2d>
 80019fa:	a381      	add	r3, pc, #516	@ (adr r3, 8001c00 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fe0a 	bl	8000618 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f816 	bl	8000a3c <__aeabi_d2uiz>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b82      	ldr	r3, [pc, #520]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001a16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    // Calculate current for RS 5V rail (mA) from ADC channel 0
    float v_imon = adc_values[0] * VOLTAGE_PER_COUNT;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a26:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[19].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001a32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a34:	f7fe fd98 	bl	8000568 <__aeabi_f2d>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b79      	ldr	r3, [pc, #484]	@ (8001c24 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001a3e:	f7fe ff15 	bl	800086c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	a36f      	add	r3, pc, #444	@ (adr r3, 8001c08 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fde2 	bl	8000618 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7fe ffee 	bl	8000a3c <__aeabi_d2uiz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b6e      	ldr	r3, [pc, #440]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001a66:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

    // Calculate current for PL 5V rail (mA) from ADC channel 1
    v_imon = adc_values[1] * VOLTAGE_PER_COUNT;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a78:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a80:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[18].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001a84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a86:	f7fe fd6f 	bl	8000568 <__aeabi_f2d>
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001a90:	f7fe feec 	bl	800086c <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	a35a      	add	r3, pc, #360	@ (adr r3, 8001c08 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fdb9 	bl	8000618 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7fe ffc5 	bl	8000a3c <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001ab8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    // Calculate current for CCU 5V rail (mA) from ADC channel 2
    v_imon = adc_values[2] * VOLTAGE_PER_COUNT;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aca:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[17].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001ad6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001ad8:	f7fe fd46 	bl	8000568 <__aeabi_f2d>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001ae2:	f7fe fec3 	bl	800086c <__aeabi_ddiv>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	a346      	add	r3, pc, #280	@ (adr r3, 8001c08 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd90 	bl	8000618 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7fe ff9c 	bl	8000a3c <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b45      	ldr	r3, [pc, #276]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    // Calculate current for GPS (mA) from ADC channel 3
    v_imon = adc_values[3] * VOLTAGE_PER_COUNT;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3306      	adds	r3, #6
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[12].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001b28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001b2a:	f7fe fd1d 	bl	8000568 <__aeabi_f2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b3c      	ldr	r3, [pc, #240]	@ (8001c24 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001b34:	f7fe fe9a 	bl	800086c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	a331      	add	r3, pc, #196	@ (adr r3, 8001c08 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd67 	bl	8000618 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe ff73 	bl	8000a3c <__aeabi_d2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001b5c:	865a      	strh	r2, [r3, #50]	@ 0x32

    // Update solar array 2 current (mA) from ADC channel 5
    Parameters[7].Value = (uint16_t)(adc_values[5] * CURRENT_SCALING_FACTOR);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	330a      	adds	r3, #10
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fced 	bl	8000544 <__aeabi_i2d>
 8001b6a:	a323      	add	r3, pc, #140	@ (adr r3, 8001bf8 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd52 	bl	8000618 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ff5e 	bl	8000a3c <__aeabi_d2uiz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001b86:	83da      	strh	r2, [r3, #30]

    // Update solar array 3 current (mA) from ADC channel 6
    Parameters[8].Value = (uint16_t)(adc_values[6] * CURRENT_SCALING_FACTOR);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcd8 	bl	8000544 <__aeabi_i2d>
 8001b94:	a318      	add	r3, pc, #96	@ (adr r3, 8001bf8 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fd3d 	bl	8000618 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ff49 	bl	8000a3c <__aeabi_d2uiz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001bb0:	845a      	strh	r2, [r3, #34]	@ 0x22

    // Update XB subsystem current (mA) from ADC channel 7
    Parameters[9].Value = (uint16_t)(adc_values[7] * CURRENT_PER_COUNT);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	330e      	adds	r3, #14
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcc3 	bl	8000544 <__aeabi_i2d>
 8001bbe:	a314      	add	r3, pc, #80	@ (adr r3, 8001c10 <EPSPD_UpdateTelemetryAndParameters+0x360>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd28 	bl	8000618 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ff34 	bl	8000a3c <__aeabi_d2uiz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001bda:	84da      	strh	r2, [r3, #38]	@ 0x26
    // Update XB 12V current (mA) from ADC channel 7
    Parameters[21].Value = (uint16_t)((adc_values[7] * VOLTAGE_PER_COUNT / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	330e      	adds	r3, #14
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bea:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001c1c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf2:	e019      	b.n	8001c28 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	f38c5437 	.word	0xf38c5437
 8001bfc:	3fc4a137 	.word	0x3fc4a137
 8001c00:	4d163348 	.word	0x4d163348
 8001c04:	40228767 	.word	0x40228767
 8001c08:	c94fe0ff 	.word	0xc94fe0ff
 8001c0c:	40a9aaa5 	.word	0x40a9aaa5
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40201d00 	.word	0x40201d00
 8001c18:	200004c0 	.word	0x200004c0
 8001c1c:	3f4e4000 	.word	0x3f4e4000
 8001c20:	20000154 	.word	0x20000154
 8001c24:	408f4000 	.word	0x408f4000
 8001c28:	ee17 0a90 	vmov	r0, s15
 8001c2c:	f7fe fc9c 	bl	8000568 <__aeabi_f2d>
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4ba4      	ldr	r3, [pc, #656]	@ (8001ec8 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001c36:	f7fe fe19 	bl	800086c <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	a39d      	add	r3, pc, #628	@ (adr r3, 8001eb8 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fce6 	bl	8000618 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fef2 	bl	8000a3c <__aeabi_d2uiz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b9b      	ldr	r3, [pc, #620]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001c5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    // Calculate current for ADCS 5V rail (mA) from ADC channel 8
    v_imon = adc_values[8] * VOLTAGE_PER_COUNT;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	3310      	adds	r3, #16
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8001ed0 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c78:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[16].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001c7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c7e:	f7fe fc73 	bl	8000568 <__aeabi_f2d>
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b90      	ldr	r3, [pc, #576]	@ (8001ec8 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001c88:	f7fe fdf0 	bl	800086c <__aeabi_ddiv>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	a388      	add	r3, pc, #544	@ (adr r3, 8001eb8 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fcbd 	bl	8000618 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe fec9 	bl	8000a3c <__aeabi_d2uiz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b87      	ldr	r3, [pc, #540]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001cb0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Update CCU subsystem current (mA) from ADC channel 9
    Parameters[10].Value = (uint16_t)(adc_values[9] * CURRENT_PER_COUNT);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	3312      	adds	r3, #18
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc42 	bl	8000544 <__aeabi_i2d>
 8001cc0:	a37f      	add	r3, pc, #508	@ (adr r3, 8001ec0 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fca7 	bl	8000618 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe feb3 	bl	8000a3c <__aeabi_d2uiz>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b7c      	ldr	r3, [pc, #496]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    // Calculate current for 3.3V bus (mA) from ADC channel 10
    v_imon = adc_values[10] * VOLTAGE_PER_COUNT;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3314      	adds	r3, #20
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001ed0 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[5].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001cf8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cfa:	f7fe fc35 	bl	8000568 <__aeabi_f2d>
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b71      	ldr	r3, [pc, #452]	@ (8001ec8 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001d04:	f7fe fdb2 	bl	800086c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	a369      	add	r3, pc, #420	@ (adr r3, 8001eb8 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc7f 	bl	8000618 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe fe8b 	bl	8000a3c <__aeabi_d2uiz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b68      	ldr	r3, [pc, #416]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001d2c:	82da      	strh	r2, [r3, #22]

    // Update ADCS subsystem current (mA) from ADC channel 11
    Parameters[11].Value = (uint16_t)(adc_values[11] * CURRENT_PER_COUNT);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3316      	adds	r3, #22
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc05 	bl	8000544 <__aeabi_i2d>
 8001d3a:	a361      	add	r3, pc, #388	@ (adr r3, 8001ec0 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fc6a 	bl	8000618 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe fe76 	bl	8000a3c <__aeabi_d2uiz>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b5d      	ldr	r3, [pc, #372]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001d56:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Update payload current (mA) from ADC channel 12
    Parameters[13].Value = (uint16_t)(adc_values[12] * CURRENT_PER_COUNT);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbf0 	bl	8000544 <__aeabi_i2d>
 8001d64:	a356      	add	r3, pc, #344	@ (adr r3, 8001ec0 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fc55 	bl	8000618 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe fe61 	bl	8000a3c <__aeabi_d2uiz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001d80:	86da      	strh	r2, [r3, #54]	@ 0x36

    // Calculate current for ADCS 12V rail (mA) from ADC channel 13
    v_imon = adc_values[13] * VOLTAGE_PER_COUNT;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	331a      	adds	r3, #26
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d90:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001ed0 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d98:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[20].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001d9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d9e:	f7fe fbe3 	bl	8000568 <__aeabi_f2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b48      	ldr	r3, [pc, #288]	@ (8001ec8 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001da8:	f7fe fd60 	bl	800086c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	a340      	add	r3, pc, #256	@ (adr r3, 8001eb8 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fc2d 	bl	8000618 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe fe39 	bl	8000a3c <__aeabi_d2uiz>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b3f      	ldr	r3, [pc, #252]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    // Calculate current for UHF subsystem (mA) from ADC channel 14
    v_imon = adc_values[14] * VOLTAGE_PER_COUNT;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	331c      	adds	r3, #28
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001ed0 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[14].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001dee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001df0:	f7fe fbba 	bl	8000568 <__aeabi_f2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001dfa:	f7fe fd37 	bl	800086c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	a32c      	add	r3, pc, #176	@ (adr r3, 8001eb8 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fc04 	bl	8000618 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fe10 	bl	8000a3c <__aeabi_d2uiz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001e22:	875a      	strh	r2, [r3, #58]	@ 0x3a

    // Calculate current for OBC subsystem (mA) from ADC channel 15
    v_imon = adc_values[15] * VOLTAGE_PER_COUNT;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	331e      	adds	r3, #30
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001ed0 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[15].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001e3e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e40:	f7fe fb92 	bl	8000568 <__aeabi_f2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001e4a:	f7fe fd0f 	bl	800086c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	a318      	add	r3, pc, #96	@ (adr r3, 8001eb8 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbdc 	bl	8000618 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fde8 	bl	8000a3c <__aeabi_d2uiz>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001e72:	87da      	strh	r2, [r3, #62]	@ 0x3e

    // Copy bus voltages to parameter array for consistency
    Parameters[0].Value = TelemetryData.Bus12V;
 8001e74:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001e7a:	805a      	strh	r2, [r3, #2]
    Parameters[1].Value = TelemetryData.Bus5V;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8001e7e:	885a      	ldrh	r2, [r3, #2]
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001e82:	80da      	strh	r2, [r3, #6]
    Parameters[2].Value = TelemetryData.Bus3V3;
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8001e86:	889a      	ldrh	r2, [r3, #4]
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001e8a:	815a      	strh	r2, [r3, #10]

    // Prepare EEPROM data structure with telemetry and timestamp
    EEPROM_TelemetryWithTimestamp eeprom_data;
    eeprom_data.telemetry = TelemetryData;
 8001e8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    eeprom_data.counter = counter;
 8001e98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    eeprom_data.subtick_us = subtick;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea2:	623b      	str	r3, [r7, #32]
    // Save telemetry to EEPROM via I2C
    epspd_WriteTelemetry(hi2c, &eeprom_data);
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff f858 	bl	8000f60 <epspd_WriteTelemetry>
}
 8001eb0:	bf00      	nop
 8001eb2:	3740      	adds	r7, #64	@ 0x40
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	c94fe0ff 	.word	0xc94fe0ff
 8001ebc:	40a9aaa5 	.word	0x40a9aaa5
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40201d00 	.word	0x40201d00
 8001ec8:	408f4000 	.word	0x408f4000
 8001ecc:	20000154 	.word	0x20000154
 8001ed0:	3f4e4000 	.word	0x3f4e4000
 8001ed4:	200004c0 	.word	0x200004c0

08001ed8 <main>:
void StartTask02(void *argument);
void StartTask03(void *argument);
void StartTask04(void *argument);

int main(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  HAL_Init();
 8001edc:	f001 fb9b 	bl	8003616 <HAL_Init>
  SystemClock_Config();
 8001ee0:	f000 f8fc 	bl	80020dc <SystemClock_Config>
  MX_GPIO_Init();
 8001ee4:	f000 fc82 	bl	80027ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee8:	f000 fc3a 	bl	8002760 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eec:	f000 fbd4 	bl	8002698 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001ef0:	f000 fc04 	bl	80026fc <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001ef4:	f000 fba0 	bl	8002638 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ef8:	f000 f936 	bl	8002168 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001efc:	f000 f9aa 	bl	8002254 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001f00:	f000 f9e8 	bl	80022d4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001f04:	f000 fa20 	bl	8002348 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001f08:	f000 fa58 	bl	80023bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f0c:	f000 faaa 	bl	8002464 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f10:	f000 faf6 	bl	8002500 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f14:	f000 fb42 	bl	800259c <MX_TIM4_Init>

  osKernelInitialize();
 8001f18:	f007 fd3e 	bl	8009998 <osKernelInitialize>

  NormalTaskHandle = osThreadNew(StartDefaultTask, NULL, &NormalTask_attributes);
 8001f1c:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <main+0x8c>)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4811      	ldr	r0, [pc, #68]	@ (8001f68 <main+0x90>)
 8001f22:	f007 fd83 	bl	8009a2c <osThreadNew>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <main+0x94>)
 8001f2a:	6013      	str	r3, [r2, #0]
  FaultTask02Handle = osThreadNew(StartTask02, NULL, &FaultTask02_attributes);
 8001f2c:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <main+0x98>)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4810      	ldr	r0, [pc, #64]	@ (8001f74 <main+0x9c>)
 8001f32:	f007 fd7b 	bl	8009a2c <osThreadNew>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <main+0xa0>)
 8001f3a:	6013      	str	r3, [r2, #0]
  SSPmasterTask03Handle = osThreadNew(StartTask03, NULL, &SSPmasterTask03_attributes);
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f7c <main+0xa4>)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	480f      	ldr	r0, [pc, #60]	@ (8001f80 <main+0xa8>)
 8001f42:	f007 fd73 	bl	8009a2c <osThreadNew>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <main+0xac>)
 8001f4a:	6013      	str	r3, [r2, #0]
  SyncTask04Handle = osThreadNew(StartTask04, NULL, &SyncTask04_attributes);
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f88 <main+0xb0>)
 8001f4e:	2100      	movs	r1, #0
 8001f50:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <main+0xb4>)
 8001f52:	f007 fd6b 	bl	8009a2c <osThreadNew>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <main+0xb8>)
 8001f5a:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8001f5c:	f007 fd40 	bl	80099e0 <osKernelStart>

  while(1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <main+0x88>
 8001f64:	0800d15c 	.word	0x0800d15c
 8001f68:	08001f95 	.word	0x08001f95
 8001f6c:	20000b24 	.word	0x20000b24
 8001f70:	0800d180 	.word	0x0800d180
 8001f74:	08002039 	.word	0x08002039
 8001f78:	20000b28 	.word	0x20000b28
 8001f7c:	0800d1a4 	.word	0x0800d1a4
 8001f80:	08002069 	.word	0x08002069
 8001f84:	20000b2c 	.word	0x20000b2c
 8001f88:	0800d1c8 	.word	0x0800d1c8
 8001f8c:	08002089 	.word	0x08002089
 8001f90:	20000b30 	.word	0x20000b30

08001f94 <StartDefaultTask>:
  }
}


void StartDefaultTask(void *argument)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	@ 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    for (;;) {
        uint16_t adc_values[16] = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00a fae9 	bl	800c57c <memset>
        uint32_t last_save_time = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_ready = 0;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <StartDefaultTask+0x88>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
        EPS_Log_Message(EPS_LOG_INFO, "Starting ADC conversion via DMA for telemetry update");
 8001fb4:	491a      	ldr	r1, [pc, #104]	@ (8002020 <StartDefaultTask+0x8c>)
 8001fb6:	2003      	movs	r0, #3
 8001fb8:	f7fe fef6 	bl	8000da8 <EPS_Log_Message>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 16);
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4817      	ldr	r0, [pc, #92]	@ (8002024 <StartDefaultTask+0x90>)
 8001fc6:	f001 fe9b 	bl	8003d00 <HAL_ADC_Start_DMA>
        while (!adc_ready) {
 8001fca:	e003      	b.n	8001fd4 <StartDefaultTask+0x40>
            EPS_Log_Message(EPS_LOG_WARNING, "Waiting for ADC DMA complete flag...");
 8001fcc:	4916      	ldr	r1, [pc, #88]	@ (8002028 <StartDefaultTask+0x94>)
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f7fe feea 	bl	8000da8 <EPS_Log_Message>
        while (!adc_ready) {
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <StartDefaultTask+0x88>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f6      	beq.n	8001fcc <StartDefaultTask+0x38>
        }
        EPSPD_UpdateTelemetryAndParameters(&hi2c2, adc_values);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4811      	ldr	r0, [pc, #68]	@ (800202c <StartDefaultTask+0x98>)
 8001fe6:	f7ff fc63 	bl	80018b0 <EPSPD_UpdateTelemetryAndParameters>
        EPS_Log_Message(EPS_LOG_INFO, "Telemetry updated from ADC values");
 8001fea:	4911      	ldr	r1, [pc, #68]	@ (8002030 <StartDefaultTask+0x9c>)
 8001fec:	2003      	movs	r0, #3
 8001fee:	f7fe fedb 	bl	8000da8 <EPS_Log_Message>

        if (HAL_GetTick() - last_save_time >= EEPROM_SAVE_INTERVAL) {
 8001ff2:	f001 fb3d 	bl	8003670 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002000:	4293      	cmp	r3, r2
 8002002:	d906      	bls.n	8002012 <StartDefaultTask+0x7e>
            last_save_time = HAL_GetTick();
 8002004:	f001 fb34 	bl	8003670 <HAL_GetTick>
 8002008:	62f8      	str	r0, [r7, #44]	@ 0x2c
            EPS_Log_Message(EPS_LOG_INFO, "Saving telemetry to EEPROM");
 800200a:	490a      	ldr	r1, [pc, #40]	@ (8002034 <StartDefaultTask+0xa0>)
 800200c:	2003      	movs	r0, #3
 800200e:	f7fe fecb 	bl	8000da8 <EPS_Log_Message>
        }
        osDelay(1000);
 8002012:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002016:	f007 fd9b 	bl	8009b50 <osDelay>
    for (;;) {
 800201a:	e7bf      	b.n	8001f9c <StartDefaultTask+0x8>
 800201c:	200004cc 	.word	0x200004cc
 8002020:	0800d03c 	.word	0x0800d03c
 8002024:	200004d0 	.word	0x200004d0
 8002028:	0800d074 	.word	0x0800d074
 800202c:	20000538 	.word	0x20000538
 8002030:	0800d09c 	.word	0x0800d09c
 8002034:	0800d0c0 	.word	0x0800d0c0

08002038 <StartTask02>:
    }
}

void StartTask02(void *argument)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 8002040:	4906      	ldr	r1, [pc, #24]	@ (800205c <StartTask02+0x24>)
 8002042:	2004      	movs	r0, #4
 8002044:	f7fe feb0 	bl	8000da8 <EPS_Log_Message>
        Fault_PollAndHandle(&hi2c2, &huart1);
 8002048:	4905      	ldr	r1, [pc, #20]	@ (8002060 <StartTask02+0x28>)
 800204a:	4806      	ldr	r0, [pc, #24]	@ (8002064 <StartTask02+0x2c>)
 800204c:	f7ff f8a0 	bl	8001190 <Fault_PollAndHandle>
        osDelay(100);
 8002050:	2064      	movs	r0, #100	@ 0x64
 8002052:	f007 fd7d 	bl	8009b50 <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 8002056:	bf00      	nop
 8002058:	e7f2      	b.n	8002040 <StartTask02+0x8>
 800205a:	bf00      	nop
 800205c:	0800d0dc 	.word	0x0800d0dc
 8002060:	20000868 	.word	0x20000868
 8002064:	20000538 	.word	0x20000538

08002068 <StartTask03>:
    }
}

void StartTask03(void *argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 8002070:	4904      	ldr	r1, [pc, #16]	@ (8002084 <StartTask03+0x1c>)
 8002072:	2004      	movs	r0, #4
 8002074:	f7fe fe98 	bl	8000da8 <EPS_Log_Message>
        osDelay(10000); // Poll every 10 seconds
 8002078:	f242 7010 	movw	r0, #10000	@ 0x2710
 800207c:	f007 fd68 	bl	8009b50 <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 8002080:	bf00      	nop
 8002082:	e7f5      	b.n	8002070 <StartTask03+0x8>
 8002084:	0800d104 	.word	0x0800d104

08002088 <StartTask04>:
    }
}

void StartTask04(void *argument)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	6078      	str	r0, [r7, #4]
    for (;;) {
        if (sync_pulse_triggered) {
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <StartTask04+0x48>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <StartTask04+0x40>
            sync_pulse_triggered = false;
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <StartTask04+0x48>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]

            uint64_t counter = GetSyncCounter();
 80020a0:	f7ff fba4 	bl	80017ec <GetSyncCounter>
 80020a4:	e9c7 0104 	strd	r0, r1, [r7, #16]
            HAL_StatusTypeDef status = EPS_I2C_SendSyncCounter(&hi2c3, counter, I2C_SLAVE_ADDR_BMS);
 80020a8:	2360      	movs	r3, #96	@ 0x60
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020b0:	4808      	ldr	r0, [pc, #32]	@ (80020d4 <StartTask04+0x4c>)
 80020b2:	f7ff fac9 	bl	8001648 <EPS_I2C_SendSyncCounter>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]

            if (status != HAL_OK) {
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <StartTask04+0x40>
                EPS_Log_Message(EPS_LOG_ERROR, "Failed to send sync counter");
 80020c0:	4905      	ldr	r1, [pc, #20]	@ (80020d8 <StartTask04+0x50>)
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7fe fe70 	bl	8000da8 <EPS_Log_Message>
            }
        }

        osDelay(5);
 80020c8:	2005      	movs	r0, #5
 80020ca:	f007 fd41 	bl	8009b50 <osDelay>
        if (sync_pulse_triggered) {
 80020ce:	e7df      	b.n	8002090 <StartTask04+0x8>
 80020d0:	20000b20 	.word	0x20000b20
 80020d4:	2000058c 	.word	0x2000058c
 80020d8:	0800d128 	.word	0x0800d128

080020dc <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b096      	sub	sp, #88	@ 0x58
 80020e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	2244      	movs	r2, #68	@ 0x44
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00a fa46 	bl	800c57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]

  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002102:	f003 fe83 	bl	8005e0c <HAL_PWREx_ControlVoltageScaling>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800210c:	f000 fcaa 	bl	8002a64 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002110:	2302      	movs	r3, #2
 8002112:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002118:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800211a:	2340      	movs	r3, #64	@ 0x40
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fec6 	bl	8005eb8 <HAL_RCC_OscConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002132:	f000 fc97 	bl	8002a64 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002136:	230f      	movs	r3, #15
 8002138:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800213a:	2301      	movs	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800214a:	463b      	mov	r3, r7
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f004 facc 	bl	80066ec <HAL_RCC_ClockConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800215a:	f000 fc83 	bl	8002a64 <Error_Handler>
  }
}
 800215e:	bf00      	nop
 8002160:	3758      	adds	r7, #88	@ 0x58
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 800218a:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <MX_ADC1_Init+0xe0>)
 800218c:	4a2f      	ldr	r2, [pc, #188]	@ (800224c <MX_ADC1_Init+0xe4>)
 800218e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002190:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <MX_ADC1_Init+0xe0>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002196:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <MX_ADC1_Init+0xe0>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800219c:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <MX_ADC1_Init+0xe0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021a2:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021a8:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021aa:	2204      	movs	r2, #4
 80021ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021ae:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021b4:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80021ba:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021bc:	2201      	movs	r2, #1
 80021be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021c0:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if(HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ea:	4817      	ldr	r0, [pc, #92]	@ (8002248 <MX_ADC1_Init+0xe0>)
 80021ec:	f001 fc34 	bl	8003a58 <HAL_ADC_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80021f6:	f000 fc35 	bl	8002a64 <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  if(HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	4810      	ldr	r0, [pc, #64]	@ (8002248 <MX_ADC1_Init+0xe0>)
 8002206:	f002 fba1 	bl	800494c <HAL_ADCEx_MultiModeConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002210:	f000 fc28 	bl	8002a64 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8002214:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <MX_ADC1_Init+0xe8>)
 8002216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002218:	2306      	movs	r3, #6
 800221a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002220:	237f      	movs	r3, #127	@ 0x7f
 8002222:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002224:	2304      	movs	r3, #4
 8002226:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	@ (8002248 <MX_ADC1_Init+0xe0>)
 8002232:	f001 fe3f 	bl	8003eb4 <HAL_ADC_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800223c:	f000 fc12 	bl	8002a64 <Error_Handler>
  }
}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	@ 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200004d0 	.word	0x200004d0
 800224c:	50040000 	.word	0x50040000
 8002250:	04300002 	.word	0x04300002

08002254 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <MX_I2C2_Init+0x74>)
 800225a:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <MX_I2C2_Init+0x78>)
 800225c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_I2C2_Init+0x74>)
 8002260:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <MX_I2C2_Init+0x7c>)
 8002262:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002264:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <MX_I2C2_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800226a:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <MX_I2C2_Init+0x74>)
 800226c:	2201      	movs	r2, #1
 800226e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <MX_I2C2_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002276:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_I2C2_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <MX_I2C2_Init+0x74>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <MX_I2C2_Init+0x74>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <MX_I2C2_Init+0x74>)
 800228a:	2200      	movs	r2, #0
 800228c:	621a      	str	r2, [r3, #32]
  if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 800228e:	480e      	ldr	r0, [pc, #56]	@ (80022c8 <MX_I2C2_Init+0x74>)
 8002290:	f003 f949 	bl	8005526 <HAL_I2C_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800229a:	f000 fbe3 	bl	8002a64 <Error_Handler>
  }

  if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800229e:	2100      	movs	r1, #0
 80022a0:	4809      	ldr	r0, [pc, #36]	@ (80022c8 <MX_I2C2_Init+0x74>)
 80022a2:	f003 fd0d 	bl	8005cc0 <HAL_I2CEx_ConfigAnalogFilter>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80022ac:	f000 fbda 	bl	8002a64 <Error_Handler>
  }

  if(HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80022b0:	2100      	movs	r1, #0
 80022b2:	4805      	ldr	r0, [pc, #20]	@ (80022c8 <MX_I2C2_Init+0x74>)
 80022b4:	f003 fd4f 	bl	8005d56 <HAL_I2CEx_ConfigDigitalFilter>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80022be:	f000 fbd1 	bl	8002a64 <Error_Handler>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000538 	.word	0x20000538
 80022cc:	40005800 	.word	0x40005800
 80022d0:	00503d58 	.word	0x00503d58

080022d4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <MX_SPI1_Init+0x6c>)
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <MX_SPI1_Init+0x70>)
 80022dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <MX_SPI1_Init+0x6c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022e4:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <MX_SPI1_Init+0x6c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <MX_SPI1_Init+0x6c>)
 80022ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80022f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <MX_SPI1_Init+0x6c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <MX_SPI1_Init+0x6c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <MX_SPI1_Init+0x6c>)
 8002300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002304:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_SPI1_Init+0x6c>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <MX_SPI1_Init+0x6c>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <MX_SPI1_Init+0x6c>)
 8002314:	2200      	movs	r2, #0
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <MX_SPI1_Init+0x6c>)
 800231a:	2207      	movs	r2, #7
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800231e:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <MX_SPI1_Init+0x6c>)
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <MX_SPI1_Init+0x6c>)
 8002326:	2200      	movs	r2, #0
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi1) != HAL_OK)
 800232a:	4805      	ldr	r0, [pc, #20]	@ (8002340 <MX_SPI1_Init+0x6c>)
 800232c:	f005 f8fe 	bl	800752c <HAL_SPI_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8002336:	f000 fb95 	bl	8002a64 <Error_Handler>
  }
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000670 	.word	0x20000670
 8002344:	40013000 	.word	0x40013000

08002348 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  hspi3.Instance = SPI3;
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 800234e:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <MX_SPI3_Init+0x70>)
 8002350:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002358:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002360:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002364:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002378:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002386:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 800238e:	2207      	movs	r2, #7
 8002390:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002392:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 800239a:	2200      	movs	r2, #0
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi3) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <MX_SPI3_Init+0x6c>)
 80023a0:	f005 f8c4 	bl	800752c <HAL_SPI_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 80023aa:	f000 fb5b 	bl	8002a64 <Error_Handler>
  }
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200006d4 	.word	0x200006d4
 80023b8:	40003c00 	.word	0x40003c00

080023bc <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <MX_TIM1_Init+0xa0>)
 80023dc:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <MX_TIM1_Init+0xa4>)
 80023de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <MX_TIM1_Init+0xa0>)
 80023e2:	224f      	movs	r2, #79	@ 0x4f
 80023e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <MX_TIM1_Init+0xa0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <MX_TIM1_Init+0xa0>)
 80023ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <MX_TIM1_Init+0xa0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023fa:	4b18      	ldr	r3, [pc, #96]	@ (800245c <MX_TIM1_Init+0xa0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <MX_TIM1_Init+0xa0>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002406:	4815      	ldr	r0, [pc, #84]	@ (800245c <MX_TIM1_Init+0xa0>)
 8002408:	f005 fa53 	bl	80078b2 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002412:	f000 fb27 	bl	8002a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800241a:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4619      	mov	r1, r3
 8002422:	480e      	ldr	r0, [pc, #56]	@ (800245c <MX_TIM1_Init+0xa0>)
 8002424:	f005 fc13 	bl	8007c4e <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800242e:	f000 fb19 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4806      	ldr	r0, [pc, #24]	@ (800245c <MX_TIM1_Init+0xa0>)
 8002444:	f005 fe34 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800244e:	f000 fb09 	bl	8002a64 <Error_Handler>
  }
}
 8002452:	bf00      	nop
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000738 	.word	0x20000738
 8002460:	40012c00 	.word	0x40012c00

08002464 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002482:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <MX_TIM2_Init+0x98>)
 8002484:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002488:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800248a:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <MX_TIM2_Init+0x98>)
 800248c:	224f      	movs	r2, #79	@ 0x4f
 800248e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <MX_TIM2_Init+0x98>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002496:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <MX_TIM2_Init+0x98>)
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249e:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <MX_TIM2_Init+0x98>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a4:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <MX_TIM2_Init+0x98>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024aa:	4814      	ldr	r0, [pc, #80]	@ (80024fc <MX_TIM2_Init+0x98>)
 80024ac:	f005 fa01 	bl	80078b2 <HAL_TIM_Base_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024b6:	f000 fad5 	bl	8002a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024be:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024c0:	f107 0310 	add.w	r3, r7, #16
 80024c4:	4619      	mov	r1, r3
 80024c6:	480d      	ldr	r0, [pc, #52]	@ (80024fc <MX_TIM2_Init+0x98>)
 80024c8:	f005 fbc1 	bl	8007c4e <HAL_TIM_ConfigClockSource>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024d2:	f000 fac7 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <MX_TIM2_Init+0x98>)
 80024e4:	f005 fde4 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80024ee:	f000 fab9 	bl	8002a64 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000784 	.word	0x20000784

08002500 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800251e:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <MX_TIM3_Init+0x94>)
 8002520:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <MX_TIM3_Init+0x98>)
 8002522:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8002524:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <MX_TIM3_Init+0x94>)
 8002526:	224f      	movs	r2, #79	@ 0x4f
 8002528:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <MX_TIM3_Init+0x94>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002530:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <MX_TIM3_Init+0x94>)
 8002532:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MX_TIM3_Init+0x94>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <MX_TIM3_Init+0x94>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002544:	4813      	ldr	r0, [pc, #76]	@ (8002594 <MX_TIM3_Init+0x94>)
 8002546:	f005 f9b4 	bl	80078b2 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002550:	f000 fa88 	bl	8002a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002558:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	@ (8002594 <MX_TIM3_Init+0x94>)
 8002562:	f005 fb74 	bl	8007c4e <HAL_TIM_ConfigClockSource>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800256c:	f000 fa7a 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4805      	ldr	r0, [pc, #20]	@ (8002594 <MX_TIM3_Init+0x94>)
 800257e:	f005 fd97 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002588:	f000 fa6c 	bl	8002a64 <Error_Handler>
  }
}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200007d0 	.word	0x200007d0
 8002598:	40000400 	.word	0x40000400

0800259c <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <MX_TIM4_Init+0x98>)
 80025be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025c2:	224f      	movs	r2, #79	@ 0x4f
 80025c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025cc:	4b18      	ldr	r3, [pc, #96]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025e0:	4813      	ldr	r0, [pc, #76]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025e2:	f005 f966 	bl	80078b2 <HAL_TIM_Base_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80025ec:	f000 fa3a 	bl	8002a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f4:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4619      	mov	r1, r3
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <MX_TIM4_Init+0x94>)
 80025fe:	f005 fb26 	bl	8007c4e <HAL_TIM_ConfigClockSource>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002608:	f000 fa2c 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	@ (8002630 <MX_TIM4_Init+0x94>)
 800261a:	f005 fd49 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002624:	f000 fa1e 	bl	8002a64 <Error_Handler>
  }
}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000081c 	.word	0x2000081c
 8002634:	40000800 	.word	0x40000800

08002638 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 800263e:	4a15      	ldr	r2, [pc, #84]	@ (8002694 <MX_USART1_UART_Init+0x5c>)
 8002640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002642:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 8002644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_UART_Init(&huart1) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_USART1_UART_Init+0x58>)
 800267c:	f005 fdbe 	bl	80081fc <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002686:	f000 f9ed 	bl	8002a64 <Error_Handler>
  }
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000868 	.word	0x20000868
 8002694:	40013800 	.word	0x40013800

08002698 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800269c:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 800269e:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <MX_USART2_UART_Init+0x60>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026a2:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80026da:	2300      	movs	r3, #0
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026e2:	f007 f8a3 	bl	800982c <HAL_RS485Ex_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026ec:	f000 f9ba 	bl	8002a64 <Error_Handler>
  }
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200008f0 	.word	0x200008f0
 80026f8:	40004400 	.word	0x40004400

080026fc <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002702:	4a16      	ldr	r2, [pc, #88]	@ (800275c <MX_USART3_UART_Init+0x60>)
 8002704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800273e:	2300      	movs	r3, #0
 8002740:	2200      	movs	r2, #0
 8002742:	2100      	movs	r1, #0
 8002744:	4804      	ldr	r0, [pc, #16]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002746:	f007 f871 	bl	800982c <HAL_RS485Ex_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002750:	f000 f988 	bl	8002a64 <Error_Handler>
  }
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000978 	.word	0x20000978
 800275c:	40004800 	.word	0x40004800

08002760 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002766:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <MX_DMA_Init+0x88>)
 8002768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276a:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <MX_DMA_Init+0x88>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6493      	str	r3, [r2, #72]	@ 0x48
 8002772:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <MX_DMA_Init+0x88>)
 8002774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2105      	movs	r1, #5
 8002782:	200c      	movs	r0, #12
 8002784:	f002 fa4a 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002788:	200c      	movs	r0, #12
 800278a:	f002 fa63 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2105      	movs	r1, #5
 8002792:	200d      	movs	r0, #13
 8002794:	f002 fa42 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002798:	200d      	movs	r0, #13
 800279a:	f002 fa5b 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2105      	movs	r1, #5
 80027a2:	200e      	movs	r0, #14
 80027a4:	f002 fa3a 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80027a8:	200e      	movs	r0, #14
 80027aa:	f002 fa53 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2105      	movs	r1, #5
 80027b2:	200f      	movs	r0, #15
 80027b4:	f002 fa32 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80027b8:	200f      	movs	r0, #15
 80027ba:	f002 fa4b 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2105      	movs	r1, #5
 80027c2:	2010      	movs	r0, #16
 80027c4:	f002 fa2a 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80027c8:	2010      	movs	r0, #16
 80027ca:	f002 fa43 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	2011      	movs	r0, #17
 80027d4:	f002 fa22 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80027d8:	2011      	movs	r0, #17
 80027da:	f002 fa3b 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000

080027ec <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002802:	4b89      	ldr	r3, [pc, #548]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	4a88      	ldr	r2, [pc, #544]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002808:	f043 0310 	orr.w	r3, r3, #16
 800280c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280e:	4b86      	ldr	r3, [pc, #536]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	4b83      	ldr	r3, [pc, #524]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	4a82      	ldr	r2, [pc, #520]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002826:	4b80      	ldr	r3, [pc, #512]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002832:	4b7d      	ldr	r3, [pc, #500]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002836:	4a7c      	ldr	r2, [pc, #496]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800283e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b77      	ldr	r3, [pc, #476]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	4a76      	ldr	r2, [pc, #472]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002856:	4b74      	ldr	r3, [pc, #464]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4b71      	ldr	r3, [pc, #452]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	4a70      	ldr	r2, [pc, #448]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800287a:	4b6b      	ldr	r3, [pc, #428]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	4a6a      	ldr	r2, [pc, #424]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002886:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <MX_GPIO_Init+0x23c>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOE, RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002892:	2200      	movs	r2, #0
 8002894:	f240 511c 	movw	r1, #1308	@ 0x51c
 8002898:	4864      	ldr	r0, [pc, #400]	@ (8002a2c <MX_GPIO_Init+0x240>)
 800289a:	f002 fe09 	bl	80054b0 <HAL_GPIO_WritePin>
                          |CCU5V_EN_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80028a4:	4862      	ldr	r0, [pc, #392]	@ (8002a30 <MX_GPIO_Init+0x244>)
 80028a6:	f002 fe03 	bl	80054b0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, PL_EN_Pin|UHF_EN_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 80028b0:	4860      	ldr	r0, [pc, #384]	@ (8002a34 <MX_GPIO_Init+0x248>)
 80028b2:	f002 fdfd 	bl	80054b0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin, GPIO_PIN_RESET);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80028bc:	485e      	ldr	r0, [pc, #376]	@ (8002a38 <MX_GPIO_Init+0x24c>)
 80028be:	f002 fdf7 	bl	80054b0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ADCS_EN_GPIO_Port, ADCS_EN_Pin, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028cc:	f002 fdf0 	bl	80054b0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2108      	movs	r1, #8
 80028d4:	4859      	ldr	r0, [pc, #356]	@ (8002a3c <MX_GPIO_Init+0x250>)
 80028d6:	f002 fdeb 	bl	80054b0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 80028da:	f240 531c 	movw	r3, #1308	@ 0x51c
 80028de:	61fb      	str	r3, [r7, #28]
                          |CCU5V_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	484e      	ldr	r0, [pc, #312]	@ (8002a2c <MX_GPIO_Init+0x240>)
 80028f4:	f002 fc32 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin;
 80028f8:	f248 1304 	movw	r3, #33028	@ 0x8104
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fe:	2301      	movs	r3, #1
 8002900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	4619      	mov	r1, r3
 8002910:	4847      	ldr	r0, [pc, #284]	@ (8002a30 <MX_GPIO_Init+0x244>)
 8002912:	f002 fc23 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_FLT_Pin|XB12V_FLT_Pin|CCU5V_FLT_Pin|PL5V_FLT_Pin
 8002916:	f640 2383 	movw	r3, #2691	@ 0xa83
 800291a:	61fb      	str	r3, [r7, #28]
                          |RS5V_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4840      	ldr	r0, [pc, #256]	@ (8002a2c <MX_GPIO_Init+0x240>)
 800292c:	f002 fc16 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS3V3_FLT_Pin|CCU_FAULT_Pin|PL_FLT_Pin|ADCS_FAULT_Pin
 8002930:	f244 3305 	movw	r3, #17157	@ 0x4305
 8002934:	61fb      	str	r3, [r7, #28]
                          |OBC_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	483b      	ldr	r0, [pc, #236]	@ (8002a34 <MX_GPIO_Init+0x248>)
 8002946:	f002 fc09 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PL_EN_Pin|UHF_EN_Pin;
 800294a:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800294e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	2301      	movs	r3, #1
 8002952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	4834      	ldr	r0, [pc, #208]	@ (8002a34 <MX_GPIO_Init+0x248>)
 8002964:	f002 fbfa 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin;
 8002968:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800296c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296e:	2301      	movs	r3, #1
 8002970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	482d      	ldr	r0, [pc, #180]	@ (8002a38 <MX_GPIO_Init+0x24c>)
 8002982:	f002 fbeb 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCS_EN_Pin;
 8002986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADCS_EN_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4619      	mov	r1, r3
 800299e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a2:	f002 fbdb 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SYNC_PULSE_Pin;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SYNC_PULSE_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	481e      	ldr	r0, [pc, #120]	@ (8002a34 <MX_GPIO_Init+0x248>)
 80029bc:	f002 fbce 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = UHF_FLT_Pin|GPS_FLT_Pin|ADCS12V_FLT_Pin|ADCS5V_FLT_Pin;
 80029c0:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 80029c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	4816      	ldr	r0, [pc, #88]	@ (8002a30 <MX_GPIO_Init+0x244>)
 80029d6:	f002 fbc1 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS_EN_Pin;
 80029da:	2340      	movs	r3, #64	@ 0x40
 80029dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	4619      	mov	r1, r3
 80029ee:	4810      	ldr	r0, [pc, #64]	@ (8002a30 <MX_GPIO_Init+0x244>)
 80029f0:	f002 fbb4 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BOOT0_Pin;
 80029f4:	2308      	movs	r3, #8
 80029f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480c      	ldr	r0, [pc, #48]	@ (8002a3c <MX_GPIO_Init+0x250>)
 8002a0c:	f002 fba6 	bl	800515c <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2105      	movs	r1, #5
 8002a14:	2007      	movs	r0, #7
 8002a16:	f002 f901 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a1a:	2007      	movs	r0, #7
 8002a1c:	f002 f91a 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 8002a20:	bf00      	nop
 8002a22:	3730      	adds	r7, #48	@ 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	48001000 	.word	0x48001000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000c00 	.word	0x48000c00
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	48001c00 	.word	0x48001c00

08002a40 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002a52:	f000 fdf9 	bl	8003648 <HAL_IncTick>
  }
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40001000 	.word	0x40001000

08002a64 <Error_Handler>:

void Error_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	bf00      	nop
  __disable_irq();
  while(1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <Error_Handler+0x8>

08002a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_MspInit+0x4c>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_MspInit+0x4c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_MspInit+0x4c>)
 8002a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_MspInit+0x4c>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <HAL_MspInit+0x4c>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9a:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_MspInit+0x4c>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	210f      	movs	r1, #15
 8002aaa:	f06f 0001 	mvn.w	r0, #1
 8002aae:	f002 f8b5 	bl	8004c1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0ae      	sub	sp, #184	@ 0xb8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad8:	f107 0318 	add.w	r3, r7, #24
 8002adc:	228c      	movs	r2, #140	@ 0x8c
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f009 fd4b 	bl	800c57c <memset>
  if(hadc->Instance==ADC1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a42      	ldr	r2, [pc, #264]	@ (8002bf4 <HAL_ADC_MspInit+0x134>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d17d      	bne.n	8002bec <HAL_ADC_MspInit+0x12c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002af0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002af4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002af6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002b06:	2308      	movs	r3, #8
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002b12:	2302      	movs	r3, #2
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002b16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b1a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 f839 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002b2c:	f7ff ff9a 	bl	8002a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b30:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b34:	4a30      	ldr	r2, [pc, #192]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b64:	4a24      	ldr	r2, [pc, #144]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6c:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b78:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <HAL_ADC_MspInit+0x138>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = RS5V_I_Pin|PS5V_I_Pin|ADCS5V_1_Pin|GPS_I_Pin
 8002b90:	233f      	movs	r3, #63	@ 0x3f
 8002b92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |PL_I_Pin|ADCS12V_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4814      	ldr	r0, [pc, #80]	@ (8002bfc <HAL_ADC_MspInit+0x13c>)
 8002baa:	f002 fad7 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M_OUT_Pin|SA2_I_Pin|SA3_I_Pin|XB12V_I_Pin
 8002bae:	23ff      	movs	r3, #255	@ 0xff
 8002bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |CCU5V_I_Pin|CCU_I_Pin|RS3V3_I_Pin|ADCS_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bca:	f002 fac7 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF_I_Pin|OBC_I_Pin;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4806      	ldr	r0, [pc, #24]	@ (8002c00 <HAL_ADC_MspInit+0x140>)
 8002be8:	f002 fab8 	bl	800515c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002bec:	bf00      	nop
 8002bee:	37b8      	adds	r7, #184	@ 0xb8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	50040000 	.word	0x50040000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	48000800 	.word	0x48000800
 8002c00:	48000400 	.word	0x48000400

08002c04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0ac      	sub	sp, #176	@ 0xb0
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	228c      	movs	r2, #140	@ 0x8c
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f009 fca9 	bl	800c57c <memset>
  if(hi2c->Instance==I2C2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a4b      	ldr	r2, [pc, #300]	@ (8002d5c <HAL_I2C_MspInit+0x158>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	f040 808e 	bne.w	8002d52 <HAL_I2C_MspInit+0x14e>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 ffa8 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c4e:	f7ff ff09 	bl	8002a64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <HAL_I2C_MspInit+0x15c>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	4a42      	ldr	r2, [pc, #264]	@ (8002d60 <HAL_I2C_MspInit+0x15c>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5e:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <HAL_I2C_MspInit+0x15c>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002c6a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002c6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c72:	2312      	movs	r3, #18
 8002c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c84:	2304      	movs	r3, #4
 8002c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4834      	ldr	r0, [pc, #208]	@ (8002d64 <HAL_I2C_MspInit+0x160>)
 8002c92:	f002 fa63 	bl	800515c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c96:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <HAL_I2C_MspInit+0x15c>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <HAL_I2C_MspInit+0x15c>)
 8002c9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <HAL_I2C_MspInit+0x15c>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002cae:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d6c <HAL_I2C_MspInit+0x168>)
 8002cb2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cba:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc0:	4b29      	ldr	r3, [pc, #164]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cc6:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cc8:	2280      	movs	r2, #128	@ 0x80
 8002cca:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ccc:	4b26      	ldr	r3, [pc, #152]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cd2:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002cd8:	4b23      	ldr	r3, [pc, #140]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cde:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002ce4:	4820      	ldr	r0, [pc, #128]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002ce6:	f001 ffc3 	bl	8004c70 <HAL_DMA_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8002cf0:	f7ff feb8 	bl	8002a64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <HAL_I2C_MspInit+0x164>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_I2C_MspInit+0x170>)
 8002d04:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d08:	2203      	movs	r2, #3
 8002d0a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d0e:	2210      	movs	r2, #16
 8002d10:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d18:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d1a:	2280      	movs	r2, #128	@ 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002d36:	480e      	ldr	r0, [pc, #56]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d38:	f001 ff9a 	bl	8004c70 <HAL_DMA_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 8002d42:	f7ff fe8f 	bl	8002a64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d4c:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_I2C_MspInit+0x16c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002d52:	bf00      	nop
 8002d54:	37b0      	adds	r7, #176	@ 0xb0
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40005800 	.word	0x40005800
 8002d60:	40021000 	.word	0x40021000
 8002d64:	48000400 	.word	0x48000400
 8002d68:	200005e0 	.word	0x200005e0
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	20000628 	.word	0x20000628
 8002d74:	40020044 	.word	0x40020044

08002d78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08c      	sub	sp, #48	@ 0x30
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a42      	ldr	r2, [pc, #264]	@ (8002ea0 <HAL_SPI_MspInit+0x128>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d129      	bne.n	8002dee <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	4a41      	ldr	r2, [pc, #260]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002da0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002db8:	f043 0310 	orr.w	r3, r3, #16
 8002dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SS_Pin|SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002dca:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ddc:	2305      	movs	r3, #5
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	4619      	mov	r1, r3
 8002de6:	4830      	ldr	r0, [pc, #192]	@ (8002ea8 <HAL_SPI_MspInit+0x130>)
 8002de8:	f002 f9b8 	bl	800515c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002dec:	e053      	b.n	8002e96 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2e      	ldr	r2, [pc, #184]	@ (8002eac <HAL_SPI_MspInit+0x134>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d14e      	bne.n	8002e96 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002df8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e10:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <HAL_SPI_MspInit+0x12c>)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SS_Pin;
 8002e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e52:	2306      	movs	r3, #6
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e60:	f002 f97c 	bl	800515c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SP13_SCK_Pin|SPI3_MISO_Pin|SP13_MOSI_Pin;
 8002e64:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e76:	2306      	movs	r3, #6
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7a:	f107 031c 	add.w	r3, r7, #28
 8002e7e:	4619      	mov	r1, r3
 8002e80:	480b      	ldr	r0, [pc, #44]	@ (8002eb0 <HAL_SPI_MspInit+0x138>)
 8002e82:	f002 f96b 	bl	800515c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2105      	movs	r1, #5
 8002e8a:	2033      	movs	r0, #51	@ 0x33
 8002e8c:	f001 fec6 	bl	8004c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002e90:	2033      	movs	r0, #51	@ 0x33
 8002e92:	f001 fedf 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3730      	adds	r7, #48	@ 0x30
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40013000 	.word	0x40013000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	48001000 	.word	0x48001000
 8002eac:	40003c00 	.word	0x40003c00
 8002eb0:	48000800 	.word	0x48000800

08002eb4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	@ (8002f58 <HAL_TIM_Base_MspInit+0xa4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ec6:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002ecc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ed2:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ede:	e034      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef6:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
}
 8002f02:	e022      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a15      	ldr	r2, [pc, #84]	@ (8002f60 <HAL_TIM_Base_MspInit+0xac>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10c      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0e:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	4a12      	ldr	r2, [pc, #72]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
}
 8002f26:	e010      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <HAL_TIM_Base_MspInit+0xb0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10b      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3e:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa8>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800

08002f68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b0b2      	sub	sp, #200	@ 0xc8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f84:	228c      	movs	r2, #140	@ 0x8c
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f009 faf7 	bl	800c57c <memset>
  if(huart->Instance==USART1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a72      	ldr	r2, [pc, #456]	@ (800315c <HAL_UART_MspInit+0x1f4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d145      	bne.n	8003024 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fdf7 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fb0:	f7ff fd58 	bl	8002a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb8:	4a69      	ldr	r2, [pc, #420]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8002fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc0:	4b67      	ldr	r3, [pc, #412]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	4b64      	ldr	r3, [pc, #400]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	4a63      	ldr	r2, [pc, #396]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fd8:	4b61      	ldr	r3, [pc, #388]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8002fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002fe4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ffe:	2307      	movs	r3, #7
 8003000:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800300e:	f002 f8a5 	bl	800515c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2105      	movs	r1, #5
 8003016:	2025      	movs	r0, #37	@ 0x25
 8003018:	f001 fe00 	bl	8004c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800301c:	2025      	movs	r0, #37	@ 0x25
 800301e:	f001 fe19 	bl	8004c54 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003022:	e169      	b.n	80032f8 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4e      	ldr	r2, [pc, #312]	@ (8003164 <HAL_UART_MspInit+0x1fc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f040 80a6 	bne.w	800317c <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003030:	2302      	movs	r3, #2
 8003032:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003034:	2300      	movs	r3, #0
 8003036:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003038:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fdab 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003048:	f7ff fd0c 	bl	8002a64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800304c:	4b44      	ldr	r3, [pc, #272]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	4a43      	ldr	r2, [pc, #268]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8003052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003056:	6593      	str	r3, [r2, #88]	@ 0x58
 8003058:	4b41      	ldr	r3, [pc, #260]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003064:	4b3e      	ldr	r3, [pc, #248]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003068:	4a3d      	ldr	r2, [pc, #244]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003070:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_UART_MspInit+0x1f8>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RS4851_DE_Pin|RS4851_TX_Pin|RS4851_RX_Pin;
 800307c:	2370      	movs	r3, #112	@ 0x70
 800307e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003094:	2307      	movs	r3, #7
 8003096:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800309e:	4619      	mov	r1, r3
 80030a0:	4831      	ldr	r0, [pc, #196]	@ (8003168 <HAL_UART_MspInit+0x200>)
 80030a2:	f002 f85b 	bl	800515c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80030a6:	4b31      	ldr	r3, [pc, #196]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030a8:	4a31      	ldr	r2, [pc, #196]	@ (8003170 <HAL_UART_MspInit+0x208>)
 80030aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80030ac:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030ae:	2202      	movs	r2, #2
 80030b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030b4:	2210      	movs	r2, #16
 80030b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b8:	4b2c      	ldr	r3, [pc, #176]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030be:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c4:	4b29      	ldr	r3, [pc, #164]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ca:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80030d0:	4b26      	ldr	r3, [pc, #152]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030d6:	4b25      	ldr	r3, [pc, #148]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030d8:	2200      	movs	r2, #0
 80030da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030dc:	4823      	ldr	r0, [pc, #140]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030de:	f001 fdc7 	bl	8004c70 <HAL_DMA_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_MspInit+0x184>
      Error_Handler();
 80030e8:	f7ff fcbc 	bl	8002a64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80030f2:	4a1e      	ldr	r2, [pc, #120]	@ (800316c <HAL_UART_MspInit+0x204>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80030f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 80030fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003178 <HAL_UART_MspInit+0x210>)
 80030fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80030fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003100:	2202      	movs	r2, #2
 8003102:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003104:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003110:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003112:	2280      	movs	r2, #128	@ 0x80
 8003114:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003116:	4b17      	ldr	r3, [pc, #92]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311c:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003122:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003124:	2200      	movs	r2, #0
 8003126:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 800312a:	2200      	movs	r2, #0
 800312c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800312e:	4811      	ldr	r0, [pc, #68]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003130:	f001 fd9e 	bl	8004c70 <HAL_DMA_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 800313a:	f7ff fc93 	bl	8002a64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0c      	ldr	r2, [pc, #48]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003142:	675a      	str	r2, [r3, #116]	@ 0x74
 8003144:	4a0b      	ldr	r2, [pc, #44]	@ (8003174 <HAL_UART_MspInit+0x20c>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2105      	movs	r1, #5
 800314e:	2026      	movs	r0, #38	@ 0x26
 8003150:	f001 fd64 	bl	8004c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003154:	2026      	movs	r0, #38	@ 0x26
 8003156:	f001 fd7d 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 800315a:	e0cd      	b.n	80032f8 <HAL_UART_MspInit+0x390>
 800315c:	40013800 	.word	0x40013800
 8003160:	40021000 	.word	0x40021000
 8003164:	40004400 	.word	0x40004400
 8003168:	48000c00 	.word	0x48000c00
 800316c:	20000a00 	.word	0x20000a00
 8003170:	40020080 	.word	0x40020080
 8003174:	20000a48 	.word	0x20000a48
 8003178:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5f      	ldr	r2, [pc, #380]	@ (8003300 <HAL_UART_MspInit+0x398>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f040 80b8 	bne.w	80032f8 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003188:	2304      	movs	r3, #4
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800318c:	2300      	movs	r3, #0
 800318e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003190:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fcff 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 80031a0:	f7ff fc60 	bl	8002a64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031a4:	4b57      	ldr	r3, [pc, #348]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	4a56      	ldr	r2, [pc, #344]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b0:	4b54      	ldr	r3, [pc, #336]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031bc:	4b51      	ldr	r3, [pc, #324]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c0:	4a50      	ldr	r2, [pc, #320]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031da:	f043 0308 	orr.w	r3, r3, #8
 80031de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e0:	4b48      	ldr	r3, [pc, #288]	@ (8003304 <HAL_UART_MspInit+0x39c>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS4852_TX_Pin|RS4852_RX_Pin;
 80031ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003206:	2307      	movs	r3, #7
 8003208:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003210:	4619      	mov	r1, r3
 8003212:	483d      	ldr	r0, [pc, #244]	@ (8003308 <HAL_UART_MspInit+0x3a0>)
 8003214:	f001 ffa2 	bl	800515c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8003218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800321c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003232:	2307      	movs	r3, #7
 8003234:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8003238:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800323c:	4619      	mov	r1, r3
 800323e:	4833      	ldr	r0, [pc, #204]	@ (800330c <HAL_UART_MspInit+0x3a4>)
 8003240:	f001 ff8c 	bl	800515c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003244:	4b32      	ldr	r3, [pc, #200]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003246:	4a33      	ldr	r2, [pc, #204]	@ (8003314 <HAL_UART_MspInit+0x3ac>)
 8003248:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 800324a:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 800324c:	2202      	movs	r2, #2
 800324e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003250:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003252:	2210      	movs	r2, #16
 8003254:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003256:	4b2e      	ldr	r3, [pc, #184]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800325c:	4b2c      	ldr	r3, [pc, #176]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003262:	4b2b      	ldr	r3, [pc, #172]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003264:	2200      	movs	r2, #0
 8003266:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003268:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800326e:	4b28      	ldr	r3, [pc, #160]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003274:	4b26      	ldr	r3, [pc, #152]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800327a:	4825      	ldr	r0, [pc, #148]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 800327c:	f001 fcf8 	bl	8004c70 <HAL_DMA_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_MspInit+0x322>
      Error_Handler();
 8003286:	f7ff fbed 	bl	8002a64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a20      	ldr	r2, [pc, #128]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 800328e:	671a      	str	r2, [r3, #112]	@ 0x70
 8003290:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <HAL_UART_MspInit+0x3a8>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003296:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 8003298:	4a20      	ldr	r2, [pc, #128]	@ (800331c <HAL_UART_MspInit+0x3b4>)
 800329a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 800329e:	2202      	movs	r2, #2
 80032a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ba:	4b17      	ldr	r3, [pc, #92]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80032c0:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032c6:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80032cc:	4812      	ldr	r0, [pc, #72]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032ce:	f001 fccf 	bl	8004c70 <HAL_DMA_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_MspInit+0x374>
      Error_Handler();
 80032d8:	f7ff fbc4 	bl	8002a64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0e      	ldr	r2, [pc, #56]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80032e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <HAL_UART_MspInit+0x3b0>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2105      	movs	r1, #5
 80032ec:	2027      	movs	r0, #39	@ 0x27
 80032ee:	f001 fc95 	bl	8004c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032f2:	2027      	movs	r0, #39	@ 0x27
 80032f4:	f001 fcae 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 80032f8:	bf00      	nop
 80032fa:	37c8      	adds	r7, #200	@ 0xc8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40004800 	.word	0x40004800
 8003304:	40021000 	.word	0x40021000
 8003308:	48000400 	.word	0x48000400
 800330c:	48000c00 	.word	0x48000c00
 8003310:	20000a90 	.word	0x20000a90
 8003314:	4002001c 	.word	0x4002001c
 8003318:	20000ad8 	.word	0x20000ad8
 800331c:	40020030 	.word	0x40020030

08003320 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08e      	sub	sp, #56	@ 0x38
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800332e:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_InitTick+0xe0>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	4a33      	ldr	r2, [pc, #204]	@ (8003400 <HAL_InitTick+0xe0>)
 8003334:	f043 0310 	orr.w	r3, r3, #16
 8003338:	6593      	str	r3, [r2, #88]	@ 0x58
 800333a:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_InitTick+0xe0>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003346:	f107 0210 	add.w	r2, r7, #16
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fb8f 	bl	8006a74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003360:	f003 fb5c 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 8003364:	6378      	str	r0, [r7, #52]	@ 0x34
 8003366:	e004      	b.n	8003372 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003368:	f003 fb58 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 800336c:	4603      	mov	r3, r0
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003374:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <HAL_InitTick+0xe4>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0c9b      	lsrs	r3, r3, #18
 800337c:	3b01      	subs	r3, #1
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003380:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <HAL_InitTick+0xe8>)
 8003382:	4a22      	ldr	r2, [pc, #136]	@ (800340c <HAL_InitTick+0xec>)
 8003384:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_InitTick+0xe8>)
 8003388:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800338c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800338e:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <HAL_InitTick+0xe8>)
 8003390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003392:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003394:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <HAL_InitTick+0xe8>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339a:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <HAL_InitTick+0xe8>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a0:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <HAL_InitTick+0xe8>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80033a6:	4818      	ldr	r0, [pc, #96]	@ (8003408 <HAL_InitTick+0xe8>)
 80033a8:	f004 fa83 	bl	80078b2 <HAL_TIM_Base_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80033b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11b      	bne.n	80033f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80033ba:	4813      	ldr	r0, [pc, #76]	@ (8003408 <HAL_InitTick+0xe8>)
 80033bc:	f004 fad0 	bl	8007960 <HAL_TIM_Base_Start_IT>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80033c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d111      	bne.n	80033f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033ce:	2036      	movs	r0, #54	@ 0x36
 80033d0:	f001 fc40 	bl	8004c54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d808      	bhi.n	80033ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80033da:	2200      	movs	r2, #0
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	2036      	movs	r0, #54	@ 0x36
 80033e0:	f001 fc1c 	bl	8004c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <HAL_InitTick+0xf0>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e002      	b.n	80033f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3738      	adds	r7, #56	@ 0x38
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	431bde83 	.word	0x431bde83
 8003408:	20000b34 	.word	0x20000b34
 800340c:	40001000 	.word	0x40001000
 8003410:	200001bc 	.word	0x200001bc

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <NMI_Handler+0x4>

0800341c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <HardFault_Handler+0x4>

08003424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <MemManage_Handler+0x4>

0800342c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <BusFault_Handler+0x4>

08003434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <UsageFault_Handler+0x4>

0800343c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SYNC_PULSE_Pin);
 800344e:	2002      	movs	r0, #2
 8003450:	f002 f846 	bl	80054e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <DMA1_Channel2_IRQHandler+0x10>)
 800345e:	f001 fd9e 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000a90 	.word	0x20000a90

0800346c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003470:	4802      	ldr	r0, [pc, #8]	@ (800347c <DMA1_Channel3_IRQHandler+0x10>)
 8003472:	f001 fd94 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000ad8 	.word	0x20000ad8

08003480 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003484:	4802      	ldr	r0, [pc, #8]	@ (8003490 <DMA1_Channel4_IRQHandler+0x10>)
 8003486:	f001 fd8a 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000628 	.word	0x20000628

08003494 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003498:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <DMA1_Channel5_IRQHandler+0x10>)
 800349a:	f001 fd80 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200005e0 	.word	0x200005e0

080034a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <DMA1_Channel6_IRQHandler+0x10>)
 80034ae:	f001 fd76 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000a48 	.word	0x20000a48

080034bc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80034c0:	4802      	ldr	r0, [pc, #8]	@ (80034cc <DMA1_Channel7_IRQHandler+0x10>)
 80034c2:	f001 fd6c 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000a00 	.word	0x20000a00

080034d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034d4:	4802      	ldr	r0, [pc, #8]	@ (80034e0 <USART1_IRQHandler+0x10>)
 80034d6:	f004 ffb5 	bl	8008444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000868 	.word	0x20000868

080034e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034e8:	4802      	ldr	r0, [pc, #8]	@ (80034f4 <USART2_IRQHandler+0x10>)
 80034ea:	f004 ffab 	bl	8008444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200008f0 	.word	0x200008f0

080034f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <USART3_IRQHandler+0x10>)
 80034fe:	f004 ffa1 	bl	8008444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000978 	.word	0x20000978

0800350c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <SPI3_IRQHandler+0x10>)
 8003512:	f004 f8af 	bl	8007674 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200006d4 	.word	0x200006d4

08003520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <TIM6_DAC_IRQHandler+0x10>)
 8003526:	f004 fa8b 	bl	8007a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000b34 	.word	0x20000b34

08003534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800353c:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <_sbrk+0x5c>)
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <_sbrk+0x60>)
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003548:	4b13      	ldr	r3, [pc, #76]	@ (8003598 <_sbrk+0x64>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <_sbrk+0x64>)
 8003552:	4a12      	ldr	r2, [pc, #72]	@ (800359c <_sbrk+0x68>)
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <_sbrk+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d207      	bcs.n	8003574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003564:	f009 f832 	bl	800c5cc <__errno>
 8003568:	4603      	mov	r3, r0
 800356a:	220c      	movs	r2, #12
 800356c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e009      	b.n	8003588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003574:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <_sbrk+0x64>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	4a05      	ldr	r2, [pc, #20]	@ (8003598 <_sbrk+0x64>)
 8003584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003586:	68fb      	ldr	r3, [r7, #12]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20040000 	.word	0x20040000
 8003594:	00000400 	.word	0x00000400
 8003598:	20000b80 	.word	0x20000b80
 800359c:	20004130 	.word	0x20004130

080035a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035a4:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <SystemInit+0x20>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035aa:	4a05      	ldr	r2, [pc, #20]	@ (80035c0 <SystemInit+0x20>)
 80035ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035c8:	f7ff ffea 	bl	80035a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035cc:	480c      	ldr	r0, [pc, #48]	@ (8003600 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ce:	490d      	ldr	r1, [pc, #52]	@ (8003604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003608 <LoopForever+0xe>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d4:	e002      	b.n	80035dc <LoopCopyDataInit>

080035d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035da:	3304      	adds	r3, #4

080035dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e0:	d3f9      	bcc.n	80035d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e2:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003610 <LoopForever+0x16>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e8:	e001      	b.n	80035ee <LoopFillZerobss>

080035ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035ec:	3204      	adds	r2, #4

080035ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f0:	d3fb      	bcc.n	80035ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035f2:	f008 fff1 	bl	800c5d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035f6:	f7fe fc6f 	bl	8001ed8 <main>

080035fa <LoopForever>:

LoopForever:
    b LoopForever
 80035fa:	e7fe      	b.n	80035fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80035fc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003608:	0800d278 	.word	0x0800d278
  ldr r2, =_sbss
 800360c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003610:	20004130 	.word	0x20004130

08003614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC1_2_IRQHandler>

08003616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003620:	2003      	movs	r0, #3
 8003622:	f001 faf0 	bl	8004c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003626:	200f      	movs	r0, #15
 8003628:	f7ff fe7a 	bl	8003320 <HAL_InitTick>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	71fb      	strb	r3, [r7, #7]
 8003636:	e001      	b.n	800363c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003638:	f7ff fa1a 	bl	8002a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800363c:	79fb      	ldrb	r3, [r7, #7]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_IncTick+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_IncTick+0x24>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_IncTick+0x24>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	200001c0 	.word	0x200001c0
 800366c:	20000b84 	.word	0x20000b84

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000b84 	.word	0x20000b84

08003688 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3360      	adds	r3, #96	@ 0x60
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <LL_ADC_SetOffset+0x44>)
 8003712:	4013      	ands	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	03fff000 	.word	0x03fff000

08003738 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3360      	adds	r3, #96	@ 0x60
 8003746:	461a      	mov	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3360      	adds	r3, #96	@ 0x60
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	431a      	orrs	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	615a      	str	r2, [r3, #20]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b087      	sub	sp, #28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3330      	adds	r3, #48	@ 0x30
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	4413      	add	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	211f      	movs	r1, #31
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	401a      	ands	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	f003 011f 	and.w	r1, r3, #31
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	431a      	orrs	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800383e:	b480      	push	{r7}
 8003840:	b087      	sub	sp, #28
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3314      	adds	r3, #20
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	0e5b      	lsrs	r3, r3, #25
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	4413      	add	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	0d1b      	lsrs	r3, r3, #20
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2107      	movs	r1, #7
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	401a      	ands	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	0d1b      	lsrs	r3, r3, #20
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	431a      	orrs	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	43db      	mvns	r3, r3
 80038ae:	401a      	ands	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0318 	and.w	r3, r3, #24
 80038b6:	4908      	ldr	r1, [pc, #32]	@ (80038d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038b8:	40d9      	lsrs	r1, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	400b      	ands	r3, r1
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c2:	431a      	orrs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	0007ffff 	.word	0x0007ffff

080038dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 031f 	and.w	r3, r3, #31
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6093      	str	r3, [r2, #8]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003930:	d101      	bne.n	8003936 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003958:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003980:	d101      	bne.n	8003986 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <LL_ADC_IsEnabled+0x18>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <LL_ADC_IsEnabled+0x1a>
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d101      	bne.n	8003a22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d101      	bne.n	8003a48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e133      	b.n	8003cda <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff f81d 	bl	8002ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff3f 	bl	800391c <LL_ADC_IsDeepPowerDownEnabled>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff25 	bl	80038f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff5a 	bl	800396c <LL_ADC_IsInternalRegulatorEnabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d115      	bne.n	8003aea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff3e 	bl	8003944 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac8:	4b86      	ldr	r3, [pc, #536]	@ (8003ce4 <HAL_ADC_Init+0x28c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	4a86      	ldr	r2, [pc, #536]	@ (8003ce8 <HAL_ADC_Init+0x290>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003adc:	e002      	b.n	8003ae4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f9      	bne.n	8003ade <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff3c 	bl	800396c <LL_ADC_IsInternalRegulatorEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	f043 0210 	orr.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff75 	bl	8003a0a <LL_ADC_REG_IsConversionOngoing>
 8003b20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 80cc 	bne.w	8003cc8 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f040 80c8 	bne.w	8003cc8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b40:	f043 0202 	orr.w	r2, r3, #2
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff35 	bl	80039bc <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d115      	bne.n	8003b84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b58:	4864      	ldr	r0, [pc, #400]	@ (8003cec <HAL_ADC_Init+0x294>)
 8003b5a:	f7ff ff2f 	bl	80039bc <LL_ADC_IsEnabled>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4863      	ldr	r0, [pc, #396]	@ (8003cf0 <HAL_ADC_Init+0x298>)
 8003b62:	f7ff ff2b 	bl	80039bc <LL_ADC_IsEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	431c      	orrs	r4, r3
 8003b6a:	4862      	ldr	r0, [pc, #392]	@ (8003cf4 <HAL_ADC_Init+0x29c>)
 8003b6c:	f7ff ff26 	bl	80039bc <LL_ADC_IsEnabled>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4323      	orrs	r3, r4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	485e      	ldr	r0, [pc, #376]	@ (8003cf8 <HAL_ADC_Init+0x2a0>)
 8003b80:	f7ff fd82 	bl	8003688 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7e5b      	ldrb	r3, [r3, #25]
 8003b88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	045b      	lsls	r3, r3, #17
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	4b46      	ldr	r3, [pc, #280]	@ (8003cfc <HAL_ADC_Init+0x2a4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff1b 	bl	8003a30 <LL_ADC_INJ_IsConversionOngoing>
 8003bfa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d140      	bne.n	8003c84 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13d      	bne.n	8003c84 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7e1b      	ldrb	r3, [r3, #24]
 8003c10:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c12:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c2a:	f023 0306 	bic.w	r3, r3, #6
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d118      	bne.n	8003c74 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c64:	430a      	orrs	r2, r1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	611a      	str	r2, [r3, #16]
 8003c72:	e007      	b.n	8003c84 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	f023 010f 	bic.w	r1, r3, #15
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca4:	e007      	b.n	8003cb6 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 020f 	bic.w	r2, r2, #15
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cc6:	e007      	b.n	8003cd8 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	f043 0210 	orr.w	r2, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	@ 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200001b8 	.word	0x200001b8
 8003ce8:	053e2d63 	.word	0x053e2d63
 8003cec:	50040000 	.word	0x50040000
 8003cf0:	50040100 	.word	0x50040100
 8003cf4:	50040200 	.word	0x50040200
 8003cf8:	50040300 	.word	0x50040300
 8003cfc:	fff0c007 	.word	0xfff0c007

08003d00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d0c:	4853      	ldr	r0, [pc, #332]	@ (8003e5c <HAL_ADC_Start_DMA+0x15c>)
 8003d0e:	f7ff fde5 	bl	80038dc <LL_ADC_GetMultimode>
 8003d12:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fe76 	bl	8003a0a <LL_ADC_REG_IsConversionOngoing>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 8093 	bne.w	8003e4c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_Start_DMA+0x34>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e08e      	b.n	8003e52 <HAL_ADC_Start_DMA+0x152>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a47      	ldr	r2, [pc, #284]	@ (8003e60 <HAL_ADC_Start_DMA+0x160>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d008      	beq.n	8003d58 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d002      	beq.n	8003d58 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b09      	cmp	r3, #9
 8003d56:	d172      	bne.n	8003e3e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fcb7 	bl	80046cc <ADC_Enable>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d165      	bne.n	8003e34 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a38      	ldr	r2, [pc, #224]	@ (8003e64 <HAL_ADC_Start_DMA+0x164>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d002      	beq.n	8003d8c <HAL_ADC_Start_DMA+0x8c>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e000      	b.n	8003d8e <HAL_ADC_Start_DMA+0x8e>
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <HAL_ADC_Start_DMA+0x168>)
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d002      	beq.n	8003d9c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db8:	f023 0206 	bic.w	r2, r3, #6
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dc0:	e002      	b.n	8003dc8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dcc:	4a27      	ldr	r2, [pc, #156]	@ (8003e6c <HAL_ADC_Start_DMA+0x16c>)
 8003dce:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	4a26      	ldr	r2, [pc, #152]	@ (8003e70 <HAL_ADC_Start_DMA+0x170>)
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ddc:	4a25      	ldr	r2, [pc, #148]	@ (8003e74 <HAL_ADC_Start_DMA+0x174>)
 8003dde:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	221c      	movs	r2, #28
 8003de6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0210 	orr.w	r2, r2, #16
 8003dfe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3340      	adds	r3, #64	@ 0x40
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f000 ffde 	bl	8004de0 <HAL_DMA_Start_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fdd8 	bl	80039e2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003e32:	e00d      	b.n	8003e50 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8003e3c:	e008      	b.n	8003e50 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e4a:	e001      	b.n	8003e50 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	50040300 	.word	0x50040300
 8003e60:	50040200 	.word	0x50040200
 8003e64:	50040100 	.word	0x50040100
 8003e68:	50040000 	.word	0x50040000
 8003e6c:	080047d9 	.word	0x080047d9
 8003e70:	080048b1 	.word	0x080048b1
 8003e74:	080048cd 	.word	0x080048cd

08003e78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b0b6      	sub	sp, #216	@ 0xd8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x22>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e3e3      	b.n	800469e <HAL_ADC_ConfigChannel+0x7ea>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fd91 	bl	8003a0a <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 83c4 	bne.w	8004678 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d824      	bhi.n	8003f4a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	3b02      	subs	r3, #2
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d81b      	bhi.n	8003f42 <HAL_ADC_ConfigChannel+0x8e>
 8003f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_ADC_ConfigChannel+0x5c>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003f31 	.word	0x08003f31
 8003f1c:	08003f39 	.word	0x08003f39
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003f20:	230c      	movs	r3, #12
 8003f22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f26:	e010      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003f28:	2312      	movs	r3, #18
 8003f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003f30:	2318      	movs	r3, #24
 8003f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f36:	e008      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f40:	e003      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003f42:	2306      	movs	r3, #6
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f48:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003f58:	f7ff fc45 	bl	80037e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fd52 	bl	8003a0a <LL_ADC_REG_IsConversionOngoing>
 8003f66:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fd5e 	bl	8003a30 <LL_ADC_INJ_IsConversionOngoing>
 8003f74:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 81bf 	bne.w	8004300 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 81ba 	bne.w	8004300 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f94:	d10f      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7ff fc4c 	bl	800383e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fbf3 	bl	800379a <LL_ADC_SetSamplingTimeCommonConfig>
 8003fb4:	e00e      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f7ff fc3b 	bl	800383e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fbe3 	bl	800379a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	08db      	lsrs	r3, r3, #3
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00a      	beq.n	800400c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6919      	ldr	r1, [r3, #16]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004006:	f7ff fb73 	bl	80036f0 <LL_ADC_SetOffset>
 800400a:	e179      	b.n	8004300 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fb90 	bl	8003738 <LL_ADC_GetOffsetChannel>
 8004018:	4603      	mov	r3, r0
 800401a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x184>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fb85 	bl	8003738 <LL_ADC_GetOffsetChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	f003 021f 	and.w	r2, r3, #31
 8004036:	e01e      	b.n	8004076 <HAL_ADC_ConfigChannel+0x1c2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fb7a 	bl	8003738 <LL_ADC_GetOffsetChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800405e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004066:	2320      	movs	r3, #32
 8004068:	e004      	b.n	8004074 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800406a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <HAL_ADC_ConfigChannel+0x1da>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	e018      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x20c>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80040a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80040aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80040b2:	2320      	movs	r3, #32
 80040b4:	e004      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80040b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d106      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fb49 	bl	8003764 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2101      	movs	r1, #1
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fb2d 	bl	8003738 <LL_ADC_GetOffsetChannel>
 80040de:	4603      	mov	r3, r0
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x24a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fb22 	bl	8003738 <LL_ADC_GetOffsetChannel>
 80040f4:	4603      	mov	r3, r0
 80040f6:	0e9b      	lsrs	r3, r3, #26
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	e01e      	b.n	800413c <HAL_ADC_ConfigChannel+0x288>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2101      	movs	r1, #1
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fb17 	bl	8003738 <LL_ADC_GetOffsetChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800411c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800412c:	2320      	movs	r3, #32
 800412e:	e004      	b.n	800413a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004130:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x2a0>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	e018      	b.n	8004186 <HAL_ADC_ConfigChannel+0x2d2>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004168:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e004      	b.n	8004186 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800417c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004186:	429a      	cmp	r2, r3
 8004188:	d106      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fae6 	bl	8003764 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff faca 	bl	8003738 <LL_ADC_GetOffsetChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x310>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fabf 	bl	8003738 <LL_ADC_GetOffsetChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	f003 021f 	and.w	r2, r3, #31
 80041c2:	e01e      	b.n	8004202 <HAL_ADC_ConfigChannel+0x34e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2102      	movs	r1, #2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fab4 	bl	8003738 <LL_ADC_GetOffsetChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80041e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80041ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e004      	b.n	8004200 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80041f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_ADC_ConfigChannel+0x366>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0e9b      	lsrs	r3, r3, #26
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	e014      	b.n	8004244 <HAL_ADC_ConfigChannel+0x390>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800422a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800422e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004236:	2320      	movs	r3, #32
 8004238:	e004      	b.n	8004244 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800423a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004244:	429a      	cmp	r2, r3
 8004246:	d106      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	2102      	movs	r1, #2
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fa87 	bl	8003764 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2103      	movs	r1, #3
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fa6b 	bl	8003738 <LL_ADC_GetOffsetChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x3ce>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2103      	movs	r1, #3
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fa60 	bl	8003738 <LL_ADC_GetOffsetChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	0e9b      	lsrs	r3, r3, #26
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	e017      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x3fe>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2103      	movs	r1, #3
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fa55 	bl	8003738 <LL_ADC_GetOffsetChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800429a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800429c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800429e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e003      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80042a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d105      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x416>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0e9b      	lsrs	r3, r3, #26
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	e011      	b.n	80042ee <HAL_ADC_ConfigChannel+0x43a>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80042d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042da:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80042dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e003      	b.n	80042ee <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80042e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d106      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	2103      	movs	r1, #3
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fa32 	bl	8003764 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fb59 	bl	80039bc <LL_ADC_IsEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 813f 	bne.w	8004590 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	f7ff fab8 	bl	8003894 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a8e      	ldr	r2, [pc, #568]	@ (8004564 <HAL_ADC_ConfigChannel+0x6b0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	f040 8130 	bne.w	8004590 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x4a4>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	3301      	adds	r3, #1
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b09      	cmp	r3, #9
 800434e:	bf94      	ite	ls
 8004350:	2301      	movls	r3, #1
 8004352:	2300      	movhi	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e019      	b.n	800438c <HAL_ADC_ConfigChannel+0x4d8>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800436a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	e003      	b.n	800437c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3301      	adds	r3, #1
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2b09      	cmp	r3, #9
 8004384:	bf94      	ite	ls
 8004386:	2301      	movls	r3, #1
 8004388:	2300      	movhi	r3, #0
 800438a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438c:	2b00      	cmp	r3, #0
 800438e:	d079      	beq.n	8004484 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x4f8>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	3301      	adds	r3, #1
 80043a4:	069b      	lsls	r3, r3, #26
 80043a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043aa:	e015      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x524>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80043ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80043be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80043c4:	2320      	movs	r3, #32
 80043c6:	e003      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80043c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	069b      	lsls	r3, r3, #26
 80043d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x544>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	3301      	adds	r3, #1
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2101      	movs	r1, #1
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	e017      	b.n	8004428 <HAL_ADC_ConfigChannel+0x574>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004408:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800440a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	ea42 0103 	orr.w	r1, r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <HAL_ADC_ConfigChannel+0x59a>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	0e9b      	lsrs	r3, r3, #26
 800443e:	3301      	adds	r3, #1
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	051b      	lsls	r3, r3, #20
 800444c:	e018      	b.n	8004480 <HAL_ADC_ConfigChannel+0x5cc>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004466:	2320      	movs	r3, #32
 8004468:	e003      	b.n	8004472 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800446a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	3301      	adds	r3, #1
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4613      	mov	r3, r2
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4413      	add	r3, r2
 800447e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004480:	430b      	orrs	r3, r1
 8004482:	e080      	b.n	8004586 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x5ec>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0e9b      	lsrs	r3, r3, #26
 8004496:	3301      	adds	r3, #1
 8004498:	069b      	lsls	r3, r3, #26
 800449a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800449e:	e015      	b.n	80044cc <HAL_ADC_ConfigChannel+0x618>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80044b8:	2320      	movs	r3, #32
 80044ba:	e003      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	069b      	lsls	r3, r3, #26
 80044c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x638>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	3301      	adds	r3, #1
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	e017      	b.n	800451c <HAL_ADC_ConfigChannel+0x668>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	61bb      	str	r3, [r7, #24]
  return result;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004504:	2320      	movs	r3, #32
 8004506:	e003      	b.n	8004510 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2101      	movs	r1, #1
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	ea42 0103 	orr.w	r1, r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x694>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	0e9b      	lsrs	r3, r3, #26
 8004532:	3301      	adds	r3, #1
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	3b1e      	subs	r3, #30
 8004540:	051b      	lsls	r3, r3, #20
 8004542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004546:	e01d      	b.n	8004584 <HAL_ADC_ConfigChannel+0x6d0>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	60fb      	str	r3, [r7, #12]
  return result;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e005      	b.n	8004570 <HAL_ADC_ConfigChannel+0x6bc>
 8004564:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	3301      	adds	r3, #1
 8004572:	f003 021f 	and.w	r2, r3, #31
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	3b1e      	subs	r3, #30
 800457e:	051b      	lsls	r3, r3, #20
 8004580:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004584:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800458a:	4619      	mov	r1, r3
 800458c:	f7ff f957 	bl	800383e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b44      	ldr	r3, [pc, #272]	@ (80046a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d07a      	beq.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800459c:	4843      	ldr	r0, [pc, #268]	@ (80046ac <HAL_ADC_ConfigChannel+0x7f8>)
 800459e:	f7ff f899 	bl	80036d4 <LL_ADC_GetCommonPathInternalCh>
 80045a2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a41      	ldr	r2, [pc, #260]	@ (80046b0 <HAL_ADC_ConfigChannel+0x7fc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d12c      	bne.n	800460a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d126      	bne.n	800460a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3c      	ldr	r2, [pc, #240]	@ (80046b4 <HAL_ADC_ConfigChannel+0x800>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x71c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3b      	ldr	r2, [pc, #236]	@ (80046b8 <HAL_ADC_ConfigChannel+0x804>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d15d      	bne.n	800468c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045d8:	4619      	mov	r1, r3
 80045da:	4834      	ldr	r0, [pc, #208]	@ (80046ac <HAL_ADC_ConfigChannel+0x7f8>)
 80045dc:	f7ff f867 	bl	80036ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045e0:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <HAL_ADC_ConfigChannel+0x808>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	4a36      	ldr	r2, [pc, #216]	@ (80046c0 <HAL_ADC_ConfigChannel+0x80c>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80045fa:	e002      	b.n	8004602 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f9      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004608:	e040      	b.n	800468c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2d      	ldr	r2, [pc, #180]	@ (80046c4 <HAL_ADC_ConfigChannel+0x810>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d118      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d112      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	@ (80046b4 <HAL_ADC_ConfigChannel+0x800>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x780>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <HAL_ADC_ConfigChannel+0x804>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d12d      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004638:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800463c:	4619      	mov	r1, r3
 800463e:	481b      	ldr	r0, [pc, #108]	@ (80046ac <HAL_ADC_ConfigChannel+0x7f8>)
 8004640:	f7ff f835 	bl	80036ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004644:	e024      	b.n	8004690 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <HAL_ADC_ConfigChannel+0x814>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d120      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11a      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <HAL_ADC_ConfigChannel+0x800>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d115      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800466a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800466e:	4619      	mov	r1, r3
 8004670:	480e      	ldr	r0, [pc, #56]	@ (80046ac <HAL_ADC_ConfigChannel+0x7f8>)
 8004672:	f7ff f81c 	bl	80036ae <LL_ADC_SetCommonPathInternalCh>
 8004676:	e00c      	b.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800468a:	e002      	b.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004690:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800469a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	37d8      	adds	r7, #216	@ 0xd8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	80080000 	.word	0x80080000
 80046ac:	50040300 	.word	0x50040300
 80046b0:	c7520000 	.word	0xc7520000
 80046b4:	50040000 	.word	0x50040000
 80046b8:	50040200 	.word	0x50040200
 80046bc:	200001b8 	.word	0x200001b8
 80046c0:	053e2d63 	.word	0x053e2d63
 80046c4:	cb840000 	.word	0xcb840000
 80046c8:	80000001 	.word	0x80000001

080046cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff f96d 	bl	80039bc <LL_ADC_IsEnabled>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d169      	bne.n	80047bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <ADC_Enable+0xfc>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fa:	f043 0210 	orr.w	r2, r3, #16
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e055      	b.n	80047be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff f93c 	bl	8003994 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800471c:	482b      	ldr	r0, [pc, #172]	@ (80047cc <ADC_Enable+0x100>)
 800471e:	f7fe ffd9 	bl	80036d4 <LL_ADC_GetCommonPathInternalCh>
 8004722:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800472c:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <ADC_Enable+0x104>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	4a28      	ldr	r2, [pc, #160]	@ (80047d4 <ADC_Enable+0x108>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004746:	e002      	b.n	800474e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3b01      	subs	r3, #1
 800474c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f9      	bne.n	8004748 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004754:	f7fe ff8c 	bl	8003670 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800475a:	e028      	b.n	80047ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f92b 	bl	80039bc <LL_ADC_IsEnabled>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f90f 	bl	8003994 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004776:	f7fe ff7b 	bl	8003670 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d914      	bls.n	80047ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d00d      	beq.n	80047ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e007      	b.n	80047be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d1cf      	bne.n	800475c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	8000003f 	.word	0x8000003f
 80047cc:	50040300 	.word	0x50040300
 80047d0:	200001b8 	.word	0x200001b8
 80047d4:	053e2d63 	.word	0x053e2d63

080047d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d14b      	bne.n	800488a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d021      	beq.n	8004850 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe ffd5 	bl	80037c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d032      	beq.n	8004882 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d12b      	bne.n	8004882 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11f      	bne.n	8004882 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	659a      	str	r2, [r3, #88]	@ 0x58
 800484e:	e018      	b.n	8004882 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d111      	bne.n	8004882 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d105      	bne.n	8004882 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff faf8 	bl	8003e78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004888:	e00e      	b.n	80048a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fb02 	bl	8003ea0 <HAL_ADC_ErrorCallback>
}
 800489c:	e004      	b.n	80048a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fae4 	bl	8003e8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fad4 	bl	8003ea0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <LL_ADC_IsEnabled>:
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <LL_ADC_IsEnabled+0x18>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <LL_ADC_IsEnabled+0x1a>
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_REG_IsConversionOngoing>:
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d101      	bne.n	800493e <LL_ADC_REG_IsConversionOngoing+0x18>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b0a1      	sub	sp, #132	@ 0x84
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e093      	b.n	8004a92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004972:	2300      	movs	r3, #0
 8004974:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004976:	2300      	movs	r3, #0
 8004978:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a47      	ldr	r2, [pc, #284]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d102      	bne.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004984:	4b46      	ldr	r3, [pc, #280]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e001      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e072      	b.n	8004a92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff ffb9 	bl	8004926 <LL_ADC_REG_IsConversionOngoing>
 80049b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ffb3 	bl	8004926 <LL_ADC_REG_IsConversionOngoing>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d154      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d151      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049cc:	4b35      	ldr	r3, [pc, #212]	@ (8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80049ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02c      	beq.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049ea:	035b      	lsls	r3, r3, #13
 80049ec:	430b      	orrs	r3, r1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f4:	4829      	ldr	r0, [pc, #164]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80049f6:	f7ff ff83 	bl	8004900 <LL_ADC_IsEnabled>
 80049fa:	4604      	mov	r4, r0
 80049fc:	4828      	ldr	r0, [pc, #160]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049fe:	f7ff ff7f 	bl	8004900 <LL_ADC_IsEnabled>
 8004a02:	4603      	mov	r3, r0
 8004a04:	431c      	orrs	r4, r3
 8004a06:	4828      	ldr	r0, [pc, #160]	@ (8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a08:	f7ff ff7a 	bl	8004900 <LL_ADC_IsEnabled>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4323      	orrs	r3, r4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d137      	bne.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a1c:	f023 030f 	bic.w	r3, r3, #15
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	6811      	ldr	r1, [r2, #0]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	6892      	ldr	r2, [r2, #8]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a30:	e028      	b.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a3e:	4817      	ldr	r0, [pc, #92]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004a40:	f7ff ff5e 	bl	8004900 <LL_ADC_IsEnabled>
 8004a44:	4604      	mov	r4, r0
 8004a46:	4816      	ldr	r0, [pc, #88]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004a48:	f7ff ff5a 	bl	8004900 <LL_ADC_IsEnabled>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	431c      	orrs	r4, r3
 8004a50:	4815      	ldr	r0, [pc, #84]	@ (8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a52:	f7ff ff55 	bl	8004900 <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d112      	bne.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a66:	f023 030f 	bic.w	r3, r3, #15
 8004a6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a6e:	e009      	b.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a82:	e000      	b.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3784      	adds	r7, #132	@ 0x84
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	50040000 	.word	0x50040000
 8004aa0:	50040100 	.word	0x50040100
 8004aa4:	50040300 	.word	0x50040300
 8004aa8:	50040200 	.word	0x50040200

08004aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <__NVIC_SetPriorityGrouping+0x44>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ade:	4a04      	ldr	r2, [pc, #16]	@ (8004af0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	60d3      	str	r3, [r2, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af8:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <__NVIC_GetPriorityGrouping+0x18>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	f003 0307 	and.w	r3, r3, #7
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	db0b      	blt.n	8004b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	f003 021f 	and.w	r2, r3, #31
 8004b28:	4907      	ldr	r1, [pc, #28]	@ (8004b48 <__NVIC_EnableIRQ+0x38>)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2001      	movs	r0, #1
 8004b32:	fa00 f202 	lsl.w	r2, r0, r2
 8004b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000e100 	.word	0xe000e100

08004b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db0a      	blt.n	8004b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	490c      	ldr	r1, [pc, #48]	@ (8004b98 <__NVIC_SetPriority+0x4c>)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	440b      	add	r3, r1
 8004b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b74:	e00a      	b.n	8004b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4908      	ldr	r1, [pc, #32]	@ (8004b9c <__NVIC_SetPriority+0x50>)
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	3b04      	subs	r3, #4
 8004b84:	0112      	lsls	r2, r2, #4
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	440b      	add	r3, r1
 8004b8a:	761a      	strb	r2, [r3, #24]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000e100 	.word	0xe000e100
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	@ 0x24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f1c3 0307 	rsb	r3, r3, #7
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	bf28      	it	cs
 8004bbe:	2304      	movcs	r3, #4
 8004bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d902      	bls.n	8004bd0 <NVIC_EncodePriority+0x30>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3b03      	subs	r3, #3
 8004bce:	e000      	b.n	8004bd2 <NVIC_EncodePriority+0x32>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	401a      	ands	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	43d9      	mvns	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	4313      	orrs	r3, r2
         );
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3724      	adds	r7, #36	@ 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ff4c 	bl	8004aac <__NVIC_SetPriorityGrouping>
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c2e:	f7ff ff61 	bl	8004af4 <__NVIC_GetPriorityGrouping>
 8004c32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	6978      	ldr	r0, [r7, #20]
 8004c3a:	f7ff ffb1 	bl	8004ba0 <NVIC_EncodePriority>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff80 	bl	8004b4c <__NVIC_SetPriority>
}
 8004c4c:	bf00      	nop
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff54 	bl	8004b10 <__NVIC_EnableIRQ>
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e098      	b.n	8004db4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc0 <HAL_DMA_Init+0x150>)
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d80f      	bhi.n	8004cae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc4 <HAL_DMA_Init+0x154>)
 8004c96:	4413      	add	r3, r2
 8004c98:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc8 <HAL_DMA_Init+0x158>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	009a      	lsls	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a48      	ldr	r2, [pc, #288]	@ (8004dcc <HAL_DMA_Init+0x15c>)
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cac:	e00e      	b.n	8004ccc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <HAL_DMA_Init+0x160>)
 8004cb6:	4413      	add	r3, r2
 8004cb8:	4a43      	ldr	r2, [pc, #268]	@ (8004dc8 <HAL_DMA_Init+0x158>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	009a      	lsls	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	@ (8004dd4 <HAL_DMA_Init+0x164>)
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d26:	d039      	beq.n	8004d9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <HAL_DMA_Init+0x15c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d11a      	bne.n	8004d68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004d32:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <HAL_DMA_Init+0x168>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	f003 031c 	and.w	r3, r3, #28
 8004d3e:	210f      	movs	r1, #15
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	4924      	ldr	r1, [pc, #144]	@ (8004dd8 <HAL_DMA_Init+0x168>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004d4c:	4b22      	ldr	r3, [pc, #136]	@ (8004dd8 <HAL_DMA_Init+0x168>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d58:	f003 031c 	and.w	r3, r3, #28
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	491d      	ldr	r1, [pc, #116]	@ (8004dd8 <HAL_DMA_Init+0x168>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]
 8004d66:	e019      	b.n	8004d9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004d68:	4b1c      	ldr	r3, [pc, #112]	@ (8004ddc <HAL_DMA_Init+0x16c>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d70:	f003 031c 	and.w	r3, r3, #28
 8004d74:	210f      	movs	r1, #15
 8004d76:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	4917      	ldr	r1, [pc, #92]	@ (8004ddc <HAL_DMA_Init+0x16c>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004d82:	4b16      	ldr	r3, [pc, #88]	@ (8004ddc <HAL_DMA_Init+0x16c>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8e:	f003 031c 	and.w	r3, r3, #28
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	4911      	ldr	r1, [pc, #68]	@ (8004ddc <HAL_DMA_Init+0x16c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40020407 	.word	0x40020407
 8004dc4:	bffdfff8 	.word	0xbffdfff8
 8004dc8:	cccccccd 	.word	0xcccccccd
 8004dcc:	40020000 	.word	0x40020000
 8004dd0:	bffdfbf8 	.word	0xbffdfbf8
 8004dd4:	40020400 	.word	0x40020400
 8004dd8:	400200a8 	.word	0x400200a8
 8004ddc:	400204a8 	.word	0x400204a8

08004de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Start_IT+0x20>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e04b      	b.n	8004e98 <HAL_DMA_Start_IT+0xb8>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d13a      	bne.n	8004e8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f95f 	bl	80050fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 020e 	orr.w	r2, r2, #14
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e00f      	b.n	8004e78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0204 	bic.w	r2, r2, #4
 8004e66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 020a 	orr.w	r2, r2, #10
 8004e76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e005      	b.n	8004e96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d008      	beq.n	8004eca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e022      	b.n	8004f10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 020e 	bic.w	r2, r2, #14
 8004ed8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f003 021c 	and.w	r2, r3, #28
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8004efc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d005      	beq.n	8004f40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2204      	movs	r2, #4
 8004f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	e029      	b.n	8004f94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 020e 	bic.w	r2, r2, #14
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f64:	f003 021c 	and.w	r2, r3, #28
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
    }
  }
  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fba:	f003 031c 	and.w	r3, r3, #28
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d026      	beq.n	8005018 <HAL_DMA_IRQHandler+0x7a>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d021      	beq.n	8005018 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0204 	bic.w	r2, r2, #4
 8004ff0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	f003 021c 	and.w	r2, r3, #28
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	2104      	movs	r1, #4
 8005000:	fa01 f202 	lsl.w	r2, r1, r2
 8005004:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d071      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005016:	e06c      	b.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501c:	f003 031c 	and.w	r3, r3, #28
 8005020:	2202      	movs	r2, #2
 8005022:	409a      	lsls	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02e      	beq.n	800508a <HAL_DMA_IRQHandler+0xec>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d029      	beq.n	800508a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 020a 	bic.w	r2, r2, #10
 8005052:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005060:	f003 021c 	and.w	r2, r3, #28
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	2102      	movs	r1, #2
 800506a:	fa01 f202 	lsl.w	r2, r1, r2
 800506e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d038      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005088:	e033      	b.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	f003 031c 	and.w	r3, r3, #28
 8005092:	2208      	movs	r2, #8
 8005094:	409a      	lsls	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02a      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x156>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d025      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 020e 	bic.w	r2, r2, #14
 80050b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050bc:	f003 021c 	and.w	r2, r3, #28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
}
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	f003 021c 	and.w	r2, r3, #28
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f202 	lsl.w	r2, r1, r2
 800511c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b10      	cmp	r3, #16
 800512c:	d108      	bne.n	8005140 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800513e:	e007      	b.n	8005150 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800516a:	e166      	b.n	800543a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8158 	beq.w	8005434 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d005      	beq.n	800519c <HAL_GPIO_Init+0x40>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d130      	bne.n	80051fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051d2:	2201      	movs	r2, #1
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4013      	ands	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0201 	and.w	r2, r3, #1
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b03      	cmp	r3, #3
 8005208:	d017      	beq.n	800523a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4013      	ands	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d123      	bne.n	800528e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	08da      	lsrs	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3208      	adds	r2, #8
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	220f      	movs	r2, #15
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	08da      	lsrs	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3208      	adds	r2, #8
 8005288:	6939      	ldr	r1, [r7, #16]
 800528a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f003 0203 	and.w	r2, r3, #3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80b2 	beq.w	8005434 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d0:	4b61      	ldr	r3, [pc, #388]	@ (8005458 <HAL_GPIO_Init+0x2fc>)
 80052d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d4:	4a60      	ldr	r2, [pc, #384]	@ (8005458 <HAL_GPIO_Init+0x2fc>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6613      	str	r3, [r2, #96]	@ 0x60
 80052dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005458 <HAL_GPIO_Init+0x2fc>)
 80052de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052e8:	4a5c      	ldr	r2, [pc, #368]	@ (800545c <HAL_GPIO_Init+0x300>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	3302      	adds	r3, #2
 80052f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	220f      	movs	r2, #15
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005312:	d02b      	beq.n	800536c <HAL_GPIO_Init+0x210>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a52      	ldr	r2, [pc, #328]	@ (8005460 <HAL_GPIO_Init+0x304>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d025      	beq.n	8005368 <HAL_GPIO_Init+0x20c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a51      	ldr	r2, [pc, #324]	@ (8005464 <HAL_GPIO_Init+0x308>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d01f      	beq.n	8005364 <HAL_GPIO_Init+0x208>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a50      	ldr	r2, [pc, #320]	@ (8005468 <HAL_GPIO_Init+0x30c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d019      	beq.n	8005360 <HAL_GPIO_Init+0x204>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a4f      	ldr	r2, [pc, #316]	@ (800546c <HAL_GPIO_Init+0x310>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_GPIO_Init+0x200>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <HAL_GPIO_Init+0x314>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00d      	beq.n	8005358 <HAL_GPIO_Init+0x1fc>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a4d      	ldr	r2, [pc, #308]	@ (8005474 <HAL_GPIO_Init+0x318>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <HAL_GPIO_Init+0x1f8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a4c      	ldr	r2, [pc, #304]	@ (8005478 <HAL_GPIO_Init+0x31c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <HAL_GPIO_Init+0x1f4>
 800534c:	2307      	movs	r3, #7
 800534e:	e00e      	b.n	800536e <HAL_GPIO_Init+0x212>
 8005350:	2308      	movs	r3, #8
 8005352:	e00c      	b.n	800536e <HAL_GPIO_Init+0x212>
 8005354:	2306      	movs	r3, #6
 8005356:	e00a      	b.n	800536e <HAL_GPIO_Init+0x212>
 8005358:	2305      	movs	r3, #5
 800535a:	e008      	b.n	800536e <HAL_GPIO_Init+0x212>
 800535c:	2304      	movs	r3, #4
 800535e:	e006      	b.n	800536e <HAL_GPIO_Init+0x212>
 8005360:	2303      	movs	r3, #3
 8005362:	e004      	b.n	800536e <HAL_GPIO_Init+0x212>
 8005364:	2302      	movs	r3, #2
 8005366:	e002      	b.n	800536e <HAL_GPIO_Init+0x212>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_GPIO_Init+0x212>
 800536c:	2300      	movs	r3, #0
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	f002 0203 	and.w	r2, r2, #3
 8005374:	0092      	lsls	r2, r2, #2
 8005376:	4093      	lsls	r3, r2
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800537e:	4937      	ldr	r1, [pc, #220]	@ (800545c <HAL_GPIO_Init+0x300>)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	3302      	adds	r3, #2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800538c:	4b3b      	ldr	r3, [pc, #236]	@ (800547c <HAL_GPIO_Init+0x320>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43db      	mvns	r3, r3
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053b0:	4a32      	ldr	r2, [pc, #200]	@ (800547c <HAL_GPIO_Init+0x320>)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053b6:	4b31      	ldr	r3, [pc, #196]	@ (800547c <HAL_GPIO_Init+0x320>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	43db      	mvns	r3, r3
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4013      	ands	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053da:	4a28      	ldr	r2, [pc, #160]	@ (800547c <HAL_GPIO_Init+0x320>)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80053e0:	4b26      	ldr	r3, [pc, #152]	@ (800547c <HAL_GPIO_Init+0x320>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005404:	4a1d      	ldr	r2, [pc, #116]	@ (800547c <HAL_GPIO_Init+0x320>)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800540a:	4b1c      	ldr	r3, [pc, #112]	@ (800547c <HAL_GPIO_Init+0x320>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800542e:	4a13      	ldr	r2, [pc, #76]	@ (800547c <HAL_GPIO_Init+0x320>)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	3301      	adds	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	f47f ae91 	bne.w	800516c <HAL_GPIO_Init+0x10>
  }
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40021000 	.word	0x40021000
 800545c:	40010000 	.word	0x40010000
 8005460:	48000400 	.word	0x48000400
 8005464:	48000800 	.word	0x48000800
 8005468:	48000c00 	.word	0x48000c00
 800546c:	48001000 	.word	0x48001000
 8005470:	48001400 	.word	0x48001400
 8005474:	48001800 	.word	0x48001800
 8005478:	48001c00 	.word	0x48001c00
 800547c:	40010400 	.word	0x40010400

08005480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	e001      	b.n	80054a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
 80054bc:	4613      	mov	r3, r2
 80054be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c0:	787b      	ldrb	r3, [r7, #1]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054c6:	887a      	ldrh	r2, [r7, #2]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054cc:	e002      	b.n	80054d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054ea:	4b08      	ldr	r3, [pc, #32]	@ (800550c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054f6:	4a05      	ldr	r2, [pc, #20]	@ (800550c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f806 	bl	8005510 <HAL_GPIO_EXTI_Callback>
  }
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40010400 	.word	0x40010400

08005510 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e08d      	b.n	8005654 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fd fb59 	bl	8002c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	@ 0x24
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005576:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005586:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d107      	bne.n	80055a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800559c:	609a      	str	r2, [r3, #8]
 800559e:	e006      	b.n	80055ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d108      	bne.n	80055c8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	e007      	b.n	80055d8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69d9      	ldr	r1, [r3, #28]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1a      	ldr	r2, [r3, #32]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	461a      	mov	r2, r3
 8005668:	460b      	mov	r3, r1
 800566a:	817b      	strh	r3, [r7, #10]
 800566c:	4613      	mov	r3, r2
 800566e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 80fd 	bne.w	8005878 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_I2C_Master_Transmit+0x30>
 8005688:	2302      	movs	r3, #2
 800568a:	e0f6      	b.n	800587a <HAL_I2C_Master_Transmit+0x21e>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005694:	f7fd ffec 	bl	8003670 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	2319      	movs	r3, #25
 80056a0:	2201      	movs	r2, #1
 80056a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f914 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0e1      	b.n	800587a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2221      	movs	r2, #33	@ 0x21
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2210      	movs	r2, #16
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	893a      	ldrh	r2, [r7, #8]
 80056d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2bff      	cmp	r3, #255	@ 0xff
 80056e6:	d906      	bls.n	80056f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	22ff      	movs	r2, #255	@ 0xff
 80056ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80056ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e007      	b.n	8005706 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005704:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d024      	beq.n	8005758 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005742:	b2db      	uxtb	r3, r3
 8005744:	3301      	adds	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	8979      	ldrh	r1, [r7, #10]
 800574a:	4b4e      	ldr	r3, [pc, #312]	@ (8005884 <HAL_I2C_Master_Transmit+0x228>)
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fa83 	bl	8005c5c <I2C_TransferConfig>
 8005756:	e066      	b.n	8005826 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575c:	b2da      	uxtb	r2, r3
 800575e:	8979      	ldrh	r1, [r7, #10]
 8005760:	4b48      	ldr	r3, [pc, #288]	@ (8005884 <HAL_I2C_Master_Transmit+0x228>)
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa78 	bl	8005c5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800576c:	e05b      	b.n	8005826 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	6a39      	ldr	r1, [r7, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f907 	bl	8005986 <I2C_WaitOnTXISFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e07b      	b.n	800587a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d034      	beq.n	8005826 <HAL_I2C_Master_Transmit+0x1ca>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d130      	bne.n	8005826 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2200      	movs	r2, #0
 80057cc:	2180      	movs	r1, #128	@ 0x80
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f880 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e04d      	b.n	800587a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2bff      	cmp	r3, #255	@ 0xff
 80057e6:	d90e      	bls.n	8005806 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	22ff      	movs	r2, #255	@ 0xff
 80057ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	8979      	ldrh	r1, [r7, #10]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fa2c 	bl	8005c5c <I2C_TransferConfig>
 8005804:	e00f      	b.n	8005826 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	b2da      	uxtb	r2, r3
 8005816:	8979      	ldrh	r1, [r7, #10]
 8005818:	2300      	movs	r3, #0
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fa1b 	bl	8005c5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d19e      	bne.n	800576e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	6a39      	ldr	r1, [r7, #32]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f8ed 	bl	8005a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e01a      	b.n	800587a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2220      	movs	r2, #32
 800584a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <HAL_I2C_Master_Transmit+0x22c>)
 8005858:	400b      	ands	r3, r1
 800585a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	80002000 	.word	0x80002000
 8005888:	fe00e800 	.word	0xfe00e800

0800588c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d103      	bne.n	80058aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2200      	movs	r2, #0
 80058a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d007      	beq.n	80058c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	619a      	str	r2, [r3, #24]
  }
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058e4:	e03b      	b.n	800595e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f8d6 	bl	8005a9c <I2C_IsErrorOccurred>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e041      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d02d      	beq.n	800595e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fd feb5 	bl	8003670 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d122      	bne.n	800595e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	429a      	cmp	r2, r3
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	429a      	cmp	r2, r3
 8005934:	d113      	bne.n	800595e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e00f      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d0b4      	beq.n	80058e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005992:	e033      	b.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f87f 	bl	8005a9c <I2C_IsErrorOccurred>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e031      	b.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d025      	beq.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b0:	f7fd fe5e 	bl	8003670 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11a      	bne.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d013      	beq.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e007      	b.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d1c4      	bne.n	8005994 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a20:	e02f      	b.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f838 	bl	8005a9c <I2C_IsErrorOccurred>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e02d      	b.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fd fe1b 	bl	8003670 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11a      	bne.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d013      	beq.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5e:	f043 0220 	orr.w	r2, r3, #32
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e007      	b.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d1c8      	bne.n	8005a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d068      	beq.n	8005b9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2210      	movs	r2, #16
 8005ace:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ad0:	e049      	b.n	8005b66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d045      	beq.n	8005b66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fd fdc9 	bl	8003670 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <I2C_IsErrorOccurred+0x54>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d13a      	bne.n	8005b66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b12:	d121      	bne.n	8005b58 <I2C_IsErrorOccurred+0xbc>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b1a:	d01d      	beq.n	8005b58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d01a      	beq.n	8005b58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b32:	f7fd fd9d 	bl	8003670 <HAL_GetTick>
 8005b36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b38:	e00e      	b.n	8005b58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b3a:	f7fd fd99 	bl	8003670 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b19      	cmp	r3, #25
 8005b46:	d907      	bls.n	8005b58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f043 0320 	orr.w	r3, r3, #32
 8005b4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b56:	e006      	b.n	8005b66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d1e9      	bne.n	8005b3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d003      	beq.n	8005b7c <I2C_IsErrorOccurred+0xe0>
 8005b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0aa      	beq.n	8005ad2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f043 0304 	orr.w	r3, r3, #4
 8005b92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	f043 0302 	orr.w	r3, r3, #2
 8005bf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fe3b 	bl	800588c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <I2C_IsErrorOccurred+0x1bc>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3728      	adds	r7, #40	@ 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	fe00e800 	.word	0xfe00e800

08005c5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c74:	7a7b      	ldrb	r3, [r7, #9]
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	0d5b      	lsrs	r3, r3, #21
 8005c96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <I2C_TransferConfig+0x60>)
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	ea02 0103 	and.w	r1, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	03ff63ff 	.word	0x03ff63ff

08005cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d138      	bne.n	8005d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e032      	b.n	8005d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	@ 0x24
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0201 	bic.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d139      	bne.n	8005de0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e033      	b.n	8005de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2224      	movs	r2, #36	@ 0x24
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005da8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e000      	b.n	8005de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
  }
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005df4:	4b04      	ldr	r3, [pc, #16]	@ (8005e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40007000 	.word	0x40007000

08005e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e1a:	d130      	bne.n	8005e7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e1c:	4b23      	ldr	r3, [pc, #140]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e28:	d038      	beq.n	8005e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e2a:	4b20      	ldr	r3, [pc, #128]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e32:	4a1e      	ldr	r2, [pc, #120]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2232      	movs	r2, #50	@ 0x32
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	0c9b      	lsrs	r3, r3, #18
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e50:	e002      	b.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e58:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e64:	d102      	bne.n	8005e6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f2      	bne.n	8005e52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e78:	d110      	bne.n	8005e9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00f      	b.n	8005e9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e8a:	d007      	beq.n	8005e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e94:	4a05      	ldr	r2, [pc, #20]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	200001b8 	.word	0x200001b8
 8005eb4:	431bde83 	.word	0x431bde83

08005eb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f000 bc08 	b.w	80066dc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ecc:	4b96      	ldr	r3, [pc, #600]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed6:	4b94      	ldr	r3, [pc, #592]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80e4 	beq.w	80060b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <HAL_RCC_OscConfig+0x4c>
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b0c      	cmp	r3, #12
 8005ef8:	f040 808b 	bne.w	8006012 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	f040 8087 	bne.w	8006012 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f04:	4b88      	ldr	r3, [pc, #544]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_OscConfig+0x64>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e3df      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	4b81      	ldr	r3, [pc, #516]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <HAL_RCC_OscConfig+0x7e>
 8005f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f34:	e005      	b.n	8005f42 <HAL_RCC_OscConfig+0x8a>
 8005f36:	4b7c      	ldr	r3, [pc, #496]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d223      	bcs.n	8005f8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fdc4 	bl	8006ad8 <RCC_SetFlashLatencyFromMSIRange>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e3c0      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f5a:	4b73      	ldr	r3, [pc, #460]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a72      	ldr	r2, [pc, #456]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f60:	f043 0308 	orr.w	r3, r3, #8
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	4b70      	ldr	r3, [pc, #448]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	496d      	ldr	r1, [pc, #436]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f78:	4b6b      	ldr	r3, [pc, #428]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	4968      	ldr	r1, [pc, #416]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	604b      	str	r3, [r1, #4]
 8005f8c:	e025      	b.n	8005fda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f8e:	4b66      	ldr	r3, [pc, #408]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a65      	ldr	r2, [pc, #404]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f94:	f043 0308 	orr.w	r3, r3, #8
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	4b63      	ldr	r3, [pc, #396]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	4960      	ldr	r1, [pc, #384]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fac:	4b5e      	ldr	r3, [pc, #376]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	495b      	ldr	r1, [pc, #364]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fd84 	bl	8006ad8 <RCC_SetFlashLatencyFromMSIRange>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e380      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fda:	f000 fc87 	bl	80068ec <HAL_RCC_GetSysClockFreq>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	4b51      	ldr	r3, [pc, #324]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	4950      	ldr	r1, [pc, #320]	@ (800612c <HAL_RCC_OscConfig+0x274>)
 8005fec:	5ccb      	ldrb	r3, [r1, r3]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8006130 <HAL_RCC_OscConfig+0x278>)
 8005ff8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8006134 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd f98e 	bl	8003320 <HAL_InitTick>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d052      	beq.n	80060b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	e364      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d032      	beq.n	8006080 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800601a:	4b43      	ldr	r3, [pc, #268]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a42      	ldr	r2, [pc, #264]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006026:	f7fd fb23 	bl	8003670 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800602e:	f7fd fb1f 	bl	8003670 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e34d      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006040:	4b39      	ldr	r3, [pc, #228]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800604c:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a35      	ldr	r2, [pc, #212]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006052:	f043 0308 	orr.w	r3, r3, #8
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	4b33      	ldr	r3, [pc, #204]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	4930      	ldr	r1, [pc, #192]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800606a:	4b2f      	ldr	r3, [pc, #188]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	492b      	ldr	r1, [pc, #172]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 800607a:	4313      	orrs	r3, r2
 800607c:	604b      	str	r3, [r1, #4]
 800607e:	e01a      	b.n	80060b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006080:	4b29      	ldr	r3, [pc, #164]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a28      	ldr	r2, [pc, #160]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800608c:	f7fd faf0 	bl	8003670 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006094:	f7fd faec 	bl	8003670 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e31a      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060a6:	4b20      	ldr	r3, [pc, #128]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x1dc>
 80060b2:	e000      	b.n	80060b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d073      	beq.n	80061aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d005      	beq.n	80060d4 <HAL_RCC_OscConfig+0x21c>
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d10e      	bne.n	80060ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d10b      	bne.n	80060ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	4b14      	ldr	r3, [pc, #80]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d063      	beq.n	80061a8 <HAL_RCC_OscConfig+0x2f0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d15f      	bne.n	80061a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e2f7      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d106      	bne.n	8006104 <HAL_RCC_OscConfig+0x24c>
 80060f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a0b      	ldr	r2, [pc, #44]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e025      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800610c:	d114      	bne.n	8006138 <HAL_RCC_OscConfig+0x280>
 800610e:	4b06      	ldr	r3, [pc, #24]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a05      	ldr	r2, [pc, #20]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b03      	ldr	r3, [pc, #12]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a02      	ldr	r2, [pc, #8]	@ (8006128 <HAL_RCC_OscConfig+0x270>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e013      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
 8006128:	40021000 	.word	0x40021000
 800612c:	0800d1ec 	.word	0x0800d1ec
 8006130:	200001b8 	.word	0x200001b8
 8006134:	200001bc 	.word	0x200001bc
 8006138:	4ba0      	ldr	r3, [pc, #640]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a9f      	ldr	r2, [pc, #636]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800613e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	4b9d      	ldr	r3, [pc, #628]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a9c      	ldr	r2, [pc, #624]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800614a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800614e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d013      	beq.n	8006180 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fd fa8a 	bl	8003670 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006160:	f7fd fa86 	bl	8003670 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b64      	cmp	r3, #100	@ 0x64
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e2b4      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006172:	4b92      	ldr	r3, [pc, #584]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x2a8>
 800617e:	e014      	b.n	80061aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fd fa76 	bl	8003670 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006188:	f7fd fa72 	bl	8003670 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	@ 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e2a0      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800619a:	4b88      	ldr	r3, [pc, #544]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x2d0>
 80061a6:	e000      	b.n	80061aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d060      	beq.n	8006278 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_OscConfig+0x310>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d119      	bne.n	80061f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d116      	bne.n	80061f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061c8:	4b7c      	ldr	r3, [pc, #496]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_OscConfig+0x328>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e27d      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e0:	4b76      	ldr	r3, [pc, #472]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	061b      	lsls	r3, r3, #24
 80061ee:	4973      	ldr	r1, [pc, #460]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f4:	e040      	b.n	8006278 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d023      	beq.n	8006246 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061fe:	4b6f      	ldr	r3, [pc, #444]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6e      	ldr	r2, [pc, #440]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620a:	f7fd fa31 	bl	8003670 <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006212:	f7fd fa2d 	bl	8003670 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e25b      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006224:	4b65      	ldr	r3, [pc, #404]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0f0      	beq.n	8006212 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006230:	4b62      	ldr	r3, [pc, #392]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	061b      	lsls	r3, r3, #24
 800623e:	495f      	ldr	r1, [pc, #380]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006240:	4313      	orrs	r3, r2
 8006242:	604b      	str	r3, [r1, #4]
 8006244:	e018      	b.n	8006278 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006246:	4b5d      	ldr	r3, [pc, #372]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5c      	ldr	r2, [pc, #368]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800624c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006252:	f7fd fa0d 	bl	8003670 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625a:	f7fd fa09 	bl	8003670 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e237      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800626c:	4b53      	ldr	r3, [pc, #332]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f0      	bne.n	800625a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d03c      	beq.n	80062fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01c      	beq.n	80062c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800628c:	4b4b      	ldr	r3, [pc, #300]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800628e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006292:	4a4a      	ldr	r2, [pc, #296]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fd f9e8 	bl	8003670 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a4:	f7fd f9e4 	bl	8003670 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e212      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062b6:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80062b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ef      	beq.n	80062a4 <HAL_RCC_OscConfig+0x3ec>
 80062c4:	e01b      	b.n	80062fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062c6:	4b3d      	ldr	r3, [pc, #244]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80062c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062cc:	4a3b      	ldr	r2, [pc, #236]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d6:	f7fd f9cb 	bl	8003670 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062de:	f7fd f9c7 	bl	8003670 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e1f5      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062f0:	4b32      	ldr	r3, [pc, #200]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80062f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1ef      	bne.n	80062de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80a6 	beq.w	8006458 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006310:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4b27      	ldr	r3, [pc, #156]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006320:	4a26      	ldr	r2, [pc, #152]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006326:	6593      	str	r3, [r2, #88]	@ 0x58
 8006328:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006338:	4b21      	ldr	r3, [pc, #132]	@ (80063c0 <HAL_RCC_OscConfig+0x508>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d118      	bne.n	8006376 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006344:	4b1e      	ldr	r3, [pc, #120]	@ (80063c0 <HAL_RCC_OscConfig+0x508>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1d      	ldr	r2, [pc, #116]	@ (80063c0 <HAL_RCC_OscConfig+0x508>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800634e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006350:	f7fd f98e 	bl	8003670 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fd f98a 	bl	8003670 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e1b8      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800636a:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <HAL_RCC_OscConfig+0x508>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d108      	bne.n	8006390 <HAL_RCC_OscConfig+0x4d8>
 800637e:	4b0f      	ldr	r3, [pc, #60]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006384:	4a0d      	ldr	r2, [pc, #52]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800638e:	e029      	b.n	80063e4 <HAL_RCC_OscConfig+0x52c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b05      	cmp	r3, #5
 8006396:	d115      	bne.n	80063c4 <HAL_RCC_OscConfig+0x50c>
 8006398:	4b08      	ldr	r3, [pc, #32]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	4a07      	ldr	r2, [pc, #28]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80063a0:	f043 0304 	orr.w	r3, r3, #4
 80063a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063a8:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	4a03      	ldr	r2, [pc, #12]	@ (80063bc <HAL_RCC_OscConfig+0x504>)
 80063b0:	f043 0301 	orr.w	r3, r3, #1
 80063b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063b8:	e014      	b.n	80063e4 <HAL_RCC_OscConfig+0x52c>
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40007000 	.word	0x40007000
 80063c4:	4b9d      	ldr	r3, [pc, #628]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ca:	4a9c      	ldr	r2, [pc, #624]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063d4:	4b99      	ldr	r3, [pc, #612]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	4a98      	ldr	r2, [pc, #608]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d016      	beq.n	800641a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fd f940 	bl	8003670 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f2:	e00a      	b.n	800640a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f4:	f7fd f93c 	bl	8003670 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e168      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800640a:	4b8c      	ldr	r3, [pc, #560]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ed      	beq.n	80063f4 <HAL_RCC_OscConfig+0x53c>
 8006418:	e015      	b.n	8006446 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fd f929 	bl	8003670 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006420:	e00a      	b.n	8006438 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fd f925 	bl	8003670 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e151      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006438:	4b80      	ldr	r3, [pc, #512]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ed      	bne.n	8006422 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800644c:	4b7b      	ldr	r3, [pc, #492]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 800644e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006450:	4a7a      	ldr	r2, [pc, #488]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006456:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d03c      	beq.n	80064de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01c      	beq.n	80064a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800646c:	4b73      	ldr	r3, [pc, #460]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 800646e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006472:	4a72      	ldr	r2, [pc, #456]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647c:	f7fd f8f8 	bl	8003670 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006484:	f7fd f8f4 	bl	8003670 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e122      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006496:	4b69      	ldr	r3, [pc, #420]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0ef      	beq.n	8006484 <HAL_RCC_OscConfig+0x5cc>
 80064a4:	e01b      	b.n	80064de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064a6:	4b65      	ldr	r3, [pc, #404]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80064a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ac:	4a63      	ldr	r2, [pc, #396]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fd f8db 	bl	8003670 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064be:	f7fd f8d7 	bl	8003670 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e105      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064d0:	4b5a      	ldr	r3, [pc, #360]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80064d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1ef      	bne.n	80064be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 80f9 	beq.w	80066da <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	f040 80cf 	bne.w	8006690 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064f2:	4b52      	ldr	r3, [pc, #328]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f003 0203 	and.w	r2, r3, #3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	429a      	cmp	r2, r3
 8006504:	d12c      	bne.n	8006560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006510:	3b01      	subs	r3, #1
 8006512:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d123      	bne.n	8006560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006522:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d11b      	bne.n	8006560 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006534:	429a      	cmp	r2, r3
 8006536:	d113      	bne.n	8006560 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	3b01      	subs	r3, #1
 8006546:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d109      	bne.n	8006560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	3b01      	subs	r3, #1
 800655a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800655c:	429a      	cmp	r2, r3
 800655e:	d071      	beq.n	8006644 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b0c      	cmp	r3, #12
 8006564:	d068      	beq.n	8006638 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006566:	4b35      	ldr	r3, [pc, #212]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d105      	bne.n	800657e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006572:	4b32      	ldr	r3, [pc, #200]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e0ac      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006582:	4b2e      	ldr	r3, [pc, #184]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2d      	ldr	r2, [pc, #180]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006588:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800658c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800658e:	f7fd f86f 	bl	8003670 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006596:	f7fd f86b 	bl	8003670 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e099      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a8:	4b24      	ldr	r3, [pc, #144]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f0      	bne.n	8006596 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b4:	4b21      	ldr	r3, [pc, #132]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <HAL_RCC_OscConfig+0x788>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065c4:	3a01      	subs	r2, #1
 80065c6:	0112      	lsls	r2, r2, #4
 80065c8:	4311      	orrs	r1, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065ce:	0212      	lsls	r2, r2, #8
 80065d0:	4311      	orrs	r1, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065d6:	0852      	lsrs	r2, r2, #1
 80065d8:	3a01      	subs	r2, #1
 80065da:	0552      	lsls	r2, r2, #21
 80065dc:	4311      	orrs	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80065e2:	0852      	lsrs	r2, r2, #1
 80065e4:	3a01      	subs	r2, #1
 80065e6:	0652      	lsls	r2, r2, #25
 80065e8:	4311      	orrs	r1, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065ee:	06d2      	lsls	r2, r2, #27
 80065f0:	430a      	orrs	r2, r1
 80065f2:	4912      	ldr	r1, [pc, #72]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065f8:	4b10      	ldr	r3, [pc, #64]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a0f      	ldr	r2, [pc, #60]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 80065fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006602:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006604:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4a0c      	ldr	r2, [pc, #48]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 800660a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800660e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006610:	f7fd f82e 	bl	8003670 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006618:	f7fd f82a 	bl	8003670 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e058      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800662a:	4b04      	ldr	r3, [pc, #16]	@ (800663c <HAL_RCC_OscConfig+0x784>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006636:	e050      	b.n	80066da <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e04f      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
 800663c:	40021000 	.word	0x40021000
 8006640:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006644:	4b27      	ldr	r3, [pc, #156]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d144      	bne.n	80066da <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006650:	4b24      	ldr	r3, [pc, #144]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a23      	ldr	r2, [pc, #140]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 8006656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800665a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800665c:	4b21      	ldr	r3, [pc, #132]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a20      	ldr	r2, [pc, #128]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 8006662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006668:	f7fd f802 	bl	8003670 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006670:	f7fc fffe 	bl	8003670 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e02c      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006682:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0x7b8>
 800668e:	e024      	b.n	80066da <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d01f      	beq.n	80066d6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006696:	4b13      	ldr	r3, [pc, #76]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a12      	ldr	r2, [pc, #72]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 800669c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fc ffe5 	bl	8003670 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066aa:	f7fc ffe1 	bl	8003670 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e00f      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066bc:	4b09      	ldr	r3, [pc, #36]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80066c8:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	4905      	ldr	r1, [pc, #20]	@ (80066e4 <HAL_RCC_OscConfig+0x82c>)
 80066ce:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <HAL_RCC_OscConfig+0x830>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	60cb      	str	r3, [r1, #12]
 80066d4:	e001      	b.n	80066da <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	feeefffc 	.word	0xfeeefffc

080066ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0e7      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006700:	4b75      	ldr	r3, [pc, #468]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d910      	bls.n	8006730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670e:	4b72      	ldr	r3, [pc, #456]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 0207 	bic.w	r2, r3, #7
 8006716:	4970      	ldr	r1, [pc, #448]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	4313      	orrs	r3, r2
 800671c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671e:	4b6e      	ldr	r3, [pc, #440]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d001      	beq.n	8006730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0cf      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	4b66      	ldr	r3, [pc, #408]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006748:	429a      	cmp	r2, r3
 800674a:	d908      	bls.n	800675e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800674c:	4b63      	ldr	r3, [pc, #396]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4960      	ldr	r1, [pc, #384]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d04c      	beq.n	8006804 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006772:	4b5a      	ldr	r3, [pc, #360]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d121      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e0a6      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800678a:	4b54      	ldr	r3, [pc, #336]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d115      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e09a      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067a2:	4b4e      	ldr	r3, [pc, #312]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e08e      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b2:	4b4a      	ldr	r3, [pc, #296]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e086      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067c2:	4b46      	ldr	r3, [pc, #280]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f023 0203 	bic.w	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4943      	ldr	r1, [pc, #268]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d4:	f7fc ff4c 	bl	8003670 <HAL_GetTick>
 80067d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	e00a      	b.n	80067f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067dc:	f7fc ff48 	bl	8003670 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e06e      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f2:	4b3a      	ldr	r3, [pc, #232]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 020c 	and.w	r2, r3, #12
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	429a      	cmp	r2, r3
 8006802:	d1eb      	bne.n	80067dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	4b31      	ldr	r3, [pc, #196]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800681c:	429a      	cmp	r2, r3
 800681e:	d208      	bcs.n	8006832 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006820:	4b2e      	ldr	r3, [pc, #184]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	492b      	ldr	r1, [pc, #172]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006832:	4b29      	ldr	r3, [pc, #164]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d210      	bcs.n	8006862 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006840:	4b25      	ldr	r3, [pc, #148]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 0207 	bic.w	r2, r3, #7
 8006848:	4923      	ldr	r1, [pc, #140]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006850:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <HAL_RCC_ClockConfig+0x1ec>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d001      	beq.n	8006862 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e036      	b.n	80068d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d008      	beq.n	8006880 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800686e:	4b1b      	ldr	r3, [pc, #108]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	4918      	ldr	r1, [pc, #96]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800688c:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4910      	ldr	r1, [pc, #64]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 800689c:	4313      	orrs	r3, r2
 800689e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068a0:	f000 f824 	bl	80068ec <HAL_RCC_GetSysClockFreq>
 80068a4:	4602      	mov	r2, r0
 80068a6:	4b0d      	ldr	r3, [pc, #52]	@ (80068dc <HAL_RCC_ClockConfig+0x1f0>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	490b      	ldr	r1, [pc, #44]	@ (80068e0 <HAL_RCC_ClockConfig+0x1f4>)
 80068b2:	5ccb      	ldrb	r3, [r1, r3]
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
 80068bc:	4a09      	ldr	r2, [pc, #36]	@ (80068e4 <HAL_RCC_ClockConfig+0x1f8>)
 80068be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80068c0:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <HAL_RCC_ClockConfig+0x1fc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fc fd2b 	bl	8003320 <HAL_InitTick>
 80068ca:	4603      	mov	r3, r0
 80068cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80068ce:	7afb      	ldrb	r3, [r7, #11]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40022000 	.word	0x40022000
 80068dc:	40021000 	.word	0x40021000
 80068e0:	0800d1ec 	.word	0x0800d1ec
 80068e4:	200001b8 	.word	0x200001b8
 80068e8:	200001bc 	.word	0x200001bc

080068ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	@ 0x24
 80068f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068fa:	4b3e      	ldr	r3, [pc, #248]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006904:	4b3b      	ldr	r3, [pc, #236]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_GetSysClockFreq+0x34>
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b0c      	cmp	r3, #12
 8006918:	d121      	bne.n	800695e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d11e      	bne.n	800695e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006920:	4b34      	ldr	r3, [pc, #208]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d107      	bne.n	800693c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800692c:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800692e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	e005      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800693c:	4b2d      	ldr	r3, [pc, #180]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006948:	4a2b      	ldr	r2, [pc, #172]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006950:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10d      	bne.n	8006974 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800695c:	e00a      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d102      	bne.n	800696a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006964:	4b25      	ldr	r3, [pc, #148]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x110>)
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e004      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d101      	bne.n	8006974 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006970:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x114>)
 8006972:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d134      	bne.n	80069e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800697a:	4b1e      	ldr	r3, [pc, #120]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d003      	beq.n	8006992 <HAL_RCC_GetSysClockFreq+0xa6>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b03      	cmp	r3, #3
 800698e:	d003      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0xac>
 8006990:	e005      	b.n	800699e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006992:	4b1a      	ldr	r3, [pc, #104]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x110>)
 8006994:	617b      	str	r3, [r7, #20]
      break;
 8006996:	e005      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006998:	4b19      	ldr	r3, [pc, #100]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x114>)
 800699a:	617b      	str	r3, [r7, #20]
      break;
 800699c:	e002      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	617b      	str	r3, [r7, #20]
      break;
 80069a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a4:	4b13      	ldr	r3, [pc, #76]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	3301      	adds	r3, #1
 80069b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	0a1b      	lsrs	r3, r3, #8
 80069b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	fb03 f202 	mul.w	r2, r3, r2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069ca:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	0e5b      	lsrs	r3, r3, #25
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	3301      	adds	r3, #1
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80069e4:	69bb      	ldr	r3, [r7, #24]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3724      	adds	r7, #36	@ 0x24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	0800d204 	.word	0x0800d204
 80069fc:	00f42400 	.word	0x00f42400
 8006a00:	007a1200 	.word	0x007a1200

08006a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a08:	4b03      	ldr	r3, [pc, #12]	@ (8006a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	200001b8 	.word	0x200001b8

08006a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a20:	f7ff fff0 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a24:	4602      	mov	r2, r0
 8006a26:	4b06      	ldr	r3, [pc, #24]	@ (8006a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	0a1b      	lsrs	r3, r3, #8
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	4904      	ldr	r1, [pc, #16]	@ (8006a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a32:	5ccb      	ldrb	r3, [r1, r3]
 8006a34:	f003 031f 	and.w	r3, r3, #31
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40021000 	.word	0x40021000
 8006a44:	0800d1fc 	.word	0x0800d1fc

08006a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a4c:	f7ff ffda 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	0adb      	lsrs	r3, r3, #11
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	4904      	ldr	r1, [pc, #16]	@ (8006a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a5e:	5ccb      	ldrb	r3, [r1, r3]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	0800d1fc 	.word	0x0800d1fc

08006a74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	220f      	movs	r2, #15
 8006a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006a84:	4b12      	ldr	r3, [pc, #72]	@ (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f003 0203 	and.w	r2, r3, #3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006aa8:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	08db      	lsrs	r3, r3, #3
 8006aae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ab6:	4b07      	ldr	r3, [pc, #28]	@ (8006ad4 <HAL_RCC_GetClockConfig+0x60>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0207 	and.w	r2, r3, #7
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	40022000 	.word	0x40022000

08006ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006af0:	f7ff f97e 	bl	8005df0 <HAL_PWREx_GetVoltageRange>
 8006af4:	6178      	str	r0, [r7, #20]
 8006af6:	e014      	b.n	8006b22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af8:	4b25      	ldr	r3, [pc, #148]	@ (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afc:	4a24      	ldr	r2, [pc, #144]	@ (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b04:	4b22      	ldr	r3, [pc, #136]	@ (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b10:	f7ff f96e 	bl	8005df0 <HAL_PWREx_GetVoltageRange>
 8006b14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b16:	4b1e      	ldr	r3, [pc, #120]	@ (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b28:	d10b      	bne.n	8006b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b80      	cmp	r3, #128	@ 0x80
 8006b2e:	d919      	bls.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b34:	d902      	bls.n	8006b3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b36:	2302      	movs	r3, #2
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	e013      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	e010      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b80      	cmp	r3, #128	@ 0x80
 8006b46:	d902      	bls.n	8006b4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b48:	2303      	movs	r3, #3
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	e00a      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b80      	cmp	r3, #128	@ 0x80
 8006b52:	d102      	bne.n	8006b5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b54:	2302      	movs	r3, #2
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	e004      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b70      	cmp	r3, #112	@ 0x70
 8006b5e:	d101      	bne.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b60:	2301      	movs	r3, #1
 8006b62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b64:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f023 0207 	bic.w	r2, r3, #7
 8006b6c:	4909      	ldr	r1, [pc, #36]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b74:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d001      	beq.n	8006b86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40022000 	.word	0x40022000

08006b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d041      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006bbc:	d02a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006bbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006bc2:	d824      	bhi.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bce:	d81e      	bhi.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd8:	d010      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bda:	e018      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bdc:	4b86      	ldr	r3, [pc, #536]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a85      	ldr	r2, [pc, #532]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006be6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006be8:	e015      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 facd 	bl	8007190 <RCCEx_PLLSAI1_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bfa:	e00c      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3320      	adds	r3, #32
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fbb6 	bl	8007374 <RCCEx_PLLSAI2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c0c:	e003      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	74fb      	strb	r3, [r7, #19]
      break;
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c16:	7cfb      	ldrb	r3, [r7, #19]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c1c:	4b76      	ldr	r3, [pc, #472]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c2a:	4973      	ldr	r1, [pc, #460]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006c32:	e001      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
 8006c36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d041      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c4c:	d02a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006c4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c52:	d824      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c58:	d008      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c5e:	d81e      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c68:	d010      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c6a:	e018      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c6c:	4b62      	ldr	r3, [pc, #392]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a61      	ldr	r2, [pc, #388]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c78:	e015      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa85 	bl	8007190 <RCCEx_PLLSAI1_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c8a:	e00c      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3320      	adds	r3, #32
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fb6e 	bl	8007374 <RCCEx_PLLSAI2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca6:	7cfb      	ldrb	r3, [r7, #19]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cac:	4b52      	ldr	r3, [pc, #328]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cba:	494f      	ldr	r1, [pc, #316]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006cc2:	e001      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	7cfb      	ldrb	r3, [r7, #19]
 8006cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80a0 	beq.w	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cda:	4b47      	ldr	r3, [pc, #284]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006cea:	2300      	movs	r3, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf0:	4b41      	ldr	r3, [pc, #260]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf4:	4a40      	ldr	r2, [pc, #256]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a3a      	ldr	r2, [pc, #232]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d18:	f7fc fcaa 	bl	8003670 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d1e:	e009      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d20:	f7fc fca6 	bl	8003670 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	74fb      	strb	r3, [r7, #19]
        break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d34:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d15c      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d46:	4b2c      	ldr	r3, [pc, #176]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01f      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d019      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d64:	4b24      	ldr	r3, [pc, #144]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d70:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d76:	4a20      	ldr	r2, [pc, #128]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d80:	4b1d      	ldr	r3, [pc, #116]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d86:	4a1c      	ldr	r2, [pc, #112]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d90:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d016      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da2:	f7fc fc65 	bl	8003670 <HAL_GetTick>
 8006da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006da8:	e00b      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fc fc61 	bl	8003670 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d902      	bls.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8006dc0:	e006      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0ec      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006dd0:	7cfb      	ldrb	r3, [r7, #19]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd6:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de6:	4904      	ldr	r1, [pc, #16]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006dee:	e009      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	74bb      	strb	r3, [r7, #18]
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006df6:	bf00      	nop
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7cfb      	ldrb	r3, [r7, #19]
 8006e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e04:	7c7b      	ldrb	r3, [r7, #17]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d105      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0a:	4ba6      	ldr	r3, [pc, #664]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e0e:	4aa5      	ldr	r2, [pc, #660]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e22:	4ba0      	ldr	r3, [pc, #640]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e28:	f023 0203 	bic.w	r2, r3, #3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e30:	499c      	ldr	r1, [pc, #624]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e44:	4b97      	ldr	r3, [pc, #604]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	f023 020c 	bic.w	r2, r3, #12
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e52:	4994      	ldr	r1, [pc, #592]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e66:	4b8f      	ldr	r3, [pc, #572]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e74:	498b      	ldr	r1, [pc, #556]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e88:	4b86      	ldr	r3, [pc, #536]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e96:	4983      	ldr	r1, [pc, #524]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eb8:	497a      	ldr	r1, [pc, #488]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ecc:	4b75      	ldr	r3, [pc, #468]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eda:	4972      	ldr	r1, [pc, #456]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eee:	4b6d      	ldr	r3, [pc, #436]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006efc:	4969      	ldr	r1, [pc, #420]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f10:	4b64      	ldr	r3, [pc, #400]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f1e:	4961      	ldr	r1, [pc, #388]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f32:	4b5c      	ldr	r3, [pc, #368]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	4958      	ldr	r1, [pc, #352]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f54:	4b53      	ldr	r3, [pc, #332]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	4950      	ldr	r1, [pc, #320]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f76:	4b4b      	ldr	r3, [pc, #300]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f84:	4947      	ldr	r1, [pc, #284]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f98:	4b42      	ldr	r3, [pc, #264]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f9e:	f023 0203 	bic.w	r2, r3, #3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa6:	493f      	ldr	r1, [pc, #252]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d028      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fba:	4b3a      	ldr	r3, [pc, #232]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc8:	4936      	ldr	r1, [pc, #216]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fd8:	d106      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fda:	4b32      	ldr	r3, [pc, #200]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	4a31      	ldr	r2, [pc, #196]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fe0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fe4:	60d3      	str	r3, [r2, #12]
 8006fe6:	e011      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ff0:	d10c      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f8c9 	bl	8007190 <RCCEx_PLLSAI1_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007002:	7cfb      	ldrb	r3, [r7, #19]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d028      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007018:	4b22      	ldr	r3, [pc, #136]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007026:	491f      	ldr	r1, [pc, #124]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007036:	d106      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4a19      	ldr	r2, [pc, #100]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800703e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007042:	60d3      	str	r3, [r2, #12]
 8007044:	e011      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800704e:	d10c      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3304      	adds	r3, #4
 8007054:	2101      	movs	r1, #1
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f89a 	bl	8007190 <RCCEx_PLLSAI1_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007060:	7cfb      	ldrb	r3, [r7, #19]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d02a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007076:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007084:	4907      	ldr	r1, [pc, #28]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007094:	d108      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007096:	4b03      	ldr	r3, [pc, #12]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4a02      	ldr	r2, [pc, #8]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800709c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070a0:	60d3      	str	r3, [r2, #12]
 80070a2:	e013      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80070a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070b0:	d10c      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2101      	movs	r1, #1
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f869 	bl	8007190 <RCCEx_PLLSAI1_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070c2:	7cfb      	ldrb	r3, [r7, #19]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02f      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070d8:	4b2c      	ldr	r3, [pc, #176]	@ (800718c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80070da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070e6:	4929      	ldr	r1, [pc, #164]	@ (800718c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070f6:	d10d      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3304      	adds	r3, #4
 80070fc:	2102      	movs	r1, #2
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f846 	bl	8007190 <RCCEx_PLLSAI1_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007108:	7cfb      	ldrb	r3, [r7, #19]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d014      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800710e:	7cfb      	ldrb	r3, [r7, #19]
 8007110:	74bb      	strb	r3, [r7, #18]
 8007112:	e011      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800711c:	d10c      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3320      	adds	r3, #32
 8007122:	2102      	movs	r1, #2
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f925 	bl	8007374 <RCCEx_PLLSAI2_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800712e:	7cfb      	ldrb	r3, [r7, #19]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007134:	7cfb      	ldrb	r3, [r7, #19]
 8007136:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007144:	4b11      	ldr	r3, [pc, #68]	@ (800718c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800714a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007154:	490d      	ldr	r1, [pc, #52]	@ (800718c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007168:	4b08      	ldr	r3, [pc, #32]	@ (800718c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007178:	4904      	ldr	r1, [pc, #16]	@ (800718c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007180:	7cbb      	ldrb	r3, [r7, #18]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40021000 	.word	0x40021000

08007190 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800719e:	4b74      	ldr	r3, [pc, #464]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d018      	beq.n	80071dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071aa:	4b71      	ldr	r3, [pc, #452]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0203 	and.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d10d      	bne.n	80071d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
       ||
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80071c2:	4b6b      	ldr	r3, [pc, #428]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	091b      	lsrs	r3, r3, #4
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
       ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d047      	beq.n	8007266 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e044      	b.n	8007266 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d018      	beq.n	8007216 <RCCEx_PLLSAI1_Config+0x86>
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d825      	bhi.n	8007234 <RCCEx_PLLSAI1_Config+0xa4>
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d002      	beq.n	80071f2 <RCCEx_PLLSAI1_Config+0x62>
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d009      	beq.n	8007204 <RCCEx_PLLSAI1_Config+0x74>
 80071f0:	e020      	b.n	8007234 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d11d      	bne.n	800723a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007202:	e01a      	b.n	800723a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007204:	4b5a      	ldr	r3, [pc, #360]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800720c:	2b00      	cmp	r3, #0
 800720e:	d116      	bne.n	800723e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007214:	e013      	b.n	800723e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007216:	4b56      	ldr	r3, [pc, #344]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10f      	bne.n	8007242 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007222:	4b53      	ldr	r3, [pc, #332]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007232:	e006      	b.n	8007242 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	e004      	b.n	8007244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007242:	bf00      	nop
    }

    if(status == HAL_OK)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800724a:	4b49      	ldr	r3, [pc, #292]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6819      	ldr	r1, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	3b01      	subs	r3, #1
 800725c:	011b      	lsls	r3, r3, #4
 800725e:	430b      	orrs	r3, r1
 8007260:	4943      	ldr	r1, [pc, #268]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007262:	4313      	orrs	r3, r2
 8007264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d17c      	bne.n	8007366 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800726c:	4b40      	ldr	r3, [pc, #256]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a3f      	ldr	r2, [pc, #252]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007272:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007278:	f7fc f9fa 	bl	8003670 <HAL_GetTick>
 800727c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800727e:	e009      	b.n	8007294 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007280:	f7fc f9f6 	bl	8003670 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d902      	bls.n	8007294 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	73fb      	strb	r3, [r7, #15]
        break;
 8007292:	e005      	b.n	80072a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007294:	4b36      	ldr	r3, [pc, #216]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1ef      	bne.n	8007280 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d15f      	bne.n	8007366 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d110      	bne.n	80072ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ac:	4b30      	ldr	r3, [pc, #192]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80072b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6892      	ldr	r2, [r2, #8]
 80072bc:	0211      	lsls	r1, r2, #8
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68d2      	ldr	r2, [r2, #12]
 80072c2:	06d2      	lsls	r2, r2, #27
 80072c4:	430a      	orrs	r2, r1
 80072c6:	492a      	ldr	r1, [pc, #168]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	610b      	str	r3, [r1, #16]
 80072cc:	e027      	b.n	800731e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d112      	bne.n	80072fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072d4:	4b26      	ldr	r3, [pc, #152]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80072dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6892      	ldr	r2, [r2, #8]
 80072e4:	0211      	lsls	r1, r2, #8
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6912      	ldr	r2, [r2, #16]
 80072ea:	0852      	lsrs	r2, r2, #1
 80072ec:	3a01      	subs	r2, #1
 80072ee:	0552      	lsls	r2, r2, #21
 80072f0:	430a      	orrs	r2, r1
 80072f2:	491f      	ldr	r1, [pc, #124]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	610b      	str	r3, [r1, #16]
 80072f8:	e011      	b.n	800731e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007302:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6892      	ldr	r2, [r2, #8]
 800730a:	0211      	lsls	r1, r2, #8
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6952      	ldr	r2, [r2, #20]
 8007310:	0852      	lsrs	r2, r2, #1
 8007312:	3a01      	subs	r2, #1
 8007314:	0652      	lsls	r2, r2, #25
 8007316:	430a      	orrs	r2, r1
 8007318:	4915      	ldr	r1, [pc, #84]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800731e:	4b14      	ldr	r3, [pc, #80]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a13      	ldr	r2, [pc, #76]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007328:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732a:	f7fc f9a1 	bl	8003670 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007330:	e009      	b.n	8007346 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007332:	f7fc f99d 	bl	8003670 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d902      	bls.n	8007346 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	73fb      	strb	r3, [r7, #15]
          break;
 8007344:	e005      	b.n	8007352 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0ef      	beq.n	8007332 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	4903      	ldr	r1, [pc, #12]	@ (8007370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007362:	4313      	orrs	r3, r2
 8007364:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40021000 	.word	0x40021000

08007374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007382:	4b69      	ldr	r3, [pc, #420]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d018      	beq.n	80073c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800738e:	4b66      	ldr	r3, [pc, #408]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0203 	and.w	r2, r3, #3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d10d      	bne.n	80073ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
       ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80073a6:	4b60      	ldr	r3, [pc, #384]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
       ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d047      	beq.n	800744a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e044      	b.n	800744a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d018      	beq.n	80073fa <RCCEx_PLLSAI2_Config+0x86>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d825      	bhi.n	8007418 <RCCEx_PLLSAI2_Config+0xa4>
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d002      	beq.n	80073d6 <RCCEx_PLLSAI2_Config+0x62>
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d009      	beq.n	80073e8 <RCCEx_PLLSAI2_Config+0x74>
 80073d4:	e020      	b.n	8007418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073d6:	4b54      	ldr	r3, [pc, #336]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11d      	bne.n	800741e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073e6:	e01a      	b.n	800741e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d116      	bne.n	8007422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f8:	e013      	b.n	8007422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10f      	bne.n	8007426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007406:	4b48      	ldr	r3, [pc, #288]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007416:	e006      	b.n	8007426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
      break;
 800741c:	e004      	b.n	8007428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800741e:	bf00      	nop
 8007420:	e002      	b.n	8007428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007422:	bf00      	nop
 8007424:	e000      	b.n	8007428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007426:	bf00      	nop
    }

    if(status == HAL_OK)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800742e:	4b3e      	ldr	r3, [pc, #248]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	3b01      	subs	r3, #1
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	430b      	orrs	r3, r1
 8007444:	4938      	ldr	r1, [pc, #224]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d166      	bne.n	800751e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007450:	4b35      	ldr	r3, [pc, #212]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a34      	ldr	r2, [pc, #208]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800745a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745c:	f7fc f908 	bl	8003670 <HAL_GetTick>
 8007460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007462:	e009      	b.n	8007478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007464:	f7fc f904 	bl	8003670 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d902      	bls.n	8007478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	73fb      	strb	r3, [r7, #15]
        break;
 8007476:	e005      	b.n	8007484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007478:	4b2b      	ldr	r3, [pc, #172]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ef      	bne.n	8007464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d149      	bne.n	800751e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d110      	bne.n	80074b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007490:	4b25      	ldr	r3, [pc, #148]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007498:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	0211      	lsls	r1, r2, #8
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68d2      	ldr	r2, [r2, #12]
 80074a6:	06d2      	lsls	r2, r2, #27
 80074a8:	430a      	orrs	r2, r1
 80074aa:	491f      	ldr	r1, [pc, #124]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	614b      	str	r3, [r1, #20]
 80074b0:	e011      	b.n	80074d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80074ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6892      	ldr	r2, [r2, #8]
 80074c2:	0211      	lsls	r1, r2, #8
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6912      	ldr	r2, [r2, #16]
 80074c8:	0852      	lsrs	r2, r2, #1
 80074ca:	3a01      	subs	r2, #1
 80074cc:	0652      	lsls	r2, r2, #25
 80074ce:	430a      	orrs	r2, r1
 80074d0:	4915      	ldr	r1, [pc, #84]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074d6:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a13      	ldr	r2, [pc, #76]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e2:	f7fc f8c5 	bl	8003670 <HAL_GetTick>
 80074e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074e8:	e009      	b.n	80074fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074ea:	f7fc f8c1 	bl	8003670 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d902      	bls.n	80074fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	73fb      	strb	r3, [r7, #15]
          break;
 80074fc:	e005      	b.n	800750a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0ef      	beq.n	80074ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	4903      	ldr	r1, [pc, #12]	@ (8007528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800751a:	4313      	orrs	r3, r2
 800751c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000

0800752c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e095      	b.n	800766a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800754e:	d009      	beq.n	8007564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	61da      	str	r2, [r3, #28]
 8007556:	e005      	b.n	8007564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb fbfa 	bl	8002d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800759a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075a4:	d902      	bls.n	80075ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e002      	b.n	80075b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80075ba:	d007      	beq.n	80075cc <HAL_SPI_Init+0xa0>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075c4:	d002      	beq.n	80075cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760e:	ea42 0103 	orr.w	r1, r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	f003 0204 	and.w	r2, r3, #4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007648:	ea42 0103 	orr.w	r1, r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	099b      	lsrs	r3, r3, #6
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10f      	bne.n	80076b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
    return;
 80076b6:	e0d7      	b.n	8007868 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_SPI_IRQHandler+0x66>
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	09db      	lsrs	r3, r3, #7
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
    return;
 80076d8:	e0c6      	b.n	8007868 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10c      	bne.n	8007700 <HAL_SPI_IRQHandler+0x8c>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	099b      	lsrs	r3, r3, #6
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80b4 	beq.w	8007868 <HAL_SPI_IRQHandler+0x1f4>
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80ad 	beq.w	8007868 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	099b      	lsrs	r3, r3, #6
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d023      	beq.n	8007762 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b03      	cmp	r3, #3
 8007724:	d011      	beq.n	800774a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800772a:	f043 0204 	orr.w	r2, r3, #4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	e00b      	b.n	8007762 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	693b      	ldr	r3, [r7, #16]
        return;
 8007760:	e082      	b.n	8007868 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d014      	beq.n	8007798 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007772:	f043 0201 	orr.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a8:	f043 0208 	orr.w	r2, r3, #8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077b0:	2300      	movs	r3, #0
 80077b2:	60bb      	str	r3, [r7, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d04f      	beq.n	8007866 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_SPI_IRQHandler+0x17e>
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d034      	beq.n	800785c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0203 	bic.w	r2, r2, #3
 8007800:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007806:	2b00      	cmp	r3, #0
 8007808:	d011      	beq.n	800782e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780e:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <HAL_SPI_IRQHandler+0x1fc>)
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd fb80 	bl	8004f1c <HAL_DMA_Abort_IT>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007826:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	4a0d      	ldr	r2, [pc, #52]	@ (8007870 <HAL_SPI_IRQHandler+0x1fc>)
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd fb6a 	bl	8004f1c <HAL_DMA_Abort_IT>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800785a:	e003      	b.n	8007864 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f809 	bl	8007874 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007862:	e000      	b.n	8007866 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007864:	bf00      	nop
    return;
 8007866:	bf00      	nop
  }
}
 8007868:	3720      	adds	r7, #32
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	08007889 	.word	0x08007889

08007874 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f7ff ffe5 	bl	8007874 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e049      	b.n	8007958 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fb faeb 	bl	8002eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3304      	adds	r3, #4
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f000 fa9d 	bl	8007e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	d001      	beq.n	8007978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e04f      	b.n	8007a18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a23      	ldr	r2, [pc, #140]	@ (8007a24 <HAL_TIM_Base_Start_IT+0xc4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <HAL_TIM_Base_Start_IT+0x76>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d018      	beq.n	80079d6 <HAL_TIM_Base_Start_IT+0x76>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007a28 <HAL_TIM_Base_Start_IT+0xc8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <HAL_TIM_Base_Start_IT+0x76>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a2c <HAL_TIM_Base_Start_IT+0xcc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <HAL_TIM_Base_Start_IT+0x76>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007a30 <HAL_TIM_Base_Start_IT+0xd0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <HAL_TIM_Base_Start_IT+0x76>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a34 <HAL_TIM_Base_Start_IT+0xd4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <HAL_TIM_Base_Start_IT+0x76>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a19      	ldr	r2, [pc, #100]	@ (8007a38 <HAL_TIM_Base_Start_IT+0xd8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d115      	bne.n	8007a02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	4b17      	ldr	r3, [pc, #92]	@ (8007a3c <HAL_TIM_Base_Start_IT+0xdc>)
 80079de:	4013      	ands	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b06      	cmp	r3, #6
 80079e6:	d015      	beq.n	8007a14 <HAL_TIM_Base_Start_IT+0xb4>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ee:	d011      	beq.n	8007a14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a00:	e008      	b.n	8007a14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e000      	b.n	8007a16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40013400 	.word	0x40013400
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	00010007 	.word	0x00010007

08007a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d020      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01b      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0202 	mvn.w	r2, #2
 8007a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9b2 	bl	8007df4 <HAL_TIM_IC_CaptureCallback>
 8007a90:	e005      	b.n	8007a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9a4 	bl	8007de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f9b5 	bl	8007e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d020      	beq.n	8007af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01b      	beq.n	8007af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0204 	mvn.w	r2, #4
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f98c 	bl	8007df4 <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f97e 	bl	8007de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f98f 	bl	8007e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d020      	beq.n	8007b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01b      	beq.n	8007b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0208 	mvn.w	r2, #8
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2204      	movs	r2, #4
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f966 	bl	8007df4 <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f958 	bl	8007de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f969 	bl	8007e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d020      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01b      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0210 	mvn.w	r2, #16
 8007b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f940 	bl	8007df4 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f932 	bl	8007de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f943 	bl	8007e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00c      	beq.n	8007bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0201 	mvn.w	r2, #1
 8007ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fa ff4a 	bl	8002a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fafd 	bl	80081d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00c      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d007      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 faf5 	bl	80081e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f8fd 	bl	8007e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f06f 0220 	mvn.w	r2, #32
 8007c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fabd 	bl	80081c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_TIM_ConfigClockSource+0x1c>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e0b6      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x18a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c88:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca6:	d03e      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0xd8>
 8007ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cac:	f200 8087 	bhi.w	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cb4:	f000 8086 	beq.w	8007dc4 <HAL_TIM_ConfigClockSource+0x176>
 8007cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cbc:	d87f      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cbe:	2b70      	cmp	r3, #112	@ 0x70
 8007cc0:	d01a      	beq.n	8007cf8 <HAL_TIM_ConfigClockSource+0xaa>
 8007cc2:	2b70      	cmp	r3, #112	@ 0x70
 8007cc4:	d87b      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cc6:	2b60      	cmp	r3, #96	@ 0x60
 8007cc8:	d050      	beq.n	8007d6c <HAL_TIM_ConfigClockSource+0x11e>
 8007cca:	2b60      	cmp	r3, #96	@ 0x60
 8007ccc:	d877      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cce:	2b50      	cmp	r3, #80	@ 0x50
 8007cd0:	d03c      	beq.n	8007d4c <HAL_TIM_ConfigClockSource+0xfe>
 8007cd2:	2b50      	cmp	r3, #80	@ 0x50
 8007cd4:	d873      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d058      	beq.n	8007d8c <HAL_TIM_ConfigClockSource+0x13e>
 8007cda:	2b40      	cmp	r3, #64	@ 0x40
 8007cdc:	d86f      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cde:	2b30      	cmp	r3, #48	@ 0x30
 8007ce0:	d064      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x15e>
 8007ce2:	2b30      	cmp	r3, #48	@ 0x30
 8007ce4:	d86b      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d060      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x15e>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d867      	bhi.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d05c      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x15e>
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d05a      	beq.n	8007dac <HAL_TIM_ConfigClockSource+0x15e>
 8007cf6:	e062      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d08:	f000 f9b2 	bl	8008070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	609a      	str	r2, [r3, #8]
      break;
 8007d24:	e04f      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d36:	f000 f99b 	bl	8008070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d48:	609a      	str	r2, [r3, #8]
      break;
 8007d4a:	e03c      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f000 f90f 	bl	8007f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2150      	movs	r1, #80	@ 0x50
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f968 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007d6a:	e02c      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f000 f92e 	bl	8007fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2160      	movs	r1, #96	@ 0x60
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f958 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007d8a:	e01c      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f000 f8ef 	bl	8007f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2140      	movs	r1, #64	@ 0x40
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 f948 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007daa:	e00c      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f000 f93f 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007dbc:	e003      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc2:	e000      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007dc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a46      	ldr	r2, [pc, #280]	@ (8007f5c <TIM_Base_SetConfig+0x12c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d013      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4e:	d00f      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a43      	ldr	r2, [pc, #268]	@ (8007f60 <TIM_Base_SetConfig+0x130>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a42      	ldr	r2, [pc, #264]	@ (8007f64 <TIM_Base_SetConfig+0x134>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d007      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a41      	ldr	r2, [pc, #260]	@ (8007f68 <TIM_Base_SetConfig+0x138>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a40      	ldr	r2, [pc, #256]	@ (8007f6c <TIM_Base_SetConfig+0x13c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d108      	bne.n	8007e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a35      	ldr	r2, [pc, #212]	@ (8007f5c <TIM_Base_SetConfig+0x12c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01f      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e90:	d01b      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a32      	ldr	r2, [pc, #200]	@ (8007f60 <TIM_Base_SetConfig+0x130>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d017      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a31      	ldr	r2, [pc, #196]	@ (8007f64 <TIM_Base_SetConfig+0x134>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a30      	ldr	r2, [pc, #192]	@ (8007f68 <TIM_Base_SetConfig+0x138>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00f      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a2f      	ldr	r2, [pc, #188]	@ (8007f6c <TIM_Base_SetConfig+0x13c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00b      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f70 <TIM_Base_SetConfig+0x140>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8007f74 <TIM_Base_SetConfig+0x144>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d003      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8007f78 <TIM_Base_SetConfig+0x148>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d108      	bne.n	8007edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a16      	ldr	r2, [pc, #88]	@ (8007f5c <TIM_Base_SetConfig+0x12c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00f      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a18      	ldr	r2, [pc, #96]	@ (8007f6c <TIM_Base_SetConfig+0x13c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00b      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a17      	ldr	r2, [pc, #92]	@ (8007f70 <TIM_Base_SetConfig+0x140>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a16      	ldr	r2, [pc, #88]	@ (8007f74 <TIM_Base_SetConfig+0x144>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a15      	ldr	r2, [pc, #84]	@ (8007f78 <TIM_Base_SetConfig+0x148>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d103      	bne.n	8007f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d105      	bne.n	8007f4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	611a      	str	r2, [r3, #16]
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40000400 	.word	0x40000400
 8007f64:	40000800 	.word	0x40000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 030a 	bic.w	r3, r3, #10
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	621a      	str	r2, [r3, #32]
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b087      	sub	sp, #28
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008016:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	f043 0307 	orr.w	r3, r3, #7
 800805c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	609a      	str	r2, [r3, #8]
}
 8008064:	bf00      	nop
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800808a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	021a      	lsls	r2, r3, #8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	431a      	orrs	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	609a      	str	r2, [r3, #8]
}
 80080a4:	bf00      	nop
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e068      	b.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a2e      	ldr	r2, [pc, #184]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2d      	ldr	r2, [pc, #180]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d108      	bne.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1e      	ldr	r2, [pc, #120]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d01d      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813a:	d018      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1b      	ldr	r2, [pc, #108]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1a      	ldr	r2, [pc, #104]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00e      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a18      	ldr	r2, [pc, #96]	@ (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d009      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a13      	ldr	r2, [pc, #76]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a14      	ldr	r2, [pc, #80]	@ (80081bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d10c      	bne.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4313      	orrs	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40012c00 	.word	0x40012c00
 80081ac:	40013400 	.word	0x40013400
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	40014000 	.word	0x40014000

080081c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e040      	b.n	8008290 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7fa fea2 	bl	8002f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2224      	movs	r2, #36	@ 0x24
 8008228:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0201 	bic.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fedc 	bl	8009000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc21 	bl	8008a90 <UART_SetConfig>
 800824e:	4603      	mov	r3, r0
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e01b      	b.n	8008290 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 ff5b 	bl	8009144 <UART_CheckIdleState>
 800828e:	4603      	mov	r3, r0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	@ 0x28
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d177      	bne.n	80083a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_UART_Transmit+0x24>
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e070      	b.n	80083a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2221      	movs	r2, #33	@ 0x21
 80082cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082ce:	f7fb f9cf 	bl	8003670 <HAL_GetTick>
 80082d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	88fa      	ldrh	r2, [r7, #6]
 80082e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ec:	d108      	bne.n	8008300 <HAL_UART_Transmit+0x68>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d104      	bne.n	8008300 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	e003      	b.n	8008308 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008308:	e02f      	b.n	800836a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2200      	movs	r2, #0
 8008312:	2180      	movs	r1, #128	@ 0x80
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 ffbd 	bl	8009294 <UART_WaitOnFlagUntilTimeout>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e03b      	b.n	80083a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10b      	bne.n	8008348 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	881a      	ldrh	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800833c:	b292      	uxth	r2, r2
 800833e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	3302      	adds	r3, #2
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	e007      	b.n	8008358 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	3301      	adds	r3, #1
 8008356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800835e:	b29b      	uxth	r3, r3
 8008360:	3b01      	subs	r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1c9      	bne.n	800830a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2200      	movs	r2, #0
 800837e:	2140      	movs	r1, #64	@ 0x40
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 ff87 	bl	8009294 <UART_WaitOnFlagUntilTimeout>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e005      	b.n	80083a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08a      	sub	sp, #40	@ 0x28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d137      	bne.n	8008434 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_UART_Receive_DMA+0x24>
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e030      	b.n	8008436 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <HAL_UART_Receive_DMA+0x94>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d01f      	beq.n	8008424 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d018      	beq.n	8008424 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	623b      	str	r3, [r7, #32]
 8008412:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	69f9      	ldr	r1, [r7, #28]
 8008416:	6a3a      	ldr	r2, [r7, #32]
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	61bb      	str	r3, [r7, #24]
   return(result);
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e6      	bne.n	80083f2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	461a      	mov	r2, r3
 8008428:	68b9      	ldr	r1, [r7, #8]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 ffa0 	bl	8009370 <UART_Start_Receive_DMA>
 8008430:	4603      	mov	r3, r0
 8008432:	e000      	b.n	8008436 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3728      	adds	r7, #40	@ 0x28
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40008000 	.word	0x40008000

08008444 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b0ba      	sub	sp, #232	@ 0xe8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800846a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800846e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008472:	4013      	ands	r3, r2
 8008474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d115      	bne.n	80084ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00f      	beq.n	80084ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008490:	f003 0320 	and.w	r3, r3, #32
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 82ca 	beq.w	8008a36 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
      }
      return;
 80084aa:	e2c4      	b.n	8008a36 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80084ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 8117 	beq.w	80086e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084c6:	4b85      	ldr	r3, [pc, #532]	@ (80086dc <HAL_UART_IRQHandler+0x298>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 810a 	beq.w	80086e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d011      	beq.n	8008500 <HAL_UART_IRQHandler+0xbc>
 80084dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2201      	movs	r2, #1
 80084ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084f6:	f043 0201 	orr.w	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d011      	beq.n	8008530 <HAL_UART_IRQHandler+0xec>
 800850c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2202      	movs	r2, #2
 800851e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008526:	f043 0204 	orr.w	r2, r3, #4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d011      	beq.n	8008560 <HAL_UART_IRQHandler+0x11c>
 800853c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2204      	movs	r2, #4
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008556:	f043 0202 	orr.w	r2, r3, #2
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d017      	beq.n	800859c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800857c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00b      	beq.n	800859c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2208      	movs	r2, #8
 800858a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008592:	f043 0208 	orr.w	r2, r3, #8
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800859c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d012      	beq.n	80085ce <HAL_UART_IRQHandler+0x18a>
 80085a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085c4:	f043 0220 	orr.w	r2, r3, #32
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8230 	beq.w	8008a3a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008608:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008616:	2b40      	cmp	r3, #64	@ 0x40
 8008618:	d005      	beq.n	8008626 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800861a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800861e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008622:	2b00      	cmp	r3, #0
 8008624:	d04f      	beq.n	80086c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 ff68 	bl	80094fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008636:	2b40      	cmp	r3, #64	@ 0x40
 8008638:	d141      	bne.n	80086be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3308      	adds	r3, #8
 8008640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800866a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800867e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1d9      	bne.n	800863a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868a:	2b00      	cmp	r3, #0
 800868c:	d013      	beq.n	80086b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008692:	4a13      	ldr	r2, [pc, #76]	@ (80086e0 <HAL_UART_IRQHandler+0x29c>)
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869a:	4618      	mov	r0, r3
 800869c:	f7fc fc3e 	bl	8004f1c <HAL_DMA_Abort_IT>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d017      	beq.n	80086d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b4:	e00f      	b.n	80086d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7f9 f870 	bl	800179c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	e00b      	b.n	80086d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7f9 f86c 	bl	800179c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	e007      	b.n	80086d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7f9 f868 	bl	800179c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80086d4:	e1b1      	b.n	8008a3a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d6:	bf00      	nop
    return;
 80086d8:	e1af      	b.n	8008a3a <HAL_UART_IRQHandler+0x5f6>
 80086da:	bf00      	nop
 80086dc:	04000120 	.word	0x04000120
 80086e0:	080097ad 	.word	0x080097ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	f040 816a 	bne.w	80089c2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 8163 	beq.w	80089c2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 815c 	beq.w	80089c2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2210      	movs	r2, #16
 8008710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	f040 80d4 	bne.w	80088ca <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800872e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80ad 	beq.w	8008892 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800873e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008742:	429a      	cmp	r2, r3
 8008744:	f080 80a5 	bcs.w	8008892 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800874e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 8086 	bne.w	8008870 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800877c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800878e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008792:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800879a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1da      	bne.n	8008764 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e1      	bne.n	80087ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800880e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800881c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e3      	bne.n	80087ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800883e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008840:	f023 0310 	bic.w	r3, r3, #16
 8008844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e4      	bne.n	8008830 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886a:	4618      	mov	r0, r3
 800886c:	f7fc fb18 	bl	8004ea0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008882:	b29b      	uxth	r3, r3
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	b29b      	uxth	r3, r3
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8f4 	bl	8008a78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008890:	e0d5      	b.n	8008a3e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800889c:	429a      	cmp	r2, r3
 800889e:	f040 80ce 	bne.w	8008a3e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	f040 80c5 	bne.w	8008a3e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8d8 	bl	8008a78 <HAL_UARTEx_RxEventCallback>
      return;
 80088c8:	e0b9      	b.n	8008a3e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80ab 	beq.w	8008a42 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80088ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80a6 	beq.w	8008a42 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800890a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008918:	647b      	str	r3, [r7, #68]	@ 0x44
 800891a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800891e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e4      	bne.n	80088f6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	623b      	str	r3, [r7, #32]
   return(result);
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	f023 0301 	bic.w	r3, r3, #1
 8008942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3308      	adds	r3, #8
 800894c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008950:	633a      	str	r2, [r7, #48]	@ 0x30
 8008952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e3      	bne.n	800892c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	60fb      	str	r3, [r7, #12]
   return(result);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 0310 	bic.w	r3, r3, #16
 800898c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	69b9      	ldr	r1, [r7, #24]
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	617b      	str	r3, [r7, #20]
   return(result);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e4      	bne.n	8008978 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f85c 	bl	8008a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089c0:	e03f      	b.n	8008a42 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <HAL_UART_IRQHandler+0x5a8>
 80089ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d008      	beq.n	80089ec <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 ff88 	bl	80098fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ea:	e02d      	b.n	8008a48 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01c      	beq.n	8008a46 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	4798      	blx	r3
    }
    return;
 8008a14:	e017      	b.n	8008a46 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d012      	beq.n	8008a48 <HAL_UART_IRQHandler+0x604>
 8008a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00c      	beq.n	8008a48 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fed2 	bl	80097d8 <UART_EndTransmit_IT>
    return;
 8008a34:	e008      	b.n	8008a48 <HAL_UART_IRQHandler+0x604>
      return;
 8008a36:	bf00      	nop
 8008a38:	e006      	b.n	8008a48 <HAL_UART_IRQHandler+0x604>
    return;
 8008a3a:	bf00      	nop
 8008a3c:	e004      	b.n	8008a48 <HAL_UART_IRQHandler+0x604>
      return;
 8008a3e:	bf00      	nop
 8008a40:	e002      	b.n	8008a48 <HAL_UART_IRQHandler+0x604>
      return;
 8008a42:	bf00      	nop
 8008a44:	e000      	b.n	8008a48 <HAL_UART_IRQHandler+0x604>
    return;
 8008a46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008a48:	37e8      	adds	r7, #232	@ 0xe8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop

08008a50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a94:	b08a      	sub	sp, #40	@ 0x28
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4ba4      	ldr	r3, [pc, #656]	@ (8008d50 <UART_SetConfig+0x2c0>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a99      	ldr	r2, [pc, #612]	@ (8008d54 <UART_SetConfig+0x2c4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d004      	beq.n	8008afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af8:	4313      	orrs	r3, r2
 8008afa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a90      	ldr	r2, [pc, #576]	@ (8008d58 <UART_SetConfig+0x2c8>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d126      	bne.n	8008b68 <UART_SetConfig+0xd8>
 8008b1a:	4b90      	ldr	r3, [pc, #576]	@ (8008d5c <UART_SetConfig+0x2cc>)
 8008b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d81b      	bhi.n	8008b60 <UART_SetConfig+0xd0>
 8008b28:	a201      	add	r2, pc, #4	@ (adr r2, 8008b30 <UART_SetConfig+0xa0>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b41 	.word	0x08008b41
 8008b34:	08008b51 	.word	0x08008b51
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b46:	e116      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b4e:	e112      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b56:	e10e      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b5e:	e10a      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b66:	e106      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8008d60 <UART_SetConfig+0x2d0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d138      	bne.n	8008be4 <UART_SetConfig+0x154>
 8008b72:	4b7a      	ldr	r3, [pc, #488]	@ (8008d5c <UART_SetConfig+0x2cc>)
 8008b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b78:	f003 030c 	and.w	r3, r3, #12
 8008b7c:	2b0c      	cmp	r3, #12
 8008b7e:	d82d      	bhi.n	8008bdc <UART_SetConfig+0x14c>
 8008b80:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <UART_SetConfig+0xf8>)
 8008b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008bbd 	.word	0x08008bbd
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008bdd 	.word	0x08008bdd
 8008b98:	08008bcd 	.word	0x08008bcd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bdd 	.word	0x08008bdd
 8008ba4:	08008bdd 	.word	0x08008bdd
 8008ba8:	08008bc5 	.word	0x08008bc5
 8008bac:	08008bdd 	.word	0x08008bdd
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	08008bdd 	.word	0x08008bdd
 8008bb8:	08008bd5 	.word	0x08008bd5
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bc2:	e0d8      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bca:	e0d4      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008bcc:	2304      	movs	r3, #4
 8008bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bd2:	e0d0      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008bd4:	2308      	movs	r3, #8
 8008bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bda:	e0cc      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008bdc:	2310      	movs	r3, #16
 8008bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008be2:	e0c8      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a5e      	ldr	r2, [pc, #376]	@ (8008d64 <UART_SetConfig+0x2d4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d125      	bne.n	8008c3a <UART_SetConfig+0x1aa>
 8008bee:	4b5b      	ldr	r3, [pc, #364]	@ (8008d5c <UART_SetConfig+0x2cc>)
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008bf8:	2b30      	cmp	r3, #48	@ 0x30
 8008bfa:	d016      	beq.n	8008c2a <UART_SetConfig+0x19a>
 8008bfc:	2b30      	cmp	r3, #48	@ 0x30
 8008bfe:	d818      	bhi.n	8008c32 <UART_SetConfig+0x1a2>
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	d00a      	beq.n	8008c1a <UART_SetConfig+0x18a>
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d814      	bhi.n	8008c32 <UART_SetConfig+0x1a2>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <UART_SetConfig+0x182>
 8008c0c:	2b10      	cmp	r3, #16
 8008c0e:	d008      	beq.n	8008c22 <UART_SetConfig+0x192>
 8008c10:	e00f      	b.n	8008c32 <UART_SetConfig+0x1a2>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c18:	e0ad      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c20:	e0a9      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c22:	2304      	movs	r3, #4
 8008c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c28:	e0a5      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c2a:	2308      	movs	r3, #8
 8008c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c30:	e0a1      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c32:	2310      	movs	r3, #16
 8008c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c38:	e09d      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8008d68 <UART_SetConfig+0x2d8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d125      	bne.n	8008c90 <UART_SetConfig+0x200>
 8008c44:	4b45      	ldr	r3, [pc, #276]	@ (8008d5c <UART_SetConfig+0x2cc>)
 8008c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c50:	d016      	beq.n	8008c80 <UART_SetConfig+0x1f0>
 8008c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c54:	d818      	bhi.n	8008c88 <UART_SetConfig+0x1f8>
 8008c56:	2b80      	cmp	r3, #128	@ 0x80
 8008c58:	d00a      	beq.n	8008c70 <UART_SetConfig+0x1e0>
 8008c5a:	2b80      	cmp	r3, #128	@ 0x80
 8008c5c:	d814      	bhi.n	8008c88 <UART_SetConfig+0x1f8>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <UART_SetConfig+0x1d8>
 8008c62:	2b40      	cmp	r3, #64	@ 0x40
 8008c64:	d008      	beq.n	8008c78 <UART_SetConfig+0x1e8>
 8008c66:	e00f      	b.n	8008c88 <UART_SetConfig+0x1f8>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c6e:	e082      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c70:	2302      	movs	r3, #2
 8008c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c76:	e07e      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c7e:	e07a      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c80:	2308      	movs	r3, #8
 8008c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c86:	e076      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8e:	e072      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a35      	ldr	r2, [pc, #212]	@ (8008d6c <UART_SetConfig+0x2dc>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d12a      	bne.n	8008cf0 <UART_SetConfig+0x260>
 8008c9a:	4b30      	ldr	r3, [pc, #192]	@ (8008d5c <UART_SetConfig+0x2cc>)
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ca8:	d01a      	beq.n	8008ce0 <UART_SetConfig+0x250>
 8008caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cae:	d81b      	bhi.n	8008ce8 <UART_SetConfig+0x258>
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb4:	d00c      	beq.n	8008cd0 <UART_SetConfig+0x240>
 8008cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cba:	d815      	bhi.n	8008ce8 <UART_SetConfig+0x258>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <UART_SetConfig+0x238>
 8008cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cc4:	d008      	beq.n	8008cd8 <UART_SetConfig+0x248>
 8008cc6:	e00f      	b.n	8008ce8 <UART_SetConfig+0x258>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cce:	e052      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cd6:	e04e      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cde:	e04a      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce6:	e046      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cee:	e042      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a17      	ldr	r2, [pc, #92]	@ (8008d54 <UART_SetConfig+0x2c4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d13a      	bne.n	8008d70 <UART_SetConfig+0x2e0>
 8008cfa:	4b18      	ldr	r3, [pc, #96]	@ (8008d5c <UART_SetConfig+0x2cc>)
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d08:	d01a      	beq.n	8008d40 <UART_SetConfig+0x2b0>
 8008d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d0e:	d81b      	bhi.n	8008d48 <UART_SetConfig+0x2b8>
 8008d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d14:	d00c      	beq.n	8008d30 <UART_SetConfig+0x2a0>
 8008d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d1a:	d815      	bhi.n	8008d48 <UART_SetConfig+0x2b8>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <UART_SetConfig+0x298>
 8008d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d24:	d008      	beq.n	8008d38 <UART_SetConfig+0x2a8>
 8008d26:	e00f      	b.n	8008d48 <UART_SetConfig+0x2b8>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d2e:	e022      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008d30:	2302      	movs	r3, #2
 8008d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d36:	e01e      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d3e:	e01a      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008d40:	2308      	movs	r3, #8
 8008d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d46:	e016      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008d48:	2310      	movs	r3, #16
 8008d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d4e:	e012      	b.n	8008d76 <UART_SetConfig+0x2e6>
 8008d50:	efff69f3 	.word	0xefff69f3
 8008d54:	40008000 	.word	0x40008000
 8008d58:	40013800 	.word	0x40013800
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	40004400 	.word	0x40004400
 8008d64:	40004800 	.word	0x40004800
 8008d68:	40004c00 	.word	0x40004c00
 8008d6c:	40005000 	.word	0x40005000
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ff8 <UART_SetConfig+0x568>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d17a      	bne.n	8008e76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d824      	bhi.n	8008dd2 <UART_SetConfig+0x342>
 8008d88:	a201      	add	r2, pc, #4	@ (adr r2, 8008d90 <UART_SetConfig+0x300>)
 8008d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8e:	bf00      	nop
 8008d90:	08008db5 	.word	0x08008db5
 8008d94:	08008dd3 	.word	0x08008dd3
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008dd3 	.word	0x08008dd3
 8008da0:	08008dc3 	.word	0x08008dc3
 8008da4:	08008dd3 	.word	0x08008dd3
 8008da8:	08008dd3 	.word	0x08008dd3
 8008dac:	08008dd3 	.word	0x08008dd3
 8008db0:	08008dcb 	.word	0x08008dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db4:	f7fd fe32 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 8008db8:	61f8      	str	r0, [r7, #28]
        break;
 8008dba:	e010      	b.n	8008dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8008ffc <UART_SetConfig+0x56c>)
 8008dbe:	61fb      	str	r3, [r7, #28]
        break;
 8008dc0:	e00d      	b.n	8008dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dc2:	f7fd fd93 	bl	80068ec <HAL_RCC_GetSysClockFreq>
 8008dc6:	61f8      	str	r0, [r7, #28]
        break;
 8008dc8:	e009      	b.n	8008dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dce:	61fb      	str	r3, [r7, #28]
        break;
 8008dd0:	e005      	b.n	8008dde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80fb 	beq.w	8008fdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	4413      	add	r3, r2
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d305      	bcc.n	8008e02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d903      	bls.n	8008e0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e08:	e0e8      	b.n	8008fdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	461c      	mov	r4, r3
 8008e10:	4615      	mov	r5, r2
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	f04f 0300 	mov.w	r3, #0
 8008e1a:	022b      	lsls	r3, r5, #8
 8008e1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e20:	0222      	lsls	r2, r4, #8
 8008e22:	68f9      	ldr	r1, [r7, #12]
 8008e24:	6849      	ldr	r1, [r1, #4]
 8008e26:	0849      	lsrs	r1, r1, #1
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4688      	mov	r8, r1
 8008e2c:	4681      	mov	r9, r0
 8008e2e:	eb12 0a08 	adds.w	sl, r2, r8
 8008e32:	eb43 0b09 	adc.w	fp, r3, r9
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	603b      	str	r3, [r7, #0]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e44:	4650      	mov	r0, sl
 8008e46:	4659      	mov	r1, fp
 8008e48:	f7f7 fe18 	bl	8000a7c <__aeabi_uldivmod>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4613      	mov	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e5a:	d308      	bcc.n	8008e6e <UART_SetConfig+0x3de>
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e62:	d204      	bcs.n	8008e6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	60da      	str	r2, [r3, #12]
 8008e6c:	e0b6      	b.n	8008fdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e74:	e0b2      	b.n	8008fdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e7e:	d15e      	bne.n	8008f3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008e80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d828      	bhi.n	8008eda <UART_SetConfig+0x44a>
 8008e88:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x400>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008ebd 	.word	0x08008ebd
 8008e98:	08008ec5 	.word	0x08008ec5
 8008e9c:	08008edb 	.word	0x08008edb
 8008ea0:	08008ecb 	.word	0x08008ecb
 8008ea4:	08008edb 	.word	0x08008edb
 8008ea8:	08008edb 	.word	0x08008edb
 8008eac:	08008edb 	.word	0x08008edb
 8008eb0:	08008ed3 	.word	0x08008ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb4:	f7fd fdb2 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 8008eb8:	61f8      	str	r0, [r7, #28]
        break;
 8008eba:	e014      	b.n	8008ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ebc:	f7fd fdc4 	bl	8006a48 <HAL_RCC_GetPCLK2Freq>
 8008ec0:	61f8      	str	r0, [r7, #28]
        break;
 8008ec2:	e010      	b.n	8008ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8008ffc <UART_SetConfig+0x56c>)
 8008ec6:	61fb      	str	r3, [r7, #28]
        break;
 8008ec8:	e00d      	b.n	8008ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eca:	f7fd fd0f 	bl	80068ec <HAL_RCC_GetSysClockFreq>
 8008ece:	61f8      	str	r0, [r7, #28]
        break;
 8008ed0:	e009      	b.n	8008ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ed6:	61fb      	str	r3, [r7, #28]
        break;
 8008ed8:	e005      	b.n	8008ee6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d077      	beq.n	8008fdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	005a      	lsls	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	085b      	lsrs	r3, r3, #1
 8008ef6:	441a      	add	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b0f      	cmp	r3, #15
 8008f06:	d916      	bls.n	8008f36 <UART_SetConfig+0x4a6>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f0e:	d212      	bcs.n	8008f36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f023 030f 	bic.w	r3, r3, #15
 8008f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	8afb      	ldrh	r3, [r7, #22]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	8afa      	ldrh	r2, [r7, #22]
 8008f32:	60da      	str	r2, [r3, #12]
 8008f34:	e052      	b.n	8008fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f3c:	e04e      	b.n	8008fdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f42:	2b08      	cmp	r3, #8
 8008f44:	d827      	bhi.n	8008f96 <UART_SetConfig+0x506>
 8008f46:	a201      	add	r2, pc, #4	@ (adr r2, 8008f4c <UART_SetConfig+0x4bc>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f71 	.word	0x08008f71
 8008f50:	08008f79 	.word	0x08008f79
 8008f54:	08008f81 	.word	0x08008f81
 8008f58:	08008f97 	.word	0x08008f97
 8008f5c:	08008f87 	.word	0x08008f87
 8008f60:	08008f97 	.word	0x08008f97
 8008f64:	08008f97 	.word	0x08008f97
 8008f68:	08008f97 	.word	0x08008f97
 8008f6c:	08008f8f 	.word	0x08008f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fd fd54 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 8008f74:	61f8      	str	r0, [r7, #28]
        break;
 8008f76:	e014      	b.n	8008fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f78:	f7fd fd66 	bl	8006a48 <HAL_RCC_GetPCLK2Freq>
 8008f7c:	61f8      	str	r0, [r7, #28]
        break;
 8008f7e:	e010      	b.n	8008fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f80:	4b1e      	ldr	r3, [pc, #120]	@ (8008ffc <UART_SetConfig+0x56c>)
 8008f82:	61fb      	str	r3, [r7, #28]
        break;
 8008f84:	e00d      	b.n	8008fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f86:	f7fd fcb1 	bl	80068ec <HAL_RCC_GetSysClockFreq>
 8008f8a:	61f8      	str	r0, [r7, #28]
        break;
 8008f8c:	e009      	b.n	8008fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f92:	61fb      	str	r3, [r7, #28]
        break;
 8008f94:	e005      	b.n	8008fa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d019      	beq.n	8008fdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	085a      	lsrs	r2, r3, #1
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	441a      	add	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b0f      	cmp	r3, #15
 8008fc0:	d909      	bls.n	8008fd6 <UART_SetConfig+0x546>
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc8:	d205      	bcs.n	8008fd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60da      	str	r2, [r3, #12]
 8008fd4:	e002      	b.n	8008fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3728      	adds	r7, #40	@ 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40008000 	.word	0x40008000
 8008ffc:	00f42400 	.word	0x00f42400

08009000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	f003 0310 	and.w	r3, r3, #16
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01a      	beq.n	8009116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090fe:	d10a      	bne.n	8009116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800911a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	430a      	orrs	r2, r1
 8009136:	605a      	str	r2, [r3, #4]
  }
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b098      	sub	sp, #96	@ 0x60
 8009148:	af02      	add	r7, sp, #8
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009154:	f7fa fa8c 	bl	8003670 <HAL_GetTick>
 8009158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0308 	and.w	r3, r3, #8
 8009164:	2b08      	cmp	r3, #8
 8009166:	d12e      	bne.n	80091c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009170:	2200      	movs	r2, #0
 8009172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f88c 	bl	8009294 <UART_WaitOnFlagUntilTimeout>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d021      	beq.n	80091c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009196:	653b      	str	r3, [r7, #80]	@ 0x50
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80091a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e6      	bne.n	8009182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e062      	b.n	800928c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d149      	bne.n	8009268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091dc:	2200      	movs	r2, #0
 80091de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f856 	bl	8009294 <UART_WaitOnFlagUntilTimeout>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d03c      	beq.n	8009268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	623b      	str	r3, [r7, #32]
   return(result);
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800920c:	633b      	str	r3, [r7, #48]	@ 0x30
 800920e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e6      	bne.n	80091ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0301 	bic.w	r3, r3, #1
 8009236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3308      	adds	r3, #8
 800923e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009240:	61fa      	str	r2, [r7, #28]
 8009242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	69b9      	ldr	r1, [r7, #24]
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	617b      	str	r3, [r7, #20]
   return(result);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e5      	bne.n	8009220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e011      	b.n	800928c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3758      	adds	r7, #88	@ 0x58
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a4:	e04f      	b.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ac:	d04b      	beq.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ae:	f7fa f9df 	bl	8003670 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d302      	bcc.n	80092c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e04e      	b.n	8009366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0304 	and.w	r3, r3, #4
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d037      	beq.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b80      	cmp	r3, #128	@ 0x80
 80092da:	d034      	beq.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b40      	cmp	r3, #64	@ 0x40
 80092e0:	d031      	beq.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d110      	bne.n	8009312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2208      	movs	r2, #8
 80092f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 f8ff 	bl	80094fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2208      	movs	r2, #8
 8009302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e029      	b.n	8009366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800931c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009320:	d111      	bne.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800932a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f8e5 	bl	80094fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e00f      	b.n	8009366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69da      	ldr	r2, [r3, #28]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	4013      	ands	r3, r2
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	429a      	cmp	r2, r3
 8009354:	bf0c      	ite	eq
 8009356:	2301      	moveq	r3, #1
 8009358:	2300      	movne	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	79fb      	ldrb	r3, [r7, #7]
 8009360:	429a      	cmp	r2, r3
 8009362:	d0a0      	beq.n	80092a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b096      	sub	sp, #88	@ 0x58
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2222      	movs	r2, #34	@ 0x22
 8009398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d028      	beq.n	80093f6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a8:	4a3e      	ldr	r2, [pc, #248]	@ (80094a4 <UART_Start_Receive_DMA+0x134>)
 80093aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093b0:	4a3d      	ldr	r2, [pc, #244]	@ (80094a8 <UART_Start_Receive_DMA+0x138>)
 80093b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093b8:	4a3c      	ldr	r2, [pc, #240]	@ (80094ac <UART_Start_Receive_DMA+0x13c>)
 80093ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093c0:	2200      	movs	r2, #0
 80093c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3324      	adds	r3, #36	@ 0x24
 80093ce:	4619      	mov	r1, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d4:	461a      	mov	r2, r3
 80093d6:	88fb      	ldrh	r3, [r7, #6]
 80093d8:	f7fb fd02 	bl	8004de0 <HAL_DMA_Start_IT>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2210      	movs	r2, #16
 80093e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e051      	b.n	800949a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d018      	beq.n	8009430 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009412:	657b      	str	r3, [r7, #84]	@ 0x54
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800941c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800941e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800942a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e6      	bne.n	80093fe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3308      	adds	r3, #8
 8009436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	f043 0301 	orr.w	r3, r3, #1
 8009446:	653b      	str	r3, [r7, #80]	@ 0x50
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009450:	637a      	str	r2, [r7, #52]	@ 0x34
 8009452:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e5      	bne.n	8009430 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	613b      	str	r3, [r7, #16]
   return(result);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800947a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3308      	adds	r3, #8
 8009482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009484:	623a      	str	r2, [r7, #32]
 8009486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	6a3a      	ldr	r2, [r7, #32]
 800948c:	e841 2300 	strex	r3, r2, [r1]
 8009490:	61bb      	str	r3, [r7, #24]
   return(result);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1e5      	bne.n	8009464 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3758      	adds	r7, #88	@ 0x58
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	080095c5 	.word	0x080095c5
 80094a8:	080096f1 	.word	0x080096f1
 80094ac:	0800972f 	.word	0x0800972f

080094b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b089      	sub	sp, #36	@ 0x24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	61bb      	str	r3, [r7, #24]
 80094d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6979      	ldr	r1, [r7, #20]
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	613b      	str	r3, [r7, #16]
   return(result);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e6      	bne.n	80094b8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80094f0:	bf00      	nop
 80094f2:	3724      	adds	r7, #36	@ 0x24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b095      	sub	sp, #84	@ 0x54
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009522:	643b      	str	r3, [r7, #64]	@ 0x40
 8009524:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e6      	bne.n	8009504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	61fb      	str	r3, [r7, #28]
   return(result);
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f023 0301 	bic.w	r3, r3, #1
 800954c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009556:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009558:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800955c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e5      	bne.n	8009536 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956e:	2b01      	cmp	r3, #1
 8009570:	d118      	bne.n	80095a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f023 0310 	bic.w	r3, r3, #16
 8009586:	647b      	str	r3, [r7, #68]	@ 0x44
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009590:	61bb      	str	r3, [r7, #24]
 8009592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6979      	ldr	r1, [r7, #20]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	613b      	str	r3, [r7, #16]
   return(result);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e6      	bne.n	8009572 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80095b8:	bf00      	nop
 80095ba:	3754      	adds	r7, #84	@ 0x54
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b09c      	sub	sp, #112	@ 0x70
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d171      	bne.n	80096c4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80095e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009608:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800960c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e6      	bne.n	80095e8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3308      	adds	r3, #8
 8009620:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800962a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800962c:	f023 0301 	bic.w	r3, r3, #1
 8009630:	667b      	str	r3, [r7, #100]	@ 0x64
 8009632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800963a:	647a      	str	r2, [r7, #68]	@ 0x44
 800963c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e5      	bne.n	800961a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800964e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	623b      	str	r3, [r7, #32]
   return(result);
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009664:	663b      	str	r3, [r7, #96]	@ 0x60
 8009666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800966e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800967c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e5      	bne.n	800964e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800968a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800968c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800968e:	2b01      	cmp	r3, #1
 8009690:	d118      	bne.n	80096c4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	e853 3f00 	ldrex	r3, [r3]
 800969e:	60fb      	str	r3, [r7, #12]
   return(result);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0310 	bic.w	r3, r3, #16
 80096a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	617b      	str	r3, [r7, #20]
   return(result);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e6      	bne.n	8009692 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096c6:	2200      	movs	r2, #0
 80096c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d107      	bne.n	80096e2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80096d8:	4619      	mov	r1, r3
 80096da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096dc:	f7ff f9cc 	bl	8008a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096e0:	e002      	b.n	80096e8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80096e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096e4:	f7ff f9b4 	bl	8008a50 <HAL_UART_RxCpltCallback>
}
 80096e8:	bf00      	nop
 80096ea:	3770      	adds	r7, #112	@ 0x70
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009708:	2b01      	cmp	r3, #1
 800970a:	d109      	bne.n	8009720 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	b29b      	uxth	r3, r3
 8009716:	4619      	mov	r1, r3
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f7ff f9ad 	bl	8008a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800971e:	e002      	b.n	8009726 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff f99f 	bl	8008a64 <HAL_UART_RxHalfCpltCallback>
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009740:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009748:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009754:	2b80      	cmp	r3, #128	@ 0x80
 8009756:	d109      	bne.n	800976c <UART_DMAError+0x3e>
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	2b21      	cmp	r3, #33	@ 0x21
 800975c:	d106      	bne.n	800976c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2200      	movs	r2, #0
 8009762:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009766:	6978      	ldr	r0, [r7, #20]
 8009768:	f7ff fea2 	bl	80094b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009776:	2b40      	cmp	r3, #64	@ 0x40
 8009778:	d109      	bne.n	800978e <UART_DMAError+0x60>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b22      	cmp	r3, #34	@ 0x22
 800977e:	d106      	bne.n	800978e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2200      	movs	r2, #0
 8009784:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009788:	6978      	ldr	r0, [r7, #20]
 800978a:	f7ff feb7 	bl	80094fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009794:	f043 0210 	orr.w	r2, r3, #16
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f7f7 fffc 	bl	800179c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a4:	bf00      	nop
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7f7 ffe6 	bl	800179c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d0:	bf00      	nop
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6979      	ldr	r1, [r7, #20]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	613b      	str	r3, [r7, #16]
   return(result);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e6      	bne.n	80097e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7f7 ff90 	bl	8001744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009824:	bf00      	nop
 8009826:	3720      	adds	r7, #32
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e056      	b.n	80098f2 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d106      	bne.n	800985a <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7f9 fb87 	bl	8002f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2224      	movs	r2, #36	@ 0x24
 800985e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0201 	bic.w	r2, r2, #1
 800986e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7ff fbc1 	bl	8009000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff f906 	bl	8008a90 <UART_SetConfig>
 8009884:	4603      	mov	r3, r0
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e031      	b.n	80098f2 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800989c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	055b      	lsls	r3, r3, #21
 80098b6:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	041b      	lsls	r3, r3, #16
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80098cc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	6979      	ldr	r1, [r7, #20]
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0201 	orr.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7ff fc2a 	bl	8009144 <UART_CheckIdleState>
 80098f0:	4603      	mov	r3, r0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
	...

08009910 <__NVIC_SetPriority>:
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800991c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009920:	2b00      	cmp	r3, #0
 8009922:	db0a      	blt.n	800993a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	b2da      	uxtb	r2, r3
 8009928:	490c      	ldr	r1, [pc, #48]	@ (800995c <__NVIC_SetPriority+0x4c>)
 800992a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800992e:	0112      	lsls	r2, r2, #4
 8009930:	b2d2      	uxtb	r2, r2
 8009932:	440b      	add	r3, r1
 8009934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009938:	e00a      	b.n	8009950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	b2da      	uxtb	r2, r3
 800993e:	4908      	ldr	r1, [pc, #32]	@ (8009960 <__NVIC_SetPriority+0x50>)
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	3b04      	subs	r3, #4
 8009948:	0112      	lsls	r2, r2, #4
 800994a:	b2d2      	uxtb	r2, r2
 800994c:	440b      	add	r3, r1
 800994e:	761a      	strb	r2, [r3, #24]
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	e000e100 	.word	0xe000e100
 8009960:	e000ed00 	.word	0xe000ed00

08009964 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009968:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <SysTick_Handler+0x1c>)
 800996a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800996c:	f001 fd18 	bl	800b3a0 <xTaskGetSchedulerState>
 8009970:	4603      	mov	r3, r0
 8009972:	2b01      	cmp	r3, #1
 8009974:	d001      	beq.n	800997a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009976:	f002 fb0f 	bl	800bf98 <xPortSysTickHandler>
  }
}
 800997a:	bf00      	nop
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	e000e010 	.word	0xe000e010

08009984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009988:	2100      	movs	r1, #0
 800998a:	f06f 0004 	mvn.w	r0, #4
 800998e:	f7ff ffbf 	bl	8009910 <__NVIC_SetPriority>
#endif
}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	603b      	str	r3, [r7, #0]
  return(result);
 80099a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80099aa:	f06f 0305 	mvn.w	r3, #5
 80099ae:	607b      	str	r3, [r7, #4]
 80099b0:	e00c      	b.n	80099cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <osKernelInitialize+0x44>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80099ba:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <osKernelInitialize+0x44>)
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	e002      	b.n	80099cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80099c6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099cc:	687b      	ldr	r3, [r7, #4]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20000b88 	.word	0x20000b88

080099e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e6:	f3ef 8305 	mrs	r3, IPSR
 80099ea:	603b      	str	r3, [r7, #0]
  return(result);
 80099ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80099f2:	f06f 0305 	mvn.w	r3, #5
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	e010      	b.n	8009a1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009a28 <osKernelStart+0x48>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d109      	bne.n	8009a16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a02:	f7ff ffbf 	bl	8009984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a06:	4b08      	ldr	r3, [pc, #32]	@ (8009a28 <osKernelStart+0x48>)
 8009a08:	2202      	movs	r2, #2
 8009a0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a0c:	f001 f87a 	bl	800ab04 <vTaskStartScheduler>
      stat = osOK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	e002      	b.n	8009a1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a1c:	687b      	ldr	r3, [r7, #4]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000b88 	.word	0x20000b88

08009a2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08e      	sub	sp, #56	@ 0x38
 8009a30:	af04      	add	r7, sp, #16
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a3c:	f3ef 8305 	mrs	r3, IPSR
 8009a40:	617b      	str	r3, [r7, #20]
  return(result);
 8009a42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d17e      	bne.n	8009b46 <osThreadNew+0x11a>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d07b      	beq.n	8009b46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a4e:	2380      	movs	r3, #128	@ 0x80
 8009a50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a52:	2318      	movs	r3, #24
 8009a54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d045      	beq.n	8009af2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <osThreadNew+0x48>
        name = attr->name;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <osThreadNew+0x6e>
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	2b38      	cmp	r3, #56	@ 0x38
 8009a8c:	d805      	bhi.n	8009a9a <osThreadNew+0x6e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <osThreadNew+0x72>
        return (NULL);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e054      	b.n	8009b48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	089b      	lsrs	r3, r3, #2
 8009aac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <osThreadNew+0xa8>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	2b5b      	cmp	r3, #91	@ 0x5b
 8009abc:	d90a      	bls.n	8009ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d006      	beq.n	8009ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <osThreadNew+0xa8>
        mem = 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	e010      	b.n	8009af6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10c      	bne.n	8009af6 <osThreadNew+0xca>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d108      	bne.n	8009af6 <osThreadNew+0xca>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <osThreadNew+0xca>
          mem = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61bb      	str	r3, [r7, #24]
 8009af0:	e001      	b.n	8009af6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d110      	bne.n	8009b1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b04:	9202      	str	r2, [sp, #8]
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fe1a 	bl	800a74c <xTaskCreateStatic>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	e013      	b.n	8009b46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d110      	bne.n	8009b46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 fe68 	bl	800a80c <xTaskCreate>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d001      	beq.n	8009b46 <osThreadNew+0x11a>
            hTask = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b46:	693b      	ldr	r3, [r7, #16]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3728      	adds	r7, #40	@ 0x28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b58:	f3ef 8305 	mrs	r3, IPSR
 8009b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <osDelay+0x1c>
    stat = osErrorISR;
 8009b64:	f06f 0305 	mvn.w	r3, #5
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	e007      	b.n	8009b7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 ff8e 	bl	800aa98 <vTaskDelay>
    }
  }

  return (stat);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4a07      	ldr	r2, [pc, #28]	@ (8009bb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	4a06      	ldr	r2, [pc, #24]	@ (8009bb8 <vApplicationGetIdleTaskMemory+0x30>)
 8009b9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2280      	movs	r2, #128	@ 0x80
 8009ba4:	601a      	str	r2, [r3, #0]
}
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20000b8c 	.word	0x20000b8c
 8009bb8:	20000be8 	.word	0x20000be8

08009bbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4a07      	ldr	r2, [pc, #28]	@ (8009be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	4a06      	ldr	r2, [pc, #24]	@ (8009bec <vApplicationGetTimerTaskMemory+0x30>)
 8009bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bda:	601a      	str	r2, [r3, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20000de8 	.word	0x20000de8
 8009bec:	20000e44 	.word	0x20000e44

08009bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f103 0208 	add.w	r2, r3, #8
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295
 8009c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f103 0208 	add.w	r2, r3, #8
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f103 0208 	add.w	r2, r3, #8
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	601a      	str	r2, [r3, #0]
}
 8009c86:	bf00      	nop
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d103      	bne.n	8009cb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e00c      	b.n	8009ccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	e002      	b.n	8009cc0 <vListInsert+0x2e>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d2f6      	bcs.n	8009cba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	601a      	str	r2, [r3, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	6892      	ldr	r2, [r2, #8]
 8009d1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6852      	ldr	r2, [r2, #4]
 8009d24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d103      	bne.n	8009d38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	1e5a      	subs	r2, r3, #1
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d7e:	bf00      	nop
 8009d80:	bf00      	nop
 8009d82:	e7fd      	b.n	8009d80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d84:	f002 f878 	bl	800be78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d90:	68f9      	ldr	r1, [r7, #12]
 8009d92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	441a      	add	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db4:	3b01      	subs	r3, #1
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	441a      	add	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	22ff      	movs	r2, #255	@ 0xff
 8009dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	22ff      	movs	r2, #255	@ 0xff
 8009dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d114      	bne.n	8009e04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d01a      	beq.n	8009e18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3310      	adds	r3, #16
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 f91a 	bl	800b020 <xTaskRemoveFromEventList>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d012      	beq.n	8009e18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009df2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e28 <xQueueGenericReset+0xd0>)
 8009df4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	e009      	b.n	8009e18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3310      	adds	r3, #16
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff fef1 	bl	8009bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3324      	adds	r3, #36	@ 0x24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff feec 	bl	8009bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e18:	f002 f860 	bl	800bedc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e1c:	2301      	movs	r3, #1
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08e      	sub	sp, #56	@ 0x38
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10b      	bne.n	8009e58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10b      	bne.n	8009e76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <xQueueGenericCreateStatic+0x56>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <xQueueGenericCreateStatic+0x5a>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <xQueueGenericCreateStatic+0x5c>
 8009e86:	2300      	movs	r3, #0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10b      	bne.n	8009ea4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	623b      	str	r3, [r7, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <xQueueGenericCreateStatic+0x84>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <xQueueGenericCreateStatic+0x88>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e000      	b.n	8009eb6 <xQueueGenericCreateStatic+0x8a>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	61fb      	str	r3, [r7, #28]
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	e7fd      	b.n	8009ece <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ed2:	2350      	movs	r3, #80	@ 0x50
 8009ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b50      	cmp	r3, #80	@ 0x50
 8009eda:	d00b      	beq.n	8009ef4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	61bb      	str	r3, [r7, #24]
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ef4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00d      	beq.n	8009f1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	4613      	mov	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 f805 	bl	8009f26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3730      	adds	r7, #48	@ 0x30
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607a      	str	r2, [r7, #4]
 8009f32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d103      	bne.n	8009f42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e002      	b.n	8009f48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f54:	2101      	movs	r1, #1
 8009f56:	69b8      	ldr	r0, [r7, #24]
 8009f58:	f7ff fefe 	bl	8009d58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	78fa      	ldrb	r2, [r7, #3]
 8009f60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f64:	bf00      	nop
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08e      	sub	sp, #56	@ 0x38
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10b      	bne.n	8009fa0 <xQueueGenericSend+0x34>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	e7fd      	b.n	8009f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d103      	bne.n	8009fae <xQueueGenericSend+0x42>
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <xQueueGenericSend+0x46>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <xQueueGenericSend+0x48>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <xQueueGenericSend+0x64>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d103      	bne.n	8009fde <xQueueGenericSend+0x72>
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d101      	bne.n	8009fe2 <xQueueGenericSend+0x76>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e000      	b.n	8009fe4 <xQueueGenericSend+0x78>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <xQueueGenericSend+0x94>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	623b      	str	r3, [r7, #32]
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	e7fd      	b.n	8009ffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a000:	f001 f9ce 	bl	800b3a0 <xTaskGetSchedulerState>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <xQueueGenericSend+0xa4>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <xQueueGenericSend+0xa8>
 800a010:	2301      	movs	r3, #1
 800a012:	e000      	b.n	800a016 <xQueueGenericSend+0xaa>
 800a014:	2300      	movs	r3, #0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10b      	bne.n	800a032 <xQueueGenericSend+0xc6>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	61fb      	str	r3, [r7, #28]
}
 800a02c:	bf00      	nop
 800a02e:	bf00      	nop
 800a030:	e7fd      	b.n	800a02e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a032:	f001 ff21 	bl	800be78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a03e:	429a      	cmp	r2, r3
 800a040:	d302      	bcc.n	800a048 <xQueueGenericSend+0xdc>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b02      	cmp	r3, #2
 800a046:	d129      	bne.n	800a09c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a04e:	f000 fa0f 	bl	800a470 <prvCopyDataToQueue>
 800a052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d010      	beq.n	800a07e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05e:	3324      	adds	r3, #36	@ 0x24
 800a060:	4618      	mov	r0, r3
 800a062:	f000 ffdd 	bl	800b020 <xTaskRemoveFromEventList>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d013      	beq.n	800a094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a06c:	4b3f      	ldr	r3, [pc, #252]	@ (800a16c <xQueueGenericSend+0x200>)
 800a06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	e00a      	b.n	800a094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d007      	beq.n	800a094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a084:	4b39      	ldr	r3, [pc, #228]	@ (800a16c <xQueueGenericSend+0x200>)
 800a086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a094:	f001 ff22 	bl	800bedc <vPortExitCritical>
				return pdPASS;
 800a098:	2301      	movs	r3, #1
 800a09a:	e063      	b.n	800a164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0a2:	f001 ff1b 	bl	800bedc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e05c      	b.n	800a164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0b0:	f107 0314 	add.w	r3, r7, #20
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 f817 	bl	800b0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0be:	f001 ff0d 	bl	800bedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0c2:	f000 fd87 	bl	800abd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0c6:	f001 fed7 	bl	800be78 <vPortEnterCritical>
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d6:	d103      	bne.n	800a0e0 <xQueueGenericSend+0x174>
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSend+0x18a>
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0f6:	f001 fef1 	bl	800bedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0fa:	1d3a      	adds	r2, r7, #4
 800a0fc:	f107 0314 	add.w	r3, r7, #20
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f001 f806 	bl	800b114 <xTaskCheckForTimeOut>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d124      	bne.n	800a158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a10e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a110:	f000 faa6 	bl	800a660 <prvIsQueueFull>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d018      	beq.n	800a14c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	3310      	adds	r3, #16
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f000 ff2a 	bl	800af7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12a:	f000 fa31 	bl	800a590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a12e:	f000 fd5f 	bl	800abf0 <xTaskResumeAll>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	f47f af7c 	bne.w	800a032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a13a:	4b0c      	ldr	r3, [pc, #48]	@ (800a16c <xQueueGenericSend+0x200>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	e772      	b.n	800a032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a14e:	f000 fa1f 	bl	800a590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a152:	f000 fd4d 	bl	800abf0 <xTaskResumeAll>
 800a156:	e76c      	b.n	800a032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a15a:	f000 fa19 	bl	800a590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a15e:	f000 fd47 	bl	800abf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a164:	4618      	mov	r0, r3
 800a166:	3738      	adds	r7, #56	@ 0x38
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	e000ed04 	.word	0xe000ed04

0800a170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b090      	sub	sp, #64	@ 0x40
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d103      	bne.n	800a1ae <xQueueGenericSendFromISR+0x3e>
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <xQueueGenericSendFromISR+0x42>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <xQueueGenericSendFromISR+0x44>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10b      	bne.n	800a1d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	e7fd      	b.n	800a1cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d103      	bne.n	800a1de <xQueueGenericSendFromISR+0x6e>
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <xQueueGenericSendFromISR+0x72>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <xQueueGenericSendFromISR+0x74>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10b      	bne.n	800a200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	623b      	str	r3, [r7, #32]
}
 800a1fa:	bf00      	nop
 800a1fc:	bf00      	nop
 800a1fe:	e7fd      	b.n	800a1fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a200:	f001 ff1a 	bl	800c038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a204:	f3ef 8211 	mrs	r2, BASEPRI
 800a208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	61fa      	str	r2, [r7, #28]
 800a21a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a21c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a21e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a228:	429a      	cmp	r2, r3
 800a22a:	d302      	bcc.n	800a232 <xQueueGenericSendFromISR+0xc2>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d12f      	bne.n	800a292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a248:	f000 f912 	bl	800a470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a24c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a254:	d112      	bne.n	800a27c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d016      	beq.n	800a28c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a260:	3324      	adds	r3, #36	@ 0x24
 800a262:	4618      	mov	r0, r3
 800a264:	f000 fedc 	bl	800b020 <xTaskRemoveFromEventList>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00e      	beq.n	800a28c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	e007      	b.n	800a28c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a27c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a280:	3301      	adds	r3, #1
 800a282:	b2db      	uxtb	r3, r3
 800a284:	b25a      	sxtb	r2, r3
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a28c:	2301      	movs	r3, #1
 800a28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a290:	e001      	b.n	800a296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a292:	2300      	movs	r3, #0
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a298:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3740      	adds	r7, #64	@ 0x40
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	@ 0x30
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <xQueueReceive+0x32>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	623b      	str	r3, [r7, #32]
}
 800a2d8:	bf00      	nop
 800a2da:	bf00      	nop
 800a2dc:	e7fd      	b.n	800a2da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d103      	bne.n	800a2ec <xQueueReceive+0x40>
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <xQueueReceive+0x44>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e000      	b.n	800a2f2 <xQueueReceive+0x46>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <xQueueReceive+0x62>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	61fb      	str	r3, [r7, #28]
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a30e:	f001 f847 	bl	800b3a0 <xTaskGetSchedulerState>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <xQueueReceive+0x72>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xQueueReceive+0x76>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueReceive+0x78>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10b      	bne.n	800a340 <xQueueReceive+0x94>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61bb      	str	r3, [r7, #24]
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	e7fd      	b.n	800a33c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a340:	f001 fd9a 	bl	800be78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01f      	beq.n	800a390 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a354:	f000 f8f6 	bl	800a544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	1e5a      	subs	r2, r3, #1
 800a35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00f      	beq.n	800a388 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	3310      	adds	r3, #16
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fe57 	bl	800b020 <xTaskRemoveFromEventList>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d007      	beq.n	800a388 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a378:	4b3c      	ldr	r3, [pc, #240]	@ (800a46c <xQueueReceive+0x1c0>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a388:	f001 fda8 	bl	800bedc <vPortExitCritical>
				return pdPASS;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e069      	b.n	800a464 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d103      	bne.n	800a39e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a396:	f001 fda1 	bl	800bedc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e062      	b.n	800a464 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d106      	bne.n	800a3b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3a4:	f107 0310 	add.w	r3, r7, #16
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fe9d 	bl	800b0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3b2:	f001 fd93 	bl	800bedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3b6:	f000 fc0d 	bl	800abd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ba:	f001 fd5d 	bl	800be78 <vPortEnterCritical>
 800a3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3c4:	b25b      	sxtb	r3, r3
 800a3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ca:	d103      	bne.n	800a3d4 <xQueueReceive+0x128>
 800a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3da:	b25b      	sxtb	r3, r3
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e0:	d103      	bne.n	800a3ea <xQueueReceive+0x13e>
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3ea:	f001 fd77 	bl	800bedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3ee:	1d3a      	adds	r2, r7, #4
 800a3f0:	f107 0310 	add.w	r3, r7, #16
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 fe8c 	bl	800b114 <xTaskCheckForTimeOut>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d123      	bne.n	800a44a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a404:	f000 f916 	bl	800a634 <prvIsQueueEmpty>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d017      	beq.n	800a43e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a410:	3324      	adds	r3, #36	@ 0x24
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fdb0 	bl	800af7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a41c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a41e:	f000 f8b7 	bl	800a590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a422:	f000 fbe5 	bl	800abf0 <xTaskResumeAll>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d189      	bne.n	800a340 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a42c:	4b0f      	ldr	r3, [pc, #60]	@ (800a46c <xQueueReceive+0x1c0>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	e780      	b.n	800a340 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a440:	f000 f8a6 	bl	800a590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a444:	f000 fbd4 	bl	800abf0 <xTaskResumeAll>
 800a448:	e77a      	b.n	800a340 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a44c:	f000 f8a0 	bl	800a590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a450:	f000 fbce 	bl	800abf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a456:	f000 f8ed 	bl	800a634 <prvIsQueueEmpty>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f43f af6f 	beq.w	800a340 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a464:	4618      	mov	r0, r3
 800a466:	3730      	adds	r7, #48	@ 0x30
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10d      	bne.n	800a4aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d14d      	bne.n	800a532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 ff9e 	bl	800b3dc <xTaskPriorityDisinherit>
 800a4a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	609a      	str	r2, [r3, #8]
 800a4a8:	e043      	b.n	800a532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d119      	bne.n	800a4e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6858      	ldr	r0, [r3, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	f002 f8b2 	bl	800c624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c8:	441a      	add	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d32b      	bcc.n	800a532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	605a      	str	r2, [r3, #4]
 800a4e2:	e026      	b.n	800a532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	68d8      	ldr	r0, [r3, #12]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	68b9      	ldr	r1, [r7, #8]
 800a4f0:	f002 f898 	bl	800c624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fc:	425b      	negs	r3, r3
 800a4fe:	441a      	add	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d207      	bcs.n	800a520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a518:	425b      	negs	r3, r3
 800a51a:	441a      	add	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b02      	cmp	r3, #2
 800a524:	d105      	bne.n	800a532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	3b01      	subs	r3, #1
 800a530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a53a:	697b      	ldr	r3, [r7, #20]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d018      	beq.n	800a588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55e:	441a      	add	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68da      	ldr	r2, [r3, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d303      	bcc.n	800a578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68d9      	ldr	r1, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a580:	461a      	mov	r2, r3
 800a582:	6838      	ldr	r0, [r7, #0]
 800a584:	f002 f84e 	bl	800c624 <memcpy>
	}
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a598:	f001 fc6e 	bl	800be78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5a4:	e011      	b.n	800a5ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d012      	beq.n	800a5d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3324      	adds	r3, #36	@ 0x24
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fd34 	bl	800b020 <xTaskRemoveFromEventList>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5be:	f000 fe0d 	bl	800b1dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dce9      	bgt.n	800a5a6 <prvUnlockQueue+0x16>
 800a5d2:	e000      	b.n	800a5d6 <prvUnlockQueue+0x46>
					break;
 800a5d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	22ff      	movs	r2, #255	@ 0xff
 800a5da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a5de:	f001 fc7d 	bl	800bedc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5e2:	f001 fc49 	bl	800be78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5ee:	e011      	b.n	800a614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d012      	beq.n	800a61e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3310      	adds	r3, #16
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fd0f 	bl	800b020 <xTaskRemoveFromEventList>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a608:	f000 fde8 	bl	800b1dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	3b01      	subs	r3, #1
 800a610:	b2db      	uxtb	r3, r3
 800a612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	dce9      	bgt.n	800a5f0 <prvUnlockQueue+0x60>
 800a61c:	e000      	b.n	800a620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a61e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	22ff      	movs	r2, #255	@ 0xff
 800a624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a628:	f001 fc58 	bl	800bedc <vPortExitCritical>
}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a63c:	f001 fc1c 	bl	800be78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a648:	2301      	movs	r3, #1
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e001      	b.n	800a652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a652:	f001 fc43 	bl	800bedc <vPortExitCritical>

	return xReturn;
 800a656:	68fb      	ldr	r3, [r7, #12]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a668:	f001 fc06 	bl	800be78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a674:	429a      	cmp	r2, r3
 800a676:	d102      	bne.n	800a67e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e001      	b.n	800a682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a682:	f001 fc2b 	bl	800bedc <vPortExitCritical>

	return xReturn;
 800a686:	68fb      	ldr	r3, [r7, #12]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	e014      	b.n	800a6ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a6a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a6e0 <vQueueAddToRegistry+0x50>)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10b      	bne.n	800a6c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6ac:	490c      	ldr	r1, [pc, #48]	@ (800a6e0 <vQueueAddToRegistry+0x50>)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e0 <vQueueAddToRegistry+0x50>)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	00db      	lsls	r3, r3, #3
 800a6bc:	4413      	add	r3, r2
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6c2:	e006      	b.n	800a6d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60fb      	str	r3, [r7, #12]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b07      	cmp	r3, #7
 800a6ce:	d9e7      	bls.n	800a6a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6d0:	bf00      	nop
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20001244 	.word	0x20001244

0800a6e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6f4:	f001 fbc0 	bl	800be78 <vPortEnterCritical>
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6fe:	b25b      	sxtb	r3, r3
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d103      	bne.n	800a70e <vQueueWaitForMessageRestricted+0x2a>
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a714:	b25b      	sxtb	r3, r3
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71a:	d103      	bne.n	800a724 <vQueueWaitForMessageRestricted+0x40>
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a724:	f001 fbda 	bl	800bedc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d106      	bne.n	800a73e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	3324      	adds	r3, #36	@ 0x24
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	68b9      	ldr	r1, [r7, #8]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 fc45 	bl	800afc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a73e:	6978      	ldr	r0, [r7, #20]
 800a740:	f7ff ff26 	bl	800a590 <prvUnlockQueue>
	}
 800a744:	bf00      	nop
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08e      	sub	sp, #56	@ 0x38
 800a750:	af04      	add	r7, sp, #16
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10b      	bne.n	800a778 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	623b      	str	r3, [r7, #32]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	61fb      	str	r3, [r7, #28]
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a796:	235c      	movs	r3, #92	@ 0x5c
 800a798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a79e:	d00b      	beq.n	800a7b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	61bb      	str	r3, [r7, #24]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a7b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01e      	beq.n	800a7fe <xTaskCreateStatic+0xb2>
 800a7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d01b      	beq.n	800a7fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	f107 0314 	add.w	r3, r7, #20
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f850 	bl	800a896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a7f8:	f000 f8de 	bl	800a9b8 <prvAddNewTaskToReadyList>
 800a7fc:	e001      	b.n	800a802 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a802:	697b      	ldr	r3, [r7, #20]
	}
 800a804:	4618      	mov	r0, r3
 800a806:	3728      	adds	r7, #40	@ 0x28
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08c      	sub	sp, #48	@ 0x30
 800a810:	af04      	add	r7, sp, #16
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a81c:	88fb      	ldrh	r3, [r7, #6]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4618      	mov	r0, r3
 800a822:	f001 fc4b 	bl	800c0bc <pvPortMalloc>
 800a826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00e      	beq.n	800a84c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a82e:	205c      	movs	r0, #92	@ 0x5c
 800a830:	f001 fc44 	bl	800c0bc <pvPortMalloc>
 800a834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	631a      	str	r2, [r3, #48]	@ 0x30
 800a842:	e005      	b.n	800a850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a844:	6978      	ldr	r0, [r7, #20]
 800a846:	f001 fd07 	bl	800c258 <vPortFree>
 800a84a:	e001      	b.n	800a850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d017      	beq.n	800a886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a85e:	88fa      	ldrh	r2, [r7, #6]
 800a860:	2300      	movs	r3, #0
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	9302      	str	r3, [sp, #8]
 800a868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f80e 	bl	800a896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a87a:	69f8      	ldr	r0, [r7, #28]
 800a87c:	f000 f89c 	bl	800a9b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a880:	2301      	movs	r3, #1
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	e002      	b.n	800a88c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a886:	f04f 33ff 	mov.w	r3, #4294967295
 800a88a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a88c:	69bb      	ldr	r3, [r7, #24]
	}
 800a88e:	4618      	mov	r0, r3
 800a890:	3720      	adds	r7, #32
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b088      	sub	sp, #32
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	21a5      	movs	r1, #165	@ 0xa5
 800a8b0:	f001 fe64 	bl	800c57c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	f023 0307 	bic.w	r3, r3, #7
 800a8cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	f003 0307 	and.w	r3, r3, #7
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00b      	beq.n	800a8f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	617b      	str	r3, [r7, #20]
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	e7fd      	b.n	800a8ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d01f      	beq.n	800a936 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	e012      	b.n	800a922 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	4413      	add	r3, r2
 800a902:	7819      	ldrb	r1, [r3, #0]
 800a904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	4413      	add	r3, r2
 800a90a:	3334      	adds	r3, #52	@ 0x34
 800a90c:	460a      	mov	r2, r1
 800a90e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	4413      	add	r3, r2
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d006      	beq.n	800a92a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	3301      	adds	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	2b0f      	cmp	r3, #15
 800a926:	d9e9      	bls.n	800a8fc <prvInitialiseNewTask+0x66>
 800a928:	e000      	b.n	800a92c <prvInitialiseNewTask+0x96>
			{
				break;
 800a92a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a934:	e003      	b.n	800a93e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	2b37      	cmp	r3, #55	@ 0x37
 800a942:	d901      	bls.n	800a948 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a944:	2337      	movs	r3, #55	@ 0x37
 800a946:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a94c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a952:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a956:	2200      	movs	r2, #0
 800a958:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95c:	3304      	adds	r3, #4
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff f966 	bl	8009c30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	3318      	adds	r3, #24
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff f961 	bl	8009c30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a982:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a986:	2200      	movs	r2, #0
 800a988:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	68f9      	ldr	r1, [r7, #12]
 800a996:	69b8      	ldr	r0, [r7, #24]
 800a998:	f001 f93e 	bl	800bc18 <pxPortInitialiseStack>
 800a99c:	4602      	mov	r2, r0
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9ae:	bf00      	nop
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9c0:	f001 fa5a 	bl	800be78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9c4:	4b2d      	ldr	r3, [pc, #180]	@ (800aa7c <prvAddNewTaskToReadyList+0xc4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	4a2c      	ldr	r2, [pc, #176]	@ (800aa7c <prvAddNewTaskToReadyList+0xc4>)
 800a9cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ce:	4b2c      	ldr	r3, [pc, #176]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d109      	bne.n	800a9ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9d6:	4a2a      	ldr	r2, [pc, #168]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9dc:	4b27      	ldr	r3, [pc, #156]	@ (800aa7c <prvAddNewTaskToReadyList+0xc4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d110      	bne.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9e4:	f000 fc1e 	bl	800b224 <prvInitialiseTaskLists>
 800a9e8:	e00d      	b.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9ea:	4b26      	ldr	r3, [pc, #152]	@ (800aa84 <prvAddNewTaskToReadyList+0xcc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9f2:	4b23      	ldr	r3, [pc, #140]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d802      	bhi.n	800aa06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa00:	4a1f      	ldr	r2, [pc, #124]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa06:	4b20      	ldr	r3, [pc, #128]	@ (800aa88 <prvAddNewTaskToReadyList+0xd0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	4a1e      	ldr	r2, [pc, #120]	@ (800aa88 <prvAddNewTaskToReadyList+0xd0>)
 800aa0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa10:	4b1d      	ldr	r3, [pc, #116]	@ (800aa88 <prvAddNewTaskToReadyList+0xd0>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1c:	4b1b      	ldr	r3, [pc, #108]	@ (800aa8c <prvAddNewTaskToReadyList+0xd4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d903      	bls.n	800aa2c <prvAddNewTaskToReadyList+0x74>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa28:	4a18      	ldr	r2, [pc, #96]	@ (800aa8c <prvAddNewTaskToReadyList+0xd4>)
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4a15      	ldr	r2, [pc, #84]	@ (800aa90 <prvAddNewTaskToReadyList+0xd8>)
 800aa3a:	441a      	add	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7ff f901 	bl	8009c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa48:	f001 fa48 	bl	800bedc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <prvAddNewTaskToReadyList+0xcc>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00e      	beq.n	800aa72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa54:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <prvAddNewTaskToReadyList+0xc8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d207      	bcs.n	800aa72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa62:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <prvAddNewTaskToReadyList+0xdc>)
 800aa64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa72:	bf00      	nop
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20001758 	.word	0x20001758
 800aa80:	20001284 	.word	0x20001284
 800aa84:	20001764 	.word	0x20001764
 800aa88:	20001774 	.word	0x20001774
 800aa8c:	20001760 	.word	0x20001760
 800aa90:	20001288 	.word	0x20001288
 800aa94:	e000ed04 	.word	0xe000ed04

0800aa98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d018      	beq.n	800aadc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaaa:	4b14      	ldr	r3, [pc, #80]	@ (800aafc <vTaskDelay+0x64>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00b      	beq.n	800aaca <vTaskDelay+0x32>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	60bb      	str	r3, [r7, #8]
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop
 800aac8:	e7fd      	b.n	800aac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aaca:	f000 f883 	bl	800abd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aace:	2100      	movs	r1, #0
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fcf3 	bl	800b4bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aad6:	f000 f88b 	bl	800abf0 <xTaskResumeAll>
 800aada:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d107      	bne.n	800aaf2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aae2:	4b07      	ldr	r3, [pc, #28]	@ (800ab00 <vTaskDelay+0x68>)
 800aae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20001780 	.word	0x20001780
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	@ 0x28
 800ab08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab12:	463a      	mov	r2, r7
 800ab14:	1d39      	adds	r1, r7, #4
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff f834 	bl	8009b88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	9202      	str	r2, [sp, #8]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	460a      	mov	r2, r1
 800ab32:	4922      	ldr	r1, [pc, #136]	@ (800abbc <vTaskStartScheduler+0xb8>)
 800ab34:	4822      	ldr	r0, [pc, #136]	@ (800abc0 <vTaskStartScheduler+0xbc>)
 800ab36:	f7ff fe09 	bl	800a74c <xTaskCreateStatic>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	4a21      	ldr	r2, [pc, #132]	@ (800abc4 <vTaskStartScheduler+0xc0>)
 800ab3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab40:	4b20      	ldr	r3, [pc, #128]	@ (800abc4 <vTaskStartScheduler+0xc0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	e001      	b.n	800ab52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d102      	bne.n	800ab5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab58:	f000 fd04 	bl	800b564 <xTimerCreateTimerTask>
 800ab5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d116      	bne.n	800ab92 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	613b      	str	r3, [r7, #16]
}
 800ab76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab78:	4b13      	ldr	r3, [pc, #76]	@ (800abc8 <vTaskStartScheduler+0xc4>)
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab80:	4b12      	ldr	r3, [pc, #72]	@ (800abcc <vTaskStartScheduler+0xc8>)
 800ab82:	2201      	movs	r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab86:	4b12      	ldr	r3, [pc, #72]	@ (800abd0 <vTaskStartScheduler+0xcc>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab8c:	f001 f8d0 	bl	800bd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab90:	e00f      	b.n	800abb2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d10b      	bne.n	800abb2 <vTaskStartScheduler+0xae>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	60fb      	str	r3, [r7, #12]
}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	e7fd      	b.n	800abae <vTaskStartScheduler+0xaa>
}
 800abb2:	bf00      	nop
 800abb4:	3718      	adds	r7, #24
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	0800d144 	.word	0x0800d144
 800abc0:	0800b1f5 	.word	0x0800b1f5
 800abc4:	2000177c 	.word	0x2000177c
 800abc8:	20001778 	.word	0x20001778
 800abcc:	20001764 	.word	0x20001764
 800abd0:	2000175c 	.word	0x2000175c

0800abd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abd8:	4b04      	ldr	r3, [pc, #16]	@ (800abec <vTaskSuspendAll+0x18>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	4a03      	ldr	r2, [pc, #12]	@ (800abec <vTaskSuspendAll+0x18>)
 800abe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abe2:	bf00      	nop
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	20001780 	.word	0x20001780

0800abf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abfe:	4b42      	ldr	r3, [pc, #264]	@ (800ad08 <xTaskResumeAll+0x118>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10b      	bne.n	800ac1e <xTaskResumeAll+0x2e>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	603b      	str	r3, [r7, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	e7fd      	b.n	800ac1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac1e:	f001 f92b 	bl	800be78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac22:	4b39      	ldr	r3, [pc, #228]	@ (800ad08 <xTaskResumeAll+0x118>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	4a37      	ldr	r2, [pc, #220]	@ (800ad08 <xTaskResumeAll+0x118>)
 800ac2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac2c:	4b36      	ldr	r3, [pc, #216]	@ (800ad08 <xTaskResumeAll+0x118>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d162      	bne.n	800acfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac34:	4b35      	ldr	r3, [pc, #212]	@ (800ad0c <xTaskResumeAll+0x11c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d05e      	beq.n	800acfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac3c:	e02f      	b.n	800ac9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac3e:	4b34      	ldr	r3, [pc, #208]	@ (800ad10 <xTaskResumeAll+0x120>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3318      	adds	r3, #24
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff f85a 	bl	8009d04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3304      	adds	r3, #4
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff f855 	bl	8009d04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ad14 <xTaskResumeAll+0x124>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d903      	bls.n	800ac6e <xTaskResumeAll+0x7e>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ad14 <xTaskResumeAll+0x124>)
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4a27      	ldr	r2, [pc, #156]	@ (800ad18 <xTaskResumeAll+0x128>)
 800ac7c:	441a      	add	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3304      	adds	r3, #4
 800ac82:	4619      	mov	r1, r3
 800ac84:	4610      	mov	r0, r2
 800ac86:	f7fe ffe0 	bl	8009c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8e:	4b23      	ldr	r3, [pc, #140]	@ (800ad1c <xTaskResumeAll+0x12c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d302      	bcc.n	800ac9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ac98:	4b21      	ldr	r3, [pc, #132]	@ (800ad20 <xTaskResumeAll+0x130>)
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad10 <xTaskResumeAll+0x120>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1cb      	bne.n	800ac3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800acac:	f000 fb58 	bl	800b360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800acb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad24 <xTaskResumeAll+0x134>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d010      	beq.n	800acde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acbc:	f000 f846 	bl	800ad4c <xTaskIncrementTick>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800acc6:	4b16      	ldr	r3, [pc, #88]	@ (800ad20 <xTaskResumeAll+0x130>)
 800acc8:	2201      	movs	r2, #1
 800acca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3b01      	subs	r3, #1
 800acd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1f1      	bne.n	800acbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800acd8:	4b12      	ldr	r3, [pc, #72]	@ (800ad24 <xTaskResumeAll+0x134>)
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acde:	4b10      	ldr	r3, [pc, #64]	@ (800ad20 <xTaskResumeAll+0x130>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ace6:	2301      	movs	r3, #1
 800ace8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acea:	4b0f      	ldr	r3, [pc, #60]	@ (800ad28 <xTaskResumeAll+0x138>)
 800acec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acfa:	f001 f8ef 	bl	800bedc <vPortExitCritical>

	return xAlreadyYielded;
 800acfe:	68bb      	ldr	r3, [r7, #8]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20001780 	.word	0x20001780
 800ad0c:	20001758 	.word	0x20001758
 800ad10:	20001718 	.word	0x20001718
 800ad14:	20001760 	.word	0x20001760
 800ad18:	20001288 	.word	0x20001288
 800ad1c:	20001284 	.word	0x20001284
 800ad20:	2000176c 	.word	0x2000176c
 800ad24:	20001768 	.word	0x20001768
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad32:	4b05      	ldr	r3, [pc, #20]	@ (800ad48 <xTaskGetTickCount+0x1c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad38:	687b      	ldr	r3, [r7, #4]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	2000175c 	.word	0x2000175c

0800ad4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad56:	4b4f      	ldr	r3, [pc, #316]	@ (800ae94 <xTaskIncrementTick+0x148>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f040 8090 	bne.w	800ae80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad60:	4b4d      	ldr	r3, [pc, #308]	@ (800ae98 <xTaskIncrementTick+0x14c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad68:	4a4b      	ldr	r2, [pc, #300]	@ (800ae98 <xTaskIncrementTick+0x14c>)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d121      	bne.n	800adb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad74:	4b49      	ldr	r3, [pc, #292]	@ (800ae9c <xTaskIncrementTick+0x150>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00b      	beq.n	800ad96 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	603b      	str	r3, [r7, #0]
}
 800ad90:	bf00      	nop
 800ad92:	bf00      	nop
 800ad94:	e7fd      	b.n	800ad92 <xTaskIncrementTick+0x46>
 800ad96:	4b41      	ldr	r3, [pc, #260]	@ (800ae9c <xTaskIncrementTick+0x150>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	4b40      	ldr	r3, [pc, #256]	@ (800aea0 <xTaskIncrementTick+0x154>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a3e      	ldr	r2, [pc, #248]	@ (800ae9c <xTaskIncrementTick+0x150>)
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	4a3e      	ldr	r2, [pc, #248]	@ (800aea0 <xTaskIncrementTick+0x154>)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	4b3e      	ldr	r3, [pc, #248]	@ (800aea4 <xTaskIncrementTick+0x158>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3301      	adds	r3, #1
 800adb0:	4a3c      	ldr	r2, [pc, #240]	@ (800aea4 <xTaskIncrementTick+0x158>)
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	f000 fad4 	bl	800b360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adb8:	4b3b      	ldr	r3, [pc, #236]	@ (800aea8 <xTaskIncrementTick+0x15c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d349      	bcc.n	800ae56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adc2:	4b36      	ldr	r3, [pc, #216]	@ (800ae9c <xTaskIncrementTick+0x150>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d104      	bne.n	800add6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adcc:	4b36      	ldr	r3, [pc, #216]	@ (800aea8 <xTaskIncrementTick+0x15c>)
 800adce:	f04f 32ff 	mov.w	r2, #4294967295
 800add2:	601a      	str	r2, [r3, #0]
					break;
 800add4:	e03f      	b.n	800ae56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add6:	4b31      	ldr	r3, [pc, #196]	@ (800ae9c <xTaskIncrementTick+0x150>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	429a      	cmp	r2, r3
 800adec:	d203      	bcs.n	800adf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adee:	4a2e      	ldr	r2, [pc, #184]	@ (800aea8 <xTaskIncrementTick+0x15c>)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800adf4:	e02f      	b.n	800ae56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe ff82 	bl	8009d04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	3318      	adds	r3, #24
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe ff79 	bl	8009d04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae16:	4b25      	ldr	r3, [pc, #148]	@ (800aeac <xTaskIncrementTick+0x160>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d903      	bls.n	800ae26 <xTaskIncrementTick+0xda>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae22:	4a22      	ldr	r2, [pc, #136]	@ (800aeac <xTaskIncrementTick+0x160>)
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb0 <xTaskIncrementTick+0x164>)
 800ae34:	441a      	add	r2, r3
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7fe ff04 	bl	8009c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae46:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb4 <xTaskIncrementTick+0x168>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d3b8      	bcc.n	800adc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ae50:	2301      	movs	r3, #1
 800ae52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae54:	e7b5      	b.n	800adc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae56:	4b17      	ldr	r3, [pc, #92]	@ (800aeb4 <xTaskIncrementTick+0x168>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae5c:	4914      	ldr	r1, [pc, #80]	@ (800aeb0 <xTaskIncrementTick+0x164>)
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	440b      	add	r3, r1
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d901      	bls.n	800ae72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae72:	4b11      	ldr	r3, [pc, #68]	@ (800aeb8 <xTaskIncrementTick+0x16c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	617b      	str	r3, [r7, #20]
 800ae7e:	e004      	b.n	800ae8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae80:	4b0e      	ldr	r3, [pc, #56]	@ (800aebc <xTaskIncrementTick+0x170>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3301      	adds	r3, #1
 800ae86:	4a0d      	ldr	r2, [pc, #52]	@ (800aebc <xTaskIncrementTick+0x170>)
 800ae88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae8a:	697b      	ldr	r3, [r7, #20]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20001780 	.word	0x20001780
 800ae98:	2000175c 	.word	0x2000175c
 800ae9c:	20001710 	.word	0x20001710
 800aea0:	20001714 	.word	0x20001714
 800aea4:	20001770 	.word	0x20001770
 800aea8:	20001778 	.word	0x20001778
 800aeac:	20001760 	.word	0x20001760
 800aeb0:	20001288 	.word	0x20001288
 800aeb4:	20001284 	.word	0x20001284
 800aeb8:	2000176c 	.word	0x2000176c
 800aebc:	20001768 	.word	0x20001768

0800aec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aec6:	4b28      	ldr	r3, [pc, #160]	@ (800af68 <vTaskSwitchContext+0xa8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aece:	4b27      	ldr	r3, [pc, #156]	@ (800af6c <vTaskSwitchContext+0xac>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aed4:	e042      	b.n	800af5c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800aed6:	4b25      	ldr	r3, [pc, #148]	@ (800af6c <vTaskSwitchContext+0xac>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aedc:	4b24      	ldr	r3, [pc, #144]	@ (800af70 <vTaskSwitchContext+0xb0>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e011      	b.n	800af08 <vTaskSwitchContext+0x48>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10b      	bne.n	800af02 <vTaskSwitchContext+0x42>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	607b      	str	r3, [r7, #4]
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	e7fd      	b.n	800aefe <vTaskSwitchContext+0x3e>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3b01      	subs	r3, #1
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	491a      	ldr	r1, [pc, #104]	@ (800af74 <vTaskSwitchContext+0xb4>)
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	440b      	add	r3, r1
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0e3      	beq.n	800aee4 <vTaskSwitchContext+0x24>
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4a13      	ldr	r2, [pc, #76]	@ (800af74 <vTaskSwitchContext+0xb4>)
 800af28:	4413      	add	r3, r2
 800af2a:	60bb      	str	r3, [r7, #8]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	605a      	str	r2, [r3, #4]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	3308      	adds	r3, #8
 800af3e:	429a      	cmp	r2, r3
 800af40:	d104      	bne.n	800af4c <vTaskSwitchContext+0x8c>
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	605a      	str	r2, [r3, #4]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	4a09      	ldr	r2, [pc, #36]	@ (800af78 <vTaskSwitchContext+0xb8>)
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4a06      	ldr	r2, [pc, #24]	@ (800af70 <vTaskSwitchContext+0xb0>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6013      	str	r3, [r2, #0]
}
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20001780 	.word	0x20001780
 800af6c:	2000176c 	.word	0x2000176c
 800af70:	20001760 	.word	0x20001760
 800af74:	20001288 	.word	0x20001288
 800af78:	20001284 	.word	0x20001284

0800af7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10b      	bne.n	800afa4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	e7fd      	b.n	800afa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afa4:	4b07      	ldr	r3, [pc, #28]	@ (800afc4 <vTaskPlaceOnEventList+0x48>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3318      	adds	r3, #24
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7fe fe70 	bl	8009c92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afb2:	2101      	movs	r1, #1
 800afb4:	6838      	ldr	r0, [r7, #0]
 800afb6:	f000 fa81 	bl	800b4bc <prvAddCurrentTaskToDelayedList>
}
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	20001284 	.word	0x20001284

0800afc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	617b      	str	r3, [r7, #20]
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	e7fd      	b.n	800afee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aff2:	4b0a      	ldr	r3, [pc, #40]	@ (800b01c <vTaskPlaceOnEventListRestricted+0x54>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3318      	adds	r3, #24
 800aff8:	4619      	mov	r1, r3
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7fe fe25 	bl	8009c4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b006:	f04f 33ff 	mov.w	r3, #4294967295
 800b00a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b00c:	6879      	ldr	r1, [r7, #4]
 800b00e:	68b8      	ldr	r0, [r7, #8]
 800b010:	f000 fa54 	bl	800b4bc <prvAddCurrentTaskToDelayedList>
	}
 800b014:	bf00      	nop
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20001284 	.word	0x20001284

0800b020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10b      	bne.n	800b04e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	60fb      	str	r3, [r7, #12]
}
 800b048:	bf00      	nop
 800b04a:	bf00      	nop
 800b04c:	e7fd      	b.n	800b04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	3318      	adds	r3, #24
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe fe56 	bl	8009d04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b058:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <xTaskRemoveFromEventList+0xb0>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d11d      	bne.n	800b09c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	3304      	adds	r3, #4
 800b064:	4618      	mov	r0, r3
 800b066:	f7fe fe4d 	bl	8009d04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b06e:	4b19      	ldr	r3, [pc, #100]	@ (800b0d4 <xTaskRemoveFromEventList+0xb4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d903      	bls.n	800b07e <xTaskRemoveFromEventList+0x5e>
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07a:	4a16      	ldr	r2, [pc, #88]	@ (800b0d4 <xTaskRemoveFromEventList+0xb4>)
 800b07c:	6013      	str	r3, [r2, #0]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4a13      	ldr	r2, [pc, #76]	@ (800b0d8 <xTaskRemoveFromEventList+0xb8>)
 800b08c:	441a      	add	r2, r3
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3304      	adds	r3, #4
 800b092:	4619      	mov	r1, r3
 800b094:	4610      	mov	r0, r2
 800b096:	f7fe fdd8 	bl	8009c4a <vListInsertEnd>
 800b09a:	e005      	b.n	800b0a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	3318      	adds	r3, #24
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	480e      	ldr	r0, [pc, #56]	@ (800b0dc <xTaskRemoveFromEventList+0xbc>)
 800b0a4:	f7fe fdd1 	bl	8009c4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e0 <xTaskRemoveFromEventList+0xc0>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d905      	bls.n	800b0c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e4 <xTaskRemoveFromEventList+0xc4>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	e001      	b.n	800b0c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b0c6:	697b      	ldr	r3, [r7, #20]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20001780 	.word	0x20001780
 800b0d4:	20001760 	.word	0x20001760
 800b0d8:	20001288 	.word	0x20001288
 800b0dc:	20001718 	.word	0x20001718
 800b0e0:	20001284 	.word	0x20001284
 800b0e4:	2000176c 	.word	0x2000176c

0800b0e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0f0:	4b06      	ldr	r3, [pc, #24]	@ (800b10c <vTaskInternalSetTimeOutState+0x24>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0f8:	4b05      	ldr	r3, [pc, #20]	@ (800b110 <vTaskInternalSetTimeOutState+0x28>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	605a      	str	r2, [r3, #4]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20001770 	.word	0x20001770
 800b110:	2000175c 	.word	0x2000175c

0800b114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10b      	bne.n	800b13c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	613b      	str	r3, [r7, #16]
}
 800b136:	bf00      	nop
 800b138:	bf00      	nop
 800b13a:	e7fd      	b.n	800b138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10b      	bne.n	800b15a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	60fb      	str	r3, [r7, #12]
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop
 800b158:	e7fd      	b.n	800b156 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b15a:	f000 fe8d 	bl	800be78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b15e:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d4 <xTaskCheckForTimeOut+0xc0>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b176:	d102      	bne.n	800b17e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b178:	2300      	movs	r3, #0
 800b17a:	61fb      	str	r3, [r7, #28]
 800b17c:	e023      	b.n	800b1c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b15      	ldr	r3, [pc, #84]	@ (800b1d8 <xTaskCheckForTimeOut+0xc4>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d007      	beq.n	800b19a <xTaskCheckForTimeOut+0x86>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	429a      	cmp	r2, r3
 800b192:	d302      	bcc.n	800b19a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	61fb      	str	r3, [r7, #28]
 800b198:	e015      	b.n	800b1c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d20b      	bcs.n	800b1bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	1ad2      	subs	r2, r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7ff ff99 	bl	800b0e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61fb      	str	r3, [r7, #28]
 800b1ba:	e004      	b.n	800b1c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b1c6:	f000 fe89 	bl	800bedc <vPortExitCritical>

	return xReturn;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3720      	adds	r7, #32
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	2000175c 	.word	0x2000175c
 800b1d8:	20001770 	.word	0x20001770

0800b1dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1dc:	b480      	push	{r7}
 800b1de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1e0:	4b03      	ldr	r3, [pc, #12]	@ (800b1f0 <vTaskMissedYield+0x14>)
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	601a      	str	r2, [r3, #0]
}
 800b1e6:	bf00      	nop
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr
 800b1f0:	2000176c 	.word	0x2000176c

0800b1f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1fc:	f000 f852 	bl	800b2a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b200:	4b06      	ldr	r3, [pc, #24]	@ (800b21c <prvIdleTask+0x28>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d9f9      	bls.n	800b1fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b208:	4b05      	ldr	r3, [pc, #20]	@ (800b220 <prvIdleTask+0x2c>)
 800b20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b218:	e7f0      	b.n	800b1fc <prvIdleTask+0x8>
 800b21a:	bf00      	nop
 800b21c:	20001288 	.word	0x20001288
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b22a:	2300      	movs	r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
 800b22e:	e00c      	b.n	800b24a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4a12      	ldr	r2, [pc, #72]	@ (800b284 <prvInitialiseTaskLists+0x60>)
 800b23c:	4413      	add	r3, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fcd6 	bl	8009bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3301      	adds	r3, #1
 800b248:	607b      	str	r3, [r7, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b37      	cmp	r3, #55	@ 0x37
 800b24e:	d9ef      	bls.n	800b230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b250:	480d      	ldr	r0, [pc, #52]	@ (800b288 <prvInitialiseTaskLists+0x64>)
 800b252:	f7fe fccd 	bl	8009bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b256:	480d      	ldr	r0, [pc, #52]	@ (800b28c <prvInitialiseTaskLists+0x68>)
 800b258:	f7fe fcca 	bl	8009bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b25c:	480c      	ldr	r0, [pc, #48]	@ (800b290 <prvInitialiseTaskLists+0x6c>)
 800b25e:	f7fe fcc7 	bl	8009bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b262:	480c      	ldr	r0, [pc, #48]	@ (800b294 <prvInitialiseTaskLists+0x70>)
 800b264:	f7fe fcc4 	bl	8009bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b268:	480b      	ldr	r0, [pc, #44]	@ (800b298 <prvInitialiseTaskLists+0x74>)
 800b26a:	f7fe fcc1 	bl	8009bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b26e:	4b0b      	ldr	r3, [pc, #44]	@ (800b29c <prvInitialiseTaskLists+0x78>)
 800b270:	4a05      	ldr	r2, [pc, #20]	@ (800b288 <prvInitialiseTaskLists+0x64>)
 800b272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b274:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a0 <prvInitialiseTaskLists+0x7c>)
 800b276:	4a05      	ldr	r2, [pc, #20]	@ (800b28c <prvInitialiseTaskLists+0x68>)
 800b278:	601a      	str	r2, [r3, #0]
}
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20001288 	.word	0x20001288
 800b288:	200016e8 	.word	0x200016e8
 800b28c:	200016fc 	.word	0x200016fc
 800b290:	20001718 	.word	0x20001718
 800b294:	2000172c 	.word	0x2000172c
 800b298:	20001744 	.word	0x20001744
 800b29c:	20001710 	.word	0x20001710
 800b2a0:	20001714 	.word	0x20001714

0800b2a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2aa:	e019      	b.n	800b2e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2ac:	f000 fde4 	bl	800be78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b0:	4b10      	ldr	r3, [pc, #64]	@ (800b2f4 <prvCheckTasksWaitingTermination+0x50>)
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe fd21 	bl	8009d04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f8 <prvCheckTasksWaitingTermination+0x54>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	4a0b      	ldr	r2, [pc, #44]	@ (800b2f8 <prvCheckTasksWaitingTermination+0x54>)
 800b2ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <prvCheckTasksWaitingTermination+0x58>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	4a0a      	ldr	r2, [pc, #40]	@ (800b2fc <prvCheckTasksWaitingTermination+0x58>)
 800b2d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2d6:	f000 fe01 	bl	800bedc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f810 	bl	800b300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2e0:	4b06      	ldr	r3, [pc, #24]	@ (800b2fc <prvCheckTasksWaitingTermination+0x58>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1e1      	bne.n	800b2ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	2000172c 	.word	0x2000172c
 800b2f8:	20001758 	.word	0x20001758
 800b2fc:	20001740 	.word	0x20001740

0800b300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d108      	bne.n	800b324 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b316:	4618      	mov	r0, r3
 800b318:	f000 ff9e 	bl	800c258 <vPortFree>
				vPortFree( pxTCB );
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 ff9b 	bl	800c258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b322:	e019      	b.n	800b358 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d103      	bne.n	800b336 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 ff92 	bl	800c258 <vPortFree>
	}
 800b334:	e010      	b.n	800b358 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d00b      	beq.n	800b358 <prvDeleteTCB+0x58>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <prvDeleteTCB+0x54>
	}
 800b358:	bf00      	nop
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b366:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <prvResetNextTaskUnblockTime+0x38>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d104      	bne.n	800b37a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b370:	4b0a      	ldr	r3, [pc, #40]	@ (800b39c <prvResetNextTaskUnblockTime+0x3c>)
 800b372:	f04f 32ff 	mov.w	r2, #4294967295
 800b376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b378:	e008      	b.n	800b38c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b37a:	4b07      	ldr	r3, [pc, #28]	@ (800b398 <prvResetNextTaskUnblockTime+0x38>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	4a04      	ldr	r2, [pc, #16]	@ (800b39c <prvResetNextTaskUnblockTime+0x3c>)
 800b38a:	6013      	str	r3, [r2, #0]
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	20001710 	.word	0x20001710
 800b39c:	20001778 	.word	0x20001778

0800b3a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d4 <xTaskGetSchedulerState+0x34>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d102      	bne.n	800b3b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	607b      	str	r3, [r7, #4]
 800b3b2:	e008      	b.n	800b3c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b4:	4b08      	ldr	r3, [pc, #32]	@ (800b3d8 <xTaskGetSchedulerState+0x38>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3bc:	2302      	movs	r3, #2
 800b3be:	607b      	str	r3, [r7, #4]
 800b3c0:	e001      	b.n	800b3c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3c6:	687b      	ldr	r3, [r7, #4]
	}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20001764 	.word	0x20001764
 800b3d8:	20001780 	.word	0x20001780

0800b3dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d058      	beq.n	800b4a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3f2:	4b2f      	ldr	r3, [pc, #188]	@ (800b4b0 <xTaskPriorityDisinherit+0xd4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d00b      	beq.n	800b414 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60fb      	str	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10b      	bne.n	800b434 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	60bb      	str	r3, [r7, #8]
}
 800b42e:	bf00      	nop
 800b430:	bf00      	nop
 800b432:	e7fd      	b.n	800b430 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b438:	1e5a      	subs	r2, r3, #1
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b446:	429a      	cmp	r2, r3
 800b448:	d02c      	beq.n	800b4a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d128      	bne.n	800b4a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3304      	adds	r3, #4
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fc54 	bl	8009d04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b468:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b474:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b4 <xTaskPriorityDisinherit+0xd8>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d903      	bls.n	800b484 <xTaskPriorityDisinherit+0xa8>
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b480:	4a0c      	ldr	r2, [pc, #48]	@ (800b4b4 <xTaskPriorityDisinherit+0xd8>)
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4a09      	ldr	r2, [pc, #36]	@ (800b4b8 <xTaskPriorityDisinherit+0xdc>)
 800b492:	441a      	add	r2, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7fe fbd5 	bl	8009c4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4a4:	697b      	ldr	r3, [r7, #20]
	}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20001284 	.word	0x20001284
 800b4b4:	20001760 	.word	0x20001760
 800b4b8:	20001288 	.word	0x20001288

0800b4bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4c6:	4b21      	ldr	r3, [pc, #132]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x90>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4cc:	4b20      	ldr	r3, [pc, #128]	@ (800b550 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe fc16 	bl	8009d04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4de:	d10a      	bne.n	800b4f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d007      	beq.n	800b4f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b550 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4819      	ldr	r0, [pc, #100]	@ (800b554 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4f0:	f7fe fbab 	bl	8009c4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4f4:	e026      	b.n	800b544 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4fe:	4b14      	ldr	r3, [pc, #80]	@ (800b550 <prvAddCurrentTaskToDelayedList+0x94>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d209      	bcs.n	800b522 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b50e:	4b12      	ldr	r3, [pc, #72]	@ (800b558 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b0f      	ldr	r3, [pc, #60]	@ (800b550 <prvAddCurrentTaskToDelayedList+0x94>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3304      	adds	r3, #4
 800b518:	4619      	mov	r1, r3
 800b51a:	4610      	mov	r0, r2
 800b51c:	f7fe fbb9 	bl	8009c92 <vListInsert>
}
 800b520:	e010      	b.n	800b544 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b522:	4b0e      	ldr	r3, [pc, #56]	@ (800b55c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	4b0a      	ldr	r3, [pc, #40]	@ (800b550 <prvAddCurrentTaskToDelayedList+0x94>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3304      	adds	r3, #4
 800b52c:	4619      	mov	r1, r3
 800b52e:	4610      	mov	r0, r2
 800b530:	f7fe fbaf 	bl	8009c92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b534:	4b0a      	ldr	r3, [pc, #40]	@ (800b560 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d202      	bcs.n	800b544 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b53e:	4a08      	ldr	r2, [pc, #32]	@ (800b560 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	6013      	str	r3, [r2, #0]
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	2000175c 	.word	0x2000175c
 800b550:	20001284 	.word	0x20001284
 800b554:	20001744 	.word	0x20001744
 800b558:	20001714 	.word	0x20001714
 800b55c:	20001710 	.word	0x20001710
 800b560:	20001778 	.word	0x20001778

0800b564 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08a      	sub	sp, #40	@ 0x28
 800b568:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b56e:	f000 fb13 	bl	800bb98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b572:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e8 <xTimerCreateTimerTask+0x84>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d021      	beq.n	800b5be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b582:	1d3a      	adds	r2, r7, #4
 800b584:	f107 0108 	add.w	r1, r7, #8
 800b588:	f107 030c 	add.w	r3, r7, #12
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fb15 	bl	8009bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	9202      	str	r2, [sp, #8]
 800b59a:	9301      	str	r3, [sp, #4]
 800b59c:	2302      	movs	r3, #2
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	460a      	mov	r2, r1
 800b5a4:	4911      	ldr	r1, [pc, #68]	@ (800b5ec <xTimerCreateTimerTask+0x88>)
 800b5a6:	4812      	ldr	r0, [pc, #72]	@ (800b5f0 <xTimerCreateTimerTask+0x8c>)
 800b5a8:	f7ff f8d0 	bl	800a74c <xTaskCreateStatic>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	4a11      	ldr	r2, [pc, #68]	@ (800b5f4 <xTimerCreateTimerTask+0x90>)
 800b5b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b5b2:	4b10      	ldr	r3, [pc, #64]	@ (800b5f4 <xTimerCreateTimerTask+0x90>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	613b      	str	r3, [r7, #16]
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	e7fd      	b.n	800b5d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5dc:	697b      	ldr	r3, [r7, #20]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200017b4 	.word	0x200017b4
 800b5ec:	0800d14c 	.word	0x0800d14c
 800b5f0:	0800b731 	.word	0x0800b731
 800b5f4:	200017b8 	.word	0x200017b8

0800b5f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b606:	2300      	movs	r3, #0
 800b608:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10b      	bne.n	800b628 <xTimerGenericCommand+0x30>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	623b      	str	r3, [r7, #32]
}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	e7fd      	b.n	800b624 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b628:	4b19      	ldr	r3, [pc, #100]	@ (800b690 <xTimerGenericCommand+0x98>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d02a      	beq.n	800b686 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2b05      	cmp	r3, #5
 800b640:	dc18      	bgt.n	800b674 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b642:	f7ff fead 	bl	800b3a0 <xTaskGetSchedulerState>
 800b646:	4603      	mov	r3, r0
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d109      	bne.n	800b660 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b64c:	4b10      	ldr	r3, [pc, #64]	@ (800b690 <xTimerGenericCommand+0x98>)
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	f107 0110 	add.w	r1, r7, #16
 800b654:	2300      	movs	r3, #0
 800b656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b658:	f7fe fc88 	bl	8009f6c <xQueueGenericSend>
 800b65c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b65e:	e012      	b.n	800b686 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b660:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <xTimerGenericCommand+0x98>)
 800b662:	6818      	ldr	r0, [r3, #0]
 800b664:	f107 0110 	add.w	r1, r7, #16
 800b668:	2300      	movs	r3, #0
 800b66a:	2200      	movs	r2, #0
 800b66c:	f7fe fc7e 	bl	8009f6c <xQueueGenericSend>
 800b670:	6278      	str	r0, [r7, #36]	@ 0x24
 800b672:	e008      	b.n	800b686 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b674:	4b06      	ldr	r3, [pc, #24]	@ (800b690 <xTimerGenericCommand+0x98>)
 800b676:	6818      	ldr	r0, [r3, #0]
 800b678:	f107 0110 	add.w	r1, r7, #16
 800b67c:	2300      	movs	r3, #0
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	f7fe fd76 	bl	800a170 <xQueueGenericSendFromISR>
 800b684:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3728      	adds	r7, #40	@ 0x28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	200017b4 	.word	0x200017b4

0800b694 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af02      	add	r7, sp, #8
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b69e:	4b23      	ldr	r3, [pc, #140]	@ (800b72c <prvProcessExpiredTimer+0x98>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fb29 	bl	8009d04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d023      	beq.n	800b708 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	699a      	ldr	r2, [r3, #24]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	18d1      	adds	r1, r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	6978      	ldr	r0, [r7, #20]
 800b6ce:	f000 f8d5 	bl	800b87c <prvInsertTimerInActiveList>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d020      	beq.n	800b71a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6d8:	2300      	movs	r3, #0
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6978      	ldr	r0, [r7, #20]
 800b6e4:	f7ff ff88 	bl	800b5f8 <xTimerGenericCommand>
 800b6e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d114      	bne.n	800b71a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	60fb      	str	r3, [r7, #12]
}
 800b702:	bf00      	nop
 800b704:	bf00      	nop
 800b706:	e7fd      	b.n	800b704 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b70e:	f023 0301 	bic.w	r3, r3, #1
 800b712:	b2da      	uxtb	r2, r3
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	6978      	ldr	r0, [r7, #20]
 800b720:	4798      	blx	r3
}
 800b722:	bf00      	nop
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	200017ac 	.word	0x200017ac

0800b730 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 f859 	bl	800b7f4 <prvGetNextExpireTime>
 800b742:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	4619      	mov	r1, r3
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f000 f805 	bl	800b758 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b74e:	f000 f8d7 	bl	800b900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b752:	bf00      	nop
 800b754:	e7f0      	b.n	800b738 <prvTimerTask+0x8>
	...

0800b758 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b762:	f7ff fa37 	bl	800abd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b766:	f107 0308 	add.w	r3, r7, #8
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f866 	bl	800b83c <prvSampleTimeNow>
 800b770:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d130      	bne.n	800b7da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <prvProcessTimerOrBlockTask+0x3c>
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	429a      	cmp	r2, r3
 800b784:	d806      	bhi.n	800b794 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b786:	f7ff fa33 	bl	800abf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff ff81 	bl	800b694 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b792:	e024      	b.n	800b7de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d008      	beq.n	800b7ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b79a:	4b13      	ldr	r3, [pc, #76]	@ (800b7e8 <prvProcessTimerOrBlockTask+0x90>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <prvProcessTimerOrBlockTask+0x50>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e000      	b.n	800b7aa <prvProcessTimerOrBlockTask+0x52>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b7ec <prvProcessTimerOrBlockTask+0x94>)
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	f7fe ff93 	bl	800a6e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b7be:	f7ff fa17 	bl	800abf0 <xTaskResumeAll>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7c8:	4b09      	ldr	r3, [pc, #36]	@ (800b7f0 <prvProcessTimerOrBlockTask+0x98>)
 800b7ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	f3bf 8f6f 	isb	sy
}
 800b7d8:	e001      	b.n	800b7de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7da:	f7ff fa09 	bl	800abf0 <xTaskResumeAll>
}
 800b7de:	bf00      	nop
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	200017b0 	.word	0x200017b0
 800b7ec:	200017b4 	.word	0x200017b4
 800b7f0:	e000ed04 	.word	0xe000ed04

0800b7f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b838 <prvGetNextExpireTime+0x44>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <prvGetNextExpireTime+0x16>
 800b806:	2201      	movs	r2, #1
 800b808:	e000      	b.n	800b80c <prvGetNextExpireTime+0x18>
 800b80a:	2200      	movs	r2, #0
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d105      	bne.n	800b824 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b818:	4b07      	ldr	r3, [pc, #28]	@ (800b838 <prvGetNextExpireTime+0x44>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60fb      	str	r3, [r7, #12]
 800b822:	e001      	b.n	800b828 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b824:	2300      	movs	r3, #0
 800b826:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b828:	68fb      	ldr	r3, [r7, #12]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	200017ac 	.word	0x200017ac

0800b83c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b844:	f7ff fa72 	bl	800ad2c <xTaskGetTickCount>
 800b848:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b84a:	4b0b      	ldr	r3, [pc, #44]	@ (800b878 <prvSampleTimeNow+0x3c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	429a      	cmp	r2, r3
 800b852:	d205      	bcs.n	800b860 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b854:	f000 f93a 	bl	800bacc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	e002      	b.n	800b866 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b866:	4a04      	ldr	r2, [pc, #16]	@ (800b878 <prvSampleTimeNow+0x3c>)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b86c:	68fb      	ldr	r3, [r7, #12]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200017bc 	.word	0x200017bc

0800b87c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d812      	bhi.n	800b8c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	1ad2      	subs	r2, r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d302      	bcc.n	800b8b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	e01b      	b.n	800b8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8b6:	4b10      	ldr	r3, [pc, #64]	@ (800b8f8 <prvInsertTimerInActiveList+0x7c>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	f7fe f9e6 	bl	8009c92 <vListInsert>
 800b8c6:	e012      	b.n	800b8ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d206      	bcs.n	800b8de <prvInsertTimerInActiveList+0x62>
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d302      	bcc.n	800b8de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e007      	b.n	800b8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8de:	4b07      	ldr	r3, [pc, #28]	@ (800b8fc <prvInsertTimerInActiveList+0x80>)
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	f7fe f9d2 	bl	8009c92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8ee:	697b      	ldr	r3, [r7, #20]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	200017b0 	.word	0x200017b0
 800b8fc:	200017ac 	.word	0x200017ac

0800b900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08e      	sub	sp, #56	@ 0x38
 800b904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b906:	e0ce      	b.n	800baa6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	da19      	bge.n	800b942 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b90e:	1d3b      	adds	r3, r7, #4
 800b910:	3304      	adds	r3, #4
 800b912:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10b      	bne.n	800b932 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	61fb      	str	r3, [r7, #28]
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	e7fd      	b.n	800b92e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b938:	6850      	ldr	r0, [r2, #4]
 800b93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b93c:	6892      	ldr	r2, [r2, #8]
 800b93e:	4611      	mov	r1, r2
 800b940:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	f2c0 80ae 	blt.w	800baa6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d004      	beq.n	800b960 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b958:	3304      	adds	r3, #4
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe f9d2 	bl	8009d04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b960:	463b      	mov	r3, r7
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff ff6a 	bl	800b83c <prvSampleTimeNow>
 800b968:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b09      	cmp	r3, #9
 800b96e:	f200 8097 	bhi.w	800baa0 <prvProcessReceivedCommands+0x1a0>
 800b972:	a201      	add	r2, pc, #4	@ (adr r2, 800b978 <prvProcessReceivedCommands+0x78>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b9a1 	.word	0x0800b9a1
 800b97c:	0800b9a1 	.word	0x0800b9a1
 800b980:	0800b9a1 	.word	0x0800b9a1
 800b984:	0800ba17 	.word	0x0800ba17
 800b988:	0800ba2b 	.word	0x0800ba2b
 800b98c:	0800ba77 	.word	0x0800ba77
 800b990:	0800b9a1 	.word	0x0800b9a1
 800b994:	0800b9a1 	.word	0x0800b9a1
 800b998:	0800ba17 	.word	0x0800ba17
 800b99c:	0800ba2b 	.word	0x0800ba2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9a6:	f043 0301 	orr.w	r3, r3, #1
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	18d1      	adds	r1, r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9c0:	f7ff ff5c 	bl	800b87c <prvInsertTimerInActiveList>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d06c      	beq.n	800baa4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9d8:	f003 0304 	and.w	r3, r3, #4
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d061      	beq.n	800baa4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	441a      	add	r2, r3
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9f2:	f7ff fe01 	bl	800b5f8 <xTimerGenericCommand>
 800b9f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d152      	bne.n	800baa4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	61bb      	str	r3, [r7, #24]
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba1c:	f023 0301 	bic.w	r3, r3, #1
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba28:	e03d      	b.n	800baa6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba30:	f043 0301 	orr.w	r3, r3, #1
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	617b      	str	r3, [r7, #20]
}
 800ba5c:	bf00      	nop
 800ba5e:	bf00      	nop
 800ba60:	e7fd      	b.n	800ba5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba64:	699a      	ldr	r2, [r3, #24]
 800ba66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba68:	18d1      	adds	r1, r2, r3
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba70:	f7ff ff04 	bl	800b87c <prvInsertTimerInActiveList>
					break;
 800ba74:	e017      	b.n	800baa6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba7c:	f003 0302 	and.w	r3, r3, #2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d103      	bne.n	800ba8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ba84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba86:	f000 fbe7 	bl	800c258 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba8a:	e00c      	b.n	800baa6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba92:	f023 0301 	bic.w	r3, r3, #1
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba9e:	e002      	b.n	800baa6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800baa0:	bf00      	nop
 800baa2:	e000      	b.n	800baa6 <prvProcessReceivedCommands+0x1a6>
					break;
 800baa4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baa6:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <prvProcessReceivedCommands+0x1c8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	1d39      	adds	r1, r7, #4
 800baac:	2200      	movs	r2, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe fbfc 	bl	800a2ac <xQueueReceive>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f47f af26 	bne.w	800b908 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800babc:	bf00      	nop
 800babe:	bf00      	nop
 800bac0:	3730      	adds	r7, #48	@ 0x30
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	200017b4 	.word	0x200017b4

0800bacc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bad2:	e049      	b.n	800bb68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bad4:	4b2e      	ldr	r3, [pc, #184]	@ (800bb90 <prvSwitchTimerLists+0xc4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bade:	4b2c      	ldr	r3, [pc, #176]	@ (800bb90 <prvSwitchTimerLists+0xc4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	3304      	adds	r3, #4
 800baec:	4618      	mov	r0, r3
 800baee:	f7fe f909 	bl	8009d04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb00:	f003 0304 	and.w	r3, r3, #4
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d02f      	beq.n	800bb68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4413      	add	r3, r2
 800bb10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d90e      	bls.n	800bb38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb26:	4b1a      	ldr	r3, [pc, #104]	@ (800bb90 <prvSwitchTimerLists+0xc4>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4610      	mov	r0, r2
 800bb32:	f7fe f8ae 	bl	8009c92 <vListInsert>
 800bb36:	e017      	b.n	800bb68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb38:	2300      	movs	r3, #0
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	2100      	movs	r1, #0
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7ff fd58 	bl	800b5f8 <xTimerGenericCommand>
 800bb48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10b      	bne.n	800bb68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	603b      	str	r3, [r7, #0]
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	e7fd      	b.n	800bb64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb68:	4b09      	ldr	r3, [pc, #36]	@ (800bb90 <prvSwitchTimerLists+0xc4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1b0      	bne.n	800bad4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb72:	4b07      	ldr	r3, [pc, #28]	@ (800bb90 <prvSwitchTimerLists+0xc4>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb78:	4b06      	ldr	r3, [pc, #24]	@ (800bb94 <prvSwitchTimerLists+0xc8>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a04      	ldr	r2, [pc, #16]	@ (800bb90 <prvSwitchTimerLists+0xc4>)
 800bb7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb80:	4a04      	ldr	r2, [pc, #16]	@ (800bb94 <prvSwitchTimerLists+0xc8>)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	6013      	str	r3, [r2, #0]
}
 800bb86:	bf00      	nop
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	200017ac 	.word	0x200017ac
 800bb94:	200017b0 	.word	0x200017b0

0800bb98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb9e:	f000 f96b 	bl	800be78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bba2:	4b15      	ldr	r3, [pc, #84]	@ (800bbf8 <prvCheckForValidListAndQueue+0x60>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d120      	bne.n	800bbec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bbaa:	4814      	ldr	r0, [pc, #80]	@ (800bbfc <prvCheckForValidListAndQueue+0x64>)
 800bbac:	f7fe f820 	bl	8009bf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbb0:	4813      	ldr	r0, [pc, #76]	@ (800bc00 <prvCheckForValidListAndQueue+0x68>)
 800bbb2:	f7fe f81d 	bl	8009bf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbb6:	4b13      	ldr	r3, [pc, #76]	@ (800bc04 <prvCheckForValidListAndQueue+0x6c>)
 800bbb8:	4a10      	ldr	r2, [pc, #64]	@ (800bbfc <prvCheckForValidListAndQueue+0x64>)
 800bbba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bbbc:	4b12      	ldr	r3, [pc, #72]	@ (800bc08 <prvCheckForValidListAndQueue+0x70>)
 800bbbe:	4a10      	ldr	r2, [pc, #64]	@ (800bc00 <prvCheckForValidListAndQueue+0x68>)
 800bbc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	4b11      	ldr	r3, [pc, #68]	@ (800bc0c <prvCheckForValidListAndQueue+0x74>)
 800bbc8:	4a11      	ldr	r2, [pc, #68]	@ (800bc10 <prvCheckForValidListAndQueue+0x78>)
 800bbca:	2110      	movs	r1, #16
 800bbcc:	200a      	movs	r0, #10
 800bbce:	f7fe f92d 	bl	8009e2c <xQueueGenericCreateStatic>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	4a08      	ldr	r2, [pc, #32]	@ (800bbf8 <prvCheckForValidListAndQueue+0x60>)
 800bbd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbd8:	4b07      	ldr	r3, [pc, #28]	@ (800bbf8 <prvCheckForValidListAndQueue+0x60>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbe0:	4b05      	ldr	r3, [pc, #20]	@ (800bbf8 <prvCheckForValidListAndQueue+0x60>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	490b      	ldr	r1, [pc, #44]	@ (800bc14 <prvCheckForValidListAndQueue+0x7c>)
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fe fd52 	bl	800a690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbec:	f000 f976 	bl	800bedc <vPortExitCritical>
}
 800bbf0:	bf00      	nop
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	200017b4 	.word	0x200017b4
 800bbfc:	20001784 	.word	0x20001784
 800bc00:	20001798 	.word	0x20001798
 800bc04:	200017ac 	.word	0x200017ac
 800bc08:	200017b0 	.word	0x200017b0
 800bc0c:	20001860 	.word	0x20001860
 800bc10:	200017c0 	.word	0x200017c0
 800bc14:	0800d154 	.word	0x0800d154

0800bc18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3b04      	subs	r3, #4
 800bc28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3b04      	subs	r3, #4
 800bc36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f023 0201 	bic.w	r2, r3, #1
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3b04      	subs	r3, #4
 800bc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc48:	4a0c      	ldr	r2, [pc, #48]	@ (800bc7c <pxPortInitialiseStack+0x64>)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3b14      	subs	r3, #20
 800bc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3b04      	subs	r3, #4
 800bc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f06f 0202 	mvn.w	r2, #2
 800bc66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3b20      	subs	r3, #32
 800bc6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	0800bc81 	.word	0x0800bc81

0800bc80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc8a:	4b13      	ldr	r3, [pc, #76]	@ (800bcd8 <prvTaskExitError+0x58>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc92:	d00b      	beq.n	800bcac <prvTaskExitError+0x2c>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	60fb      	str	r3, [r7, #12]
}
 800bca6:	bf00      	nop
 800bca8:	bf00      	nop
 800bcaa:	e7fd      	b.n	800bca8 <prvTaskExitError+0x28>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60bb      	str	r3, [r7, #8]
}
 800bcbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bcc0:	bf00      	nop
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0fc      	beq.n	800bcc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcc8:	bf00      	nop
 800bcca:	bf00      	nop
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	200001c4 	.word	0x200001c4
 800bcdc:	00000000 	.word	0x00000000

0800bce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bce0:	4b07      	ldr	r3, [pc, #28]	@ (800bd00 <pxCurrentTCBConst2>)
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	6808      	ldr	r0, [r1, #0]
 800bce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	f380 8809 	msr	PSP, r0
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f04f 0000 	mov.w	r0, #0
 800bcf6:	f380 8811 	msr	BASEPRI, r0
 800bcfa:	4770      	bx	lr
 800bcfc:	f3af 8000 	nop.w

0800bd00 <pxCurrentTCBConst2>:
 800bd00:	20001284 	.word	0x20001284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop

0800bd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd08:	4808      	ldr	r0, [pc, #32]	@ (800bd2c <prvPortStartFirstTask+0x24>)
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	6800      	ldr	r0, [r0, #0]
 800bd0e:	f380 8808 	msr	MSP, r0
 800bd12:	f04f 0000 	mov.w	r0, #0
 800bd16:	f380 8814 	msr	CONTROL, r0
 800bd1a:	b662      	cpsie	i
 800bd1c:	b661      	cpsie	f
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	df00      	svc	0
 800bd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd2a:	bf00      	nop
 800bd2c:	e000ed08 	.word	0xe000ed08

0800bd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd36:	4b47      	ldr	r3, [pc, #284]	@ (800be54 <xPortStartScheduler+0x124>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a47      	ldr	r2, [pc, #284]	@ (800be58 <xPortStartScheduler+0x128>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d10b      	bne.n	800bd58 <xPortStartScheduler+0x28>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	60fb      	str	r3, [r7, #12]
}
 800bd52:	bf00      	nop
 800bd54:	bf00      	nop
 800bd56:	e7fd      	b.n	800bd54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd58:	4b3e      	ldr	r3, [pc, #248]	@ (800be54 <xPortStartScheduler+0x124>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a3f      	ldr	r2, [pc, #252]	@ (800be5c <xPortStartScheduler+0x12c>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d10b      	bne.n	800bd7a <xPortStartScheduler+0x4a>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	613b      	str	r3, [r7, #16]
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop
 800bd78:	e7fd      	b.n	800bd76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd7a:	4b39      	ldr	r3, [pc, #228]	@ (800be60 <xPortStartScheduler+0x130>)
 800bd7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	22ff      	movs	r2, #255	@ 0xff
 800bd8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd94:	78fb      	ldrb	r3, [r7, #3]
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	4b31      	ldr	r3, [pc, #196]	@ (800be64 <xPortStartScheduler+0x134>)
 800bda0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bda2:	4b31      	ldr	r3, [pc, #196]	@ (800be68 <xPortStartScheduler+0x138>)
 800bda4:	2207      	movs	r2, #7
 800bda6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bda8:	e009      	b.n	800bdbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bdaa:	4b2f      	ldr	r3, [pc, #188]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	4a2d      	ldr	r2, [pc, #180]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdb4:	78fb      	ldrb	r3, [r7, #3]
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdc6:	2b80      	cmp	r3, #128	@ 0x80
 800bdc8:	d0ef      	beq.n	800bdaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bdca:	4b27      	ldr	r3, [pc, #156]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f1c3 0307 	rsb	r3, r3, #7
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	d00b      	beq.n	800bdee <xPortStartScheduler+0xbe>
	__asm volatile
 800bdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	60bb      	str	r3, [r7, #8]
}
 800bde8:	bf00      	nop
 800bdea:	bf00      	nop
 800bdec:	e7fd      	b.n	800bdea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdee:	4b1e      	ldr	r3, [pc, #120]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	021b      	lsls	r3, r3, #8
 800bdf4:	4a1c      	ldr	r2, [pc, #112]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdf8:	4b1b      	ldr	r3, [pc, #108]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be00:	4a19      	ldr	r2, [pc, #100]	@ (800be68 <xPortStartScheduler+0x138>)
 800be02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	b2da      	uxtb	r2, r3
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be0c:	4b17      	ldr	r3, [pc, #92]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a16      	ldr	r2, [pc, #88]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be18:	4b14      	ldr	r3, [pc, #80]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a13      	ldr	r2, [pc, #76]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800be22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be24:	f000 f8da 	bl	800bfdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be28:	4b11      	ldr	r3, [pc, #68]	@ (800be70 <xPortStartScheduler+0x140>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be2e:	f000 f8f9 	bl	800c024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be32:	4b10      	ldr	r3, [pc, #64]	@ (800be74 <xPortStartScheduler+0x144>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a0f      	ldr	r2, [pc, #60]	@ (800be74 <xPortStartScheduler+0x144>)
 800be38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800be3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be3e:	f7ff ff63 	bl	800bd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be42:	f7ff f83d 	bl	800aec0 <vTaskSwitchContext>
	prvTaskExitError();
 800be46:	f7ff ff1b 	bl	800bc80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	e000ed00 	.word	0xe000ed00
 800be58:	410fc271 	.word	0x410fc271
 800be5c:	410fc270 	.word	0x410fc270
 800be60:	e000e400 	.word	0xe000e400
 800be64:	200018b0 	.word	0x200018b0
 800be68:	200018b4 	.word	0x200018b4
 800be6c:	e000ed20 	.word	0xe000ed20
 800be70:	200001c4 	.word	0x200001c4
 800be74:	e000ef34 	.word	0xe000ef34

0800be78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	607b      	str	r3, [r7, #4]
}
 800be90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be92:	4b10      	ldr	r3, [pc, #64]	@ (800bed4 <vPortEnterCritical+0x5c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3301      	adds	r3, #1
 800be98:	4a0e      	ldr	r2, [pc, #56]	@ (800bed4 <vPortEnterCritical+0x5c>)
 800be9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bed4 <vPortEnterCritical+0x5c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d110      	bne.n	800bec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bea4:	4b0c      	ldr	r3, [pc, #48]	@ (800bed8 <vPortEnterCritical+0x60>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00b      	beq.n	800bec6 <vPortEnterCritical+0x4e>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	603b      	str	r3, [r7, #0]
}
 800bec0:	bf00      	nop
 800bec2:	bf00      	nop
 800bec4:	e7fd      	b.n	800bec2 <vPortEnterCritical+0x4a>
	}
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	200001c4 	.word	0x200001c4
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bee2:	4b12      	ldr	r3, [pc, #72]	@ (800bf2c <vPortExitCritical+0x50>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10b      	bne.n	800bf02 <vPortExitCritical+0x26>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	607b      	str	r3, [r7, #4]
}
 800befc:	bf00      	nop
 800befe:	bf00      	nop
 800bf00:	e7fd      	b.n	800befe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf02:	4b0a      	ldr	r3, [pc, #40]	@ (800bf2c <vPortExitCritical+0x50>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	4a08      	ldr	r2, [pc, #32]	@ (800bf2c <vPortExitCritical+0x50>)
 800bf0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf0c:	4b07      	ldr	r3, [pc, #28]	@ (800bf2c <vPortExitCritical+0x50>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d105      	bne.n	800bf20 <vPortExitCritical+0x44>
 800bf14:	2300      	movs	r3, #0
 800bf16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f383 8811 	msr	BASEPRI, r3
}
 800bf1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	200001c4 	.word	0x200001c4

0800bf30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf30:	f3ef 8009 	mrs	r0, PSP
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	4b15      	ldr	r3, [pc, #84]	@ (800bf90 <pxCurrentTCBConst>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	f01e 0f10 	tst.w	lr, #16
 800bf40:	bf08      	it	eq
 800bf42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	6010      	str	r0, [r2, #0]
 800bf4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf54:	f380 8811 	msr	BASEPRI, r0
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f7fe ffae 	bl	800aec0 <vTaskSwitchContext>
 800bf64:	f04f 0000 	mov.w	r0, #0
 800bf68:	f380 8811 	msr	BASEPRI, r0
 800bf6c:	bc09      	pop	{r0, r3}
 800bf6e:	6819      	ldr	r1, [r3, #0]
 800bf70:	6808      	ldr	r0, [r1, #0]
 800bf72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf76:	f01e 0f10 	tst.w	lr, #16
 800bf7a:	bf08      	it	eq
 800bf7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf80:	f380 8809 	msr	PSP, r0
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w

0800bf90 <pxCurrentTCBConst>:
 800bf90:	20001284 	.word	0x20001284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop

0800bf98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	607b      	str	r3, [r7, #4]
}
 800bfb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfb2:	f7fe fecb 	bl	800ad4c <xTaskIncrementTick>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <xPortSysTickHandler+0x40>)
 800bfbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f383 8811 	msr	BASEPRI, r3
}
 800bfce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <vPortSetupTimerInterrupt+0x34>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800c014 <vPortSetupTimerInterrupt+0x38>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <vPortSetupTimerInterrupt+0x3c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a0a      	ldr	r2, [pc, #40]	@ (800c01c <vPortSetupTimerInterrupt+0x40>)
 800bff2:	fba2 2303 	umull	r2, r3, r2, r3
 800bff6:	099b      	lsrs	r3, r3, #6
 800bff8:	4a09      	ldr	r2, [pc, #36]	@ (800c020 <vPortSetupTimerInterrupt+0x44>)
 800bffa:	3b01      	subs	r3, #1
 800bffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bffe:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <vPortSetupTimerInterrupt+0x34>)
 800c000:	2207      	movs	r2, #7
 800c002:	601a      	str	r2, [r3, #0]
}
 800c004:	bf00      	nop
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	e000e010 	.word	0xe000e010
 800c014:	e000e018 	.word	0xe000e018
 800c018:	200001b8 	.word	0x200001b8
 800c01c:	10624dd3 	.word	0x10624dd3
 800c020:	e000e014 	.word	0xe000e014

0800c024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c034 <vPortEnableVFP+0x10>
 800c028:	6801      	ldr	r1, [r0, #0]
 800c02a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c02e:	6001      	str	r1, [r0, #0]
 800c030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c032:	bf00      	nop
 800c034:	e000ed88 	.word	0xe000ed88

0800c038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c03e:	f3ef 8305 	mrs	r3, IPSR
 800c042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b0f      	cmp	r3, #15
 800c048:	d915      	bls.n	800c076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c04a:	4a18      	ldr	r2, [pc, #96]	@ (800c0ac <vPortValidateInterruptPriority+0x74>)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c054:	4b16      	ldr	r3, [pc, #88]	@ (800c0b0 <vPortValidateInterruptPriority+0x78>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	7afa      	ldrb	r2, [r7, #11]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d20b      	bcs.n	800c076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	607b      	str	r3, [r7, #4]
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	e7fd      	b.n	800c072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c076:	4b0f      	ldr	r3, [pc, #60]	@ (800c0b4 <vPortValidateInterruptPriority+0x7c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c07e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0b8 <vPortValidateInterruptPriority+0x80>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d90b      	bls.n	800c09e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	603b      	str	r3, [r7, #0]
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	e7fd      	b.n	800c09a <vPortValidateInterruptPriority+0x62>
	}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	e000e3f0 	.word	0xe000e3f0
 800c0b0:	200018b0 	.word	0x200018b0
 800c0b4:	e000ed0c 	.word	0xe000ed0c
 800c0b8:	200018b4 	.word	0x200018b4

0800c0bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08a      	sub	sp, #40	@ 0x28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0c8:	f7fe fd84 	bl	800abd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c240 <pvPortMalloc+0x184>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0d4:	f000 f924 	bl	800c320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c244 <pvPortMalloc+0x188>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4013      	ands	r3, r2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f040 8095 	bne.w	800c210 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d01e      	beq.n	800c12a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c0ec:	2208      	movs	r2, #8
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d015      	beq.n	800c12a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f023 0307 	bic.w	r3, r3, #7
 800c104:	3308      	adds	r3, #8
 800c106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f003 0307 	and.w	r3, r3, #7
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00b      	beq.n	800c12a <pvPortMalloc+0x6e>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	617b      	str	r3, [r7, #20]
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d06f      	beq.n	800c210 <pvPortMalloc+0x154>
 800c130:	4b45      	ldr	r3, [pc, #276]	@ (800c248 <pvPortMalloc+0x18c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	429a      	cmp	r2, r3
 800c138:	d86a      	bhi.n	800c210 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c13a:	4b44      	ldr	r3, [pc, #272]	@ (800c24c <pvPortMalloc+0x190>)
 800c13c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c13e:	4b43      	ldr	r3, [pc, #268]	@ (800c24c <pvPortMalloc+0x190>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c144:	e004      	b.n	800c150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d903      	bls.n	800c162 <pvPortMalloc+0xa6>
 800c15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f1      	bne.n	800c146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c162:	4b37      	ldr	r3, [pc, #220]	@ (800c240 <pvPortMalloc+0x184>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c168:	429a      	cmp	r2, r3
 800c16a:	d051      	beq.n	800c210 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2208      	movs	r2, #8
 800c172:	4413      	add	r3, r2
 800c174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	685a      	ldr	r2, [r3, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	1ad2      	subs	r2, r2, r3
 800c186:	2308      	movs	r3, #8
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d920      	bls.n	800c1d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4413      	add	r3, r2
 800c194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	f003 0307 	and.w	r3, r3, #7
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1ca:	69b8      	ldr	r0, [r7, #24]
 800c1cc:	f000 f90a 	bl	800c3e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	4a1b      	ldr	r2, [pc, #108]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1de:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c250 <pvPortMalloc+0x194>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d203      	bcs.n	800c1f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1ea:	4b17      	ldr	r3, [pc, #92]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a18      	ldr	r2, [pc, #96]	@ (800c250 <pvPortMalloc+0x194>)
 800c1f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <pvPortMalloc+0x188>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c206:	4b13      	ldr	r3, [pc, #76]	@ (800c254 <pvPortMalloc+0x198>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	4a11      	ldr	r2, [pc, #68]	@ (800c254 <pvPortMalloc+0x198>)
 800c20e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c210:	f7fe fcee 	bl	800abf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00b      	beq.n	800c236 <pvPortMalloc+0x17a>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60fb      	str	r3, [r7, #12]
}
 800c230:	bf00      	nop
 800c232:	bf00      	nop
 800c234:	e7fd      	b.n	800c232 <pvPortMalloc+0x176>
	return pvReturn;
 800c236:	69fb      	ldr	r3, [r7, #28]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3728      	adds	r7, #40	@ 0x28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20003fd0 	.word	0x20003fd0
 800c244:	20003fe4 	.word	0x20003fe4
 800c248:	20003fd4 	.word	0x20003fd4
 800c24c:	20003fc8 	.word	0x20003fc8
 800c250:	20003fd8 	.word	0x20003fd8
 800c254:	20003fdc 	.word	0x20003fdc

0800c258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d04f      	beq.n	800c30a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c26a:	2308      	movs	r3, #8
 800c26c:	425b      	negs	r3, r3
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b25      	ldr	r3, [pc, #148]	@ (800c314 <vPortFree+0xbc>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4013      	ands	r3, r2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <vPortFree+0x46>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	60fb      	str	r3, [r7, #12]
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	e7fd      	b.n	800c29a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00b      	beq.n	800c2be <vPortFree+0x66>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	60bb      	str	r3, [r7, #8]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	4b14      	ldr	r3, [pc, #80]	@ (800c314 <vPortFree+0xbc>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01e      	beq.n	800c30a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d11a      	bne.n	800c30a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c314 <vPortFree+0xbc>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	43db      	mvns	r3, r3
 800c2de:	401a      	ands	r2, r3
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2e4:	f7fe fc76 	bl	800abd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c318 <vPortFree+0xc0>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	4a09      	ldr	r2, [pc, #36]	@ (800c318 <vPortFree+0xc0>)
 800c2f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2f6:	6938      	ldr	r0, [r7, #16]
 800c2f8:	f000 f874 	bl	800c3e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2fc:	4b07      	ldr	r3, [pc, #28]	@ (800c31c <vPortFree+0xc4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3301      	adds	r3, #1
 800c302:	4a06      	ldr	r2, [pc, #24]	@ (800c31c <vPortFree+0xc4>)
 800c304:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c306:	f7fe fc73 	bl	800abf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c30a:	bf00      	nop
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	20003fe4 	.word	0x20003fe4
 800c318:	20003fd4 	.word	0x20003fd4
 800c31c:	20003fe0 	.word	0x20003fe0

0800c320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c326:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c32a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c32c:	4b27      	ldr	r3, [pc, #156]	@ (800c3cc <prvHeapInit+0xac>)
 800c32e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00c      	beq.n	800c354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f023 0307 	bic.w	r3, r3, #7
 800c346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	4a1f      	ldr	r2, [pc, #124]	@ (800c3cc <prvHeapInit+0xac>)
 800c350:	4413      	add	r3, r2
 800c352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c358:	4a1d      	ldr	r2, [pc, #116]	@ (800c3d0 <prvHeapInit+0xb0>)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c35e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3d0 <prvHeapInit+0xb0>)
 800c360:	2200      	movs	r2, #0
 800c362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c36c:	2208      	movs	r2, #8
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0307 	bic.w	r3, r3, #7
 800c37a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	4a15      	ldr	r2, [pc, #84]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c382:	4b14      	ldr	r3, [pc, #80]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c38a:	4b12      	ldr	r3, [pc, #72]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	1ad2      	subs	r2, r2, r3
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d8 <prvHeapInit+0xb8>)
 800c3ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	4a09      	ldr	r2, [pc, #36]	@ (800c3dc <prvHeapInit+0xbc>)
 800c3b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3b8:	4b09      	ldr	r3, [pc, #36]	@ (800c3e0 <prvHeapInit+0xc0>)
 800c3ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c3be:	601a      	str	r2, [r3, #0]
}
 800c3c0:	bf00      	nop
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	200018b8 	.word	0x200018b8
 800c3d0:	20003fc8 	.word	0x20003fc8
 800c3d4:	20003fd0 	.word	0x20003fd0
 800c3d8:	20003fd8 	.word	0x20003fd8
 800c3dc:	20003fd4 	.word	0x20003fd4
 800c3e0:	20003fe4 	.word	0x20003fe4

0800c3e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3ec:	4b28      	ldr	r3, [pc, #160]	@ (800c490 <prvInsertBlockIntoFreeList+0xac>)
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	e002      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x14>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d8f7      	bhi.n	800c3f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	429a      	cmp	r2, r3
 800c412:	d108      	bne.n	800c426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	441a      	add	r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	441a      	add	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d118      	bne.n	800c46c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4b15      	ldr	r3, [pc, #84]	@ (800c494 <prvInsertBlockIntoFreeList+0xb0>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d00d      	beq.n	800c462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	441a      	add	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	e008      	b.n	800c474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c462:	4b0c      	ldr	r3, [pc, #48]	@ (800c494 <prvInsertBlockIntoFreeList+0xb0>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e003      	b.n	800c474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d002      	beq.n	800c482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c482:	bf00      	nop
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20003fc8 	.word	0x20003fc8
 800c494:	20003fd0 	.word	0x20003fd0

0800c498 <sniprintf>:
 800c498:	b40c      	push	{r2, r3}
 800c49a:	b530      	push	{r4, r5, lr}
 800c49c:	4b18      	ldr	r3, [pc, #96]	@ (800c500 <sniprintf+0x68>)
 800c49e:	1e0c      	subs	r4, r1, #0
 800c4a0:	681d      	ldr	r5, [r3, #0]
 800c4a2:	b09d      	sub	sp, #116	@ 0x74
 800c4a4:	da08      	bge.n	800c4b8 <sniprintf+0x20>
 800c4a6:	238b      	movs	r3, #139	@ 0x8b
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ae:	b01d      	add	sp, #116	@ 0x74
 800c4b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4b4:	b002      	add	sp, #8
 800c4b6:	4770      	bx	lr
 800c4b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c4bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4c0:	f04f 0300 	mov.w	r3, #0
 800c4c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c4c6:	bf14      	ite	ne
 800c4c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c4cc:	4623      	moveq	r3, r4
 800c4ce:	9304      	str	r3, [sp, #16]
 800c4d0:	9307      	str	r3, [sp, #28]
 800c4d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4d6:	9002      	str	r0, [sp, #8]
 800c4d8:	9006      	str	r0, [sp, #24]
 800c4da:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c4e0:	ab21      	add	r3, sp, #132	@ 0x84
 800c4e2:	a902      	add	r1, sp, #8
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	f000 f9fe 	bl	800c8e8 <_svfiprintf_r>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	bfbc      	itt	lt
 800c4f0:	238b      	movlt	r3, #139	@ 0x8b
 800c4f2:	602b      	strlt	r3, [r5, #0]
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	d0da      	beq.n	800c4ae <sniprintf+0x16>
 800c4f8:	9b02      	ldr	r3, [sp, #8]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e7d6      	b.n	800c4ae <sniprintf+0x16>
 800c500:	200001c8 	.word	0x200001c8

0800c504 <_vsniprintf_r>:
 800c504:	b530      	push	{r4, r5, lr}
 800c506:	4614      	mov	r4, r2
 800c508:	2c00      	cmp	r4, #0
 800c50a:	b09b      	sub	sp, #108	@ 0x6c
 800c50c:	4605      	mov	r5, r0
 800c50e:	461a      	mov	r2, r3
 800c510:	da05      	bge.n	800c51e <_vsniprintf_r+0x1a>
 800c512:	238b      	movs	r3, #139	@ 0x8b
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	f04f 30ff 	mov.w	r0, #4294967295
 800c51a:	b01b      	add	sp, #108	@ 0x6c
 800c51c:	bd30      	pop	{r4, r5, pc}
 800c51e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c522:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c526:	f04f 0300 	mov.w	r3, #0
 800c52a:	9319      	str	r3, [sp, #100]	@ 0x64
 800c52c:	bf14      	ite	ne
 800c52e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c532:	4623      	moveq	r3, r4
 800c534:	9302      	str	r3, [sp, #8]
 800c536:	9305      	str	r3, [sp, #20]
 800c538:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c53c:	9100      	str	r1, [sp, #0]
 800c53e:	9104      	str	r1, [sp, #16]
 800c540:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c544:	4669      	mov	r1, sp
 800c546:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c548:	f000 f9ce 	bl	800c8e8 <_svfiprintf_r>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	bfbc      	itt	lt
 800c550:	238b      	movlt	r3, #139	@ 0x8b
 800c552:	602b      	strlt	r3, [r5, #0]
 800c554:	2c00      	cmp	r4, #0
 800c556:	d0e0      	beq.n	800c51a <_vsniprintf_r+0x16>
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	2200      	movs	r2, #0
 800c55c:	701a      	strb	r2, [r3, #0]
 800c55e:	e7dc      	b.n	800c51a <_vsniprintf_r+0x16>

0800c560 <vsniprintf>:
 800c560:	b507      	push	{r0, r1, r2, lr}
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	460a      	mov	r2, r1
 800c568:	4601      	mov	r1, r0
 800c56a:	4803      	ldr	r0, [pc, #12]	@ (800c578 <vsniprintf+0x18>)
 800c56c:	6800      	ldr	r0, [r0, #0]
 800c56e:	f7ff ffc9 	bl	800c504 <_vsniprintf_r>
 800c572:	b003      	add	sp, #12
 800c574:	f85d fb04 	ldr.w	pc, [sp], #4
 800c578:	200001c8 	.word	0x200001c8

0800c57c <memset>:
 800c57c:	4402      	add	r2, r0
 800c57e:	4603      	mov	r3, r0
 800c580:	4293      	cmp	r3, r2
 800c582:	d100      	bne.n	800c586 <memset+0xa>
 800c584:	4770      	bx	lr
 800c586:	f803 1b01 	strb.w	r1, [r3], #1
 800c58a:	e7f9      	b.n	800c580 <memset+0x4>

0800c58c <strncpy>:
 800c58c:	b510      	push	{r4, lr}
 800c58e:	3901      	subs	r1, #1
 800c590:	4603      	mov	r3, r0
 800c592:	b132      	cbz	r2, 800c5a2 <strncpy+0x16>
 800c594:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c598:	f803 4b01 	strb.w	r4, [r3], #1
 800c59c:	3a01      	subs	r2, #1
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	d1f7      	bne.n	800c592 <strncpy+0x6>
 800c5a2:	441a      	add	r2, r3
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d100      	bne.n	800c5ac <strncpy+0x20>
 800c5aa:	bd10      	pop	{r4, pc}
 800c5ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b0:	e7f9      	b.n	800c5a6 <strncpy+0x1a>

0800c5b2 <strnlen>:
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	4401      	add	r1, r0
 800c5b8:	428a      	cmp	r2, r1
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	d003      	beq.n	800c5c6 <strnlen+0x14>
 800c5be:	781c      	ldrb	r4, [r3, #0]
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d1f8      	bne.n	800c5b8 <strnlen+0x6>
 800c5c6:	1a18      	subs	r0, r3, r0
 800c5c8:	bd10      	pop	{r4, pc}
	...

0800c5cc <__errno>:
 800c5cc:	4b01      	ldr	r3, [pc, #4]	@ (800c5d4 <__errno+0x8>)
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	200001c8 	.word	0x200001c8

0800c5d8 <__libc_init_array>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	4d0d      	ldr	r5, [pc, #52]	@ (800c610 <__libc_init_array+0x38>)
 800c5dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c614 <__libc_init_array+0x3c>)
 800c5de:	1b64      	subs	r4, r4, r5
 800c5e0:	10a4      	asrs	r4, r4, #2
 800c5e2:	2600      	movs	r6, #0
 800c5e4:	42a6      	cmp	r6, r4
 800c5e6:	d109      	bne.n	800c5fc <__libc_init_array+0x24>
 800c5e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c618 <__libc_init_array+0x40>)
 800c5ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c61c <__libc_init_array+0x44>)
 800c5ec:	f000 fc64 	bl	800ceb8 <_init>
 800c5f0:	1b64      	subs	r4, r4, r5
 800c5f2:	10a4      	asrs	r4, r4, #2
 800c5f4:	2600      	movs	r6, #0
 800c5f6:	42a6      	cmp	r6, r4
 800c5f8:	d105      	bne.n	800c606 <__libc_init_array+0x2e>
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c600:	4798      	blx	r3
 800c602:	3601      	adds	r6, #1
 800c604:	e7ee      	b.n	800c5e4 <__libc_init_array+0xc>
 800c606:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60a:	4798      	blx	r3
 800c60c:	3601      	adds	r6, #1
 800c60e:	e7f2      	b.n	800c5f6 <__libc_init_array+0x1e>
 800c610:	0800d270 	.word	0x0800d270
 800c614:	0800d270 	.word	0x0800d270
 800c618:	0800d270 	.word	0x0800d270
 800c61c:	0800d274 	.word	0x0800d274

0800c620 <__retarget_lock_acquire_recursive>:
 800c620:	4770      	bx	lr

0800c622 <__retarget_lock_release_recursive>:
 800c622:	4770      	bx	lr

0800c624 <memcpy>:
 800c624:	440a      	add	r2, r1
 800c626:	4291      	cmp	r1, r2
 800c628:	f100 33ff 	add.w	r3, r0, #4294967295
 800c62c:	d100      	bne.n	800c630 <memcpy+0xc>
 800c62e:	4770      	bx	lr
 800c630:	b510      	push	{r4, lr}
 800c632:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c63a:	4291      	cmp	r1, r2
 800c63c:	d1f9      	bne.n	800c632 <memcpy+0xe>
 800c63e:	bd10      	pop	{r4, pc}

0800c640 <_free_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4605      	mov	r5, r0
 800c644:	2900      	cmp	r1, #0
 800c646:	d041      	beq.n	800c6cc <_free_r+0x8c>
 800c648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c64c:	1f0c      	subs	r4, r1, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	bfb8      	it	lt
 800c652:	18e4      	addlt	r4, r4, r3
 800c654:	f000 f8e0 	bl	800c818 <__malloc_lock>
 800c658:	4a1d      	ldr	r2, [pc, #116]	@ (800c6d0 <_free_r+0x90>)
 800c65a:	6813      	ldr	r3, [r2, #0]
 800c65c:	b933      	cbnz	r3, 800c66c <_free_r+0x2c>
 800c65e:	6063      	str	r3, [r4, #4]
 800c660:	6014      	str	r4, [r2, #0]
 800c662:	4628      	mov	r0, r5
 800c664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c668:	f000 b8dc 	b.w	800c824 <__malloc_unlock>
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d908      	bls.n	800c682 <_free_r+0x42>
 800c670:	6820      	ldr	r0, [r4, #0]
 800c672:	1821      	adds	r1, r4, r0
 800c674:	428b      	cmp	r3, r1
 800c676:	bf01      	itttt	eq
 800c678:	6819      	ldreq	r1, [r3, #0]
 800c67a:	685b      	ldreq	r3, [r3, #4]
 800c67c:	1809      	addeq	r1, r1, r0
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	e7ed      	b.n	800c65e <_free_r+0x1e>
 800c682:	461a      	mov	r2, r3
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	b10b      	cbz	r3, 800c68c <_free_r+0x4c>
 800c688:	42a3      	cmp	r3, r4
 800c68a:	d9fa      	bls.n	800c682 <_free_r+0x42>
 800c68c:	6811      	ldr	r1, [r2, #0]
 800c68e:	1850      	adds	r0, r2, r1
 800c690:	42a0      	cmp	r0, r4
 800c692:	d10b      	bne.n	800c6ac <_free_r+0x6c>
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	4401      	add	r1, r0
 800c698:	1850      	adds	r0, r2, r1
 800c69a:	4283      	cmp	r3, r0
 800c69c:	6011      	str	r1, [r2, #0]
 800c69e:	d1e0      	bne.n	800c662 <_free_r+0x22>
 800c6a0:	6818      	ldr	r0, [r3, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	6053      	str	r3, [r2, #4]
 800c6a6:	4408      	add	r0, r1
 800c6a8:	6010      	str	r0, [r2, #0]
 800c6aa:	e7da      	b.n	800c662 <_free_r+0x22>
 800c6ac:	d902      	bls.n	800c6b4 <_free_r+0x74>
 800c6ae:	230c      	movs	r3, #12
 800c6b0:	602b      	str	r3, [r5, #0]
 800c6b2:	e7d6      	b.n	800c662 <_free_r+0x22>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	1821      	adds	r1, r4, r0
 800c6b8:	428b      	cmp	r3, r1
 800c6ba:	bf04      	itt	eq
 800c6bc:	6819      	ldreq	r1, [r3, #0]
 800c6be:	685b      	ldreq	r3, [r3, #4]
 800c6c0:	6063      	str	r3, [r4, #4]
 800c6c2:	bf04      	itt	eq
 800c6c4:	1809      	addeq	r1, r1, r0
 800c6c6:	6021      	streq	r1, [r4, #0]
 800c6c8:	6054      	str	r4, [r2, #4]
 800c6ca:	e7ca      	b.n	800c662 <_free_r+0x22>
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	bf00      	nop
 800c6d0:	2000412c 	.word	0x2000412c

0800c6d4 <sbrk_aligned>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4e0f      	ldr	r6, [pc, #60]	@ (800c714 <sbrk_aligned+0x40>)
 800c6d8:	460c      	mov	r4, r1
 800c6da:	6831      	ldr	r1, [r6, #0]
 800c6dc:	4605      	mov	r5, r0
 800c6de:	b911      	cbnz	r1, 800c6e6 <sbrk_aligned+0x12>
 800c6e0:	f000 fba4 	bl	800ce2c <_sbrk_r>
 800c6e4:	6030      	str	r0, [r6, #0]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 fb9f 	bl	800ce2c <_sbrk_r>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d103      	bne.n	800c6fa <sbrk_aligned+0x26>
 800c6f2:	f04f 34ff 	mov.w	r4, #4294967295
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	1cc4      	adds	r4, r0, #3
 800c6fc:	f024 0403 	bic.w	r4, r4, #3
 800c700:	42a0      	cmp	r0, r4
 800c702:	d0f8      	beq.n	800c6f6 <sbrk_aligned+0x22>
 800c704:	1a21      	subs	r1, r4, r0
 800c706:	4628      	mov	r0, r5
 800c708:	f000 fb90 	bl	800ce2c <_sbrk_r>
 800c70c:	3001      	adds	r0, #1
 800c70e:	d1f2      	bne.n	800c6f6 <sbrk_aligned+0x22>
 800c710:	e7ef      	b.n	800c6f2 <sbrk_aligned+0x1e>
 800c712:	bf00      	nop
 800c714:	20004128 	.word	0x20004128

0800c718 <_malloc_r>:
 800c718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c71c:	1ccd      	adds	r5, r1, #3
 800c71e:	f025 0503 	bic.w	r5, r5, #3
 800c722:	3508      	adds	r5, #8
 800c724:	2d0c      	cmp	r5, #12
 800c726:	bf38      	it	cc
 800c728:	250c      	movcc	r5, #12
 800c72a:	2d00      	cmp	r5, #0
 800c72c:	4606      	mov	r6, r0
 800c72e:	db01      	blt.n	800c734 <_malloc_r+0x1c>
 800c730:	42a9      	cmp	r1, r5
 800c732:	d904      	bls.n	800c73e <_malloc_r+0x26>
 800c734:	230c      	movs	r3, #12
 800c736:	6033      	str	r3, [r6, #0]
 800c738:	2000      	movs	r0, #0
 800c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c814 <_malloc_r+0xfc>
 800c742:	f000 f869 	bl	800c818 <__malloc_lock>
 800c746:	f8d8 3000 	ldr.w	r3, [r8]
 800c74a:	461c      	mov	r4, r3
 800c74c:	bb44      	cbnz	r4, 800c7a0 <_malloc_r+0x88>
 800c74e:	4629      	mov	r1, r5
 800c750:	4630      	mov	r0, r6
 800c752:	f7ff ffbf 	bl	800c6d4 <sbrk_aligned>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	4604      	mov	r4, r0
 800c75a:	d158      	bne.n	800c80e <_malloc_r+0xf6>
 800c75c:	f8d8 4000 	ldr.w	r4, [r8]
 800c760:	4627      	mov	r7, r4
 800c762:	2f00      	cmp	r7, #0
 800c764:	d143      	bne.n	800c7ee <_malloc_r+0xd6>
 800c766:	2c00      	cmp	r4, #0
 800c768:	d04b      	beq.n	800c802 <_malloc_r+0xea>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	4639      	mov	r1, r7
 800c76e:	4630      	mov	r0, r6
 800c770:	eb04 0903 	add.w	r9, r4, r3
 800c774:	f000 fb5a 	bl	800ce2c <_sbrk_r>
 800c778:	4581      	cmp	r9, r0
 800c77a:	d142      	bne.n	800c802 <_malloc_r+0xea>
 800c77c:	6821      	ldr	r1, [r4, #0]
 800c77e:	1a6d      	subs	r5, r5, r1
 800c780:	4629      	mov	r1, r5
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff ffa6 	bl	800c6d4 <sbrk_aligned>
 800c788:	3001      	adds	r0, #1
 800c78a:	d03a      	beq.n	800c802 <_malloc_r+0xea>
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	442b      	add	r3, r5
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	f8d8 3000 	ldr.w	r3, [r8]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	bb62      	cbnz	r2, 800c7f4 <_malloc_r+0xdc>
 800c79a:	f8c8 7000 	str.w	r7, [r8]
 800c79e:	e00f      	b.n	800c7c0 <_malloc_r+0xa8>
 800c7a0:	6822      	ldr	r2, [r4, #0]
 800c7a2:	1b52      	subs	r2, r2, r5
 800c7a4:	d420      	bmi.n	800c7e8 <_malloc_r+0xd0>
 800c7a6:	2a0b      	cmp	r2, #11
 800c7a8:	d917      	bls.n	800c7da <_malloc_r+0xc2>
 800c7aa:	1961      	adds	r1, r4, r5
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	6025      	str	r5, [r4, #0]
 800c7b0:	bf18      	it	ne
 800c7b2:	6059      	strne	r1, [r3, #4]
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	bf08      	it	eq
 800c7b8:	f8c8 1000 	streq.w	r1, [r8]
 800c7bc:	5162      	str	r2, [r4, r5]
 800c7be:	604b      	str	r3, [r1, #4]
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f000 f82f 	bl	800c824 <__malloc_unlock>
 800c7c6:	f104 000b 	add.w	r0, r4, #11
 800c7ca:	1d23      	adds	r3, r4, #4
 800c7cc:	f020 0007 	bic.w	r0, r0, #7
 800c7d0:	1ac2      	subs	r2, r0, r3
 800c7d2:	bf1c      	itt	ne
 800c7d4:	1a1b      	subne	r3, r3, r0
 800c7d6:	50a3      	strne	r3, [r4, r2]
 800c7d8:	e7af      	b.n	800c73a <_malloc_r+0x22>
 800c7da:	6862      	ldr	r2, [r4, #4]
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	bf0c      	ite	eq
 800c7e0:	f8c8 2000 	streq.w	r2, [r8]
 800c7e4:	605a      	strne	r2, [r3, #4]
 800c7e6:	e7eb      	b.n	800c7c0 <_malloc_r+0xa8>
 800c7e8:	4623      	mov	r3, r4
 800c7ea:	6864      	ldr	r4, [r4, #4]
 800c7ec:	e7ae      	b.n	800c74c <_malloc_r+0x34>
 800c7ee:	463c      	mov	r4, r7
 800c7f0:	687f      	ldr	r7, [r7, #4]
 800c7f2:	e7b6      	b.n	800c762 <_malloc_r+0x4a>
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	d1fb      	bne.n	800c7f4 <_malloc_r+0xdc>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6053      	str	r3, [r2, #4]
 800c800:	e7de      	b.n	800c7c0 <_malloc_r+0xa8>
 800c802:	230c      	movs	r3, #12
 800c804:	6033      	str	r3, [r6, #0]
 800c806:	4630      	mov	r0, r6
 800c808:	f000 f80c 	bl	800c824 <__malloc_unlock>
 800c80c:	e794      	b.n	800c738 <_malloc_r+0x20>
 800c80e:	6005      	str	r5, [r0, #0]
 800c810:	e7d6      	b.n	800c7c0 <_malloc_r+0xa8>
 800c812:	bf00      	nop
 800c814:	2000412c 	.word	0x2000412c

0800c818 <__malloc_lock>:
 800c818:	4801      	ldr	r0, [pc, #4]	@ (800c820 <__malloc_lock+0x8>)
 800c81a:	f7ff bf01 	b.w	800c620 <__retarget_lock_acquire_recursive>
 800c81e:	bf00      	nop
 800c820:	20004124 	.word	0x20004124

0800c824 <__malloc_unlock>:
 800c824:	4801      	ldr	r0, [pc, #4]	@ (800c82c <__malloc_unlock+0x8>)
 800c826:	f7ff befc 	b.w	800c622 <__retarget_lock_release_recursive>
 800c82a:	bf00      	nop
 800c82c:	20004124 	.word	0x20004124

0800c830 <__ssputs_r>:
 800c830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c834:	688e      	ldr	r6, [r1, #8]
 800c836:	461f      	mov	r7, r3
 800c838:	42be      	cmp	r6, r7
 800c83a:	680b      	ldr	r3, [r1, #0]
 800c83c:	4682      	mov	sl, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	4690      	mov	r8, r2
 800c842:	d82d      	bhi.n	800c8a0 <__ssputs_r+0x70>
 800c844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c848:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c84c:	d026      	beq.n	800c89c <__ssputs_r+0x6c>
 800c84e:	6965      	ldr	r5, [r4, #20]
 800c850:	6909      	ldr	r1, [r1, #16]
 800c852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c856:	eba3 0901 	sub.w	r9, r3, r1
 800c85a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c85e:	1c7b      	adds	r3, r7, #1
 800c860:	444b      	add	r3, r9
 800c862:	106d      	asrs	r5, r5, #1
 800c864:	429d      	cmp	r5, r3
 800c866:	bf38      	it	cc
 800c868:	461d      	movcc	r5, r3
 800c86a:	0553      	lsls	r3, r2, #21
 800c86c:	d527      	bpl.n	800c8be <__ssputs_r+0x8e>
 800c86e:	4629      	mov	r1, r5
 800c870:	f7ff ff52 	bl	800c718 <_malloc_r>
 800c874:	4606      	mov	r6, r0
 800c876:	b360      	cbz	r0, 800c8d2 <__ssputs_r+0xa2>
 800c878:	6921      	ldr	r1, [r4, #16]
 800c87a:	464a      	mov	r2, r9
 800c87c:	f7ff fed2 	bl	800c624 <memcpy>
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	6126      	str	r6, [r4, #16]
 800c88e:	6165      	str	r5, [r4, #20]
 800c890:	444e      	add	r6, r9
 800c892:	eba5 0509 	sub.w	r5, r5, r9
 800c896:	6026      	str	r6, [r4, #0]
 800c898:	60a5      	str	r5, [r4, #8]
 800c89a:	463e      	mov	r6, r7
 800c89c:	42be      	cmp	r6, r7
 800c89e:	d900      	bls.n	800c8a2 <__ssputs_r+0x72>
 800c8a0:	463e      	mov	r6, r7
 800c8a2:	6820      	ldr	r0, [r4, #0]
 800c8a4:	4632      	mov	r2, r6
 800c8a6:	4641      	mov	r1, r8
 800c8a8:	f000 faa6 	bl	800cdf8 <memmove>
 800c8ac:	68a3      	ldr	r3, [r4, #8]
 800c8ae:	1b9b      	subs	r3, r3, r6
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	4433      	add	r3, r6
 800c8b6:	6023      	str	r3, [r4, #0]
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8be:	462a      	mov	r2, r5
 800c8c0:	f000 fac4 	bl	800ce4c <_realloc_r>
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d1e0      	bne.n	800c88c <__ssputs_r+0x5c>
 800c8ca:	6921      	ldr	r1, [r4, #16]
 800c8cc:	4650      	mov	r0, sl
 800c8ce:	f7ff feb7 	bl	800c640 <_free_r>
 800c8d2:	230c      	movs	r3, #12
 800c8d4:	f8ca 3000 	str.w	r3, [sl]
 800c8d8:	89a3      	ldrh	r3, [r4, #12]
 800c8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8de:	81a3      	strh	r3, [r4, #12]
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	e7e9      	b.n	800c8ba <__ssputs_r+0x8a>
	...

0800c8e8 <_svfiprintf_r>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	4698      	mov	r8, r3
 800c8ee:	898b      	ldrh	r3, [r1, #12]
 800c8f0:	061b      	lsls	r3, r3, #24
 800c8f2:	b09d      	sub	sp, #116	@ 0x74
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	460d      	mov	r5, r1
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	d510      	bpl.n	800c91e <_svfiprintf_r+0x36>
 800c8fc:	690b      	ldr	r3, [r1, #16]
 800c8fe:	b973      	cbnz	r3, 800c91e <_svfiprintf_r+0x36>
 800c900:	2140      	movs	r1, #64	@ 0x40
 800c902:	f7ff ff09 	bl	800c718 <_malloc_r>
 800c906:	6028      	str	r0, [r5, #0]
 800c908:	6128      	str	r0, [r5, #16]
 800c90a:	b930      	cbnz	r0, 800c91a <_svfiprintf_r+0x32>
 800c90c:	230c      	movs	r3, #12
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	f04f 30ff 	mov.w	r0, #4294967295
 800c914:	b01d      	add	sp, #116	@ 0x74
 800c916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91a:	2340      	movs	r3, #64	@ 0x40
 800c91c:	616b      	str	r3, [r5, #20]
 800c91e:	2300      	movs	r3, #0
 800c920:	9309      	str	r3, [sp, #36]	@ 0x24
 800c922:	2320      	movs	r3, #32
 800c924:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c928:	f8cd 800c 	str.w	r8, [sp, #12]
 800c92c:	2330      	movs	r3, #48	@ 0x30
 800c92e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cacc <_svfiprintf_r+0x1e4>
 800c932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c936:	f04f 0901 	mov.w	r9, #1
 800c93a:	4623      	mov	r3, r4
 800c93c:	469a      	mov	sl, r3
 800c93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c942:	b10a      	cbz	r2, 800c948 <_svfiprintf_r+0x60>
 800c944:	2a25      	cmp	r2, #37	@ 0x25
 800c946:	d1f9      	bne.n	800c93c <_svfiprintf_r+0x54>
 800c948:	ebba 0b04 	subs.w	fp, sl, r4
 800c94c:	d00b      	beq.n	800c966 <_svfiprintf_r+0x7e>
 800c94e:	465b      	mov	r3, fp
 800c950:	4622      	mov	r2, r4
 800c952:	4629      	mov	r1, r5
 800c954:	4638      	mov	r0, r7
 800c956:	f7ff ff6b 	bl	800c830 <__ssputs_r>
 800c95a:	3001      	adds	r0, #1
 800c95c:	f000 80a7 	beq.w	800caae <_svfiprintf_r+0x1c6>
 800c960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c962:	445a      	add	r2, fp
 800c964:	9209      	str	r2, [sp, #36]	@ 0x24
 800c966:	f89a 3000 	ldrb.w	r3, [sl]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 809f 	beq.w	800caae <_svfiprintf_r+0x1c6>
 800c970:	2300      	movs	r3, #0
 800c972:	f04f 32ff 	mov.w	r2, #4294967295
 800c976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c97a:	f10a 0a01 	add.w	sl, sl, #1
 800c97e:	9304      	str	r3, [sp, #16]
 800c980:	9307      	str	r3, [sp, #28]
 800c982:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c986:	931a      	str	r3, [sp, #104]	@ 0x68
 800c988:	4654      	mov	r4, sl
 800c98a:	2205      	movs	r2, #5
 800c98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c990:	484e      	ldr	r0, [pc, #312]	@ (800cacc <_svfiprintf_r+0x1e4>)
 800c992:	f7f3 fc35 	bl	8000200 <memchr>
 800c996:	9a04      	ldr	r2, [sp, #16]
 800c998:	b9d8      	cbnz	r0, 800c9d2 <_svfiprintf_r+0xea>
 800c99a:	06d0      	lsls	r0, r2, #27
 800c99c:	bf44      	itt	mi
 800c99e:	2320      	movmi	r3, #32
 800c9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9a4:	0711      	lsls	r1, r2, #28
 800c9a6:	bf44      	itt	mi
 800c9a8:	232b      	movmi	r3, #43	@ 0x2b
 800c9aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c9b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9b4:	d015      	beq.n	800c9e2 <_svfiprintf_r+0xfa>
 800c9b6:	9a07      	ldr	r2, [sp, #28]
 800c9b8:	4654      	mov	r4, sl
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	f04f 0c0a 	mov.w	ip, #10
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9c6:	3b30      	subs	r3, #48	@ 0x30
 800c9c8:	2b09      	cmp	r3, #9
 800c9ca:	d94b      	bls.n	800ca64 <_svfiprintf_r+0x17c>
 800c9cc:	b1b0      	cbz	r0, 800c9fc <_svfiprintf_r+0x114>
 800c9ce:	9207      	str	r2, [sp, #28]
 800c9d0:	e014      	b.n	800c9fc <_svfiprintf_r+0x114>
 800c9d2:	eba0 0308 	sub.w	r3, r0, r8
 800c9d6:	fa09 f303 	lsl.w	r3, r9, r3
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	46a2      	mov	sl, r4
 800c9e0:	e7d2      	b.n	800c988 <_svfiprintf_r+0xa0>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	1d19      	adds	r1, r3, #4
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	9103      	str	r1, [sp, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bfbb      	ittet	lt
 800c9ee:	425b      	neglt	r3, r3
 800c9f0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9f4:	9307      	strge	r3, [sp, #28]
 800c9f6:	9307      	strlt	r3, [sp, #28]
 800c9f8:	bfb8      	it	lt
 800c9fa:	9204      	strlt	r2, [sp, #16]
 800c9fc:	7823      	ldrb	r3, [r4, #0]
 800c9fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca00:	d10a      	bne.n	800ca18 <_svfiprintf_r+0x130>
 800ca02:	7863      	ldrb	r3, [r4, #1]
 800ca04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca06:	d132      	bne.n	800ca6e <_svfiprintf_r+0x186>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	1d1a      	adds	r2, r3, #4
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	9203      	str	r2, [sp, #12]
 800ca10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca14:	3402      	adds	r4, #2
 800ca16:	9305      	str	r3, [sp, #20]
 800ca18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cadc <_svfiprintf_r+0x1f4>
 800ca1c:	7821      	ldrb	r1, [r4, #0]
 800ca1e:	2203      	movs	r2, #3
 800ca20:	4650      	mov	r0, sl
 800ca22:	f7f3 fbed 	bl	8000200 <memchr>
 800ca26:	b138      	cbz	r0, 800ca38 <_svfiprintf_r+0x150>
 800ca28:	9b04      	ldr	r3, [sp, #16]
 800ca2a:	eba0 000a 	sub.w	r0, r0, sl
 800ca2e:	2240      	movs	r2, #64	@ 0x40
 800ca30:	4082      	lsls	r2, r0
 800ca32:	4313      	orrs	r3, r2
 800ca34:	3401      	adds	r4, #1
 800ca36:	9304      	str	r3, [sp, #16]
 800ca38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca3c:	4824      	ldr	r0, [pc, #144]	@ (800cad0 <_svfiprintf_r+0x1e8>)
 800ca3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca42:	2206      	movs	r2, #6
 800ca44:	f7f3 fbdc 	bl	8000200 <memchr>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d036      	beq.n	800caba <_svfiprintf_r+0x1d2>
 800ca4c:	4b21      	ldr	r3, [pc, #132]	@ (800cad4 <_svfiprintf_r+0x1ec>)
 800ca4e:	bb1b      	cbnz	r3, 800ca98 <_svfiprintf_r+0x1b0>
 800ca50:	9b03      	ldr	r3, [sp, #12]
 800ca52:	3307      	adds	r3, #7
 800ca54:	f023 0307 	bic.w	r3, r3, #7
 800ca58:	3308      	adds	r3, #8
 800ca5a:	9303      	str	r3, [sp, #12]
 800ca5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca5e:	4433      	add	r3, r6
 800ca60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca62:	e76a      	b.n	800c93a <_svfiprintf_r+0x52>
 800ca64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca68:	460c      	mov	r4, r1
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	e7a8      	b.n	800c9c0 <_svfiprintf_r+0xd8>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	3401      	adds	r4, #1
 800ca72:	9305      	str	r3, [sp, #20]
 800ca74:	4619      	mov	r1, r3
 800ca76:	f04f 0c0a 	mov.w	ip, #10
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca80:	3a30      	subs	r2, #48	@ 0x30
 800ca82:	2a09      	cmp	r2, #9
 800ca84:	d903      	bls.n	800ca8e <_svfiprintf_r+0x1a6>
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0c6      	beq.n	800ca18 <_svfiprintf_r+0x130>
 800ca8a:	9105      	str	r1, [sp, #20]
 800ca8c:	e7c4      	b.n	800ca18 <_svfiprintf_r+0x130>
 800ca8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca92:	4604      	mov	r4, r0
 800ca94:	2301      	movs	r3, #1
 800ca96:	e7f0      	b.n	800ca7a <_svfiprintf_r+0x192>
 800ca98:	ab03      	add	r3, sp, #12
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	462a      	mov	r2, r5
 800ca9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cad8 <_svfiprintf_r+0x1f0>)
 800caa0:	a904      	add	r1, sp, #16
 800caa2:	4638      	mov	r0, r7
 800caa4:	f3af 8000 	nop.w
 800caa8:	1c42      	adds	r2, r0, #1
 800caaa:	4606      	mov	r6, r0
 800caac:	d1d6      	bne.n	800ca5c <_svfiprintf_r+0x174>
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	065b      	lsls	r3, r3, #25
 800cab2:	f53f af2d 	bmi.w	800c910 <_svfiprintf_r+0x28>
 800cab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cab8:	e72c      	b.n	800c914 <_svfiprintf_r+0x2c>
 800caba:	ab03      	add	r3, sp, #12
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	462a      	mov	r2, r5
 800cac0:	4b05      	ldr	r3, [pc, #20]	@ (800cad8 <_svfiprintf_r+0x1f0>)
 800cac2:	a904      	add	r1, sp, #16
 800cac4:	4638      	mov	r0, r7
 800cac6:	f000 f879 	bl	800cbbc <_printf_i>
 800caca:	e7ed      	b.n	800caa8 <_svfiprintf_r+0x1c0>
 800cacc:	0800d234 	.word	0x0800d234
 800cad0:	0800d23e 	.word	0x0800d23e
 800cad4:	00000000 	.word	0x00000000
 800cad8:	0800c831 	.word	0x0800c831
 800cadc:	0800d23a 	.word	0x0800d23a

0800cae0 <_printf_common>:
 800cae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae4:	4616      	mov	r6, r2
 800cae6:	4698      	mov	r8, r3
 800cae8:	688a      	ldr	r2, [r1, #8]
 800caea:	690b      	ldr	r3, [r1, #16]
 800caec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800caf0:	4293      	cmp	r3, r2
 800caf2:	bfb8      	it	lt
 800caf4:	4613      	movlt	r3, r2
 800caf6:	6033      	str	r3, [r6, #0]
 800caf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cafc:	4607      	mov	r7, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	b10a      	cbz	r2, 800cb06 <_printf_common+0x26>
 800cb02:	3301      	adds	r3, #1
 800cb04:	6033      	str	r3, [r6, #0]
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	0699      	lsls	r1, r3, #26
 800cb0a:	bf42      	ittt	mi
 800cb0c:	6833      	ldrmi	r3, [r6, #0]
 800cb0e:	3302      	addmi	r3, #2
 800cb10:	6033      	strmi	r3, [r6, #0]
 800cb12:	6825      	ldr	r5, [r4, #0]
 800cb14:	f015 0506 	ands.w	r5, r5, #6
 800cb18:	d106      	bne.n	800cb28 <_printf_common+0x48>
 800cb1a:	f104 0a19 	add.w	sl, r4, #25
 800cb1e:	68e3      	ldr	r3, [r4, #12]
 800cb20:	6832      	ldr	r2, [r6, #0]
 800cb22:	1a9b      	subs	r3, r3, r2
 800cb24:	42ab      	cmp	r3, r5
 800cb26:	dc26      	bgt.n	800cb76 <_printf_common+0x96>
 800cb28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb2c:	6822      	ldr	r2, [r4, #0]
 800cb2e:	3b00      	subs	r3, #0
 800cb30:	bf18      	it	ne
 800cb32:	2301      	movne	r3, #1
 800cb34:	0692      	lsls	r2, r2, #26
 800cb36:	d42b      	bmi.n	800cb90 <_printf_common+0xb0>
 800cb38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb3c:	4641      	mov	r1, r8
 800cb3e:	4638      	mov	r0, r7
 800cb40:	47c8      	blx	r9
 800cb42:	3001      	adds	r0, #1
 800cb44:	d01e      	beq.n	800cb84 <_printf_common+0xa4>
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	6922      	ldr	r2, [r4, #16]
 800cb4a:	f003 0306 	and.w	r3, r3, #6
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	bf02      	ittt	eq
 800cb52:	68e5      	ldreq	r5, [r4, #12]
 800cb54:	6833      	ldreq	r3, [r6, #0]
 800cb56:	1aed      	subeq	r5, r5, r3
 800cb58:	68a3      	ldr	r3, [r4, #8]
 800cb5a:	bf0c      	ite	eq
 800cb5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb60:	2500      	movne	r5, #0
 800cb62:	4293      	cmp	r3, r2
 800cb64:	bfc4      	itt	gt
 800cb66:	1a9b      	subgt	r3, r3, r2
 800cb68:	18ed      	addgt	r5, r5, r3
 800cb6a:	2600      	movs	r6, #0
 800cb6c:	341a      	adds	r4, #26
 800cb6e:	42b5      	cmp	r5, r6
 800cb70:	d11a      	bne.n	800cba8 <_printf_common+0xc8>
 800cb72:	2000      	movs	r0, #0
 800cb74:	e008      	b.n	800cb88 <_printf_common+0xa8>
 800cb76:	2301      	movs	r3, #1
 800cb78:	4652      	mov	r2, sl
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	47c8      	blx	r9
 800cb80:	3001      	adds	r0, #1
 800cb82:	d103      	bne.n	800cb8c <_printf_common+0xac>
 800cb84:	f04f 30ff 	mov.w	r0, #4294967295
 800cb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb8c:	3501      	adds	r5, #1
 800cb8e:	e7c6      	b.n	800cb1e <_printf_common+0x3e>
 800cb90:	18e1      	adds	r1, r4, r3
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	2030      	movs	r0, #48	@ 0x30
 800cb96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cb9a:	4422      	add	r2, r4
 800cb9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cba4:	3302      	adds	r3, #2
 800cba6:	e7c7      	b.n	800cb38 <_printf_common+0x58>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	4622      	mov	r2, r4
 800cbac:	4641      	mov	r1, r8
 800cbae:	4638      	mov	r0, r7
 800cbb0:	47c8      	blx	r9
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	d0e6      	beq.n	800cb84 <_printf_common+0xa4>
 800cbb6:	3601      	adds	r6, #1
 800cbb8:	e7d9      	b.n	800cb6e <_printf_common+0x8e>
	...

0800cbbc <_printf_i>:
 800cbbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc0:	7e0f      	ldrb	r7, [r1, #24]
 800cbc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbc4:	2f78      	cmp	r7, #120	@ 0x78
 800cbc6:	4691      	mov	r9, r2
 800cbc8:	4680      	mov	r8, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	469a      	mov	sl, r3
 800cbce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbd2:	d807      	bhi.n	800cbe4 <_printf_i+0x28>
 800cbd4:	2f62      	cmp	r7, #98	@ 0x62
 800cbd6:	d80a      	bhi.n	800cbee <_printf_i+0x32>
 800cbd8:	2f00      	cmp	r7, #0
 800cbda:	f000 80d1 	beq.w	800cd80 <_printf_i+0x1c4>
 800cbde:	2f58      	cmp	r7, #88	@ 0x58
 800cbe0:	f000 80b8 	beq.w	800cd54 <_printf_i+0x198>
 800cbe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbec:	e03a      	b.n	800cc64 <_printf_i+0xa8>
 800cbee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cbf2:	2b15      	cmp	r3, #21
 800cbf4:	d8f6      	bhi.n	800cbe4 <_printf_i+0x28>
 800cbf6:	a101      	add	r1, pc, #4	@ (adr r1, 800cbfc <_printf_i+0x40>)
 800cbf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbfc:	0800cc55 	.word	0x0800cc55
 800cc00:	0800cc69 	.word	0x0800cc69
 800cc04:	0800cbe5 	.word	0x0800cbe5
 800cc08:	0800cbe5 	.word	0x0800cbe5
 800cc0c:	0800cbe5 	.word	0x0800cbe5
 800cc10:	0800cbe5 	.word	0x0800cbe5
 800cc14:	0800cc69 	.word	0x0800cc69
 800cc18:	0800cbe5 	.word	0x0800cbe5
 800cc1c:	0800cbe5 	.word	0x0800cbe5
 800cc20:	0800cbe5 	.word	0x0800cbe5
 800cc24:	0800cbe5 	.word	0x0800cbe5
 800cc28:	0800cd67 	.word	0x0800cd67
 800cc2c:	0800cc93 	.word	0x0800cc93
 800cc30:	0800cd21 	.word	0x0800cd21
 800cc34:	0800cbe5 	.word	0x0800cbe5
 800cc38:	0800cbe5 	.word	0x0800cbe5
 800cc3c:	0800cd89 	.word	0x0800cd89
 800cc40:	0800cbe5 	.word	0x0800cbe5
 800cc44:	0800cc93 	.word	0x0800cc93
 800cc48:	0800cbe5 	.word	0x0800cbe5
 800cc4c:	0800cbe5 	.word	0x0800cbe5
 800cc50:	0800cd29 	.word	0x0800cd29
 800cc54:	6833      	ldr	r3, [r6, #0]
 800cc56:	1d1a      	adds	r2, r3, #4
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6032      	str	r2, [r6, #0]
 800cc5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc64:	2301      	movs	r3, #1
 800cc66:	e09c      	b.n	800cda2 <_printf_i+0x1e6>
 800cc68:	6833      	ldr	r3, [r6, #0]
 800cc6a:	6820      	ldr	r0, [r4, #0]
 800cc6c:	1d19      	adds	r1, r3, #4
 800cc6e:	6031      	str	r1, [r6, #0]
 800cc70:	0606      	lsls	r6, r0, #24
 800cc72:	d501      	bpl.n	800cc78 <_printf_i+0xbc>
 800cc74:	681d      	ldr	r5, [r3, #0]
 800cc76:	e003      	b.n	800cc80 <_printf_i+0xc4>
 800cc78:	0645      	lsls	r5, r0, #25
 800cc7a:	d5fb      	bpl.n	800cc74 <_printf_i+0xb8>
 800cc7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc80:	2d00      	cmp	r5, #0
 800cc82:	da03      	bge.n	800cc8c <_printf_i+0xd0>
 800cc84:	232d      	movs	r3, #45	@ 0x2d
 800cc86:	426d      	negs	r5, r5
 800cc88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc8c:	4858      	ldr	r0, [pc, #352]	@ (800cdf0 <_printf_i+0x234>)
 800cc8e:	230a      	movs	r3, #10
 800cc90:	e011      	b.n	800ccb6 <_printf_i+0xfa>
 800cc92:	6821      	ldr	r1, [r4, #0]
 800cc94:	6833      	ldr	r3, [r6, #0]
 800cc96:	0608      	lsls	r0, r1, #24
 800cc98:	f853 5b04 	ldr.w	r5, [r3], #4
 800cc9c:	d402      	bmi.n	800cca4 <_printf_i+0xe8>
 800cc9e:	0649      	lsls	r1, r1, #25
 800cca0:	bf48      	it	mi
 800cca2:	b2ad      	uxthmi	r5, r5
 800cca4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cca6:	4852      	ldr	r0, [pc, #328]	@ (800cdf0 <_printf_i+0x234>)
 800cca8:	6033      	str	r3, [r6, #0]
 800ccaa:	bf14      	ite	ne
 800ccac:	230a      	movne	r3, #10
 800ccae:	2308      	moveq	r3, #8
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccb6:	6866      	ldr	r6, [r4, #4]
 800ccb8:	60a6      	str	r6, [r4, #8]
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	db05      	blt.n	800ccca <_printf_i+0x10e>
 800ccbe:	6821      	ldr	r1, [r4, #0]
 800ccc0:	432e      	orrs	r6, r5
 800ccc2:	f021 0104 	bic.w	r1, r1, #4
 800ccc6:	6021      	str	r1, [r4, #0]
 800ccc8:	d04b      	beq.n	800cd62 <_printf_i+0x1a6>
 800ccca:	4616      	mov	r6, r2
 800cccc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccd0:	fb03 5711 	mls	r7, r3, r1, r5
 800ccd4:	5dc7      	ldrb	r7, [r0, r7]
 800ccd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccda:	462f      	mov	r7, r5
 800ccdc:	42bb      	cmp	r3, r7
 800ccde:	460d      	mov	r5, r1
 800cce0:	d9f4      	bls.n	800cccc <_printf_i+0x110>
 800cce2:	2b08      	cmp	r3, #8
 800cce4:	d10b      	bne.n	800ccfe <_printf_i+0x142>
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	07df      	lsls	r7, r3, #31
 800ccea:	d508      	bpl.n	800ccfe <_printf_i+0x142>
 800ccec:	6923      	ldr	r3, [r4, #16]
 800ccee:	6861      	ldr	r1, [r4, #4]
 800ccf0:	4299      	cmp	r1, r3
 800ccf2:	bfde      	ittt	le
 800ccf4:	2330      	movle	r3, #48	@ 0x30
 800ccf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ccfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ccfe:	1b92      	subs	r2, r2, r6
 800cd00:	6122      	str	r2, [r4, #16]
 800cd02:	f8cd a000 	str.w	sl, [sp]
 800cd06:	464b      	mov	r3, r9
 800cd08:	aa03      	add	r2, sp, #12
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	f7ff fee7 	bl	800cae0 <_printf_common>
 800cd12:	3001      	adds	r0, #1
 800cd14:	d14a      	bne.n	800cdac <_printf_i+0x1f0>
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1a:	b004      	add	sp, #16
 800cd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	f043 0320 	orr.w	r3, r3, #32
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	4832      	ldr	r0, [pc, #200]	@ (800cdf4 <_printf_i+0x238>)
 800cd2a:	2778      	movs	r7, #120	@ 0x78
 800cd2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	6831      	ldr	r1, [r6, #0]
 800cd34:	061f      	lsls	r7, r3, #24
 800cd36:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd3a:	d402      	bmi.n	800cd42 <_printf_i+0x186>
 800cd3c:	065f      	lsls	r7, r3, #25
 800cd3e:	bf48      	it	mi
 800cd40:	b2ad      	uxthmi	r5, r5
 800cd42:	6031      	str	r1, [r6, #0]
 800cd44:	07d9      	lsls	r1, r3, #31
 800cd46:	bf44      	itt	mi
 800cd48:	f043 0320 	orrmi.w	r3, r3, #32
 800cd4c:	6023      	strmi	r3, [r4, #0]
 800cd4e:	b11d      	cbz	r5, 800cd58 <_printf_i+0x19c>
 800cd50:	2310      	movs	r3, #16
 800cd52:	e7ad      	b.n	800ccb0 <_printf_i+0xf4>
 800cd54:	4826      	ldr	r0, [pc, #152]	@ (800cdf0 <_printf_i+0x234>)
 800cd56:	e7e9      	b.n	800cd2c <_printf_i+0x170>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	f023 0320 	bic.w	r3, r3, #32
 800cd5e:	6023      	str	r3, [r4, #0]
 800cd60:	e7f6      	b.n	800cd50 <_printf_i+0x194>
 800cd62:	4616      	mov	r6, r2
 800cd64:	e7bd      	b.n	800cce2 <_printf_i+0x126>
 800cd66:	6833      	ldr	r3, [r6, #0]
 800cd68:	6825      	ldr	r5, [r4, #0]
 800cd6a:	6961      	ldr	r1, [r4, #20]
 800cd6c:	1d18      	adds	r0, r3, #4
 800cd6e:	6030      	str	r0, [r6, #0]
 800cd70:	062e      	lsls	r6, r5, #24
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	d501      	bpl.n	800cd7a <_printf_i+0x1be>
 800cd76:	6019      	str	r1, [r3, #0]
 800cd78:	e002      	b.n	800cd80 <_printf_i+0x1c4>
 800cd7a:	0668      	lsls	r0, r5, #25
 800cd7c:	d5fb      	bpl.n	800cd76 <_printf_i+0x1ba>
 800cd7e:	8019      	strh	r1, [r3, #0]
 800cd80:	2300      	movs	r3, #0
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	4616      	mov	r6, r2
 800cd86:	e7bc      	b.n	800cd02 <_printf_i+0x146>
 800cd88:	6833      	ldr	r3, [r6, #0]
 800cd8a:	1d1a      	adds	r2, r3, #4
 800cd8c:	6032      	str	r2, [r6, #0]
 800cd8e:	681e      	ldr	r6, [r3, #0]
 800cd90:	6862      	ldr	r2, [r4, #4]
 800cd92:	2100      	movs	r1, #0
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7f3 fa33 	bl	8000200 <memchr>
 800cd9a:	b108      	cbz	r0, 800cda0 <_printf_i+0x1e4>
 800cd9c:	1b80      	subs	r0, r0, r6
 800cd9e:	6060      	str	r0, [r4, #4]
 800cda0:	6863      	ldr	r3, [r4, #4]
 800cda2:	6123      	str	r3, [r4, #16]
 800cda4:	2300      	movs	r3, #0
 800cda6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdaa:	e7aa      	b.n	800cd02 <_printf_i+0x146>
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	4632      	mov	r2, r6
 800cdb0:	4649      	mov	r1, r9
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	47d0      	blx	sl
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	d0ad      	beq.n	800cd16 <_printf_i+0x15a>
 800cdba:	6823      	ldr	r3, [r4, #0]
 800cdbc:	079b      	lsls	r3, r3, #30
 800cdbe:	d413      	bmi.n	800cde8 <_printf_i+0x22c>
 800cdc0:	68e0      	ldr	r0, [r4, #12]
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	4298      	cmp	r0, r3
 800cdc6:	bfb8      	it	lt
 800cdc8:	4618      	movlt	r0, r3
 800cdca:	e7a6      	b.n	800cd1a <_printf_i+0x15e>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	4632      	mov	r2, r6
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	47d0      	blx	sl
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	d09d      	beq.n	800cd16 <_printf_i+0x15a>
 800cdda:	3501      	adds	r5, #1
 800cddc:	68e3      	ldr	r3, [r4, #12]
 800cdde:	9903      	ldr	r1, [sp, #12]
 800cde0:	1a5b      	subs	r3, r3, r1
 800cde2:	42ab      	cmp	r3, r5
 800cde4:	dcf2      	bgt.n	800cdcc <_printf_i+0x210>
 800cde6:	e7eb      	b.n	800cdc0 <_printf_i+0x204>
 800cde8:	2500      	movs	r5, #0
 800cdea:	f104 0619 	add.w	r6, r4, #25
 800cdee:	e7f5      	b.n	800cddc <_printf_i+0x220>
 800cdf0:	0800d245 	.word	0x0800d245
 800cdf4:	0800d256 	.word	0x0800d256

0800cdf8 <memmove>:
 800cdf8:	4288      	cmp	r0, r1
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	eb01 0402 	add.w	r4, r1, r2
 800ce00:	d902      	bls.n	800ce08 <memmove+0x10>
 800ce02:	4284      	cmp	r4, r0
 800ce04:	4623      	mov	r3, r4
 800ce06:	d807      	bhi.n	800ce18 <memmove+0x20>
 800ce08:	1e43      	subs	r3, r0, #1
 800ce0a:	42a1      	cmp	r1, r4
 800ce0c:	d008      	beq.n	800ce20 <memmove+0x28>
 800ce0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce16:	e7f8      	b.n	800ce0a <memmove+0x12>
 800ce18:	4402      	add	r2, r0
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	428a      	cmp	r2, r1
 800ce1e:	d100      	bne.n	800ce22 <memmove+0x2a>
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce2a:	e7f7      	b.n	800ce1c <memmove+0x24>

0800ce2c <_sbrk_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d06      	ldr	r5, [pc, #24]	@ (800ce48 <_sbrk_r+0x1c>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	602b      	str	r3, [r5, #0]
 800ce38:	f7f6 fb7c 	bl	8003534 <_sbrk>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_sbrk_r+0x1a>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_sbrk_r+0x1a>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20004120 	.word	0x20004120

0800ce4c <_realloc_r>:
 800ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce50:	4607      	mov	r7, r0
 800ce52:	4614      	mov	r4, r2
 800ce54:	460d      	mov	r5, r1
 800ce56:	b921      	cbnz	r1, 800ce62 <_realloc_r+0x16>
 800ce58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	f7ff bc5b 	b.w	800c718 <_malloc_r>
 800ce62:	b92a      	cbnz	r2, 800ce70 <_realloc_r+0x24>
 800ce64:	f7ff fbec 	bl	800c640 <_free_r>
 800ce68:	4625      	mov	r5, r4
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	f000 f81a 	bl	800cea8 <_malloc_usable_size_r>
 800ce74:	4284      	cmp	r4, r0
 800ce76:	4606      	mov	r6, r0
 800ce78:	d802      	bhi.n	800ce80 <_realloc_r+0x34>
 800ce7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce7e:	d8f4      	bhi.n	800ce6a <_realloc_r+0x1e>
 800ce80:	4621      	mov	r1, r4
 800ce82:	4638      	mov	r0, r7
 800ce84:	f7ff fc48 	bl	800c718 <_malloc_r>
 800ce88:	4680      	mov	r8, r0
 800ce8a:	b908      	cbnz	r0, 800ce90 <_realloc_r+0x44>
 800ce8c:	4645      	mov	r5, r8
 800ce8e:	e7ec      	b.n	800ce6a <_realloc_r+0x1e>
 800ce90:	42b4      	cmp	r4, r6
 800ce92:	4622      	mov	r2, r4
 800ce94:	4629      	mov	r1, r5
 800ce96:	bf28      	it	cs
 800ce98:	4632      	movcs	r2, r6
 800ce9a:	f7ff fbc3 	bl	800c624 <memcpy>
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7ff fbcd 	bl	800c640 <_free_r>
 800cea6:	e7f1      	b.n	800ce8c <_realloc_r+0x40>

0800cea8 <_malloc_usable_size_r>:
 800cea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceac:	1f18      	subs	r0, r3, #4
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	bfbc      	itt	lt
 800ceb2:	580b      	ldrlt	r3, [r1, r0]
 800ceb4:	18c0      	addlt	r0, r0, r3
 800ceb6:	4770      	bx	lr

0800ceb8 <_init>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr

0800cec4 <_fini>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr
