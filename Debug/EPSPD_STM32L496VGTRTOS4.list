
EPSPD_STM32L496VGTRTOS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d540  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800d6f0  0800d6f0  0000e6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb4  0800dbb4  0000f218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dbb4  0800dbb4  0000ebb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbbc  0800dbbc  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbbc  0800dbbc  0000ebbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbc0  0800dbc0  0000ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800dbc4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c4  20000218  0800dddc  0000f218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200042dc  0800dddc  0000f2dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bed0  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a2c  00000000  00000000  0003b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  00040b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001be1  00000000  00000000  00042eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030927  00000000  00000000  00044a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bec6  00000000  00000000  000753b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126c30  00000000  00000000  000a127e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7eae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d80  00000000  00000000  001c7ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001d1c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d6d8 	.word	0x0800d6d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	0800d6d8 	.word	0x0800d6d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <EPS_Log_Message>:

void EPS_Log_SetLevel(EPS_LogLevel level) {
    current_log_level = level;
}

void EPS_Log_Message(EPS_LogLevel level, const char *format, ...) {
 8000da8:	b40e      	push	{r1, r2, r3}
 8000daa:	b590      	push	{r4, r7, lr}
 8000dac:	b0cc      	sub	sp, #304	@ 0x130
 8000dae:	af04      	add	r7, sp, #16
 8000db0:	4602      	mov	r2, r0
 8000db2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000db6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dba:	701a      	strb	r2, [r3, #0]
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <EPS_Log_Message+0x10c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000dc4:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d867      	bhi.n	8000e9e <EPS_Log_Message+0xf6>
 8000dce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dd2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d060      	beq.n	8000e9e <EPS_Log_Message+0xf6>

    char buffer[LOG_BUFFER_SIZE];
    int offset = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    uint64_t counter;
    uint32_t subtick;
    GetSyncTimestamp(&counter, &subtick);
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 ff6b 	bl	8001cc8 <GetSyncTimestamp>

    offset += snprintf(buffer, LOG_BUFFER_SIZE, "%s[%llu.%06lu] ",
 8000df2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000df6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <EPS_Log_Message+0x110>)
 8000dfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e06:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000e0a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000e0e:	6809      	ldr	r1, [r1, #0]
 8000e10:	f107 0018 	add.w	r0, r7, #24
 8000e14:	9102      	str	r1, [sp, #8]
 8000e16:	e9cd 2300 	strd	r2, r3, [sp]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <EPS_Log_Message+0x114>)
 8000e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e22:	f00b ff39 	bl	800cc98 <sniprintf>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                       log_prefixes[level], counter, (unsigned long)subtick);

    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db33      	blt.n	8000ea2 <EPS_Log_Message+0xfa>
 8000e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e3e:	2bff      	cmp	r3, #255	@ 0xff
 8000e40:	dc2f      	bgt.n	8000ea2 <EPS_Log_Message+0xfa>

    va_list args;
    va_start(args, format);
 8000e42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e4e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, LOG_BUFFER_SIZE - offset, format, args);
 8000e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e54:	f107 0218 	add.w	r2, r7, #24
 8000e58:	18d0      	adds	r0, r2, r3
 8000e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e5e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e62:	4619      	mov	r1, r3
 8000e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e72:	f00b ff75 	bl	800cd60 <vsniprintf>
    va_end(args);

    size_t msg_len = strnlen(buffer, LOG_BUFFER_SIZE);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00b ffa7 	bl	800cdd2 <strnlen>
 8000e84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, msg_len, HAL_MAX_DELAY);
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0118 	add.w	r1, r7, #24
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <EPS_Log_Message+0x118>)
 8000e98:	f007 fdfc 	bl	8008a94 <HAL_UART_Transmit>
 8000e9c:	e002      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000ea2:	bf00      	nop
}
 8000ea4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000eae:	b003      	add	sp, #12
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000018 	.word	0x20000018
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	0800d71c 	.word	0x0800d71c
 8000ec0:	20000a14 	.word	0x20000a14

08000ec4 <software_delay_start>:
#include "delay.h" // Include the header file for software delay functions
#include "stm32l4xx_hal.h" // Include HAL library for STM32



static inline void software_delay_start(SoftwareDelay_t* timer, uint32_t delay_ms) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    timer->start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <software_delay_start+0x28>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
    timer->delay_ms = delay_ms;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000930 	.word	0x20000930

08000ef0 <software_delay_elapsed>:

static inline uint8_t software_delay_elapsed(SoftwareDelay_t* timer) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    uint32_t elapsed_us = (__HAL_TIM_GET_COUNTER(&htim2) - timer->start_time);
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <software_delay_elapsed+0x3c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	60fb      	str	r3, [r7, #12]
    return (elapsed_us >= (timer->delay_ms * 1000));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	bf2c      	ite	cs
 8000f18:	2301      	movcs	r3, #1
 8000f1a:	2300      	movcc	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000930 	.word	0x20000930

08000f30 <SoftwareDelay>:

void SoftwareDelay(uint32_t delay_ms) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    SoftwareDelay_t timer;
    software_delay_start(&timer, delay_ms);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffc0 	bl	8000ec4 <software_delay_start>
    while (!software_delay_elapsed(&timer));
 8000f44:	bf00      	nop
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffd0 	bl	8000ef0 <software_delay_elapsed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f7      	beq.n	8000f46 <SoftwareDelay+0x16>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <acquire_eeprom_lock>:
    uint16_t lock_value;
    uint32_t timestamp;
} EEPROM_Lock;

bool acquire_eeprom_lock(uint8_t mcu_id)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 8000f6a:	f002 fdd9 	bl	8003b20 <HAL_GetTick>
 8000f6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    EEPROM_Lock current_lock;
    EEPROM_Lock new_lock = {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <acquire_eeprom_lock+0x1c>
 8000f76:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8000f7a:	e001      	b.n	8000f80 <acquire_eeprom_lock+0x20>
 8000f7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8000f80:	83bb      	strh	r3, [r7, #28]
        .lock_value = (mcu_id == 1) ? LOCK_MCU1 : LOCK_MCU2,
        .timestamp = HAL_GetTick()
 8000f82:	f002 fdcd 	bl	8003b20 <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
    EEPROM_Lock new_lock = {
 8000f88:	623b      	str	r3, [r7, #32]
    };

    uint8_t lock_addr[2] = { LOCK_ADDRESS >> 8, LOCK_ADDRESS & 0xFF };
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	833b      	strh	r3, [r7, #24]

    while ((HAL_GetTick() - start_time) < LOCK_TIMEOUT_MS)
 8000f8e:	e051      	b.n	8001034 <acquire_eeprom_lock+0xd4>
    {
        HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, lock_addr, 2, 100);
 8000f90:	f107 0218 	add.w	r2, r7, #24
 8000f94:	2364      	movs	r3, #100	@ 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	21a0      	movs	r1, #160	@ 0xa0
 8000f9c:	482c      	ldr	r0, [pc, #176]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000f9e:	f004 fdd9 	bl	8005b54 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, (uint8_t *)&current_lock, sizeof(current_lock), 100);
 8000fa2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000fa6:	2364      	movs	r3, #100	@ 0x64
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2308      	movs	r3, #8
 8000fac:	21a0      	movs	r1, #160	@ 0xa0
 8000fae:	4828      	ldr	r0, [pc, #160]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000fb0:	f004 fee8 	bl	8005d84 <HAL_I2C_Master_Receive>

        if (current_lock.lock_value == 0 ||
 8000fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <acquire_eeprom_lock+0x6c>
            (HAL_GetTick() - current_lock.timestamp) > LOCK_TIMEOUT_MS)
 8000fba:	f002 fdb1 	bl	8003b20 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	1ad3      	subs	r3, r2, r3
        if (current_lock.lock_value == 0 ||
 8000fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d930      	bls.n	800102e <acquire_eeprom_lock+0xce>
        {
            uint8_t txbuf[2 + sizeof(EEPROM_Lock)];
            txbuf[0] = lock_addr[0];
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	733b      	strb	r3, [r7, #12]
            txbuf[1] = lock_addr[1];
 8000fd0:	7e7b      	ldrb	r3, [r7, #25]
 8000fd2:	737b      	strb	r3, [r7, #13]
            memcpy(&txbuf[2], &new_lock, sizeof(EEPROM_Lock));
 8000fd4:	f107 011c 	add.w	r1, r7, #28
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	3302      	adds	r3, #2
 8000fde:	2208      	movs	r2, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b ff2f 	bl	800ce44 <memcpy>

            HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, txbuf, sizeof(txbuf), 100);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	230a      	movs	r3, #10
 8000ff0:	21a0      	movs	r1, #160	@ 0xa0
 8000ff2:	4817      	ldr	r0, [pc, #92]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000ff4:	f004 fdae 	bl	8005b54 <HAL_I2C_Master_Transmit>
            HAL_Delay(WRITE_DELAY_MS);
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f002 fd9d 	bl	8003b38 <HAL_Delay>

            HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, lock_addr, 2, 100);
 8000ffe:	f107 0218 	add.w	r2, r7, #24
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	21a0      	movs	r1, #160	@ 0xa0
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 800100c:	f004 fda2 	bl	8005b54 <HAL_I2C_Master_Transmit>
            HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, (uint8_t *)&current_lock, sizeof(current_lock), 100);
 8001010:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2308      	movs	r3, #8
 800101a:	21a0      	movs	r1, #160	@ 0xa0
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 800101e:	f004 feb1 	bl	8005d84 <HAL_I2C_Master_Receive>

            if (current_lock.lock_value == new_lock.lock_value)
 8001022:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001024:	8bbb      	ldrh	r3, [r7, #28]
 8001026:	429a      	cmp	r2, r3
 8001028:	d101      	bne.n	800102e <acquire_eeprom_lock+0xce>
                return true;
 800102a:	2301      	movs	r3, #1
 800102c:	e00c      	b.n	8001048 <acquire_eeprom_lock+0xe8>
        }
        HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f002 fd82 	bl	8003b38 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < LOCK_TIMEOUT_MS)
 8001034:	f002 fd74 	bl	8003b20 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001042:	4293      	cmp	r3, r2
 8001044:	d9a4      	bls.n	8000f90 <acquire_eeprom_lock+0x30>
    }
    return false;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000738 	.word	0x20000738

08001054 <release_eeprom_lock>:

void release_eeprom_lock(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af02      	add	r7, sp, #8
    EEPROM_Lock unlock = { .lock_value = 0, .timestamp = 0 };
 800105a:	2300      	movs	r3, #0
 800105c:	823b      	strh	r3, [r7, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    uint8_t txbuf[2 + sizeof(EEPROM_Lock)];
    txbuf[0] = LOCK_ADDRESS >> 8;
 8001062:	2300      	movs	r3, #0
 8001064:	713b      	strb	r3, [r7, #4]
    txbuf[1] = LOCK_ADDRESS & 0xFF;
 8001066:	2300      	movs	r3, #0
 8001068:	717b      	strb	r3, [r7, #5]
    memcpy(&txbuf[2], &unlock, sizeof(EEPROM_Lock));
 800106a:	f107 0110 	add.w	r1, r7, #16
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	3302      	adds	r3, #2
 8001072:	2208      	movs	r2, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f00b fee5 	bl	800ce44 <memcpy>

    HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, txbuf, sizeof(txbuf), 100);
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	230a      	movs	r3, #10
 8001082:	21a0      	movs	r1, #160	@ 0xa0
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <release_eeprom_lock+0x44>)
 8001086:	f004 fd65 	bl	8005b54 <HAL_I2C_Master_Transmit>
    HAL_Delay(WRITE_DELAY_MS);
 800108a:	2005      	movs	r0, #5
 800108c:	f002 fd54 	bl	8003b38 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000738 	.word	0x20000738

0800109c <verify_write_success>:
    {
        release_eeprom_lock();
    }
}

static bool verify_write_success(uint16_t address, uint8_t* data, uint16_t size) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	@ 0x58
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80bb      	strh	r3, [r7, #4]
    uint8_t tx[2] = { address >> 8, address & 0xFF };
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t read_back[64];

    if (size > sizeof(read_back)) return false;
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	2b40      	cmp	r3, #64	@ 0x40
 80010c4:	d901      	bls.n	80010ca <verify_write_success+0x2e>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e028      	b.n	800111c <verify_write_success+0x80>

    if (HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, tx, 2, 100) != HAL_OK)
 80010ca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	21a0      	movs	r1, #160	@ 0xa0
 80010d6:	4813      	ldr	r0, [pc, #76]	@ (8001124 <verify_write_success+0x88>)
 80010d8:	f004 fd3c 	bl	8005b54 <HAL_I2C_Master_Transmit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <verify_write_success+0x4a>
        return false;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e01a      	b.n	800111c <verify_write_success+0x80>

    if (HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, read_back, size, 100) != HAL_OK)
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	2164      	movs	r1, #100	@ 0x64
 80010ee:	9100      	str	r1, [sp, #0]
 80010f0:	21a0      	movs	r1, #160	@ 0xa0
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <verify_write_success+0x88>)
 80010f4:	f004 fe46 	bl	8005d84 <HAL_I2C_Master_Receive>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <verify_write_success+0x66>
        return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e00c      	b.n	800111c <verify_write_success+0x80>

    return (memcmp(data, read_back, size) == 0);
 8001102:	88ba      	ldrh	r2, [r7, #4]
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f00b fe36 	bl	800cd7c <memcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3750      	adds	r7, #80	@ 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000738 	.word	0x20000738

08001128 <epspd_WriteTelemetry>:
        SoftwareDelay(1);
    }
    return status;
}

HAL_StatusTypeDef epspd_WriteTelemetry(I2C_HandleTypeDef *hi2c, EEPROM_TelemetryWithTimestamp *telemetry) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    if (!acquire_eeprom_lock(MCU_ID)) return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ff14 	bl	8000f60 <acquire_eeprom_lock>
 8001138:	4603      	mov	r3, r0
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <epspd_WriteTelemetry+0x20>
 8001144:	2301      	movs	r3, #1
 8001146:	e04c      	b.n	80011e2 <epspd_WriteTelemetry+0xba>

    uint8_t buffer[20];
    buffer[0] = EEPROM_ADDR_MCU1_TELEMETRY >> 8;
 8001148:	2301      	movs	r3, #1
 800114a:	723b      	strb	r3, [r7, #8]
    buffer[1] = EEPROM_ADDR_MCU1_TELEMETRY & 0xFF;
 800114c:	2300      	movs	r3, #0
 800114e:	727b      	strb	r3, [r7, #9]
    buffer[2] = telemetry->telemetry.Bus12V >> 8;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b29b      	uxth	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	72bb      	strb	r3, [r7, #10]
    buffer[3] = telemetry->telemetry.Bus12V;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
    buffer[4] = telemetry->telemetry.Bus5V >> 8;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	885b      	ldrh	r3, [r3, #2]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	733b      	strb	r3, [r7, #12]
    buffer[5] = telemetry->telemetry.Bus5V;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	737b      	strb	r3, [r7, #13]
    buffer[6] = telemetry->telemetry.Bus3V3 >> 8;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73bb      	strb	r3, [r7, #14]
    buffer[7] = telemetry->telemetry.Bus3V3;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
//    buffer[16] = telemetry->counter >> 24;
//    buffer[17] = telemetry->counter >> 16;
//    buffer[18] = telemetry->counter >> 8;
//    buffer[19] = telemetry->counter;

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, epspd_I2C_ADDR_MEMORY << 1, buffer, 20, 100);
 800118c:	f107 0208 	add.w	r2, r7, #8
 8001190:	2364      	movs	r3, #100	@ 0x64
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2314      	movs	r3, #20
 8001196:	21a0      	movs	r1, #160	@ 0xa0
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f004 fcdb 	bl	8005b54 <HAL_I2C_Master_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK) {
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d119      	bne.n	80011dc <epspd_WriteTelemetry+0xb4>
        SoftwareDelay(1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff fec1 	bl	8000f30 <SoftwareDelay>

        if (!verify_write_success(EEPROM_ADDR_MCU1_TELEMETRY, &buffer[2], 18)) {
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	3302      	adds	r3, #2
 80011b4:	2212      	movs	r2, #18
 80011b6:	4619      	mov	r1, r3
 80011b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011bc:	f7ff ff6e 	bl	800109c <verify_write_success>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f083 0301 	eor.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <epspd_WriteTelemetry+0xb4>
            EPS_Log_Message(EPS_LOG_DEBUG, "EEPROM write verification failed");
 80011cc:	4907      	ldr	r1, [pc, #28]	@ (80011ec <epspd_WriteTelemetry+0xc4>)
 80011ce:	2005      	movs	r0, #5
 80011d0:	f7ff fdea 	bl	8000da8 <EPS_Log_Message>
            release_eeprom_lock();
 80011d4:	f7ff ff3e 	bl	8001054 <release_eeprom_lock>
            Error_Handler();
 80011d8:	f001 fe9c 	bl	8002f14 <Error_Handler>
        }
    }

    release_eeprom_lock();
 80011dc:	f7ff ff3a 	bl	8001054 <release_eeprom_lock>
    return status;
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800d78c 	.word	0x0800d78c

080011f0 <EPS_LogFault>:

static FaultState fault_states[NUM_FAULTS];
static EPS_FaultPollSnapshot fault_snapshot[NUM_FAULTS];
static uint8_t fault_log_index = 0;

EEPROM_FaultLog EPS_LogFault(I2C_HandleTypeDef *hi2c, const char *desc, uint8_t subsystem_id, uint8_t retry_count) {
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b0a2      	sub	sp, #136	@ 0x88
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	70fb      	strb	r3, [r7, #3]
    EEPROM_FaultLog log;
    memset(&log, 0, sizeof(log));
 80011fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001202:	2230      	movs	r2, #48	@ 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00b fdc8 	bl	800cd9c <memset>

    log.subsystem_id = subsystem_id;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    log.retry_count = retry_count;
 8001212:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001216:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    strncpy(log.description, desc, FAULT_DESC_LEN - 1);
 800121a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121e:	330e      	adds	r3, #14
 8001220:	221f      	movs	r2, #31
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f00b fdc1 	bl	800cdac <strncpy>
    GetSyncTimestamp(&log.counter, &log.subtick_us);
 800122a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800122e:	f103 0208 	add.w	r2, r3, #8
 8001232:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fd45 	bl	8001cc8 <GetSyncTimestamp>

    uint16_t eeprom_addr = FAULT_LOG_START_ADDR + (fault_log_index * FAULT_LOG_SIZE);
 800123e:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <EPS_LogFault+0xec>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	0052      	lsls	r2, r2, #1
 8001246:	4413      	add	r3, r2
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	b29b      	uxth	r3, r3
 800124c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001250:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t buffer[2 + FAULT_LOG_SIZE];
    buffer[0] = eeprom_addr >> 8;
 8001254:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	b29b      	uxth	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	753b      	strb	r3, [r7, #20]
    buffer[1] = eeprom_addr & 0xFF;
 8001260:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001264:	b2db      	uxtb	r3, r3
 8001266:	757b      	strb	r3, [r7, #21]
    memcpy(&buffer[2], &log, FAULT_LOG_SIZE);
 8001268:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	3302      	adds	r3, #2
 8001272:	2230      	movs	r2, #48	@ 0x30
 8001274:	4618      	mov	r0, r3
 8001276:	f00b fde5 	bl	800ce44 <memcpy>

    if (HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDR, buffer, sizeof(buffer), 100) == HAL_OK) {
 800127a:	f107 0214 	add.w	r2, r7, #20
 800127e:	2364      	movs	r3, #100	@ 0x64
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2332      	movs	r3, #50	@ 0x32
 8001284:	21a0      	movs	r1, #160	@ 0xa0
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f004 fc64 	bl	8005b54 <HAL_I2C_Master_Transmit>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d113      	bne.n	80012ba <EPS_LogFault+0xca>
        SoftwareDelay(4);
 8001292:	2004      	movs	r0, #4
 8001294:	f7ff fe4c 	bl	8000f30 <SoftwareDelay>
        fault_log_index = (fault_log_index + 1) % MAX_FAULT_LOGS;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <EPS_LogFault+0xec>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <EPS_LogFault+0xf0>)
 80012a0:	fb83 1302 	smull	r1, r3, r3, r2
 80012a4:	10d9      	asrs	r1, r3, #3
 80012a6:	17d3      	asrs	r3, r2, #31
 80012a8:	1ac9      	subs	r1, r1, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	1ad1      	subs	r1, r2, r3
 80012b4:	b2ca      	uxtb	r2, r1
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <EPS_LogFault+0xec>)
 80012b8:	701a      	strb	r2, [r3, #0]
    }

    return log;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	461d      	mov	r5, r3
 80012be:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80012c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	3780      	adds	r7, #128	@ 0x80
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bdb0      	pop	{r4, r5, r7, pc}
 80012da:	bf00      	nop
 80012dc:	200004a4 	.word	0x200004a4
 80012e0:	66666667 	.word	0x66666667

080012e4 <Fault_PollAndHandle>:

void Fault_PollAndHandle(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart_log) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0a4      	sub	sp, #144	@ 0x90
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80012ec:	6339      	str	r1, [r7, #48]	@ 0x30
    uint32_t now = HAL_GetTick();
 80012ee:	f002 fc17 	bl	8003b20 <HAL_GetTick>
 80012f2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80012fc:	e1df      	b.n	80016be <Fault_PollAndHandle+0x3da>
        GPIO_PinState state = HAL_GPIO_ReadPin(fault_config[i].fault_port, fault_config[i].fault_pin);
 80012fe:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001302:	49bc      	ldr	r1, [pc, #752]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001314:	49b7      	ldr	r1, [pc, #732]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3304      	adds	r3, #4
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f004 fb27 	bl	8005978 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        fault_snapshot[i].subsystem_id = fault_config[i].subsystem_id;
 8001330:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8001334:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001338:	48ae      	ldr	r0, [pc, #696]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4403      	add	r3, r0
 8001344:	3314      	adds	r3, #20
 8001346:	7818      	ldrb	r0, [r3, #0]
 8001348:	49ab      	ldr	r1, [pc, #684]	@ (80015f8 <Fault_PollAndHandle+0x314>)
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3320      	adds	r3, #32
 8001356:	4602      	mov	r2, r0
 8001358:	701a      	strb	r2, [r3, #0]
        strncpy(fault_snapshot[i].description, fault_config[i].description, FAULT_DESC_LEN - 1);
 800135a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4aa4      	ldr	r2, [pc, #656]	@ (80015f8 <Fault_PollAndHandle+0x314>)
 8001368:	1898      	adds	r0, r3, r2
 800136a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800136e:	49a1      	ldr	r1, [pc, #644]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3310      	adds	r3, #16
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	221f      	movs	r2, #31
 8001380:	4619      	mov	r1, r3
 8001382:	f00b fd13 	bl	800cdac <strncpy>
        fault_snapshot[i].description[FAULT_DESC_LEN - 1] = '\0';
 8001386:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800138a:	499b      	ldr	r1, [pc, #620]	@ (80015f8 <Fault_PollAndHandle+0x314>)
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	331f      	adds	r3, #31
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
        fault_snapshot[i].is_active = fault_states[i].is_active;
 800139c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013a0:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80013a4:	4995      	ldr	r1, [pc, #596]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80013a6:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
 80013aa:	4993      	ldr	r1, [pc, #588]	@ (80015f8 <Fault_PollAndHandle+0x314>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3321      	adds	r3, #33	@ 0x21
 80013b8:	4602      	mov	r2, r0
 80013ba:	701a      	strb	r2, [r3, #0]
        fault_snapshot[i].retry_count = fault_states[i].retry_count;
 80013bc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013c0:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80013c4:	498d      	ldr	r1, [pc, #564]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	7858      	ldrb	r0, [r3, #1]
 80013cc:	498a      	ldr	r1, [pc, #552]	@ (80015f8 <Fault_PollAndHandle+0x314>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	3322      	adds	r3, #34	@ 0x22
 80013da:	4602      	mov	r2, r0
 80013dc:	701a      	strb	r2, [r3, #0]
        fault_snapshot[i].last_fault_time = fault_states[i].last_fault_time;
 80013de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013e2:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80013e6:	4985      	ldr	r1, [pc, #532]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	4882      	ldr	r0, [pc, #520]	@ (80015f8 <Fault_PollAndHandle+0x314>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4403      	add	r3, r0
 80013fa:	3324      	adds	r3, #36	@ 0x24
 80013fc:	6019      	str	r1, [r3, #0]

        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 80013fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001402:	2b00      	cmp	r3, #0
 8001404:	d157      	bne.n	80014b6 <Fault_PollAndHandle+0x1d2>
 8001406:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800140a:	4a7c      	ldr	r2, [pc, #496]	@ (80015fc <Fault_PollAndHandle+0x318>)
 800140c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001410:	f083 0301 	eor.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d04d      	beq.n	80014b6 <Fault_PollAndHandle+0x1d2>
            fault_states[i].is_active = true;
 800141a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800141e:	4a77      	ldr	r2, [pc, #476]	@ (80015fc <Fault_PollAndHandle+0x318>)
 8001420:	2101      	movs	r1, #1
 8001422:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            fault_states[i].retry_count = 0;
 8001426:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800142a:	4a74      	ldr	r2, [pc, #464]	@ (80015fc <Fault_PollAndHandle+0x318>)
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	2200      	movs	r2, #0
 8001432:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 8001434:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001438:	4a70      	ldr	r2, [pc, #448]	@ (80015fc <Fault_PollAndHandle+0x318>)
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001442:	605a      	str	r2, [r3, #4]
            EPS_LogFault(hi2c, fault_config[i].description, fault_config[i].subsystem_id, 0);
 8001444:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001448:	496a      	ldr	r1, [pc, #424]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	3310      	adds	r3, #16
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800145c:	4865      	ldr	r0, [pc, #404]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4403      	add	r3, r0
 8001468:	3314      	adds	r3, #20
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4638      	mov	r0, r7
 800146e:	2200      	movs	r2, #0
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	460a      	mov	r2, r1
 8001474:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001476:	f7ff febb 	bl	80011f0 <EPS_LogFault>

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Detected\n", fault_config[i].description);
 800147a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800147e:	495d      	ldr	r1, [pc, #372]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3310      	adds	r3, #16
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001492:	4a5b      	ldr	r2, [pc, #364]	@ (8001600 <Fault_PollAndHandle+0x31c>)
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	f00b fbff 	bl	800cc98 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 800149a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fea6 	bl	80001f0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80014ac:	2364      	movs	r3, #100	@ 0x64
 80014ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014b0:	f007 faf0 	bl	8008a94 <HAL_UART_Transmit>
        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 80014b4:	e0fe      	b.n	80016b4 <Fault_PollAndHandle+0x3d0>

        } else if (state == GPIO_PIN_SET && fault_states[i].is_active) {
 80014b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d136      	bne.n	800152c <Fault_PollAndHandle+0x248>
 80014be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80014c2:	4a4e      	ldr	r2, [pc, #312]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80014c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02f      	beq.n	800152c <Fault_PollAndHandle+0x248>
            if (now - fault_states[i].last_fault_time > 5) {
 80014cc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80014d0:	4a4a      	ldr	r2, [pc, #296]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b05      	cmp	r3, #5
 80014e0:	f240 80e8 	bls.w	80016b4 <Fault_PollAndHandle+0x3d0>
                fault_states[i].is_active = false;
 80014e4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80014e8:	4a44      	ldr	r2, [pc, #272]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80014ea:	2100      	movs	r1, #0
 80014ec:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

                char msg[64];
                snprintf(msg, sizeof(msg), "%s Fault Cleared\n", fault_config[i].description);
 80014f0:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80014f4:	493f      	ldr	r1, [pc, #252]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	3310      	adds	r3, #16
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001508:	4a3e      	ldr	r2, [pc, #248]	@ (8001604 <Fault_PollAndHandle+0x320>)
 800150a:	2140      	movs	r1, #64	@ 0x40
 800150c:	f00b fbc4 	bl	800cc98 <sniprintf>
                HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 8001510:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe fe6b 	bl	80001f0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001522:	2364      	movs	r3, #100	@ 0x64
 8001524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001526:	f007 fab5 	bl	8008a94 <HAL_UART_Transmit>
            if (now - fault_states[i].last_fault_time > 5) {
 800152a:	e0c3      	b.n	80016b4 <Fault_PollAndHandle+0x3d0>
            }

        } else if (fault_states[i].is_active && fault_states[i].retry_count < 5 && fault_config[i].en_port) {
 800152c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001530:	4a32      	ldr	r2, [pc, #200]	@ (80015fc <Fault_PollAndHandle+0x318>)
 8001532:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d066      	beq.n	8001608 <Fault_PollAndHandle+0x324>
 800153a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800153e:	4a2f      	ldr	r2, [pc, #188]	@ (80015fc <Fault_PollAndHandle+0x318>)
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d85e      	bhi.n	8001608 <Fault_PollAndHandle+0x324>
 800154a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800154e:	4929      	ldr	r1, [pc, #164]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	3308      	adds	r3, #8
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d052      	beq.n	8001608 <Fault_PollAndHandle+0x324>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 8001562:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001566:	4923      	ldr	r1, [pc, #140]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	3308      	adds	r3, #8
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800157a:	491e      	ldr	r1, [pc, #120]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	330c      	adds	r3, #12
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	f004 fa0b 	bl	80059a8 <HAL_GPIO_WritePin>
            SoftwareDelay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f7ff fccc 	bl	8000f30 <SoftwareDelay>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_SET);
 8001598:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800159c:	4915      	ldr	r1, [pc, #84]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3308      	adds	r3, #8
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80015b0:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <Fault_PollAndHandle+0x310>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	330c      	adds	r3, #12
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4619      	mov	r1, r3
 80015c4:	f004 f9f0 	bl	80059a8 <HAL_GPIO_WritePin>
            fault_states[i].retry_count++;
 80015c8:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80015cc:	490b      	ldr	r1, [pc, #44]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80015ce:	00d3      	lsls	r3, r2, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	785b      	ldrb	r3, [r3, #1]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2d8      	uxtb	r0, r3
 80015d8:	4908      	ldr	r1, [pc, #32]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80015da:	00d3      	lsls	r3, r2, #3
 80015dc:	440b      	add	r3, r1
 80015de:	4602      	mov	r2, r0
 80015e0:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 80015e2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <Fault_PollAndHandle+0x318>)
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e05f      	b.n	80016b4 <Fault_PollAndHandle+0x3d0>
 80015f4:	2000001c 	.word	0x2000001c
 80015f8:	2000029c 	.word	0x2000029c
 80015fc:	20000234 	.word	0x20000234
 8001600:	0800d804 	.word	0x0800d804
 8001604:	0800d818 	.word	0x0800d818

        } else if (fault_states[i].is_active && fault_states[i].retry_count >= 5 && fault_config[i].en_port) {
 8001608:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800160c:	4a31      	ldr	r2, [pc, #196]	@ (80016d4 <Fault_PollAndHandle+0x3f0>)
 800160e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d04e      	beq.n	80016b4 <Fault_PollAndHandle+0x3d0>
 8001616:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800161a:	4a2e      	ldr	r2, [pc, #184]	@ (80016d4 <Fault_PollAndHandle+0x3f0>)
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d946      	bls.n	80016b4 <Fault_PollAndHandle+0x3d0>
 8001626:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800162a:	492b      	ldr	r1, [pc, #172]	@ (80016d8 <Fault_PollAndHandle+0x3f4>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3308      	adds	r3, #8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d03a      	beq.n	80016b4 <Fault_PollAndHandle+0x3d0>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 800163e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001642:	4925      	ldr	r1, [pc, #148]	@ (80016d8 <Fault_PollAndHandle+0x3f4>)
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3308      	adds	r3, #8
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001656:	4920      	ldr	r1, [pc, #128]	@ (80016d8 <Fault_PollAndHandle+0x3f4>)
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	330c      	adds	r3, #12
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	f004 f99d 	bl	80059a8 <HAL_GPIO_WritePin>
            fault_states[i].is_active = false;
 800166e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001672:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <Fault_PollAndHandle+0x3f0>)
 8001674:	2100      	movs	r1, #0
 8001676:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Persistent: Disabled\n", fault_config[i].description);
 800167a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800167e:	4916      	ldr	r1, [pc, #88]	@ (80016d8 <Fault_PollAndHandle+0x3f4>)
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3310      	adds	r3, #16
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <Fault_PollAndHandle+0x3f8>)
 8001694:	2140      	movs	r1, #64	@ 0x40
 8001696:	f00b faff 	bl	800cc98 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 800169a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fda6 	bl	80001f0 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80016ac:	2364      	movs	r3, #100	@ 0x64
 80016ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016b0:	f007 f9f0 	bl	8008a94 <HAL_UART_Transmit>
    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 80016b4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016b8:	3301      	adds	r3, #1
 80016ba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80016be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	f67f ae1b 	bls.w	80012fe <Fault_PollAndHandle+0x1a>
        }
    }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3788      	adds	r7, #136	@ 0x88
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000234 	.word	0x20000234
 80016d8:	2000001c 	.word	0x2000001c
 80016dc:	0800d82c 	.word	0x0800d82c

080016e0 <EPS_I2C_CRC8>:
#define MAX_I2C_RETRIES        5
#define MAX_TELEMETRY_FRAMES   32

// ─────────────────────────────────────────────────────────────
// CRC-8/MAXIM: x⁸ + x⁵ + x⁴ + 1 → Polynomial = 0x31
uint8_t EPS_I2C_CRC8(const uint8_t *data, uint8_t len) {
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	73bb      	strb	r3, [r7, #14]
 80016f4:	e023      	b.n	800173e <EPS_I2C_CRC8+0x5e>
        crc ^= data[i];
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4053      	eors	r3, r2
 8001702:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001704:	2300      	movs	r3, #0
 8001706:	737b      	strb	r3, [r7, #13]
 8001708:	e013      	b.n	8001732 <EPS_I2C_CRC8+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	da08      	bge.n	8001724 <EPS_I2C_CRC8+0x44>
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800171e:	b25b      	sxtb	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e002      	b.n	800172a <EPS_I2C_CRC8+0x4a>
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 800172c:	7b7b      	ldrb	r3, [r7, #13]
 800172e:	3301      	adds	r3, #1
 8001730:	737b      	strb	r3, [r7, #13]
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	2b07      	cmp	r3, #7
 8001736:	d9e8      	bls.n	800170a <EPS_I2C_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	3301      	adds	r3, #1
 800173c:	73bb      	strb	r3, [r7, #14]
 800173e:	7bba      	ldrb	r2, [r7, #14]
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3d7      	bcc.n	80016f6 <EPS_I2C_CRC8+0x16>
        }
    }
    return crc;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <EPS_I2C_TransmitReceiveWithRetry>:
    I2C_HandleTypeDef *hi2c,
    uint8_t cmd,
    const uint8_t *tx_payload, uint8_t tx_len,
    uint8_t *rx_payload, uint16_t *rx_leng,
    uint16_t slave_addr)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	f5ad 6d86 	sub.w	sp, sp, #1072	@ 0x430
 800175a:	af04      	add	r7, sp, #16
 800175c:	f507 6484 	add.w	r4, r7, #1056	@ 0x420
 8001760:	f2a4 4414 	subw	r4, r4, #1044	@ 0x414
 8001764:	6020      	str	r0, [r4, #0]
 8001766:	4608      	mov	r0, r1
 8001768:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 800176c:	f2a1 411c 	subw	r1, r1, #1052	@ 0x41c
 8001770:	600a      	str	r2, [r1, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001778:	f2a3 4315 	subw	r3, r3, #1045	@ 0x415
 800177c:	4602      	mov	r2, r0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001784:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8001788:	460a      	mov	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
    if (tx_len > MAX_FRAME_SIZE - 3) return HAL_ERROR;
 800178c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001790:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2bfd      	cmp	r3, #253	@ 0xfd
 8001798:	d901      	bls.n	800179e <EPS_I2C_TransmitReceiveWithRetry+0x4a>
 800179a:	2301      	movs	r3, #1
 800179c:	e18f      	b.n	8001abe <EPS_I2C_TransmitReceiveWithRetry+0x36a>

    HAL_StatusTypeDef status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 3416 	strb.w	r3, [r7, #1046]	@ 0x416
    *rx_leng = 0;
 80017a4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]

    for (uint8_t attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 341f 	strb.w	r3, [r7, #1055]	@ 0x41f
 80017b2:	e17e      	b.n	8001ab2 <EPS_I2C_TransmitReceiveWithRetry+0x35e>
        uint8_t tx_buf[MAX_FRAME_SIZE];
        uint8_t tx_pos = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 341e 	strb.w	r3, [r7, #1054]	@ 0x41e

        tx_buf[tx_pos++] = cmd;
 80017ba:	f897 341e 	ldrb.w	r3, [r7, #1054]	@ 0x41e
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	f887 241e 	strb.w	r2, [r7, #1054]	@ 0x41e
 80017c4:	4619      	mov	r1, r3
 80017c6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80017ca:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80017ce:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80017d2:	f2a2 4215 	subw	r2, r2, #1045	@ 0x415
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	545a      	strb	r2, [r3, r1]
        tx_buf[tx_pos++] = tx_len;
 80017da:	f897 341e 	ldrb.w	r3, [r7, #1054]	@ 0x41e
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	f887 241e 	strb.w	r2, [r7, #1054]	@ 0x41e
 80017e4:	4619      	mov	r1, r3
 80017e6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80017ea:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80017ee:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80017f2:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80017f6:	7812      	ldrb	r2, [r2, #0]
 80017f8:	545a      	strb	r2, [r3, r1]

        if (tx_len && tx_payload) {
 80017fa:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80017fe:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d021      	beq.n	800184c <EPS_I2C_TransmitReceiveWithRetry+0xf8>
 8001808:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800180c:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01a      	beq.n	800184c <EPS_I2C_TransmitReceiveWithRetry+0xf8>
            memcpy(&tx_buf[tx_pos], tx_payload, tx_len);
 8001816:	f897 341e 	ldrb.w	r3, [r7, #1054]	@ 0x41e
 800181a:	f107 0210 	add.w	r2, r7, #16
 800181e:	18d0      	adds	r0, r2, r3
 8001820:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001824:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800182e:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	f00b fb06 	bl	800ce44 <memcpy>
            tx_pos += tx_len;
 8001838:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800183c:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8001840:	f897 241e 	ldrb.w	r2, [r7, #1054]	@ 0x41e
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	f887 341e 	strb.w	r3, [r7, #1054]	@ 0x41e
        }

        // Compute CRC for the current buffer, append at current tx_pos
        uint8_t crc = EPS_I2C_CRC8(tx_buf, tx_pos);
 800184c:	f897 241e 	ldrb.w	r2, [r7, #1054]	@ 0x41e
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff42 	bl	80016e0 <EPS_I2C_CRC8>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3415 	strb.w	r3, [r7, #1045]	@ 0x415
        tx_buf[tx_pos++] = crc;
 8001862:	f897 341e 	ldrb.w	r3, [r7, #1054]	@ 0x41e
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	f887 241e 	strb.w	r2, [r7, #1054]	@ 0x41e
 800186c:	4619      	mov	r1, r3
 800186e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001872:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001876:	f897 2415 	ldrb.w	r2, [r7, #1045]	@ 0x415
 800187a:	545a      	strb	r2, [r3, r1]

        status = HAL_I2C_Master_Transmit(hi2c, slave_addr, tx_buf, tx_pos, I2C_TIMEOUT_MS);
 800187c:	f897 341e 	ldrb.w	r3, [r7, #1054]	@ 0x41e
 8001880:	b29b      	uxth	r3, r3
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	f8b7 1438 	ldrh.w	r1, [r7, #1080]	@ 0x438
 800188a:	f507 6084 	add.w	r0, r7, #1056	@ 0x420
 800188e:	f2a0 4014 	subw	r0, r0, #1044	@ 0x414
 8001892:	2464      	movs	r4, #100	@ 0x64
 8001894:	9400      	str	r4, [sp, #0]
 8001896:	6800      	ldr	r0, [r0, #0]
 8001898:	f004 f95c 	bl	8005b54 <HAL_I2C_Master_Transmit>
 800189c:	4603      	mov	r3, r0
 800189e:	f887 3416 	strb.w	r3, [r7, #1046]	@ 0x416
        if (status != HAL_OK) {
 80018a2:	f897 3416 	ldrb.w	r3, [r7, #1046]	@ 0x416
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <EPS_I2C_TransmitReceiveWithRetry+0x166>
            EPS_Log_Message(EPS_LOG_WARNING, "I2C TX retry %u failed", attempt);
 80018aa:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 80018ae:	461a      	mov	r2, r3
 80018b0:	4985      	ldr	r1, [pc, #532]	@ (8001ac8 <EPS_I2C_TransmitReceiveWithRetry+0x374>)
 80018b2:	2002      	movs	r0, #2
 80018b4:	f7ff fa78 	bl	8000da8 <EPS_Log_Message>
 80018b8:	e0f6      	b.n	8001aa8 <EPS_I2C_TransmitReceiveWithRetry+0x354>
            continue;
        }

        for (uint8_t frame_idx = 0; frame_idx < MAX_TELEMETRY_FRAMES; ++frame_idx) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 341d 	strb.w	r3, [r7, #1053]	@ 0x41d
 80018c0:	e0e4      	b.n	8001a8c <EPS_I2C_TransmitReceiveWithRetry+0x338>
            uint8_t rx_buf[MAX_FRAME_SIZE];
            status = HAL_I2C_Master_Receive(hi2c, slave_addr, rx_buf, MAX_FRAME_SIZE, I2C_TIMEOUT_MS);
 80018c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80018c6:	f8b7 1438 	ldrh.w	r1, [r7, #1080]	@ 0x438
 80018ca:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80018ce:	f2a3 4014 	subw	r0, r3, #1044	@ 0x414
 80018d2:	2364      	movs	r3, #100	@ 0x64
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018da:	6800      	ldr	r0, [r0, #0]
 80018dc:	f004 fa52 	bl	8005d84 <HAL_I2C_Master_Receive>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3416 	strb.w	r3, [r7, #1046]	@ 0x416
            if (status != HAL_OK) {
 80018e6:	f897 3416 	ldrb.w	r3, [r7, #1046]	@ 0x416
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <EPS_I2C_TransmitReceiveWithRetry+0x1aa>
                EPS_Log_Message(EPS_LOG_ERROR, "I2C RX failed at frame %u", frame_idx);
 80018ee:	f897 341d 	ldrb.w	r3, [r7, #1053]	@ 0x41d
 80018f2:	461a      	mov	r2, r3
 80018f4:	4975      	ldr	r1, [pc, #468]	@ (8001acc <EPS_I2C_TransmitReceiveWithRetry+0x378>)
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fa56 	bl	8000da8 <EPS_Log_Message>
                break;
 80018fc:	e0cd      	b.n	8001a9a <EPS_I2C_TransmitReceiveWithRetry+0x346>
            }

            uint8_t rx_cmd = rx_buf[0];
 80018fe:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001902:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f887 3414 	strb.w	r3, [r7, #1044]	@ 0x414
            uint8_t rx_len = rx_buf[1];
 800190c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001910:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001914:	785b      	ldrb	r3, [r3, #1]
 8001916:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
            uint8_t rx_crc = rx_buf[2 + rx_len];
 800191a:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800191e:	3302      	adds	r3, #2
 8001920:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8001924:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	f887 3412 	strb.w	r3, [r7, #1042]	@ 0x412
            uint8_t calc_crc = EPS_I2C_CRC8(&rx_buf[1], 1 + rx_len); // Only LEN + payload
 800192e:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800193a:	3301      	adds	r3, #1
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fece 	bl	80016e0 <EPS_I2C_CRC8>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 3411 	strb.w	r3, [r7, #1041]	@ 0x411

            EPS_Log_Message(EPS_LOG_INFO,
 800194a:	f897 441d 	ldrb.w	r4, [r7, #1053]	@ 0x41d
 800194e:	f897 5414 	ldrb.w	r5, [r7, #1044]	@ 0x414
 8001952:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001956:	f897 2412 	ldrb.w	r2, [r7, #1042]	@ 0x412
 800195a:	f897 0412 	ldrb.w	r0, [r7, #1042]	@ 0x412
 800195e:	f897 1411 	ldrb.w	r1, [r7, #1041]	@ 0x411
 8001962:	4288      	cmp	r0, r1
 8001964:	d10a      	bne.n	800197c <EPS_I2C_TransmitReceiveWithRetry+0x228>
                "[Frame %u] CMD=0x%02X LEN=%u CRC=0x%02X %s",
                frame_idx, rx_cmd, rx_len, rx_crc,
                (rx_crc == calc_crc && rx_cmd == cmd) ? "(OK)" : "(BAD)");
 8001966:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 800196a:	f2a1 4115 	subw	r1, r1, #1045	@ 0x415
 800196e:	f897 0414 	ldrb.w	r0, [r7, #1044]	@ 0x414
 8001972:	7809      	ldrb	r1, [r1, #0]
 8001974:	4288      	cmp	r0, r1
 8001976:	d101      	bne.n	800197c <EPS_I2C_TransmitReceiveWithRetry+0x228>
            EPS_Log_Message(EPS_LOG_INFO,
 8001978:	4955      	ldr	r1, [pc, #340]	@ (8001ad0 <EPS_I2C_TransmitReceiveWithRetry+0x37c>)
 800197a:	e000      	b.n	800197e <EPS_I2C_TransmitReceiveWithRetry+0x22a>
 800197c:	4955      	ldr	r1, [pc, #340]	@ (8001ad4 <EPS_I2C_TransmitReceiveWithRetry+0x380>)
 800197e:	9102      	str	r1, [sp, #8]
 8001980:	9201      	str	r2, [sp, #4]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	462b      	mov	r3, r5
 8001986:	4622      	mov	r2, r4
 8001988:	4953      	ldr	r1, [pc, #332]	@ (8001ad8 <EPS_I2C_TransmitReceiveWithRetry+0x384>)
 800198a:	2003      	movs	r0, #3
 800198c:	f7ff fa0c 	bl	8000da8 <EPS_Log_Message>

            if (rx_crc != calc_crc || rx_cmd != cmd) {
 8001990:	f897 2412 	ldrb.w	r2, [r7, #1042]	@ 0x412
 8001994:	f897 3411 	ldrb.w	r3, [r7, #1041]	@ 0x411
 8001998:	429a      	cmp	r2, r3
 800199a:	d108      	bne.n	80019ae <EPS_I2C_TransmitReceiveWithRetry+0x25a>
 800199c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80019a0:	f2a3 4315 	subw	r3, r3, #1045	@ 0x415
 80019a4:	f897 2414 	ldrb.w	r2, [r7, #1044]	@ 0x414
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d007      	beq.n	80019be <EPS_I2C_TransmitReceiveWithRetry+0x26a>
                EPS_Log_Message(EPS_LOG_ERROR, "CRC or CMD mismatch in frame %u", frame_idx);
 80019ae:	f897 341d 	ldrb.w	r3, [r7, #1053]	@ 0x41d
 80019b2:	461a      	mov	r2, r3
 80019b4:	4949      	ldr	r1, [pc, #292]	@ (8001adc <EPS_I2C_TransmitReceiveWithRetry+0x388>)
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff f9f6 	bl	8000da8 <EPS_Log_Message>
                break;
 80019bc:	e06d      	b.n	8001a9a <EPS_I2C_TransmitReceiveWithRetry+0x346>
            }

            // Hex dump payload
            char hex[512] = {0}, *p = hex;
 80019be:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80019c2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80019c6:	4618      	mov	r0, r3
 80019c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019cc:	461a      	mov	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	f00b f9e4 	bl	800cd9c <memset>
 80019d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80019d8:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
            for (uint8_t i = 0; i < rx_len && i < 64; ++i)
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
 80019e2:	e01f      	b.n	8001a24 <EPS_I2C_TransmitReceiveWithRetry+0x2d0>
                p += snprintf(p, sizeof(hex) - (p - hex), "%02X ", rx_buf[2 + i]);
 80019e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80019e8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80019f2:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80019f6:	3302      	adds	r3, #2
 80019f8:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80019fc:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	4a37      	ldr	r2, [pc, #220]	@ (8001ae0 <EPS_I2C_TransmitReceiveWithRetry+0x38c>)
 8001a04:	f8d7 0418 	ldr.w	r0, [r7, #1048]	@ 0x418
 8001a08:	f00b f946 	bl	800cc98 <sniprintf>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001a14:	4413      	add	r3, r2
 8001a16:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
            for (uint8_t i = 0; i < rx_len && i < 64; ++i)
 8001a1a:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
 8001a24:	f897 2417 	ldrb.w	r2, [r7, #1047]	@ 0x417
 8001a28:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d203      	bcs.n	8001a38 <EPS_I2C_TransmitReceiveWithRetry+0x2e4>
 8001a30:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8001a34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a36:	d9d5      	bls.n	80019e4 <EPS_I2C_TransmitReceiveWithRetry+0x290>
            EPS_Log_Message(EPS_LOG_DEBUG, "Payload: %s", hex);
 8001a38:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4929      	ldr	r1, [pc, #164]	@ (8001ae4 <EPS_I2C_TransmitReceiveWithRetry+0x390>)
 8001a40:	2005      	movs	r0, #5
 8001a42:	f7ff f9b1 	bl	8000da8 <EPS_Log_Message>

            // Copy payload to destination buffer
            memcpy(&rx_payload[*rx_leng], &rx_buf[2], rx_len);
 8001a46:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001a52:	1898      	adds	r0, r3, r2
 8001a54:	f897 2413 	ldrb.w	r2, [r7, #1043]	@ 0x413
 8001a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f00b f9f0 	bl	800ce44 <memcpy>
            *rx_leng += rx_len;
 8001a64:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001a78:	801a      	strh	r2, [r3, #0]

            // Stop if last frame (shorter than full frame size)
            if (rx_len < MAX_FRAME_SIZE - 3) break;
 8001a7a:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001a7e:	2bfc      	cmp	r3, #252	@ 0xfc
 8001a80:	d90a      	bls.n	8001a98 <EPS_I2C_TransmitReceiveWithRetry+0x344>
        for (uint8_t frame_idx = 0; frame_idx < MAX_TELEMETRY_FRAMES; ++frame_idx) {
 8001a82:	f897 341d 	ldrb.w	r3, [r7, #1053]	@ 0x41d
 8001a86:	3301      	adds	r3, #1
 8001a88:	f887 341d 	strb.w	r3, [r7, #1053]	@ 0x41d
 8001a8c:	f897 341d 	ldrb.w	r3, [r7, #1053]	@ 0x41d
 8001a90:	2b1f      	cmp	r3, #31
 8001a92:	f67f af16 	bls.w	80018c2 <EPS_I2C_TransmitReceiveWithRetry+0x16e>
 8001a96:	e000      	b.n	8001a9a <EPS_I2C_TransmitReceiveWithRetry+0x346>
            if (rx_len < MAX_FRAME_SIZE - 3) break;
 8001a98:	bf00      	nop
        }

        if (*rx_leng > 0)
 8001a9a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <EPS_I2C_TransmitReceiveWithRetry+0x354>
            return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e00a      	b.n	8001abe <EPS_I2C_TransmitReceiveWithRetry+0x36a>
    for (uint8_t attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8001aa8:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8001aac:	3301      	adds	r3, #1
 8001aae:	f887 341f 	strb.w	r3, [r7, #1055]	@ 0x41f
 8001ab2:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	f67f ae7c 	bls.w	80017b4 <EPS_I2C_TransmitReceiveWithRetry+0x60>
    }

    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac8:	0800d84c 	.word	0x0800d84c
 8001acc:	0800d864 	.word	0x0800d864
 8001ad0:	0800d880 	.word	0x0800d880
 8001ad4:	0800d888 	.word	0x0800d888
 8001ad8:	0800d890 	.word	0x0800d890
 8001adc:	0800d8bc 	.word	0x0800d8bc
 8001ae0:	0800d8dc 	.word	0x0800d8dc
 8001ae4:	0800d8e4 	.word	0x0800d8e4

08001ae8 <EPS_I2C_SendSyncCounter>:


HAL_StatusTypeDef EPS_I2C_SendSyncCounter(I2C_HandleTypeDef *hi2c,
                                          uint64_t sync_counter,
                                          uint16_t i2c_slave_addr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t payload[8];
    payload[0] = (sync_counter >> 56) & 0xFF;
 8001af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	0e0a      	lsrs	r2, r1, #24
 8001b02:	2300      	movs	r3, #0
 8001b04:	b2d3      	uxtb	r3, r2
 8001b06:	763b      	strb	r3, [r7, #24]
    payload[1] = (sync_counter >> 48) & 0xFF;
 8001b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	0c0a      	lsrs	r2, r1, #16
 8001b16:	2300      	movs	r3, #0
 8001b18:	b2d3      	uxtb	r3, r2
 8001b1a:	767b      	strb	r3, [r7, #25]
    payload[2] = (sync_counter >> 40) & 0xFF;
 8001b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	0a0a      	lsrs	r2, r1, #8
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	b2d3      	uxtb	r3, r2
 8001b2e:	76bb      	strb	r3, [r7, #26]
    payload[3] = (sync_counter >> 32) & 0xFF;
 8001b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	2300      	movs	r3, #0
 8001b40:	b2d3      	uxtb	r3, r2
 8001b42:	76fb      	strb	r3, [r7, #27]
    payload[4] = (sync_counter >> 24) & 0xFF;
 8001b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	0e02      	lsrs	r2, r0, #24
 8001b52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b56:	0e0b      	lsrs	r3, r1, #24
 8001b58:	b2d3      	uxtb	r3, r2
 8001b5a:	773b      	strb	r3, [r7, #28]
    payload[5] = (sync_counter >> 16) & 0xFF;
 8001b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	0c02      	lsrs	r2, r0, #16
 8001b6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b6e:	0c0b      	lsrs	r3, r1, #16
 8001b70:	b2d3      	uxtb	r3, r2
 8001b72:	777b      	strb	r3, [r7, #29]
    payload[6] = (sync_counter >> 8)  & 0xFF;
 8001b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	0a02      	lsrs	r2, r0, #8
 8001b82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b86:	0a0b      	lsrs	r3, r1, #8
 8001b88:	b2d3      	uxtb	r3, r2
 8001b8a:	77bb      	strb	r3, [r7, #30]
    payload[7] =  sync_counter        & 0xFF;
 8001b8c:	783b      	ldrb	r3, [r7, #0]
 8001b8e:	77fb      	strb	r3, [r7, #31]

    // Expect 0-byte ACK response
    uint8_t dummy_rx[1] = {0};
 8001b90:	2300      	movs	r3, #0
 8001b92:	753b      	strb	r3, [r7, #20]
    uint16_t rx_len = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	827b      	strh	r3, [r7, #18]

    return EPS_I2C_TransmitReceiveWithRetry(
 8001b98:	f107 0218 	add.w	r2, r7, #24
 8001b9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	f107 0312 	add.w	r3, r7, #18
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2308      	movs	r3, #8
 8001bae:	2110      	movs	r1, #16
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff fdcf 	bl	8001754 <EPS_I2C_TransmitReceiveWithRetry>
 8001bb6:	4603      	mov	r3, r0
        CMD_SYNC_COUNTER,
        payload, sizeof(payload),
        dummy_rx, &rx_len,
        i2c_slave_addr
    );
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SSP_GetRxBuffer>:
// Output:
//   - Returns a pointer to a uint8_t array, the appropriate receive buffer (rx_buffer1 or rx_buffer2)
// Significance:
//   - A helper function that selects the correct receive buffer based on the UART interface,
//     used to manage DMA reception of SSP frames. It’s marked "inline" for faster execution.
static inline uint8_t* SSP_GetRxBuffer(UART_HandleTypeDef *huart) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    // Check if the UART handle matches ssp_uart1; if so, return rx_buffer1, else return rx_buffer2
    return (huart == ssp_uart1) ? rx_buffer1 : rx_buffer2;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <SSP_GetRxBuffer+0x24>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d101      	bne.n	8001bd6 <SSP_GetRxBuffer+0x16>
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <SSP_GetRxBuffer+0x28>)
 8001bd4:	e000      	b.n	8001bd8 <SSP_GetRxBuffer+0x18>
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <SSP_GetRxBuffer+0x2c>)
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200004a8 	.word	0x200004a8
 8001be8:	200004b0 	.word	0x200004b0
 8001bec:	200005b0 	.word	0x200005b0

08001bf0 <HAL_UART_TxCpltCallback>:
// Output:
//   - None (void), resets the RS485 driver enable pin
// Significance:
//   - Called when a UART DMA transmission completes, resets the RS485 driver enable
//     pin to allow reception, critical for RS485 communication (Reference Manual, Section 36.8).
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces (UART2 or UART3)
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_UART_TxCpltCallback+0x48>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d004      	beq.n	8001c0c <HAL_UART_TxCpltCallback+0x1c>
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_UART_TxCpltCallback+0x4c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d111      	bne.n	8001c30 <HAL_UART_TxCpltCallback+0x40>
        // Select the correct driver enable pin based on UART
        GPIO_PinState de_pin = (huart->Instance == USART2) ? RS4852_DE_Pin : RS4851_DE_Pin;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_UART_TxCpltCallback+0x50>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_TxCpltCallback+0x2a>
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_UART_TxCpltCallback+0x2c>
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	73fb      	strb	r3, [r7, #15]
        // Both pins are on GPIOD
        GPIO_TypeDef *de_port = (huart->Instance == USART2) ? GPIOD : GPIOD;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_UART_TxCpltCallback+0x54>)
 8001c20:	60bb      	str	r3, [r7, #8]
        // Reset the driver enable pin to disable RS485 transmission
        HAL_GPIO_WritePin(de_port, de_pin, GPIO_PIN_RESET);
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2200      	movs	r2, #0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f003 febc 	bl	80059a8 <HAL_GPIO_WritePin>
    }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200004a8 	.word	0x200004a8
 8001c3c:	200004ac 	.word	0x200004ac
 8001c40:	40004400 	.word	0x40004400
 8001c44:	48000c00 	.word	0x48000c00

08001c48 <HAL_UART_ErrorCallback>:
// Output:
//   - None (void), handles UART errors by restarting DMA reception
// Significance:
//   - Handles UART errors (e.g., framing errors) by incrementing an error counter and
//     restarting DMA reception to recover, ensuring robust communication.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_UART_ErrorCallback+0x44>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d004      	beq.n	8001c64 <HAL_UART_ErrorCallback+0x1c>
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_UART_ErrorCallback+0x48>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10e      	bne.n	8001c82 <HAL_UART_ErrorCallback+0x3a>
        // Increment the framing error counter
        framing_errors++;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_UART_ErrorCallback+0x4c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_UART_ErrorCallback+0x4c>)
 8001c6c:	6013      	str	r3, [r2, #0]

        // Get the correct receive buffer for this UART
        uint8_t *rx_buffer = SSP_GetRxBuffer(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa6 	bl	8001bc0 <SSP_GetRxBuffer>
 8001c74:	60f8      	str	r0, [r7, #12]
        // Restart DMA reception to recover from the error
        HAL_UART_Receive_DMA(huart, rx_buffer, SSP_MAX_DATA_LEN + SSP_FRAME_OVERHEAD);
 8001c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f006 ff93 	bl	8008ba8 <HAL_UART_Receive_DMA>
    }
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200004a8 	.word	0x200004a8
 8001c90:	200004ac 	.word	0x200004ac
 8001c94:	200006b0 	.word	0x200006b0

08001c98 <GetSyncCounter>:
    __enable_irq();
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset TIM2
}

// Get current sync counter value with race condition protection
uint64_t GetSyncCounter(void) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9e:	b672      	cpsid	i
}
 8001ca0:	bf00      	nop
    uint64_t val;
    __disable_irq();
    val = sync_counter.sync_counter;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <GetSyncCounter+0x2c>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cac:	b662      	cpsie	i
}
 8001cae:	bf00      	nop
    __enable_irq();
    return val;
 8001cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200006b8 	.word	0x200006b8

08001cc8 <GetSyncTimestamp>:
uint32_t GetSubtickUs(void) {
    return __HAL_TIM_GET_COUNTER(&htim2); // Current TIM2 count since last pulse
}

// Get composite timestamp with race condition protection
void GetSyncTimestamp(uint64_t *counter, uint32_t *subtick) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd2:	b672      	cpsid	i
}
 8001cd4:	bf00      	nop
    __disable_irq();
    *counter = sync_counter.sync_counter;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <GetSyncTimestamp+0x34>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	e9c1 2300 	strd	r2, r3, [r1]
    *subtick = __HAL_TIM_GET_COUNTER(&htim2);
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <GetSyncTimestamp+0x38>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cec:	b662      	cpsie	i
}
 8001cee:	bf00      	nop
    __enable_irq();
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	200006b8 	.word	0x200006b8
 8001d00:	20000930 	.word	0x20000930

08001d04 <SelectMultiplexerChannel>:
//   - None (void), sets GPIO pins to select the multiplexer channel
// Significance:
//   - Configures the multiplexer (controlled by S0, S1, S2 pins) to select a specific
//     input channel for ADC measurements (e.g., solar array voltages or currents).
static void SelectMultiplexerChannel(uint8_t channel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
    // Set S0 pin (bit 0 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (channel & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	480f      	ldr	r0, [pc, #60]	@ (8001d58 <SelectMultiplexerChannel+0x54>)
 8001d1c:	f003 fe44 	bl	80059a8 <HAL_GPIO_WritePin>
    // Set S1 pin (bit 1 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (channel & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	105b      	asrs	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <SelectMultiplexerChannel+0x54>)
 8001d34:	f003 fe38 	bl	80059a8 <HAL_GPIO_WritePin>
    // Set S2 pin (bit 2 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (channel & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	109b      	asrs	r3, r3, #2
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d4a:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <SelectMultiplexerChannel+0x54>)
 8001d4c:	f003 fe2c 	bl	80059a8 <HAL_GPIO_WritePin>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	00000000 	.word	0x00000000

08001d60 <EPSPD_UpdateTelemetryAndParameters>:
//   - None (void), updates TelemetryData and Parameters, saves to EEPROM
// Significance:
//   - Processes raw ADC values to update telemetry (voltages, currents) and saves
//     them to EEPROM via I2C, critical for monitoring power distribution.
void EPSPD_UpdateTelemetryAndParameters(I2C_HandleTypeDef *hi2c, uint16_t *adc_values)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	@ 0x38
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    // Declare variables for sync counter and subtick
    uint64_t counter;
    uint32_t subtick;
    // Get the sync counter and subtick timestamp from the BMS (via sync_counter.h)
    GetSyncTimestamp(&counter, &subtick);
 8001d6a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001d6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ffa7 	bl	8001cc8 <GetSyncTimestamp>
    // Store subtick in telemetry (microseconds)

    // Update 12V bus voltage (mV) from ADC channel 13
    EPSPDTelemetryData.Bus12V = (uint16_t)(adc_values[13] * VOLTAGE_PER_COUNT);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	331a      	adds	r3, #26
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4bd0      	ldr	r3, [pc, #832]	@ (80020dc <EPSPD_UpdateTelemetryAndParameters+0x37c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
    // Update 5V bus voltage (mV) from ADC channel 1
    EPSPDTelemetryData.Bus5V = (uint16_t)(adc_values[1] * VOLTAGE_PER_COUNT);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3302      	adds	r3, #2
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db8:	ee17 3a90 	vmov	r3, s15
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4bc7      	ldr	r3, [pc, #796]	@ (80020dc <EPSPD_UpdateTelemetryAndParameters+0x37c>)
 8001dc0:	805a      	strh	r2, [r3, #2]
    // Update 3.3V bus voltage (mV) from ADC channel 10
    EPSPDTelemetryData.Bus3V3 = (uint16_t)(adc_values[10] * VOLTAGE_PER_COUNT);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd0:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ddc:	ee17 3a90 	vmov	r3, s15
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4bbe      	ldr	r3, [pc, #760]	@ (80020dc <EPSPD_UpdateTelemetryAndParameters+0x37c>)
 8001de4:	809a      	strh	r2, [r3, #4]

    // Select multiplexer channel 0 for solar array 1 current
    SelectMultiplexerChannel(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff ff8c 	bl	8001d04 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff f89f 	bl	8000f30 <SoftwareDelay>

    // Update solar array 1 current (mA) from ADC channel 4
    Parameters[6].Value = (uint16_t)(adc_values[4] * CURRENT_SCALING_FACTOR);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3308      	adds	r3, #8
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fba3 	bl	8000544 <__aeabi_i2d>
 8001dfe:	a3ae      	add	r3, pc, #696	@ (adr r3, 80020b8 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fc08 	bl	8000618 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe14 	bl	8000a3c <__aeabi_d2uiz>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4bb1      	ldr	r3, [pc, #708]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001e1a:	835a      	strh	r2, [r3, #26]

    // Select multiplexer channel 1 for solar array 3 voltage
    SelectMultiplexerChannel(1);
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7ff ff71 	bl	8001d04 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff f884 	bl	8000f30 <SoftwareDelay>
    // Update solar array 3 voltage (mV) from ADC channel 4
    Parameters[24].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb88 	bl	8000544 <__aeabi_i2d>
 8001e34:	a3a2      	add	r3, pc, #648	@ (adr r3, 80020c0 <EPSPD_UpdateTelemetryAndParameters+0x360>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbed 	bl	8000618 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fdf9 	bl	8000a3c <__aeabi_d2uiz>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4ba4      	ldr	r3, [pc, #656]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001e50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

    // Select multiplexer channel 2 for solar array 2 voltage
    SelectMultiplexerChannel(2);
 8001e54:	2002      	movs	r0, #2
 8001e56:	f7ff ff55 	bl	8001d04 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff f868 	bl	8000f30 <SoftwareDelay>
    // Update solar array 2 voltage (mV) from ADC channel 4
    Parameters[23].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	3308      	adds	r3, #8
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb6c 	bl	8000544 <__aeabi_i2d>
 8001e6c:	a394      	add	r3, pc, #592	@ (adr r3, 80020c0 <EPSPD_UpdateTelemetryAndParameters+0x360>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fbd1 	bl	8000618 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fddd 	bl	8000a3c <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b96      	ldr	r3, [pc, #600]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001e88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    // Select multiplexer channel 3 for solar array 1 voltage
    SelectMultiplexerChannel(3);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f7ff ff39 	bl	8001d04 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff f84c 	bl	8000f30 <SoftwareDelay>
    // Update solar array 1 voltage (mV) from ADC channel 4
    Parameters[22].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb50 	bl	8000544 <__aeabi_i2d>
 8001ea4:	a386      	add	r3, pc, #536	@ (adr r3, 80020c0 <EPSPD_UpdateTelemetryAndParameters+0x360>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fbb5 	bl	8000618 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7fe fdc1 	bl	8000a3c <__aeabi_d2uiz>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001ec0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    // Calculate current for RS 5V rail (mA) from ADC channel 0
    float v_imon = adc_values[0] * VOLTAGE_PER_COUNT;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[19].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001edc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001ede:	f7fe fb43 	bl	8000568 <__aeabi_f2d>
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x384>)
 8001ee8:	f7fe fcc0 	bl	800086c <__aeabi_ddiv>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	a374      	add	r3, pc, #464	@ (adr r3, 80020c8 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fb8d 	bl	8000618 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fd99 	bl	8000a3c <__aeabi_d2uiz>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b74      	ldr	r3, [pc, #464]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001f10:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

    // Calculate current for PL 5V rail (mA) from ADC channel 1
    v_imon = adc_values[1] * VOLTAGE_PER_COUNT;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	3302      	adds	r3, #2
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f22:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[18].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001f2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f30:	f7fe fb1a 	bl	8000568 <__aeabi_f2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x384>)
 8001f3a:	f7fe fc97 	bl	800086c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	a360      	add	r3, pc, #384	@ (adr r3, 80020c8 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fb64 	bl	8000618 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fd70 	bl	8000a3c <__aeabi_d2uiz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001f62:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    // Calculate current for CCU 5V rail (mA) from ADC channel 2
    v_imon = adc_values[2] * VOLTAGE_PER_COUNT;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f74:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[17].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001f80:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f82:	f7fe faf1 	bl	8000568 <__aeabi_f2d>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b56      	ldr	r3, [pc, #344]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x384>)
 8001f8c:	f7fe fc6e 	bl	800086c <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	a34b      	add	r3, pc, #300	@ (adr r3, 80020c8 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fb3b 	bl	8000618 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fd47 	bl	8000a3c <__aeabi_d2uiz>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8001fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    // Calculate current for GPS (mA) from ADC channel 3
    v_imon = adc_values[3] * VOLTAGE_PER_COUNT;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3306      	adds	r3, #6
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[12].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001fd2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fd4:	f7fe fac8 	bl	8000568 <__aeabi_f2d>
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x384>)
 8001fde:	f7fe fc45 	bl	800086c <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	a337      	add	r3, pc, #220	@ (adr r3, 80020c8 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fb12 	bl	8000618 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd1e 	bl	8000a3c <__aeabi_d2uiz>
 8002000:	4603      	mov	r3, r0
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8002006:	865a      	strh	r2, [r3, #50]	@ 0x32

    // Update solar array 2 current (mA) from ADC channel 5
    Parameters[7].Value = (uint16_t)(adc_values[5] * CURRENT_SCALING_FACTOR);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	330a      	adds	r3, #10
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa98 	bl	8000544 <__aeabi_i2d>
 8002014:	a328      	add	r3, pc, #160	@ (adr r3, 80020b8 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe fafd 	bl	8000618 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fd09 	bl	8000a3c <__aeabi_d2uiz>
 800202a:	4603      	mov	r3, r0
 800202c:	b29a      	uxth	r2, r3
 800202e:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8002030:	83da      	strh	r2, [r3, #30]

    // Update solar array 3 current (mA) from ADC channel 6
    Parameters[8].Value = (uint16_t)(adc_values[6] * CURRENT_SCALING_FACTOR);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa83 	bl	8000544 <__aeabi_i2d>
 800203e:	a31e      	add	r3, pc, #120	@ (adr r3, 80020b8 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fae8 	bl	8000618 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fcf4 	bl	8000a3c <__aeabi_d2uiz>
 8002054:	4603      	mov	r3, r0
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 800205a:	845a      	strh	r2, [r3, #34]	@ 0x22

    // Update XB subsystem current (mA) from ADC channel 7
    Parameters[9].Value = (uint16_t)(adc_values[7] * CURRENT_PER_COUNT);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	330e      	adds	r3, #14
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa6e 	bl	8000544 <__aeabi_i2d>
 8002068:	a319      	add	r3, pc, #100	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fad3 	bl	8000618 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fcdf 	bl	8000a3c <__aeabi_d2uiz>
 800207e:	4603      	mov	r3, r0
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x380>)
 8002084:	84da      	strh	r2, [r3, #38]	@ 0x26
    // Update XB 12V current (mA) from ADC channel 7
    Parameters[21].Value = (uint16_t)((adc_values[7] * VOLTAGE_PER_COUNT / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	330e      	adds	r3, #14
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002094:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8002098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209c:	ee17 0a90 	vmov	r0, s15
 80020a0:	f7fe fa62 	bl	8000568 <__aeabi_f2d>
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x384>)
 80020aa:	f7fe fbdf 	bl	800086c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	e018      	b.n	80020e8 <EPSPD_UpdateTelemetryAndParameters+0x388>
 80020b6:	bf00      	nop
 80020b8:	f38c5437 	.word	0xf38c5437
 80020bc:	3fc4a137 	.word	0x3fc4a137
 80020c0:	4d163348 	.word	0x4d163348
 80020c4:	40228767 	.word	0x40228767
 80020c8:	c94fe0ff 	.word	0xc94fe0ff
 80020cc:	40a9aaa5 	.word	0x40a9aaa5
 80020d0:	00000000 	.word	0x00000000
 80020d4:	40201d00 	.word	0x40201d00
 80020d8:	3f4e4000 	.word	0x3f4e4000
 80020dc:	200006c8 	.word	0x200006c8
 80020e0:	20000154 	.word	0x20000154
 80020e4:	408f4000 	.word	0x408f4000
 80020e8:	4619      	mov	r1, r3
 80020ea:	a39f      	add	r3, pc, #636	@ (adr r3, 8002368 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fa92 	bl	8000618 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fc9e 	bl	8000a3c <__aeabi_d2uiz>
 8002100:	4603      	mov	r3, r0
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b9c      	ldr	r3, [pc, #624]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002106:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    // Calculate current for ADCS 5V rail (mA) from ADC channel 8
    v_imon = adc_values[8] * VOLTAGE_PER_COUNT;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3310      	adds	r3, #16
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 800237c <EPSPD_UpdateTelemetryAndParameters+0x61c>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[16].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002124:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002126:	f7fe fa1f 	bl	8000568 <__aeabi_f2d>
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4b94      	ldr	r3, [pc, #592]	@ (8002380 <EPSPD_UpdateTelemetryAndParameters+0x620>)
 8002130:	f7fe fb9c 	bl	800086c <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	a38a      	add	r3, pc, #552	@ (adr r3, 8002368 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe fa69 	bl	8000618 <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fc75 	bl	8000a3c <__aeabi_d2uiz>
 8002152:	4603      	mov	r3, r0
 8002154:	b29a      	uxth	r2, r3
 8002156:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002158:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Update CCU subsystem current (mA) from ADC channel 9
    Parameters[10].Value = (uint16_t)(adc_values[9] * CURRENT_PER_COUNT);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3312      	adds	r3, #18
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9ee 	bl	8000544 <__aeabi_i2d>
 8002168:	a381      	add	r3, pc, #516	@ (adr r3, 8002370 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa53 	bl	8000618 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fc5f 	bl	8000a3c <__aeabi_d2uiz>
 800217e:	4603      	mov	r3, r0
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002184:	855a      	strh	r2, [r3, #42]	@ 0x2a

    // Calculate current for 3.3V bus (mA) from ADC channel 10
    v_imon = adc_values[10] * VOLTAGE_PER_COUNT;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3314      	adds	r3, #20
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 800237c <EPSPD_UpdateTelemetryAndParameters+0x61c>
 8002198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[5].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 80021a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021a2:	f7fe f9e1 	bl	8000568 <__aeabi_f2d>
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b75      	ldr	r3, [pc, #468]	@ (8002380 <EPSPD_UpdateTelemetryAndParameters+0x620>)
 80021ac:	f7fe fb5e 	bl	800086c <__aeabi_ddiv>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	a36b      	add	r3, pc, #428	@ (adr r3, 8002368 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe fa2b 	bl	8000618 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fc37 	bl	8000a3c <__aeabi_d2uiz>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 80021d4:	82da      	strh	r2, [r3, #22]

    // Update ADCS subsystem current (mA) from ADC channel 11
    Parameters[11].Value = (uint16_t)(adc_values[11] * CURRENT_PER_COUNT);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	3316      	adds	r3, #22
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9b1 	bl	8000544 <__aeabi_i2d>
 80021e2:	a363      	add	r3, pc, #396	@ (adr r3, 8002370 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa16 	bl	8000618 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fc22 	bl	8000a3c <__aeabi_d2uiz>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 80021fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Update payload current (mA) from ADC channel 12
    Parameters[13].Value = (uint16_t)(adc_values[12] * CURRENT_PER_COUNT);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3318      	adds	r3, #24
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f99c 	bl	8000544 <__aeabi_i2d>
 800220c:	a358      	add	r3, pc, #352	@ (adr r3, 8002370 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe fa01 	bl	8000618 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fc0d 	bl	8000a3c <__aeabi_d2uiz>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002228:	86da      	strh	r2, [r3, #54]	@ 0x36

    // Calculate current for ADCS 12V rail (mA) from ADC channel 13
    v_imon = adc_values[13] * VOLTAGE_PER_COUNT;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	331a      	adds	r3, #26
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002238:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800237c <EPSPD_UpdateTelemetryAndParameters+0x61c>
 800223c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002240:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[20].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002244:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002246:	f7fe f98f 	bl	8000568 <__aeabi_f2d>
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <EPSPD_UpdateTelemetryAndParameters+0x620>)
 8002250:	f7fe fb0c 	bl	800086c <__aeabi_ddiv>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	a342      	add	r3, pc, #264	@ (adr r3, 8002368 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f9d9 	bl	8000618 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f7fe fbe5 	bl	8000a3c <__aeabi_d2uiz>
 8002272:	4603      	mov	r3, r0
 8002274:	b29a      	uxth	r2, r3
 8002276:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002278:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    // Calculate current for UHF subsystem (mA) from ADC channel 14
    v_imon = adc_values[14] * VOLTAGE_PER_COUNT;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	331c      	adds	r3, #28
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800237c <EPSPD_UpdateTelemetryAndParameters+0x61c>
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[14].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002296:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002298:	f7fe f966 	bl	8000568 <__aeabi_f2d>
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b37      	ldr	r3, [pc, #220]	@ (8002380 <EPSPD_UpdateTelemetryAndParameters+0x620>)
 80022a2:	f7fe fae3 	bl	800086c <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8002368 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe f9b0 	bl	8000618 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fbbc 	bl	8000a3c <__aeabi_d2uiz>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 80022ca:	875a      	strh	r2, [r3, #58]	@ 0x3a

    // Calculate current for OBC subsystem (mA) from ADC channel 15
    v_imon = adc_values[15] * VOLTAGE_PER_COUNT;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	331e      	adds	r3, #30
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022da:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800237c <EPSPD_UpdateTelemetryAndParameters+0x61c>
 80022de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Parameters[15].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 80022e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022e8:	f7fe f93e 	bl	8000568 <__aeabi_f2d>
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <EPSPD_UpdateTelemetryAndParameters+0x620>)
 80022f2:	f7fe fabb 	bl	800086c <__aeabi_ddiv>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8002368 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe f988 	bl	8000618 <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	f7fe fb94 	bl	8000a3c <__aeabi_d2uiz>
 8002314:	4603      	mov	r3, r0
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 800231a:	87da      	strh	r2, [r3, #62]	@ 0x3e

    // Copy bus voltages to parameter array for consistency
    Parameters[0].Value = EPSPDTelemetryData.Bus12V;
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 800231e:	881a      	ldrh	r2, [r3, #0]
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002322:	805a      	strh	r2, [r3, #2]
    Parameters[1].Value = EPSPDTelemetryData.Bus5V;
 8002324:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8002326:	885a      	ldrh	r2, [r3, #2]
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 800232a:	80da      	strh	r2, [r3, #6]
    Parameters[2].Value = EPSPDTelemetryData.Bus3V3;
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 800232e:	889a      	ldrh	r2, [r3, #4]
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002332:	815a      	strh	r2, [r3, #10]

    // Prepare EEPROM data structure with telemetry and timestamp
    EEPROM_TelemetryWithTimestamp eeprom_data;
    eeprom_data.telemetry = EPSPDTelemetryData;
 8002334:	4a13      	ldr	r2, [pc, #76]	@ (8002384 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800233e:	6018      	str	r0, [r3, #0]
 8002340:	3304      	adds	r3, #4
 8002342:	8019      	strh	r1, [r3, #0]
    eeprom_data.counter = counter;
 8002344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002348:	e9c7 2304 	strd	r2, r3, [r7, #16]
    eeprom_data.subtick_us = subtick;
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	61bb      	str	r3, [r7, #24]
    // Save telemetry to EEPROM via I2C
    epspd_WriteTelemetry(hi2c, &eeprom_data);
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fee6 	bl	8001128 <epspd_WriteTelemetry>
}
 800235c:	bf00      	nop
 800235e:	3738      	adds	r7, #56	@ 0x38
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	f3af 8000 	nop.w
 8002368:	c94fe0ff 	.word	0xc94fe0ff
 800236c:	40a9aaa5 	.word	0x40a9aaa5
 8002370:	00000000 	.word	0x00000000
 8002374:	40201d00 	.word	0x40201d00
 8002378:	20000154 	.word	0x20000154
 800237c:	3f4e4000 	.word	0x3f4e4000
 8002380:	408f4000 	.word	0x408f4000
 8002384:	200006c8 	.word	0x200006c8

08002388 <main>:
void StartTask02(void *argument);
void StartTask03(void *argument);
void StartTask04(void *argument);

int main(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  HAL_Init();
 800238c:	f001 fb9b 	bl	8003ac6 <HAL_Init>
  SystemClock_Config();
 8002390:	f000 f8fc 	bl	800258c <SystemClock_Config>
  MX_GPIO_Init();
 8002394:	f000 fc82 	bl	8002c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002398:	f000 fc3a 	bl	8002c10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800239c:	f000 fbd4 	bl	8002b48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80023a0:	f000 fc04 	bl	8002bac <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80023a4:	f000 fba0 	bl	8002ae8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80023a8:	f000 f936 	bl	8002618 <MX_ADC1_Init>
  MX_I2C2_Init();
 80023ac:	f000 f9aa 	bl	8002704 <MX_I2C2_Init>
  MX_SPI1_Init();
 80023b0:	f000 f9e8 	bl	8002784 <MX_SPI1_Init>
  MX_SPI3_Init();
 80023b4:	f000 fa20 	bl	80027f8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80023b8:	f000 fa58 	bl	800286c <MX_TIM1_Init>
  MX_TIM2_Init();
 80023bc:	f000 faaa 	bl	8002914 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023c0:	f000 faf6 	bl	80029b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023c4:	f000 fb42 	bl	8002a4c <MX_TIM4_Init>

  osKernelInitialize();
 80023c8:	f007 fee4 	bl	800a194 <osKernelInitialize>

  NormalTaskHandle = osThreadNew(StartDefaultTask, NULL, &NormalTask_attributes);
 80023cc:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <main+0x8c>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	4811      	ldr	r0, [pc, #68]	@ (8002418 <main+0x90>)
 80023d2:	f007 ff29 	bl	800a228 <osThreadNew>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a10      	ldr	r2, [pc, #64]	@ (800241c <main+0x94>)
 80023da:	6013      	str	r3, [r2, #0]
  FaultTask02Handle = osThreadNew(StartTask02, NULL, &FaultTask02_attributes);
 80023dc:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <main+0x98>)
 80023de:	2100      	movs	r1, #0
 80023e0:	4810      	ldr	r0, [pc, #64]	@ (8002424 <main+0x9c>)
 80023e2:	f007 ff21 	bl	800a228 <osThreadNew>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002428 <main+0xa0>)
 80023ea:	6013      	str	r3, [r2, #0]
  SSPmasterTask03Handle = osThreadNew(StartTask03, NULL, &SSPmasterTask03_attributes);
 80023ec:	4a0f      	ldr	r2, [pc, #60]	@ (800242c <main+0xa4>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	480f      	ldr	r0, [pc, #60]	@ (8002430 <main+0xa8>)
 80023f2:	f007 ff19 	bl	800a228 <osThreadNew>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002434 <main+0xac>)
 80023fa:	6013      	str	r3, [r2, #0]
  SyncTask04Handle = osThreadNew(StartTask04, NULL, &SyncTask04_attributes);
 80023fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002438 <main+0xb0>)
 80023fe:	2100      	movs	r1, #0
 8002400:	480e      	ldr	r0, [pc, #56]	@ (800243c <main+0xb4>)
 8002402:	f007 ff11 	bl	800a228 <osThreadNew>
 8002406:	4603      	mov	r3, r0
 8002408:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <main+0xb8>)
 800240a:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800240c:	f007 fee6 	bl	800a1dc <osKernelStart>

  while(1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <main+0x88>
 8002414:	0800daa8 	.word	0x0800daa8
 8002418:	08002445 	.word	0x08002445
 800241c:	20000cd0 	.word	0x20000cd0
 8002420:	0800dacc 	.word	0x0800dacc
 8002424:	080024e9 	.word	0x080024e9
 8002428:	20000cd4 	.word	0x20000cd4
 800242c:	0800daf0 	.word	0x0800daf0
 8002430:	08002519 	.word	0x08002519
 8002434:	20000cd8 	.word	0x20000cd8
 8002438:	0800db14 	.word	0x0800db14
 800243c:	08002539 	.word	0x08002539
 8002440:	20000cdc 	.word	0x20000cdc

08002444 <StartDefaultTask>:
  }
}


void StartDefaultTask(void *argument)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	@ 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    for (;;) {
        uint16_t adc_values[16] = {0};
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2220      	movs	r2, #32
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f00a fca1 	bl	800cd9c <memset>
        uint32_t last_save_time = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_ready = 0;
 800245e:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <StartDefaultTask+0x88>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
        EPS_Log_Message(EPS_LOG_INFO, "Starting ADC conversion via DMA for telemetry update");
 8002464:	491a      	ldr	r1, [pc, #104]	@ (80024d0 <StartDefaultTask+0x8c>)
 8002466:	2003      	movs	r0, #3
 8002468:	f7fe fc9e 	bl	8000da8 <EPS_Log_Message>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 16);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2210      	movs	r2, #16
 8002472:	4619      	mov	r1, r3
 8002474:	4817      	ldr	r0, [pc, #92]	@ (80024d4 <StartDefaultTask+0x90>)
 8002476:	f001 febf 	bl	80041f8 <HAL_ADC_Start_DMA>
        while (!adc_ready) {
 800247a:	e003      	b.n	8002484 <StartDefaultTask+0x40>
            EPS_Log_Message(EPS_LOG_WARNING, "Waiting for ADC DMA complete flag...");
 800247c:	4916      	ldr	r1, [pc, #88]	@ (80024d8 <StartDefaultTask+0x94>)
 800247e:	2002      	movs	r0, #2
 8002480:	f7fe fc92 	bl	8000da8 <EPS_Log_Message>
        while (!adc_ready) {
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <StartDefaultTask+0x88>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f6      	beq.n	800247c <StartDefaultTask+0x38>
        }
        EPSPD_UpdateTelemetryAndParameters(&hi2c2, adc_values);
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	4619      	mov	r1, r3
 8002494:	4811      	ldr	r0, [pc, #68]	@ (80024dc <StartDefaultTask+0x98>)
 8002496:	f7ff fc63 	bl	8001d60 <EPSPD_UpdateTelemetryAndParameters>
        EPS_Log_Message(EPS_LOG_INFO, "Telemetry updated from ADC values");
 800249a:	4911      	ldr	r1, [pc, #68]	@ (80024e0 <StartDefaultTask+0x9c>)
 800249c:	2003      	movs	r0, #3
 800249e:	f7fe fc83 	bl	8000da8 <EPS_Log_Message>

        if (HAL_GetTick() - last_save_time >= EEPROM_SAVE_INTERVAL) {
 80024a2:	f001 fb3d 	bl	8003b20 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d906      	bls.n	80024c2 <StartDefaultTask+0x7e>
            last_save_time = HAL_GetTick();
 80024b4:	f001 fb34 	bl	8003b20 <HAL_GetTick>
 80024b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            EPS_Log_Message(EPS_LOG_INFO, "Saving telemetry to EEPROM");
 80024ba:	490a      	ldr	r1, [pc, #40]	@ (80024e4 <StartDefaultTask+0xa0>)
 80024bc:	2003      	movs	r0, #3
 80024be:	f7fe fc73 	bl	8000da8 <EPS_Log_Message>
        }
        osDelay(1000);
 80024c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024c6:	f007 ff41 	bl	800a34c <osDelay>
    for (;;) {
 80024ca:	e7bf      	b.n	800244c <StartDefaultTask+0x8>
 80024cc:	200006ce 	.word	0x200006ce
 80024d0:	0800d988 	.word	0x0800d988
 80024d4:	200006d0 	.word	0x200006d0
 80024d8:	0800d9c0 	.word	0x0800d9c0
 80024dc:	20000738 	.word	0x20000738
 80024e0:	0800d9e8 	.word	0x0800d9e8
 80024e4:	0800da0c 	.word	0x0800da0c

080024e8 <StartTask02>:
    }
}

void StartTask02(void *argument)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 80024f0:	4906      	ldr	r1, [pc, #24]	@ (800250c <StartTask02+0x24>)
 80024f2:	2004      	movs	r0, #4
 80024f4:	f7fe fc58 	bl	8000da8 <EPS_Log_Message>
        Fault_PollAndHandle(&hi2c2, &huart1);
 80024f8:	4905      	ldr	r1, [pc, #20]	@ (8002510 <StartTask02+0x28>)
 80024fa:	4806      	ldr	r0, [pc, #24]	@ (8002514 <StartTask02+0x2c>)
 80024fc:	f7fe fef2 	bl	80012e4 <Fault_PollAndHandle>
        osDelay(100);
 8002500:	2064      	movs	r0, #100	@ 0x64
 8002502:	f007 ff23 	bl	800a34c <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 8002506:	bf00      	nop
 8002508:	e7f2      	b.n	80024f0 <StartTask02+0x8>
 800250a:	bf00      	nop
 800250c:	0800da28 	.word	0x0800da28
 8002510:	20000a14 	.word	0x20000a14
 8002514:	20000738 	.word	0x20000738

08002518 <StartTask03>:
    }
}

void StartTask03(void *argument)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <StartTask03+0x1c>)
 8002522:	2004      	movs	r0, #4
 8002524:	f7fe fc40 	bl	8000da8 <EPS_Log_Message>
        osDelay(10000); // Poll every 10 seconds
 8002528:	f242 7010 	movw	r0, #10000	@ 0x2710
 800252c:	f007 ff0e 	bl	800a34c <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 8002530:	bf00      	nop
 8002532:	e7f5      	b.n	8002520 <StartTask03+0x8>
 8002534:	0800da50 	.word	0x0800da50

08002538 <StartTask04>:
    }
}

void StartTask04(void *argument)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	6078      	str	r0, [r7, #4]
    for (;;) {
        if (sync_pulse_triggered) {
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <StartTask04+0x48>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <StartTask04+0x40>
            sync_pulse_triggered = false;
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <StartTask04+0x48>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]

            uint64_t counter = GetSyncCounter();
 8002550:	f7ff fba2 	bl	8001c98 <GetSyncCounter>
 8002554:	e9c7 0104 	strd	r0, r1, [r7, #16]
            HAL_StatusTypeDef status = EPS_I2C_SendSyncCounter(&hi2c2, counter, I2C_SLAVE_ADDR_BMS);
 8002558:	2360      	movs	r3, #96	@ 0x60
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002560:	4808      	ldr	r0, [pc, #32]	@ (8002584 <StartTask04+0x4c>)
 8002562:	f7ff fac1 	bl	8001ae8 <EPS_I2C_SendSyncCounter>
 8002566:	4603      	mov	r3, r0
 8002568:	73fb      	strb	r3, [r7, #15]

            if (status != HAL_OK) {
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <StartTask04+0x40>
                EPS_Log_Message(EPS_LOG_ERROR, "Failed to send sync counter");
 8002570:	4905      	ldr	r1, [pc, #20]	@ (8002588 <StartTask04+0x50>)
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe fc18 	bl	8000da8 <EPS_Log_Message>
            }
        }

        osDelay(5);
 8002578:	2005      	movs	r0, #5
 800257a:	f007 fee7 	bl	800a34c <osDelay>
        if (sync_pulse_triggered) {
 800257e:	e7df      	b.n	8002540 <StartTask04+0x8>
 8002580:	20000ccc 	.word	0x20000ccc
 8002584:	20000738 	.word	0x20000738
 8002588:	0800da74 	.word	0x0800da74

0800258c <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b096      	sub	sp, #88	@ 0x58
 8002590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	2244      	movs	r2, #68	@ 0x44
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f00a fbfe 	bl	800cd9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a0:	463b      	mov	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	611a      	str	r2, [r3, #16]

  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025b2:	f004 f829 	bl	8006608 <HAL_PWREx_ControlVoltageScaling>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025bc:	f000 fcaa 	bl	8002f14 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025c0:	2302      	movs	r3, #2
 80025c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025ca:	2340      	movs	r3, #64	@ 0x40
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 f86c 	bl	80066b4 <HAL_RCC_OscConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80025e2:	f000 fc97 	bl	8002f14 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	230f      	movs	r3, #15
 80025e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025ea:	2301      	movs	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025fa:	463b      	mov	r3, r7
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fc72 	bl	8006ee8 <HAL_RCC_ClockConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800260a:	f000 fc83 	bl	8002f14 <Error_Handler>
  }
}
 800260e:	bf00      	nop
 8002610:	3758      	adds	r7, #88	@ 0x58
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 800263a:	4b2f      	ldr	r3, [pc, #188]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800263c:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <MX_ADC1_Init+0xe4>)
 800263e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002646:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800264c:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002652:	4b29      	ldr	r3, [pc, #164]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800265a:	2204      	movs	r2, #4
 800265c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800265e:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002660:	2200      	movs	r2, #0
 8002662:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002664:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002666:	2200      	movs	r2, #0
 8002668:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800266a:	4b23      	ldr	r3, [pc, #140]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800266c:	2201      	movs	r2, #1
 800266e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002678:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800267e:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002680:	2200      	movs	r2, #0
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002684:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800268e:	2200      	movs	r2, #0
 8002690:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if(HAL_ADC_Init(&hadc1) != HAL_OK)
 800269a:	4817      	ldr	r0, [pc, #92]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 800269c:	f001 fc58 	bl	8003f50 <HAL_ADC_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80026a6:	f000 fc35 	bl	8002f14 <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  if(HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4810      	ldr	r0, [pc, #64]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 80026b6:	f002 fbc5 	bl	8004e44 <HAL_ADCEx_MultiModeConfigChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80026c0:	f000 fc28 	bl	8002f14 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <MX_ADC1_Init+0xe8>)
 80026c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026c8:	2306      	movs	r3, #6
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026d0:	237f      	movs	r3, #127	@ 0x7f
 80026d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026d4:	2304      	movs	r3, #4
 80026d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_ADC1_Init+0xe0>)
 80026e2:	f001 fe63 	bl	80043ac <HAL_ADC_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80026ec:	f000 fc12 	bl	8002f14 <Error_Handler>
  }
}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	@ 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200006d0 	.word	0x200006d0
 80026fc:	50040000 	.word	0x50040000
 8002700:	04300002 	.word	0x04300002

08002704 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <MX_I2C2_Init+0x74>)
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <MX_I2C2_Init+0x78>)
 800270c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800270e:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002710:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <MX_I2C2_Init+0x7c>)
 8002712:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002714:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800271a:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <MX_I2C2_Init+0x74>)
 800271c:	2201      	movs	r2, #1
 800271e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002720:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <MX_I2C2_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002732:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002734:	2200      	movs	r2, #0
 8002736:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002738:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <MX_I2C2_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
  if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 800273e:	480e      	ldr	r0, [pc, #56]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002740:	f003 f96d 	bl	8005a1e <HAL_I2C_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800274a:	f000 fbe3 	bl	8002f14 <Error_Handler>
  }

  if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800274e:	2100      	movs	r1, #0
 8002750:	4809      	ldr	r0, [pc, #36]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002752:	f003 feb3 	bl	80064bc <HAL_I2CEx_ConfigAnalogFilter>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800275c:	f000 fbda 	bl	8002f14 <Error_Handler>
  }

  if(HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002760:	2100      	movs	r1, #0
 8002762:	4805      	ldr	r0, [pc, #20]	@ (8002778 <MX_I2C2_Init+0x74>)
 8002764:	f003 fef5 	bl	8006552 <HAL_I2CEx_ConfigDigitalFilter>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800276e:	f000 fbd1 	bl	8002f14 <Error_Handler>
  }
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000738 	.word	0x20000738
 800277c:	40005800 	.word	0x40005800
 8002780:	00503d58 	.word	0x00503d58

08002784 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 800278a:	4a1a      	ldr	r2, [pc, #104]	@ (80027f4 <MX_SPI1_Init+0x70>)
 800278c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002794:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800279a:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 800279c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80027a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027ae:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027ca:	2207      	movs	r2, #7
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi1) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <MX_SPI1_Init+0x6c>)
 80027dc:	f005 faa4 	bl	8007d28 <HAL_SPI_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80027e6:	f000 fb95 	bl	8002f14 <Error_Handler>
  }
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000081c 	.word	0x2000081c
 80027f4:	40013000 	.word	0x40013000

080027f8 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  hspi3.Instance = SPI3;
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <MX_SPI3_Init+0x6c>)
 80027fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002868 <MX_SPI3_Init+0x70>)
 8002800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <MX_SPI3_Init+0x6c>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002810:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002814:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <MX_SPI3_Init+0x6c>)
 800281e:	2200      	movs	r2, #0
 8002820:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002828:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <MX_SPI3_Init+0x6c>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002832:	2200      	movs	r2, #0
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002838:	2200      	movs	r2, #0
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <MX_SPI3_Init+0x6c>)
 800283e:	2207      	movs	r2, #7
 8002840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <MX_SPI3_Init+0x6c>)
 800284a:	2200      	movs	r2, #0
 800284c:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi3) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	@ (8002864 <MX_SPI3_Init+0x6c>)
 8002850:	f005 fa6a 	bl	8007d28 <HAL_SPI_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 800285a:	f000 fb5b 	bl	8002f14 <Error_Handler>
  }
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000880 	.word	0x20000880
 8002868:	40003c00 	.word	0x40003c00

0800286c <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <MX_TIM1_Init+0xa0>)
 800288c:	4a20      	ldr	r2, [pc, #128]	@ (8002910 <MX_TIM1_Init+0xa4>)
 800288e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8002890:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <MX_TIM1_Init+0xa0>)
 8002892:	224f      	movs	r2, #79	@ 0x4f
 8002894:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <MX_TIM1_Init+0xa0>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <MX_TIM1_Init+0xa0>)
 800289e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <MX_TIM1_Init+0xa0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <MX_TIM1_Init+0xa0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <MX_TIM1_Init+0xa0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028b6:	4815      	ldr	r0, [pc, #84]	@ (800290c <MX_TIM1_Init+0xa0>)
 80028b8:	f005 fbf9 	bl	80080ae <HAL_TIM_Base_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80028c2:	f000 fb27 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ca:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	480e      	ldr	r0, [pc, #56]	@ (800290c <MX_TIM1_Init+0xa0>)
 80028d4:	f005 fdb9 	bl	800844a <HAL_TIM_ConfigClockSource>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80028de:	f000 fb19 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4806      	ldr	r0, [pc, #24]	@ (800290c <MX_TIM1_Init+0xa0>)
 80028f4:	f005 ffda 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80028fe:	f000 fb09 	bl	8002f14 <Error_Handler>
  }
}
 8002902:	bf00      	nop
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200008e4 	.word	0x200008e4
 8002910:	40012c00 	.word	0x40012c00

08002914 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <MX_TIM2_Init+0x98>)
 800293c:	224f      	movs	r2, #79	@ 0x4f
 800293e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294e:	4b17      	ldr	r3, [pc, #92]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800295a:	4814      	ldr	r0, [pc, #80]	@ (80029ac <MX_TIM2_Init+0x98>)
 800295c:	f005 fba7 	bl	80080ae <HAL_TIM_Base_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002966:	f000 fad5 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296e:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	4619      	mov	r1, r3
 8002976:	480d      	ldr	r0, [pc, #52]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002978:	f005 fd67 	bl	800844a <HAL_TIM_ConfigClockSource>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002982:	f000 fac7 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4806      	ldr	r0, [pc, #24]	@ (80029ac <MX_TIM2_Init+0x98>)
 8002994:	f005 ff8a 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800299e:	f000 fab9 	bl	8002f14 <Error_Handler>
  }
}
 80029a2:	bf00      	nop
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000930 	.word	0x20000930

080029b0 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <MX_TIM3_Init+0x98>)
 80029d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029d6:	224f      	movs	r2, #79	@ 0x4f
 80029d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029e0:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029f4:	4813      	ldr	r0, [pc, #76]	@ (8002a44 <MX_TIM3_Init+0x94>)
 80029f6:	f005 fb5a 	bl	80080ae <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002a00:	f000 fa88 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a08:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	@ (8002a44 <MX_TIM3_Init+0x94>)
 8002a12:	f005 fd1a 	bl	800844a <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002a1c:	f000 fa7a 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <MX_TIM3_Init+0x94>)
 8002a2e:	f005 ff3d 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f000 fa6c 	bl	8002f14 <Error_Handler>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000097c 	.word	0x2000097c
 8002a48:	40000400 	.word	0x40000400

08002a4c <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <MX_TIM4_Init+0x98>)
 8002a6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a72:	224f      	movs	r2, #79	@ 0x4f
 8002a74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a90:	4813      	ldr	r0, [pc, #76]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002a92:	f005 fb0c 	bl	80080ae <HAL_TIM_Base_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002a9c:	f000 fa3a 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa4:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4619      	mov	r1, r3
 8002aac:	480c      	ldr	r0, [pc, #48]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002aae:	f005 fccc 	bl	800844a <HAL_TIM_ConfigClockSource>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ab8:	f000 fa2c 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <MX_TIM4_Init+0x94>)
 8002aca:	f005 feef 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ad4:	f000 fa1e 	bl	8002f14 <Error_Handler>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200009c8 	.word	0x200009c8
 8002ae4:	40000800 	.word	0x40000800

08002ae8 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002aee:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <MX_USART1_UART_Init+0x5c>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002af2:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_UART_Init(&huart1) != HAL_OK)
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b2c:	f005 ff64 	bl	80089f8 <HAL_UART_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b36:	f000 f9ed 	bl	8002f14 <Error_Handler>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000a14 	.word	0x20000a14
 8002b44:	40013800 	.word	0x40013800

08002b48 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ba8 <MX_USART2_UART_Init+0x60>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b52:	4b14      	ldr	r3, [pc, #80]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b84:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4804      	ldr	r0, [pc, #16]	@ (8002ba4 <MX_USART2_UART_Init+0x5c>)
 8002b92:	f007 fa49 	bl	800a028 <HAL_RS485Ex_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b9c:	f000 f9ba 	bl	8002f14 <Error_Handler>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000a9c 	.word	0x20000a9c
 8002ba8:	40004400 	.word	0x40004400

08002bac <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bb2:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <MX_USART3_UART_Init+0x60>)
 8002bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be8:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <MX_USART3_UART_Init+0x5c>)
 8002bf6:	f007 fa17 	bl	800a028 <HAL_RS485Ex_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c00:	f000 f988 	bl	8002f14 <Error_Handler>
  }
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000b24 	.word	0x20000b24
 8002c0c:	40004800 	.word	0x40004800

08002c10 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <MX_DMA_Init+0x88>)
 8002c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <MX_DMA_Init+0x88>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c22:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <MX_DMA_Init+0x88>)
 8002c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2105      	movs	r1, #5
 8002c32:	200c      	movs	r0, #12
 8002c34:	f002 fa6e 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c38:	200c      	movs	r0, #12
 8002c3a:	f002 fa87 	bl	800514c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2105      	movs	r1, #5
 8002c42:	200d      	movs	r0, #13
 8002c44:	f002 fa66 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c48:	200d      	movs	r0, #13
 8002c4a:	f002 fa7f 	bl	800514c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2105      	movs	r1, #5
 8002c52:	200e      	movs	r0, #14
 8002c54:	f002 fa5e 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002c58:	200e      	movs	r0, #14
 8002c5a:	f002 fa77 	bl	800514c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2105      	movs	r1, #5
 8002c62:	200f      	movs	r0, #15
 8002c64:	f002 fa56 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002c68:	200f      	movs	r0, #15
 8002c6a:	f002 fa6f 	bl	800514c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2105      	movs	r1, #5
 8002c72:	2010      	movs	r0, #16
 8002c74:	f002 fa4e 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002c78:	2010      	movs	r0, #16
 8002c7a:	f002 fa67 	bl	800514c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2105      	movs	r1, #5
 8002c82:	2011      	movs	r0, #17
 8002c84:	f002 fa46 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002c88:	2011      	movs	r0, #17
 8002c8a:	f002 fa5f 	bl	800514c <HAL_NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000

08002c9c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	@ 0x30
 8002ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb2:	4b89      	ldr	r3, [pc, #548]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	4a88      	ldr	r2, [pc, #544]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cb8:	f043 0310 	orr.w	r3, r3, #16
 8002cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cbe:	4b86      	ldr	r3, [pc, #536]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cca:	4b83      	ldr	r3, [pc, #524]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	4a82      	ldr	r2, [pc, #520]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd6:	4b80      	ldr	r3, [pc, #512]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cee:	4b7a      	ldr	r3, [pc, #488]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b77      	ldr	r3, [pc, #476]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	4a76      	ldr	r2, [pc, #472]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d06:	4b74      	ldr	r3, [pc, #464]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d12:	4b71      	ldr	r3, [pc, #452]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	4a70      	ldr	r2, [pc, #448]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d36:	4b68      	ldr	r3, [pc, #416]	@ (8002ed8 <MX_GPIO_Init+0x23c>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOE, RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002d42:	2200      	movs	r2, #0
 8002d44:	f240 511c 	movw	r1, #1308	@ 0x51c
 8002d48:	4864      	ldr	r0, [pc, #400]	@ (8002edc <MX_GPIO_Init+0x240>)
 8002d4a:	f002 fe2d 	bl	80059a8 <HAL_GPIO_WritePin>
                          |CCU5V_EN_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin, GPIO_PIN_RESET);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002d54:	4862      	ldr	r0, [pc, #392]	@ (8002ee0 <MX_GPIO_Init+0x244>)
 8002d56:	f002 fe27 	bl	80059a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, PL_EN_Pin|UHF_EN_Pin, GPIO_PIN_RESET);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8002d60:	4860      	ldr	r0, [pc, #384]	@ (8002ee4 <MX_GPIO_Init+0x248>)
 8002d62:	f002 fe21 	bl	80059a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin, GPIO_PIN_RESET);
 8002d66:	2200      	movs	r2, #0
 8002d68:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002d6c:	485e      	ldr	r0, [pc, #376]	@ (8002ee8 <MX_GPIO_Init+0x24c>)
 8002d6e:	f002 fe1b 	bl	80059a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ADCS_EN_GPIO_Port, ADCS_EN_Pin, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7c:	f002 fe14 	bl	80059a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PIN_RESET);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2108      	movs	r1, #8
 8002d84:	4859      	ldr	r0, [pc, #356]	@ (8002eec <MX_GPIO_Init+0x250>)
 8002d86:	f002 fe0f 	bl	80059a8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002d8a:	f240 531c 	movw	r3, #1308	@ 0x51c
 8002d8e:	61fb      	str	r3, [r7, #28]
                          |CCU5V_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d90:	2301      	movs	r3, #1
 8002d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	484e      	ldr	r0, [pc, #312]	@ (8002edc <MX_GPIO_Init+0x240>)
 8002da4:	f002 fc56 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin;
 8002da8:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dae:	2301      	movs	r3, #1
 8002db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4847      	ldr	r0, [pc, #284]	@ (8002ee0 <MX_GPIO_Init+0x244>)
 8002dc2:	f002 fc47 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_FLT_Pin|XB12V_FLT_Pin|CCU5V_FLT_Pin|PL5V_FLT_Pin
 8002dc6:	f640 2383 	movw	r3, #2691	@ 0xa83
 8002dca:	61fb      	str	r3, [r7, #28]
                          |RS5V_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4840      	ldr	r0, [pc, #256]	@ (8002edc <MX_GPIO_Init+0x240>)
 8002ddc:	f002 fc3a 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS3V3_FLT_Pin|CCU_FAULT_Pin|PL_FLT_Pin|ADCS_FAULT_Pin
 8002de0:	f244 3305 	movw	r3, #17157	@ 0x4305
 8002de4:	61fb      	str	r3, [r7, #28]
                          |OBC_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dee:	f107 031c 	add.w	r3, r7, #28
 8002df2:	4619      	mov	r1, r3
 8002df4:	483b      	ldr	r0, [pc, #236]	@ (8002ee4 <MX_GPIO_Init+0x248>)
 8002df6:	f002 fc2d 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PL_EN_Pin|UHF_EN_Pin;
 8002dfa:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8002dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e00:	2301      	movs	r3, #1
 8002e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	4834      	ldr	r0, [pc, #208]	@ (8002ee4 <MX_GPIO_Init+0x248>)
 8002e14:	f002 fc1e 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin;
 8002e18:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4619      	mov	r1, r3
 8002e30:	482d      	ldr	r0, [pc, #180]	@ (8002ee8 <MX_GPIO_Init+0x24c>)
 8002e32:	f002 fc0f 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCS_EN_Pin;
 8002e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADCS_EN_GPIO_Port, &GPIO_InitStruct);
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e52:	f002 fbff 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SYNC_PULSE_Pin;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SYNC_PULSE_GPIO_Port, &GPIO_InitStruct);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481e      	ldr	r0, [pc, #120]	@ (8002ee4 <MX_GPIO_Init+0x248>)
 8002e6c:	f002 fbf2 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = UHF_FLT_Pin|GPS_FLT_Pin|ADCS12V_FLT_Pin|ADCS5V_FLT_Pin;
 8002e70:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8002e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 031c 	add.w	r3, r7, #28
 8002e82:	4619      	mov	r1, r3
 8002e84:	4816      	ldr	r0, [pc, #88]	@ (8002ee0 <MX_GPIO_Init+0x244>)
 8002e86:	f002 fbe5 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS_EN_Pin;
 8002e8a:	2340      	movs	r3, #64	@ 0x40
 8002e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4810      	ldr	r0, [pc, #64]	@ (8002ee0 <MX_GPIO_Init+0x244>)
 8002ea0:	f002 fbd8 	bl	8005654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BOOT0_Pin;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	4619      	mov	r1, r3
 8002eba:	480c      	ldr	r0, [pc, #48]	@ (8002eec <MX_GPIO_Init+0x250>)
 8002ebc:	f002 fbca 	bl	8005654 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2105      	movs	r1, #5
 8002ec4:	2007      	movs	r0, #7
 8002ec6:	f002 f925 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002eca:	2007      	movs	r0, #7
 8002ecc:	f002 f93e 	bl	800514c <HAL_NVIC_EnableIRQ>
}
 8002ed0:	bf00      	nop
 8002ed2:	3730      	adds	r7, #48	@ 0x30
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48001000 	.word	0x48001000
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	48000c00 	.word	0x48000c00
 8002ee8:	48000800 	.word	0x48000800
 8002eec:	48001c00 	.word	0x48001c00

08002ef0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002f02:	f000 fdf9 	bl	8003af8 <HAL_IncTick>
  }
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40001000 	.word	0x40001000

08002f14 <Error_Handler>:

void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  __disable_irq();
  while(1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <Error_Handler+0x8>

08002f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2a:	4a10      	ldr	r2, [pc, #64]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	210f      	movs	r1, #15
 8002f5a:	f06f 0001 	mvn.w	r0, #1
 8002f5e:	f002 f8d9 	bl	8005114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0ae      	sub	sp, #184	@ 0xb8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f88:	f107 0318 	add.w	r3, r7, #24
 8002f8c:	228c      	movs	r2, #140	@ 0x8c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f009 ff03 	bl	800cd9c <memset>
  if(hadc->Instance==ADC1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a42      	ldr	r2, [pc, #264]	@ (80030a4 <HAL_ADC_MspInit+0x134>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d17d      	bne.n	800309c <HAL_ADC_MspInit+0x12c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fa6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002fc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fcc:	f107 0318 	add.w	r3, r7, #24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 f9df 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002fdc:	f7ff ff9a 	bl	8002f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002fe0:	4b31      	ldr	r3, [pc, #196]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe4:	4a30      	ldr	r2, [pc, #192]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8002fe6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fec:	4b2e      	ldr	r3, [pc, #184]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003004:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	4b25      	ldr	r3, [pc, #148]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800301c:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 800302a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302c:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003034:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <HAL_ADC_MspInit+0x138>)
 8003036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = RS5V_I_Pin|PS5V_I_Pin|ADCS5V_1_Pin|GPS_I_Pin
 8003040:	233f      	movs	r3, #63	@ 0x3f
 8003042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |PL_I_Pin|ADCS12V_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003046:	2303      	movs	r3, #3
 8003048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003052:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003056:	4619      	mov	r1, r3
 8003058:	4814      	ldr	r0, [pc, #80]	@ (80030ac <HAL_ADC_MspInit+0x13c>)
 800305a:	f002 fafb 	bl	8005654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M_OUT_Pin|SA2_I_Pin|SA3_I_Pin|XB12V_I_Pin
 800305e:	23ff      	movs	r3, #255	@ 0xff
 8003060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |CCU5V_I_Pin|CCU_I_Pin|RS3V3_I_Pin|ADCS_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003064:	2303      	movs	r3, #3
 8003066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800307a:	f002 faeb 	bl	8005654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF_I_Pin|OBC_I_Pin;
 800307e:	2303      	movs	r3, #3
 8003080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003084:	2303      	movs	r3, #3
 8003086:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003090:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003094:	4619      	mov	r1, r3
 8003096:	4806      	ldr	r0, [pc, #24]	@ (80030b0 <HAL_ADC_MspInit+0x140>)
 8003098:	f002 fadc 	bl	8005654 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800309c:	bf00      	nop
 800309e:	37b8      	adds	r7, #184	@ 0xb8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	50040000 	.word	0x50040000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	48000800 	.word	0x48000800
 80030b0:	48000400 	.word	0x48000400

080030b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0ac      	sub	sp, #176	@ 0xb0
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	228c      	movs	r2, #140	@ 0x8c
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f009 fe61 	bl	800cd9c <memset>
  if(hi2c->Instance==I2C2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a4b      	ldr	r2, [pc, #300]	@ (800320c <HAL_I2C_MspInit+0x158>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f040 808e 	bne.w	8003202 <HAL_I2C_MspInit+0x14e>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80030e6:	2380      	movs	r3, #128	@ 0x80
 80030e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	4618      	mov	r0, r3
 80030f4:	f004 f94e 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030fe:	f7ff ff09 	bl	8002f14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	4b43      	ldr	r3, [pc, #268]	@ (8003210 <HAL_I2C_MspInit+0x15c>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	4a42      	ldr	r2, [pc, #264]	@ (8003210 <HAL_I2C_MspInit+0x15c>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310e:	4b40      	ldr	r3, [pc, #256]	@ (8003210 <HAL_I2C_MspInit+0x15c>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800311a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003122:	2312      	movs	r3, #18
 8003124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2303      	movs	r3, #3
 8003130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003134:	2304      	movs	r3, #4
 8003136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800313e:	4619      	mov	r1, r3
 8003140:	4834      	ldr	r0, [pc, #208]	@ (8003214 <HAL_I2C_MspInit+0x160>)
 8003142:	f002 fa87 	bl	8005654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003146:	4b32      	ldr	r3, [pc, #200]	@ (8003210 <HAL_I2C_MspInit+0x15c>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	4a31      	ldr	r2, [pc, #196]	@ (8003210 <HAL_I2C_MspInit+0x15c>)
 800314c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003150:	6593      	str	r3, [r2, #88]	@ 0x58
 8003152:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <HAL_I2C_MspInit+0x15c>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 800315e:	4b2e      	ldr	r3, [pc, #184]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003160:	4a2e      	ldr	r2, [pc, #184]	@ (800321c <HAL_I2C_MspInit+0x168>)
 8003162:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8003164:	4b2c      	ldr	r3, [pc, #176]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003166:	2203      	movs	r2, #3
 8003168:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316a:	4b2b      	ldr	r3, [pc, #172]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003170:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003176:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003178:	2280      	movs	r2, #128	@ 0x80
 800317a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800317c:	4b26      	ldr	r3, [pc, #152]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 800317e:	2200      	movs	r2, #0
 8003180:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003188:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800318e:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003194:	4820      	ldr	r0, [pc, #128]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 8003196:	f001 ffe7 	bl	8005168 <HAL_DMA_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80031a0:	f7ff feb8 	bl	8002f14 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 80031a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003218 <HAL_I2C_MspInit+0x164>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003224 <HAL_I2C_MspInit+0x170>)
 80031b4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031b8:	2203      	movs	r2, #3
 80031ba:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031bc:	4b18      	ldr	r3, [pc, #96]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031be:	2210      	movs	r2, #16
 80031c0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c2:	4b17      	ldr	r3, [pc, #92]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031c8:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80031e6:	480e      	ldr	r0, [pc, #56]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031e8:	f001 ffbe 	bl	8005168 <HAL_DMA_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 80031f2:	f7ff fe8f 	bl	8002f14 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80031fc:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <HAL_I2C_MspInit+0x16c>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003202:	bf00      	nop
 8003204:	37b0      	adds	r7, #176	@ 0xb0
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40005800 	.word	0x40005800
 8003210:	40021000 	.word	0x40021000
 8003214:	48000400 	.word	0x48000400
 8003218:	2000078c 	.word	0x2000078c
 800321c:	40020058 	.word	0x40020058
 8003220:	200007d4 	.word	0x200007d4
 8003224:	40020044 	.word	0x40020044

08003228 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	@ 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 031c 	add.w	r3, r7, #28
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a42      	ldr	r2, [pc, #264]	@ (8003350 <HAL_SPI_MspInit+0x128>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d129      	bne.n	800329e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800324a:	4b42      	ldr	r3, [pc, #264]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 800324c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324e:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 8003250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003254:	6613      	str	r3, [r2, #96]	@ 0x60
 8003256:	4b3f      	ldr	r3, [pc, #252]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 8003258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003262:	4b3c      	ldr	r3, [pc, #240]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	4a3b      	ldr	r2, [pc, #236]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 8003268:	f043 0310 	orr.w	r3, r3, #16
 800326c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800326e:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SS_Pin|SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800327a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800327e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800328c:	2305      	movs	r3, #5
 800328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003290:	f107 031c 	add.w	r3, r7, #28
 8003294:	4619      	mov	r1, r3
 8003296:	4830      	ldr	r0, [pc, #192]	@ (8003358 <HAL_SPI_MspInit+0x130>)
 8003298:	f002 f9dc 	bl	8005654 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800329c:	e053      	b.n	8003346 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2e      	ldr	r2, [pc, #184]	@ (800335c <HAL_SPI_MspInit+0x134>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d14e      	bne.n	8003346 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	4a29      	ldr	r2, [pc, #164]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b4:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	4b24      	ldr	r3, [pc, #144]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032cc:	4b21      	ldr	r3, [pc, #132]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_SPI_MspInit+0x12c>)
 80032e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SS_Pin;
 80032f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003302:	2306      	movs	r3, #6
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 8003306:	f107 031c 	add.w	r3, r7, #28
 800330a:	4619      	mov	r1, r3
 800330c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003310:	f002 f9a0 	bl	8005654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SP13_SCK_Pin|SPI3_MISO_Pin|SP13_MOSI_Pin;
 8003314:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003326:	2306      	movs	r3, #6
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	480b      	ldr	r0, [pc, #44]	@ (8003360 <HAL_SPI_MspInit+0x138>)
 8003332:	f002 f98f 	bl	8005654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2105      	movs	r1, #5
 800333a:	2033      	movs	r0, #51	@ 0x33
 800333c:	f001 feea 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003340:	2033      	movs	r0, #51	@ 0x33
 8003342:	f001 ff03 	bl	800514c <HAL_NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3730      	adds	r7, #48	@ 0x30
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40013000 	.word	0x40013000
 8003354:	40021000 	.word	0x40021000
 8003358:	48001000 	.word	0x48001000
 800335c:	40003c00 	.word	0x40003c00
 8003360:	48000800 	.word	0x48000800

08003364 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a25      	ldr	r2, [pc, #148]	@ (8003408 <HAL_TIM_Base_MspInit+0xa4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10c      	bne.n	8003390 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003376:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 8003378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337a:	4a24      	ldr	r2, [pc, #144]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 800337c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003380:	6613      	str	r3, [r2, #96]	@ 0x60
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 8003384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800338e:	e034      	b.n	80033fa <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003398:	d10c      	bne.n	80033b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800339a:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a6:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
}
 80033b2:	e022      	b.n	80033fa <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a15      	ldr	r2, [pc, #84]	@ (8003410 <HAL_TIM_Base_MspInit+0xac>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	4a12      	ldr	r2, [pc, #72]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	e010      	b.n	80033fa <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003414 <HAL_TIM_Base_MspInit+0xb0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10b      	bne.n	80033fa <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ee:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_TIM_Base_MspInit+0xa8>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40021000 	.word	0x40021000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800

08003418 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0b2      	sub	sp, #200	@ 0xc8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003430:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003434:	228c      	movs	r2, #140	@ 0x8c
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f009 fcaf 	bl	800cd9c <memset>
  if(huart->Instance==USART1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a72      	ldr	r2, [pc, #456]	@ (800360c <HAL_UART_MspInit+0x1f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d145      	bne.n	80034d4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003448:	2301      	movs	r3, #1
 800344a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800344c:	2300      	movs	r3, #0
 800344e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003454:	4618      	mov	r0, r3
 8003456:	f003 ff9d 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003460:	f7ff fd58 	bl	8002f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003464:	4b6a      	ldr	r3, [pc, #424]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 8003466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003468:	4a69      	ldr	r2, [pc, #420]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 800346a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003470:	4b67      	ldr	r3, [pc, #412]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 800347e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003480:	4a63      	ldr	r2, [pc, #396]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003488:	4b61      	ldr	r3, [pc, #388]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 800348a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003494:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ae:	2307      	movs	r3, #7
 80034b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80034b8:	4619      	mov	r1, r3
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034be:	f002 f8c9 	bl	8005654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2105      	movs	r1, #5
 80034c6:	2025      	movs	r0, #37	@ 0x25
 80034c8:	f001 fe24 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034cc:	2025      	movs	r0, #37	@ 0x25
 80034ce:	f001 fe3d 	bl	800514c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80034d2:	e169      	b.n	80037a8 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003614 <HAL_UART_MspInit+0x1fc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f040 80a6 	bne.w	800362c <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034e0:	2302      	movs	r3, #2
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034ec:	4618      	mov	r0, r3
 80034ee:	f003 ff51 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80034f8:	f7ff fd0c 	bl	8002f14 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034fc:	4b44      	ldr	r3, [pc, #272]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a43      	ldr	r2, [pc, #268]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003514:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	4a3d      	ldr	r2, [pc, #244]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 800351a:	f043 0308 	orr.w	r3, r3, #8
 800351e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003520:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_UART_MspInit+0x1f8>)
 8003522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RS4851_DE_Pin|RS4851_TX_Pin|RS4851_RX_Pin;
 800352c:	2370      	movs	r3, #112	@ 0x70
 800352e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003544:	2307      	movs	r3, #7
 8003546:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800354a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800354e:	4619      	mov	r1, r3
 8003550:	4831      	ldr	r0, [pc, #196]	@ (8003618 <HAL_UART_MspInit+0x200>)
 8003552:	f002 f87f 	bl	8005654 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003556:	4b31      	ldr	r3, [pc, #196]	@ (800361c <HAL_UART_MspInit+0x204>)
 8003558:	4a31      	ldr	r2, [pc, #196]	@ (8003620 <HAL_UART_MspInit+0x208>)
 800355a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800355c:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_UART_MspInit+0x204>)
 800355e:	2202      	movs	r2, #2
 8003560:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003562:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <HAL_UART_MspInit+0x204>)
 8003564:	2210      	movs	r2, #16
 8003566:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003568:	4b2c      	ldr	r3, [pc, #176]	@ (800361c <HAL_UART_MspInit+0x204>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800356e:	4b2b      	ldr	r3, [pc, #172]	@ (800361c <HAL_UART_MspInit+0x204>)
 8003570:	2280      	movs	r2, #128	@ 0x80
 8003572:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003574:	4b29      	ldr	r3, [pc, #164]	@ (800361c <HAL_UART_MspInit+0x204>)
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800357a:	4b28      	ldr	r3, [pc, #160]	@ (800361c <HAL_UART_MspInit+0x204>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003580:	4b26      	ldr	r3, [pc, #152]	@ (800361c <HAL_UART_MspInit+0x204>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003586:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_UART_MspInit+0x204>)
 8003588:	2200      	movs	r2, #0
 800358a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800358c:	4823      	ldr	r0, [pc, #140]	@ (800361c <HAL_UART_MspInit+0x204>)
 800358e:	f001 fdeb 	bl	8005168 <HAL_DMA_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_MspInit+0x184>
      Error_Handler();
 8003598:	f7ff fcbc 	bl	8002f14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_UART_MspInit+0x204>)
 80035a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80035a2:	4a1e      	ldr	r2, [pc, #120]	@ (800361c <HAL_UART_MspInit+0x204>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003628 <HAL_UART_MspInit+0x210>)
 80035ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80035ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c0:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035cc:	4b15      	ldr	r3, [pc, #84]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d8:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035de:	4811      	ldr	r0, [pc, #68]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035e0:	f001 fdc2 	bl	8005168 <HAL_DMA_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 80035ea:	f7ff fc93 	bl	8002f14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035f2:	675a      	str	r2, [r3, #116]	@ 0x74
 80035f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003624 <HAL_UART_MspInit+0x20c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2105      	movs	r1, #5
 80035fe:	2026      	movs	r0, #38	@ 0x26
 8003600:	f001 fd88 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003604:	2026      	movs	r0, #38	@ 0x26
 8003606:	f001 fda1 	bl	800514c <HAL_NVIC_EnableIRQ>
}
 800360a:	e0cd      	b.n	80037a8 <HAL_UART_MspInit+0x390>
 800360c:	40013800 	.word	0x40013800
 8003610:	40021000 	.word	0x40021000
 8003614:	40004400 	.word	0x40004400
 8003618:	48000c00 	.word	0x48000c00
 800361c:	20000bac 	.word	0x20000bac
 8003620:	40020080 	.word	0x40020080
 8003624:	20000bf4 	.word	0x20000bf4
 8003628:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5f      	ldr	r2, [pc, #380]	@ (80037b0 <HAL_UART_MspInit+0x398>)
 8003632:	4293      	cmp	r3, r2
 8003634:	f040 80b8 	bne.w	80037a8 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003638:	2304      	movs	r3, #4
 800363a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800363c:	2300      	movs	r3, #0
 800363e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003640:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fea5 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8003650:	f7ff fc60 	bl	8002f14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003654:	4b57      	ldr	r3, [pc, #348]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003658:	4a56      	ldr	r2, [pc, #344]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 800365a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800365e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003660:	4b54      	ldr	r3, [pc, #336]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366c:	4b51      	ldr	r3, [pc, #324]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003670:	4a50      	ldr	r2, [pc, #320]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003678:	4b4e      	ldr	r3, [pc, #312]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 800367a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003684:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	4a4a      	ldr	r2, [pc, #296]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003690:	4b48      	ldr	r3, [pc, #288]	@ (80037b4 <HAL_UART_MspInit+0x39c>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS4852_TX_Pin|RS4852_RX_Pin;
 800369c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b6:	2307      	movs	r3, #7
 80036b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036bc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80036c0:	4619      	mov	r1, r3
 80036c2:	483d      	ldr	r0, [pc, #244]	@ (80037b8 <HAL_UART_MspInit+0x3a0>)
 80036c4:	f001 ffc6 	bl	8005654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 80036c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036e2:	2307      	movs	r3, #7
 80036e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 80036e8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4833      	ldr	r0, [pc, #204]	@ (80037bc <HAL_UART_MspInit+0x3a4>)
 80036f0:	f001 ffb0 	bl	8005654 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80036f4:	4b32      	ldr	r3, [pc, #200]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 80036f6:	4a33      	ldr	r2, [pc, #204]	@ (80037c4 <HAL_UART_MspInit+0x3ac>)
 80036f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 80036fc:	2202      	movs	r2, #2
 80036fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003700:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 8003702:	2210      	movs	r2, #16
 8003704:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003706:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 8003708:	2200      	movs	r2, #0
 800370a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800370c:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003712:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 8003714:	2200      	movs	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003718:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800371e:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 8003720:	2200      	movs	r2, #0
 8003722:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003724:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 8003726:	2200      	movs	r2, #0
 8003728:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800372a:	4825      	ldr	r0, [pc, #148]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 800372c:	f001 fd1c 	bl	8005168 <HAL_DMA_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_UART_MspInit+0x322>
      Error_Handler();
 8003736:	f7ff fbed 	bl	8002f14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a20      	ldr	r2, [pc, #128]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 800373e:	671a      	str	r2, [r3, #112]	@ 0x70
 8003740:	4a1f      	ldr	r2, [pc, #124]	@ (80037c0 <HAL_UART_MspInit+0x3a8>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003746:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003748:	4a20      	ldr	r2, [pc, #128]	@ (80037cc <HAL_UART_MspInit+0x3b4>)
 800374a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800374c:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 800374e:	2202      	movs	r2, #2
 8003750:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003752:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800375e:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003760:	2280      	movs	r2, #128	@ 0x80
 8003762:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003764:	4b18      	ldr	r3, [pc, #96]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800376a:	4b17      	ldr	r3, [pc, #92]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003770:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003778:	2200      	movs	r2, #0
 800377a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800377c:	4812      	ldr	r0, [pc, #72]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 800377e:	f001 fcf3 	bl	8005168 <HAL_DMA_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_MspInit+0x374>
      Error_Handler();
 8003788:	f7ff fbc4 	bl	8002f14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0e      	ldr	r2, [pc, #56]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003790:	675a      	str	r2, [r3, #116]	@ 0x74
 8003792:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_UART_MspInit+0x3b0>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	2105      	movs	r1, #5
 800379c:	2027      	movs	r0, #39	@ 0x27
 800379e:	f001 fcb9 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037a2:	2027      	movs	r0, #39	@ 0x27
 80037a4:	f001 fcd2 	bl	800514c <HAL_NVIC_EnableIRQ>
}
 80037a8:	bf00      	nop
 80037aa:	37c8      	adds	r7, #200	@ 0xc8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40004800 	.word	0x40004800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	48000400 	.word	0x48000400
 80037bc:	48000c00 	.word	0x48000c00
 80037c0:	20000c3c 	.word	0x20000c3c
 80037c4:	4002001c 	.word	0x4002001c
 80037c8:	20000c84 	.word	0x20000c84
 80037cc:	40020030 	.word	0x40020030

080037d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08e      	sub	sp, #56	@ 0x38
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037de:	4b34      	ldr	r3, [pc, #208]	@ (80038b0 <HAL_InitTick+0xe0>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	4a33      	ldr	r2, [pc, #204]	@ (80038b0 <HAL_InitTick+0xe0>)
 80037e4:	f043 0310 	orr.w	r3, r3, #16
 80037e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_InitTick+0xe0>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037f6:	f107 0210 	add.w	r2, r7, #16
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fd35 	bl	8007270 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003810:	f003 fd02 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8003814:	6378      	str	r0, [r7, #52]	@ 0x34
 8003816:	e004      	b.n	8003822 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003818:	f003 fcfe 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 800381c:	4603      	mov	r3, r0
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	4a23      	ldr	r2, [pc, #140]	@ (80038b4 <HAL_InitTick+0xe4>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9b      	lsrs	r3, r3, #18
 800382c:	3b01      	subs	r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003830:	4b21      	ldr	r3, [pc, #132]	@ (80038b8 <HAL_InitTick+0xe8>)
 8003832:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_InitTick+0xec>)
 8003834:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003836:	4b20      	ldr	r3, [pc, #128]	@ (80038b8 <HAL_InitTick+0xe8>)
 8003838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800383c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800383e:	4a1e      	ldr	r2, [pc, #120]	@ (80038b8 <HAL_InitTick+0xe8>)
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003844:	4b1c      	ldr	r3, [pc, #112]	@ (80038b8 <HAL_InitTick+0xe8>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <HAL_InitTick+0xe8>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_InitTick+0xe8>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003856:	4818      	ldr	r0, [pc, #96]	@ (80038b8 <HAL_InitTick+0xe8>)
 8003858:	f004 fc29 	bl	80080ae <HAL_TIM_Base_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003862:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11b      	bne.n	80038a2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800386a:	4813      	ldr	r0, [pc, #76]	@ (80038b8 <HAL_InitTick+0xe8>)
 800386c:	f004 fc76 	bl	800815c <HAL_TIM_Base_Start_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800387a:	2b00      	cmp	r3, #0
 800387c:	d111      	bne.n	80038a2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800387e:	2036      	movs	r0, #54	@ 0x36
 8003880:	f001 fc64 	bl	800514c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d808      	bhi.n	800389c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800388a:	2200      	movs	r2, #0
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	2036      	movs	r0, #54	@ 0x36
 8003890:	f001 fc40 	bl	8005114 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003894:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <HAL_InitTick+0xf0>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e002      	b.n	80038a2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80038a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3738      	adds	r7, #56	@ 0x38
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	20000ce0 	.word	0x20000ce0
 80038bc:	40001000 	.word	0x40001000
 80038c0:	200001bc 	.word	0x200001bc

080038c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <NMI_Handler+0x4>

080038cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <HardFault_Handler+0x4>

080038d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <MemManage_Handler+0x4>

080038dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <BusFault_Handler+0x4>

080038e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <UsageFault_Handler+0x4>

080038ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SYNC_PULSE_Pin);
 80038fe:	2002      	movs	r0, #2
 8003900:	f002 f86a 	bl	80059d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}

08003908 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800390c:	4802      	ldr	r0, [pc, #8]	@ (8003918 <DMA1_Channel2_IRQHandler+0x10>)
 800390e:	f001 fdc2 	bl	8005496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000c3c 	.word	0x20000c3c

0800391c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003920:	4802      	ldr	r0, [pc, #8]	@ (800392c <DMA1_Channel3_IRQHandler+0x10>)
 8003922:	f001 fdb8 	bl	8005496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000c84 	.word	0x20000c84

08003930 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003934:	4802      	ldr	r0, [pc, #8]	@ (8003940 <DMA1_Channel4_IRQHandler+0x10>)
 8003936:	f001 fdae 	bl	8005496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200007d4 	.word	0x200007d4

08003944 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003948:	4802      	ldr	r0, [pc, #8]	@ (8003954 <DMA1_Channel5_IRQHandler+0x10>)
 800394a:	f001 fda4 	bl	8005496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	2000078c 	.word	0x2000078c

08003958 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <DMA1_Channel6_IRQHandler+0x10>)
 800395e:	f001 fd9a 	bl	8005496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000bf4 	.word	0x20000bf4

0800396c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <DMA1_Channel7_IRQHandler+0x10>)
 8003972:	f001 fd90 	bl	8005496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000bac 	.word	0x20000bac

08003980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <USART1_IRQHandler+0x10>)
 8003986:	f005 f95b 	bl	8008c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000a14 	.word	0x20000a14

08003994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <USART2_IRQHandler+0x10>)
 800399a:	f005 f951 	bl	8008c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000a9c 	.word	0x20000a9c

080039a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <USART3_IRQHandler+0x10>)
 80039ae:	f005 f947 	bl	8008c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000b24 	.word	0x20000b24

080039bc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <SPI3_IRQHandler+0x10>)
 80039c2:	f004 fa55 	bl	8007e70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000880 	.word	0x20000880

080039d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <TIM6_DAC_IRQHandler+0x10>)
 80039d6:	f004 fc31 	bl	800823c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000ce0 	.word	0x20000ce0

080039e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <_sbrk+0x5c>)
 80039ee:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <_sbrk+0x60>)
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039f8:	4b13      	ldr	r3, [pc, #76]	@ (8003a48 <_sbrk+0x64>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <_sbrk+0x64>)
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <_sbrk+0x68>)
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <_sbrk+0x64>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d207      	bcs.n	8003a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a14:	f009 f9ea 	bl	800cdec <__errno>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e009      	b.n	8003a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a24:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <_sbrk+0x64>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	4a05      	ldr	r2, [pc, #20]	@ (8003a48 <_sbrk+0x64>)
 8003a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a36:	68fb      	ldr	r3, [r7, #12]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20040000 	.word	0x20040000
 8003a44:	00000400 	.word	0x00000400
 8003a48:	20000d2c 	.word	0x20000d2c
 8003a4c:	200042e0 	.word	0x200042e0

08003a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <SystemInit+0x20>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <SystemInit+0x20>)
 8003a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a78:	f7ff ffea 	bl	8003a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a7c:	480c      	ldr	r0, [pc, #48]	@ (8003ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a7e:	490d      	ldr	r1, [pc, #52]	@ (8003ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a80:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <LoopForever+0xe>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a92:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a94:	4c0a      	ldr	r4, [pc, #40]	@ (8003ac0 <LoopForever+0x16>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f009 f9a9 	bl	800cdf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aa6:	f7fe fc6f 	bl	8002388 <main>

08003aaa <LoopForever>:

LoopForever:
    b LoopForever
 8003aaa:	e7fe      	b.n	8003aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003aac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003ab8:	0800dbc4 	.word	0x0800dbc4
  ldr r2, =_sbss
 8003abc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003ac0:	200042dc 	.word	0x200042dc

08003ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ac4:	e7fe      	b.n	8003ac4 <ADC1_2_IRQHandler>

08003ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f001 fb14 	bl	80050fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ad6:	200f      	movs	r0, #15
 8003ad8:	f7ff fe7a 	bl	80037d0 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	71fb      	strb	r3, [r7, #7]
 8003ae6:	e001      	b.n	8003aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ae8:	f7ff fa1a 	bl	8002f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aec:	79fb      	ldrb	r3, [r7, #7]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003afc:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <HAL_IncTick+0x20>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_IncTick+0x24>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <HAL_IncTick+0x24>)
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200001c0 	.word	0x200001c0
 8003b1c:	20000d30 	.word	0x20000d30

08003b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return uwTick;
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <HAL_GetTick+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000d30 	.word	0x20000d30

08003b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff ffee 	bl	8003b20 <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d005      	beq.n	8003b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b52:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <HAL_Delay+0x44>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b5e:	bf00      	nop
 8003b60:	f7ff ffde 	bl	8003b20 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d8f7      	bhi.n	8003b60 <HAL_Delay+0x28>
  {
  }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200001c0 	.word	0x200001c0

08003b80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3360      	adds	r3, #96	@ 0x60
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <LL_ADC_SetOffset+0x44>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	03fff000 	.word	0x03fff000

08003c30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3360      	adds	r3, #96	@ 0x60
 8003c3e:	461a      	mov	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3360      	adds	r3, #96	@ 0x60
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	615a      	str	r2, [r3, #20]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3330      	adds	r3, #48	@ 0x30
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	4413      	add	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	211f      	movs	r1, #31
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0e9b      	lsrs	r3, r3, #26
 8003d16:	f003 011f 	and.w	r1, r3, #31
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3314      	adds	r3, #20
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0e5b      	lsrs	r3, r3, #25
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	0d1b      	lsrs	r3, r3, #20
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2107      	movs	r1, #7
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	0d1b      	lsrs	r3, r3, #20
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0318 	and.w	r3, r3, #24
 8003dae:	4908      	ldr	r1, [pc, #32]	@ (8003dd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003db0:	40d9      	lsrs	r1, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	400b      	ands	r3, r1
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	0007ffff 	.word	0x0007ffff

08003dd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 031f 	and.w	r3, r3, #31
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6093      	str	r3, [r2, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e28:	d101      	bne.n	8003e2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e78:	d101      	bne.n	8003e7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <LL_ADC_IsEnabled+0x18>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <LL_ADC_IsEnabled+0x1a>
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003eea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d101      	bne.n	8003f1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b089      	sub	sp, #36	@ 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e133      	b.n	80041d2 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fe fff9 	bl	8002f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff3f 	bl	8003e14 <LL_ADC_IsDeepPowerDownEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff25 	bl	8003df0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff ff5a 	bl	8003e64 <LL_ADC_IsInternalRegulatorEnabled>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d115      	bne.n	8003fe2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff3e 	bl	8003e3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fc0:	4b86      	ldr	r3, [pc, #536]	@ (80041dc <HAL_ADC_Init+0x28c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	4a86      	ldr	r2, [pc, #536]	@ (80041e0 <HAL_ADC_Init+0x290>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fd4:	e002      	b.n	8003fdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f9      	bne.n	8003fd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ff3c 	bl	8003e64 <LL_ADC_IsInternalRegulatorEnabled>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	f043 0210 	orr.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff75 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 8004018:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 80cc 	bne.w	80041c0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 80c8 	bne.w	80041c0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004034:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004038:	f043 0202 	orr.w	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff35 	bl	8003eb4 <LL_ADC_IsEnabled>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d115      	bne.n	800407c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004050:	4864      	ldr	r0, [pc, #400]	@ (80041e4 <HAL_ADC_Init+0x294>)
 8004052:	f7ff ff2f 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004056:	4604      	mov	r4, r0
 8004058:	4863      	ldr	r0, [pc, #396]	@ (80041e8 <HAL_ADC_Init+0x298>)
 800405a:	f7ff ff2b 	bl	8003eb4 <LL_ADC_IsEnabled>
 800405e:	4603      	mov	r3, r0
 8004060:	431c      	orrs	r4, r3
 8004062:	4862      	ldr	r0, [pc, #392]	@ (80041ec <HAL_ADC_Init+0x29c>)
 8004064:	f7ff ff26 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004068:	4603      	mov	r3, r0
 800406a:	4323      	orrs	r3, r4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4619      	mov	r1, r3
 8004076:	485e      	ldr	r0, [pc, #376]	@ (80041f0 <HAL_ADC_Init+0x2a0>)
 8004078:	f7ff fd82 	bl	8003b80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7e5b      	ldrb	r3, [r3, #25]
 8004080:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004086:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800408c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004092:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800409a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d106      	bne.n	80040b8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	3b01      	subs	r3, #1
 80040b0:	045b      	lsls	r3, r3, #17
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <HAL_ADC_Init+0x2a4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff1b 	bl	8003f28 <LL_ADC_INJ_IsConversionOngoing>
 80040f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d140      	bne.n	800417c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d13d      	bne.n	800417c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7e1b      	ldrb	r3, [r3, #24]
 8004108:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800410a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004112:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004122:	f023 0306 	bic.w	r3, r3, #6
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	430b      	orrs	r3, r1
 800412e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004136:	2b01      	cmp	r3, #1
 8004138:	d118      	bne.n	800416c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800415c:	430a      	orrs	r2, r1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	611a      	str	r2, [r3, #16]
 800416a:	e007      	b.n	800417c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10c      	bne.n	800419e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f023 010f 	bic.w	r1, r3, #15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	1e5a      	subs	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30
 800419c:	e007      	b.n	80041ae <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 020f 	bic.w	r2, r2, #15
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80041be:	e007      	b.n	80041d0 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f043 0210 	orr.w	r2, r3, #16
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	@ 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	bf00      	nop
 80041dc:	200001b8 	.word	0x200001b8
 80041e0:	053e2d63 	.word	0x053e2d63
 80041e4:	50040000 	.word	0x50040000
 80041e8:	50040100 	.word	0x50040100
 80041ec:	50040200 	.word	0x50040200
 80041f0:	50040300 	.word	0x50040300
 80041f4:	fff0c007 	.word	0xfff0c007

080041f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004204:	4853      	ldr	r0, [pc, #332]	@ (8004354 <HAL_ADC_Start_DMA+0x15c>)
 8004206:	f7ff fde5 	bl	8003dd4 <LL_ADC_GetMultimode>
 800420a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fe76 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 8093 	bne.w	8004344 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_ADC_Start_DMA+0x34>
 8004228:	2302      	movs	r3, #2
 800422a:	e08e      	b.n	800434a <HAL_ADC_Start_DMA+0x152>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a47      	ldr	r2, [pc, #284]	@ (8004358 <HAL_ADC_Start_DMA+0x160>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d008      	beq.n	8004250 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d002      	beq.n	8004250 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b09      	cmp	r3, #9
 800424e:	d172      	bne.n	8004336 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fcb7 	bl	8004bc4 <ADC_Enable>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d165      	bne.n	800432c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a38      	ldr	r2, [pc, #224]	@ (800435c <HAL_ADC_Start_DMA+0x164>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d002      	beq.n	8004284 <HAL_ADC_Start_DMA+0x8c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	e000      	b.n	8004286 <HAL_ADC_Start_DMA+0x8e>
 8004284:	4b36      	ldr	r3, [pc, #216]	@ (8004360 <HAL_ADC_Start_DMA+0x168>)
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	4293      	cmp	r3, r2
 800428c:	d002      	beq.n	8004294 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f023 0206 	bic.w	r2, r3, #6
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b8:	e002      	b.n	80042c0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	4a27      	ldr	r2, [pc, #156]	@ (8004364 <HAL_ADC_Start_DMA+0x16c>)
 80042c6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042cc:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_ADC_Start_DMA+0x170>)
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	4a25      	ldr	r2, [pc, #148]	@ (800436c <HAL_ADC_Start_DMA+0x174>)
 80042d6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	221c      	movs	r2, #28
 80042de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0210 	orr.w	r2, r2, #16
 80042f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3340      	adds	r3, #64	@ 0x40
 8004312:	4619      	mov	r1, r3
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f000 ffde 	bl	80052d8 <HAL_DMA_Start_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fdd8 	bl	8003eda <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800432a:	e00d      	b.n	8004348 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004334:	e008      	b.n	8004348 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004342:	e001      	b.n	8004348 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004344:	2302      	movs	r3, #2
 8004346:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	50040300 	.word	0x50040300
 8004358:	50040200 	.word	0x50040200
 800435c:	50040100 	.word	0x50040100
 8004360:	50040000 	.word	0x50040000
 8004364:	08004cd1 	.word	0x08004cd1
 8004368:	08004da9 	.word	0x08004da9
 800436c:	08004dc5 	.word	0x08004dc5

08004370 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0b6      	sub	sp, #216	@ 0xd8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x22>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e3e3      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x7ea>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fd91 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f040 83c4 	bne.w	8004b70 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d824      	bhi.n	8004442 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	3b02      	subs	r3, #2
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d81b      	bhi.n	800443a <HAL_ADC_ConfigChannel+0x8e>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <HAL_ADC_ConfigChannel+0x5c>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	08004421 	.word	0x08004421
 8004410:	08004429 	.word	0x08004429
 8004414:	08004431 	.word	0x08004431
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004418:	230c      	movs	r3, #12
 800441a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800441e:	e010      	b.n	8004442 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004420:	2312      	movs	r3, #18
 8004422:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004426:	e00c      	b.n	8004442 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004428:	2318      	movs	r3, #24
 800442a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800442e:	e008      	b.n	8004442 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004438:	e003      	b.n	8004442 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800443a:	2306      	movs	r3, #6
 800443c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004440:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004450:	f7ff fc45 	bl	8003cde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fd52 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 800445e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fd5e 	bl	8003f28 <LL_ADC_INJ_IsConversionOngoing>
 800446c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004470:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004474:	2b00      	cmp	r3, #0
 8004476:	f040 81bf 	bne.w	80047f8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800447a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 81ba 	bne.w	80047f8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800448c:	d10f      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	4619      	mov	r1, r3
 800449a:	f7ff fc4c 	bl	8003d36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fbf3 	bl	8003c92 <LL_ADC_SetSamplingTimeCommonConfig>
 80044ac:	e00e      	b.n	80044cc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7ff fc3b 	bl	8003d36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fbe3 	bl	8003c92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d00a      	beq.n	8004504 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6919      	ldr	r1, [r3, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044fe:	f7ff fb73 	bl	8003be8 <LL_ADC_SetOffset>
 8004502:	e179      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fb90 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 8004510:	4603      	mov	r3, r0
 8004512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x184>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fb85 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 8004526:	4603      	mov	r3, r0
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	f003 021f 	and.w	r2, r3, #31
 800452e:	e01e      	b.n	800456e <HAL_ADC_ConfigChannel+0x1c2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fb7a 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 800453c:	4603      	mov	r3, r0
 800453e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800454e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e004      	b.n	800456c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x1da>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0e9b      	lsrs	r3, r3, #26
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	e018      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x20c>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800459a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80045a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e004      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80045ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d106      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fb49 	bl	8003c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2101      	movs	r1, #1
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fb2d 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x24a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fb22 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 80045ec:	4603      	mov	r3, r0
 80045ee:	0e9b      	lsrs	r3, r3, #26
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	e01e      	b.n	8004634 <HAL_ADC_ConfigChannel+0x288>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fb17 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 8004602:	4603      	mov	r3, r0
 8004604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004614:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800461c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004624:	2320      	movs	r3, #32
 8004626:	e004      	b.n	8004632 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_ADC_ConfigChannel+0x2a0>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	0e9b      	lsrs	r3, r3, #26
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	e018      	b.n	800467e <HAL_ADC_ConfigChannel+0x2d2>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004660:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e004      	b.n	800467e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800467e:	429a      	cmp	r2, r3
 8004680:	d106      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fae6 	bl	8003c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff faca 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 800469c:	4603      	mov	r3, r0
 800469e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x310>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2102      	movs	r1, #2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fabf 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 80046b2:	4603      	mov	r3, r0
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 021f 	and.w	r2, r3, #31
 80046ba:	e01e      	b.n	80046fa <HAL_ADC_ConfigChannel+0x34e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2102      	movs	r1, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fab4 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80046da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80046e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e004      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80046ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x366>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0e9b      	lsrs	r3, r3, #26
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	e014      	b.n	800473c <HAL_ADC_ConfigChannel+0x390>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004722:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004726:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800472e:	2320      	movs	r3, #32
 8004730:	e004      	b.n	800473c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004732:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800473c:	429a      	cmp	r2, r3
 800473e:	d106      	bne.n	800474e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2200      	movs	r2, #0
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fa87 	bl	8003c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2103      	movs	r1, #3
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fa6b 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 800475a:	4603      	mov	r3, r0
 800475c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <HAL_ADC_ConfigChannel+0x3ce>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2103      	movs	r1, #3
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fa60 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 8004770:	4603      	mov	r3, r0
 8004772:	0e9b      	lsrs	r3, r3, #26
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	e017      	b.n	80047aa <HAL_ADC_ConfigChannel+0x3fe>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2103      	movs	r1, #3
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fa55 	bl	8003c30 <LL_ADC_GetOffsetChannel>
 8004786:	4603      	mov	r3, r0
 8004788:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004794:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e003      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80047a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x416>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0e9b      	lsrs	r3, r3, #26
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	e011      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x43a>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ca:	fa93 f3a3 	rbit	r3, r3
 80047ce:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80047d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80047d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80047da:	2320      	movs	r3, #32
 80047dc:	e003      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80047de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d106      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2103      	movs	r1, #3
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fa32 	bl	8003c5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fb59 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 813f 	bne.w	8004a88 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f7ff fab8 	bl	8003d8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a8e      	ldr	r2, [pc, #568]	@ (8004a5c <HAL_ADC_ConfigChannel+0x6b0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f040 8130 	bne.w	8004a88 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x4a4>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	3301      	adds	r3, #1
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b09      	cmp	r3, #9
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e019      	b.n	8004884 <HAL_ADC_ConfigChannel+0x4d8>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800485e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004860:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004868:	2320      	movs	r3, #32
 800486a:	e003      	b.n	8004874 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800486c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2b09      	cmp	r3, #9
 800487c:	bf94      	ite	ls
 800487e:	2301      	movls	r3, #1
 8004880:	2300      	movhi	r3, #0
 8004882:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004884:	2b00      	cmp	r3, #0
 8004886:	d079      	beq.n	800497c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x4f8>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	3301      	adds	r3, #1
 800489c:	069b      	lsls	r3, r3, #26
 800489e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048a2:	e015      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x524>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80048b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80048b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e003      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80048c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	069b      	lsls	r3, r3, #26
 80048cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x544>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e9b      	lsrs	r3, r3, #26
 80048e2:	3301      	adds	r3, #1
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	e017      	b.n	8004920 <HAL_ADC_ConfigChannel+0x574>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004908:	2320      	movs	r3, #32
 800490a:	e003      	b.n	8004914 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800490c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	3301      	adds	r3, #1
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2101      	movs	r1, #1
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	ea42 0103 	orr.w	r1, r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x59a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	0e9b      	lsrs	r3, r3, #26
 8004936:	3301      	adds	r3, #1
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	051b      	lsls	r3, r3, #20
 8004944:	e018      	b.n	8004978 <HAL_ADC_ConfigChannel+0x5cc>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800495e:	2320      	movs	r3, #32
 8004960:	e003      	b.n	800496a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3301      	adds	r3, #1
 800496c:	f003 021f 	and.w	r2, r3, #31
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004978:	430b      	orrs	r3, r1
 800497a:	e080      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x5ec>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0e9b      	lsrs	r3, r3, #26
 800498e:	3301      	adds	r3, #1
 8004990:	069b      	lsls	r3, r3, #26
 8004992:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004996:	e015      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x618>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e003      	b.n	80049bc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80049b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	069b      	lsls	r3, r3, #26
 80049c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x638>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	e017      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x668>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	61bb      	str	r3, [r7, #24]
  return result;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2101      	movs	r1, #1
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x694>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4613      	mov	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	4413      	add	r3, r2
 8004a36:	3b1e      	subs	r3, #30
 8004a38:	051b      	lsls	r3, r3, #20
 8004a3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	e01d      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x6d0>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
  return result;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004a58:	2320      	movs	r3, #32
 8004a5a:	e005      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x6bc>
 8004a5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	f003 021f 	and.w	r2, r3, #31
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	3b1e      	subs	r3, #30
 8004a76:	051b      	lsls	r3, r3, #20
 8004a78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a82:	4619      	mov	r1, r3
 8004a84:	f7ff f957 	bl	8003d36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b44      	ldr	r3, [pc, #272]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x7f4>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d07a      	beq.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a94:	4843      	ldr	r0, [pc, #268]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x7f8>)
 8004a96:	f7ff f899 	bl	8003bcc <LL_ADC_GetCommonPathInternalCh>
 8004a9a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a41      	ldr	r2, [pc, #260]	@ (8004ba8 <HAL_ADC_ConfigChannel+0x7fc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d12c      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d126      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bac <HAL_ADC_ConfigChannel+0x800>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_ADC_ConfigChannel+0x71c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x804>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d15d      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004acc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4834      	ldr	r0, [pc, #208]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x7f8>)
 8004ad4:	f7ff f867 	bl	8003ba6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ad8:	4b36      	ldr	r3, [pc, #216]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x808>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	4a36      	ldr	r2, [pc, #216]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x80c>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004af2:	e002      	b.n	8004afa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f9      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b00:	e040      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2d      	ldr	r2, [pc, #180]	@ (8004bbc <HAL_ADC_ConfigChannel+0x810>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d118      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d112      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a23      	ldr	r2, [pc, #140]	@ (8004bac <HAL_ADC_ConfigChannel+0x800>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0x780>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a22      	ldr	r2, [pc, #136]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x804>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d12d      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b34:	4619      	mov	r1, r3
 8004b36:	481b      	ldr	r0, [pc, #108]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x7f8>)
 8004b38:	f7ff f835 	bl	8003ba6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b3c:	e024      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x814>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d120      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a14      	ldr	r2, [pc, #80]	@ (8004bac <HAL_ADC_ConfigChannel+0x800>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d115      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b66:	4619      	mov	r1, r3
 8004b68:	480e      	ldr	r0, [pc, #56]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x7f8>)
 8004b6a:	f7ff f81c 	bl	8003ba6 <LL_ADC_SetCommonPathInternalCh>
 8004b6e:	e00c      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b82:	e002      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004b92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	37d8      	adds	r7, #216	@ 0xd8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	80080000 	.word	0x80080000
 8004ba4:	50040300 	.word	0x50040300
 8004ba8:	c7520000 	.word	0xc7520000
 8004bac:	50040000 	.word	0x50040000
 8004bb0:	50040200 	.word	0x50040200
 8004bb4:	200001b8 	.word	0x200001b8
 8004bb8:	053e2d63 	.word	0x053e2d63
 8004bbc:	cb840000 	.word	0xcb840000
 8004bc0:	80000001 	.word	0x80000001

08004bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f96d 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d169      	bne.n	8004cb4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <ADC_Enable+0xfc>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf2:	f043 0210 	orr.w	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfe:	f043 0201 	orr.w	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e055      	b.n	8004cb6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff f93c 	bl	8003e8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c14:	482b      	ldr	r0, [pc, #172]	@ (8004cc4 <ADC_Enable+0x100>)
 8004c16:	f7fe ffd9 	bl	8003bcc <LL_ADC_GetCommonPathInternalCh>
 8004c1a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d013      	beq.n	8004c4c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c24:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <ADC_Enable+0x104>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	4a28      	ldr	r2, [pc, #160]	@ (8004ccc <ADC_Enable+0x108>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	4613      	mov	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c3e:	e002      	b.n	8004c46 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f9      	bne.n	8004c40 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c4c:	f7fe ff68 	bl	8003b20 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c52:	e028      	b.n	8004ca6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff f92b 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff f90f 	bl	8003e8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c6e:	f7fe ff57 	bl	8003b20 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d914      	bls.n	8004ca6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d00d      	beq.n	8004ca6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	f043 0210 	orr.w	r2, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e007      	b.n	8004cb6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d1cf      	bne.n	8004c54 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	8000003f 	.word	0x8000003f
 8004cc4:	50040300 	.word	0x50040300
 8004cc8:	200001b8 	.word	0x200001b8
 8004ccc:	053e2d63 	.word	0x053e2d63

08004cd0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d14b      	bne.n	8004d82 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d021      	beq.n	8004d48 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe ffd5 	bl	8003cb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d032      	beq.n	8004d7a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d12b      	bne.n	8004d7a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11f      	bne.n	8004d7a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d46:	e018      	b.n	8004d7a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d111      	bne.n	8004d7a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d105      	bne.n	8004d7a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff faf8 	bl	8004370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d80:	e00e      	b.n	8004da0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff fb02 	bl	8004398 <HAL_ADC_ErrorCallback>
}
 8004d94:	e004      	b.n	8004da0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff fae4 	bl	8004384 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de2:	f043 0204 	orr.w	r2, r3, #4
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff fad4 	bl	8004398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <LL_ADC_IsEnabled>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <LL_ADC_IsEnabled+0x18>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <LL_ADC_IsEnabled+0x1a>
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_ADC_REG_IsConversionOngoing>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d101      	bne.n	8004e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b0a1      	sub	sp, #132	@ 0x84
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e093      	b.n	8004f8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a47      	ldr	r2, [pc, #284]	@ (8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d102      	bne.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e7c:	4b46      	ldr	r3, [pc, #280]	@ (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e001      	b.n	8004e86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e072      	b.n	8004f8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ffb9 	bl	8004e1e <LL_ADC_REG_IsConversionOngoing>
 8004eac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ffb3 	bl	8004e1e <LL_ADC_REG_IsConversionOngoing>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d154      	bne.n	8004f68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d151      	bne.n	8004f68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ec4:	4b35      	ldr	r3, [pc, #212]	@ (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004ec6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d02c      	beq.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ee2:	035b      	lsls	r3, r3, #13
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eec:	4829      	ldr	r0, [pc, #164]	@ (8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004eee:	f7ff ff83 	bl	8004df8 <LL_ADC_IsEnabled>
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4828      	ldr	r0, [pc, #160]	@ (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ef6:	f7ff ff7f 	bl	8004df8 <LL_ADC_IsEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	431c      	orrs	r4, r3
 8004efe:	4828      	ldr	r0, [pc, #160]	@ (8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f00:	f7ff ff7a 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4323      	orrs	r3, r4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d137      	bne.n	8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f14:	f023 030f 	bic.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	6811      	ldr	r1, [r2, #0]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	6892      	ldr	r2, [r2, #8]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	431a      	orrs	r2, r3
 8004f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f26:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f28:	e028      	b.n	8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f36:	4817      	ldr	r0, [pc, #92]	@ (8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f38:	f7ff ff5e 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	4816      	ldr	r0, [pc, #88]	@ (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f40:	f7ff ff5a 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f44:	4603      	mov	r3, r0
 8004f46:	431c      	orrs	r4, r3
 8004f48:	4815      	ldr	r0, [pc, #84]	@ (8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f4a:	f7ff ff55 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4323      	orrs	r3, r4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d112      	bne.n	8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f5e:	f023 030f 	bic.w	r3, r3, #15
 8004f62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f66:	e009      	b.n	8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f7a:	e000      	b.n	8004f7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004f86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3784      	adds	r7, #132	@ 0x84
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	50040000 	.word	0x50040000
 8004f98:	50040100 	.word	0x50040100
 8004f9c:	50040300 	.word	0x50040300
 8004fa0:	50040200 	.word	0x50040200

08004fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fd6:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	60d3      	str	r3, [r2, #12]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <__NVIC_GetPriorityGrouping+0x18>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 0307 	and.w	r3, r3, #7
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	db0b      	blt.n	8005032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	4907      	ldr	r1, [pc, #28]	@ (8005040 <__NVIC_EnableIRQ+0x38>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2001      	movs	r0, #1
 800502a:	fa00 f202 	lsl.w	r2, r0, r2
 800502e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000e100 	.word	0xe000e100

08005044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db0a      	blt.n	800506e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	490c      	ldr	r1, [pc, #48]	@ (8005090 <__NVIC_SetPriority+0x4c>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	440b      	add	r3, r1
 8005068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800506c:	e00a      	b.n	8005084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4908      	ldr	r1, [pc, #32]	@ (8005094 <__NVIC_SetPriority+0x50>)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	3b04      	subs	r3, #4
 800507c:	0112      	lsls	r2, r2, #4
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	440b      	add	r3, r1
 8005082:	761a      	strb	r2, [r3, #24]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000e100 	.word	0xe000e100
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	@ 0x24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f1c3 0307 	rsb	r3, r3, #7
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	bf28      	it	cs
 80050b6:	2304      	movcs	r3, #4
 80050b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3304      	adds	r3, #4
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d902      	bls.n	80050c8 <NVIC_EncodePriority+0x30>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3b03      	subs	r3, #3
 80050c6:	e000      	b.n	80050ca <NVIC_EncodePriority+0x32>
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	401a      	ands	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e0:	f04f 31ff 	mov.w	r1, #4294967295
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	43d9      	mvns	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f0:	4313      	orrs	r3, r2
         );
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3724      	adds	r7, #36	@ 0x24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff4c 	bl	8004fa4 <__NVIC_SetPriorityGrouping>
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005126:	f7ff ff61 	bl	8004fec <__NVIC_GetPriorityGrouping>
 800512a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	6978      	ldr	r0, [r7, #20]
 8005132:	f7ff ffb1 	bl	8005098 <NVIC_EncodePriority>
 8005136:	4602      	mov	r2, r0
 8005138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff ff80 	bl	8005044 <__NVIC_SetPriority>
}
 8005144:	bf00      	nop
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff ff54 	bl	8005008 <__NVIC_EnableIRQ>
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e098      	b.n	80052ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	4b4d      	ldr	r3, [pc, #308]	@ (80052b8 <HAL_DMA_Init+0x150>)
 8005182:	429a      	cmp	r2, r3
 8005184:	d80f      	bhi.n	80051a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	4b4b      	ldr	r3, [pc, #300]	@ (80052bc <HAL_DMA_Init+0x154>)
 800518e:	4413      	add	r3, r2
 8005190:	4a4b      	ldr	r2, [pc, #300]	@ (80052c0 <HAL_DMA_Init+0x158>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	009a      	lsls	r2, r3, #2
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a48      	ldr	r2, [pc, #288]	@ (80052c4 <HAL_DMA_Init+0x15c>)
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80051a4:	e00e      	b.n	80051c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b46      	ldr	r3, [pc, #280]	@ (80052c8 <HAL_DMA_Init+0x160>)
 80051ae:	4413      	add	r3, r2
 80051b0:	4a43      	ldr	r2, [pc, #268]	@ (80052c0 <HAL_DMA_Init+0x158>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	009a      	lsls	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a42      	ldr	r2, [pc, #264]	@ (80052cc <HAL_DMA_Init+0x164>)
 80051c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800521e:	d039      	beq.n	8005294 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	4a27      	ldr	r2, [pc, #156]	@ (80052c4 <HAL_DMA_Init+0x15c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d11a      	bne.n	8005260 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800522a:	4b29      	ldr	r3, [pc, #164]	@ (80052d0 <HAL_DMA_Init+0x168>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f003 031c 	and.w	r3, r3, #28
 8005236:	210f      	movs	r1, #15
 8005238:	fa01 f303 	lsl.w	r3, r1, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	4924      	ldr	r1, [pc, #144]	@ (80052d0 <HAL_DMA_Init+0x168>)
 8005240:	4013      	ands	r3, r2
 8005242:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005244:	4b22      	ldr	r3, [pc, #136]	@ (80052d0 <HAL_DMA_Init+0x168>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005250:	f003 031c 	and.w	r3, r3, #28
 8005254:	fa01 f303 	lsl.w	r3, r1, r3
 8005258:	491d      	ldr	r1, [pc, #116]	@ (80052d0 <HAL_DMA_Init+0x168>)
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
 800525e:	e019      	b.n	8005294 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005260:	4b1c      	ldr	r3, [pc, #112]	@ (80052d4 <HAL_DMA_Init+0x16c>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005268:	f003 031c 	and.w	r3, r3, #28
 800526c:	210f      	movs	r1, #15
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	4917      	ldr	r1, [pc, #92]	@ (80052d4 <HAL_DMA_Init+0x16c>)
 8005276:	4013      	ands	r3, r2
 8005278:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800527a:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <HAL_DMA_Init+0x16c>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f003 031c 	and.w	r3, r3, #28
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	4911      	ldr	r1, [pc, #68]	@ (80052d4 <HAL_DMA_Init+0x16c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40020407 	.word	0x40020407
 80052bc:	bffdfff8 	.word	0xbffdfff8
 80052c0:	cccccccd 	.word	0xcccccccd
 80052c4:	40020000 	.word	0x40020000
 80052c8:	bffdfbf8 	.word	0xbffdfbf8
 80052cc:	40020400 	.word	0x40020400
 80052d0:	400200a8 	.word	0x400200a8
 80052d4:	400204a8 	.word	0x400204a8

080052d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_DMA_Start_IT+0x20>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e04b      	b.n	8005390 <HAL_DMA_Start_IT+0xb8>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d13a      	bne.n	8005382 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f95f 	bl	80055f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 020e 	orr.w	r2, r2, #14
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e00f      	b.n	8005370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 020a 	orr.w	r2, r2, #10
 800536e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e005      	b.n	800538e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800538a:	2302      	movs	r3, #2
 800538c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d008      	beq.n	80053c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2204      	movs	r2, #4
 80053b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e022      	b.n	8005408 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 020e 	bic.w	r2, r2, #14
 80053d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e6:	f003 021c 	and.w	r2, r3, #28
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f202 	lsl.w	r2, r1, r2
 80053f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d005      	beq.n	8005438 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2204      	movs	r2, #4
 8005430:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
 8005436:	e029      	b.n	800548c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 020e 	bic.w	r2, r2, #14
 8005446:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f003 021c 	and.w	r2, r3, #28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
    }
  }
  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b2:	f003 031c 	and.w	r3, r3, #28
 80054b6:	2204      	movs	r2, #4
 80054b8:	409a      	lsls	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d026      	beq.n	8005510 <HAL_DMA_IRQHandler+0x7a>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d021      	beq.n	8005510 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0204 	bic.w	r2, r2, #4
 80054e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ee:	f003 021c 	and.w	r2, r3, #28
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	2104      	movs	r1, #4
 80054f8:	fa01 f202 	lsl.w	r2, r1, r2
 80054fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	2b00      	cmp	r3, #0
 8005504:	d071      	beq.n	80055ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800550e:	e06c      	b.n	80055ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005514:	f003 031c 	and.w	r3, r3, #28
 8005518:	2202      	movs	r2, #2
 800551a:	409a      	lsls	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02e      	beq.n	8005582 <HAL_DMA_IRQHandler+0xec>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d029      	beq.n	8005582 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 020a 	bic.w	r2, r2, #10
 800554a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005558:	f003 021c 	and.w	r2, r3, #28
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	2102      	movs	r1, #2
 8005562:	fa01 f202 	lsl.w	r2, r1, r2
 8005566:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d038      	beq.n	80055ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005580:	e033      	b.n	80055ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	f003 031c 	and.w	r3, r3, #28
 800558a:	2208      	movs	r2, #8
 800558c:	409a      	lsls	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02a      	beq.n	80055ec <HAL_DMA_IRQHandler+0x156>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d025      	beq.n	80055ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 020e 	bic.w	r2, r2, #14
 80055ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b4:	f003 021c 	and.w	r2, r3, #28
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f202 	lsl.w	r2, r1, r2
 80055c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
}
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f003 021c 	and.w	r2, r3, #28
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	2101      	movs	r1, #1
 8005610:	fa01 f202 	lsl.w	r2, r1, r2
 8005614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b10      	cmp	r3, #16
 8005624:	d108      	bne.n	8005638 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005636:	e007      	b.n	8005648 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005662:	e166      	b.n	8005932 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8158 	beq.w	800592c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d005      	beq.n	8005694 <HAL_GPIO_Init+0x40>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d130      	bne.n	80056f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4013      	ands	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ca:	2201      	movs	r2, #1
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0201 	and.w	r2, r3, #1
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d017      	beq.n	8005732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2203      	movs	r2, #3
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d123      	bne.n	8005786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	08da      	lsrs	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3208      	adds	r2, #8
 8005746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4013      	ands	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	08da      	lsrs	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3208      	adds	r2, #8
 8005780:	6939      	ldr	r1, [r7, #16]
 8005782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	2203      	movs	r2, #3
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 0203 	and.w	r2, r3, #3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 80b2 	beq.w	800592c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c8:	4b61      	ldr	r3, [pc, #388]	@ (8005950 <HAL_GPIO_Init+0x2fc>)
 80057ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057cc:	4a60      	ldr	r2, [pc, #384]	@ (8005950 <HAL_GPIO_Init+0x2fc>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80057d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005950 <HAL_GPIO_Init+0x2fc>)
 80057d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005954 <HAL_GPIO_Init+0x300>)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	3302      	adds	r3, #2
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	220f      	movs	r2, #15
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800580a:	d02b      	beq.n	8005864 <HAL_GPIO_Init+0x210>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a52      	ldr	r2, [pc, #328]	@ (8005958 <HAL_GPIO_Init+0x304>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d025      	beq.n	8005860 <HAL_GPIO_Init+0x20c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a51      	ldr	r2, [pc, #324]	@ (800595c <HAL_GPIO_Init+0x308>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d01f      	beq.n	800585c <HAL_GPIO_Init+0x208>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a50      	ldr	r2, [pc, #320]	@ (8005960 <HAL_GPIO_Init+0x30c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d019      	beq.n	8005858 <HAL_GPIO_Init+0x204>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a4f      	ldr	r2, [pc, #316]	@ (8005964 <HAL_GPIO_Init+0x310>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_GPIO_Init+0x200>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a4e      	ldr	r2, [pc, #312]	@ (8005968 <HAL_GPIO_Init+0x314>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00d      	beq.n	8005850 <HAL_GPIO_Init+0x1fc>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a4d      	ldr	r2, [pc, #308]	@ (800596c <HAL_GPIO_Init+0x318>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <HAL_GPIO_Init+0x1f8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a4c      	ldr	r2, [pc, #304]	@ (8005970 <HAL_GPIO_Init+0x31c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_GPIO_Init+0x1f4>
 8005844:	2307      	movs	r3, #7
 8005846:	e00e      	b.n	8005866 <HAL_GPIO_Init+0x212>
 8005848:	2308      	movs	r3, #8
 800584a:	e00c      	b.n	8005866 <HAL_GPIO_Init+0x212>
 800584c:	2306      	movs	r3, #6
 800584e:	e00a      	b.n	8005866 <HAL_GPIO_Init+0x212>
 8005850:	2305      	movs	r3, #5
 8005852:	e008      	b.n	8005866 <HAL_GPIO_Init+0x212>
 8005854:	2304      	movs	r3, #4
 8005856:	e006      	b.n	8005866 <HAL_GPIO_Init+0x212>
 8005858:	2303      	movs	r3, #3
 800585a:	e004      	b.n	8005866 <HAL_GPIO_Init+0x212>
 800585c:	2302      	movs	r3, #2
 800585e:	e002      	b.n	8005866 <HAL_GPIO_Init+0x212>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_GPIO_Init+0x212>
 8005864:	2300      	movs	r3, #0
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f002 0203 	and.w	r2, r2, #3
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	4093      	lsls	r3, r2
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005876:	4937      	ldr	r1, [pc, #220]	@ (8005954 <HAL_GPIO_Init+0x300>)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	3302      	adds	r3, #2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <HAL_GPIO_Init+0x320>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	43db      	mvns	r3, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058a8:	4a32      	ldr	r2, [pc, #200]	@ (8005974 <HAL_GPIO_Init+0x320>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058ae:	4b31      	ldr	r3, [pc, #196]	@ (8005974 <HAL_GPIO_Init+0x320>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058d2:	4a28      	ldr	r2, [pc, #160]	@ (8005974 <HAL_GPIO_Init+0x320>)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058d8:	4b26      	ldr	r3, [pc, #152]	@ (8005974 <HAL_GPIO_Init+0x320>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4013      	ands	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005974 <HAL_GPIO_Init+0x320>)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005902:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <HAL_GPIO_Init+0x320>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	43db      	mvns	r3, r3
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005926:	4a13      	ldr	r2, [pc, #76]	@ (8005974 <HAL_GPIO_Init+0x320>)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3301      	adds	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	f47f ae91 	bne.w	8005664 <HAL_GPIO_Init+0x10>
  }
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40021000 	.word	0x40021000
 8005954:	40010000 	.word	0x40010000
 8005958:	48000400 	.word	0x48000400
 800595c:	48000800 	.word	0x48000800
 8005960:	48000c00 	.word	0x48000c00
 8005964:	48001000 	.word	0x48001000
 8005968:	48001400 	.word	0x48001400
 800596c:	48001800 	.word	0x48001800
 8005970:	48001c00 	.word	0x48001c00
 8005974:	40010400 	.word	0x40010400

08005978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	887b      	ldrh	r3, [r7, #2]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e001      	b.n	800599a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
 80059b4:	4613      	mov	r3, r2
 80059b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059b8:	787b      	ldrb	r3, [r7, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059c4:	e002      	b.n	80059cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059e2:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d006      	beq.n	80059fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ee:	4a05      	ldr	r2, [pc, #20]	@ (8005a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f806 	bl	8005a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40010400 	.word	0x40010400

08005a08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e08d      	b.n	8005b4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fd fb35 	bl	80030b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2224      	movs	r2, #36	@ 0x24
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a94:	609a      	str	r2, [r3, #8]
 8005a96:	e006      	b.n	8005aa6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005aa4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d108      	bne.n	8005ac0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	e007      	b.n	8005ad0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ace:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005af2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69d9      	ldr	r1, [r3, #28]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	460b      	mov	r3, r1
 8005b62:	817b      	strh	r3, [r7, #10]
 8005b64:	4613      	mov	r3, r2
 8005b66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	f040 80fd 	bne.w	8005d70 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_I2C_Master_Transmit+0x30>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0f6      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x21e>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b8c:	f7fd ffc8 	bl	8003b20 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	2319      	movs	r3, #25
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fa0a 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e0e1      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2221      	movs	r2, #33	@ 0x21
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2210      	movs	r2, #16
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	893a      	ldrh	r2, [r7, #8]
 8005bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2bff      	cmp	r3, #255	@ 0xff
 8005bde:	d906      	bls.n	8005bee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	22ff      	movs	r2, #255	@ 0xff
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005be6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e007      	b.n	8005bfe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005bf8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bfc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d024      	beq.n	8005c50 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	8979      	ldrh	r1, [r7, #10]
 8005c42:	4b4e      	ldr	r3, [pc, #312]	@ (8005d7c <HAL_I2C_Master_Transmit+0x228>)
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fc05 	bl	8006458 <I2C_TransferConfig>
 8005c4e:	e066      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	8979      	ldrh	r1, [r7, #10]
 8005c58:	4b48      	ldr	r3, [pc, #288]	@ (8005d7c <HAL_I2C_Master_Transmit+0x228>)
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fbfa 	bl	8006458 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c64:	e05b      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	6a39      	ldr	r1, [r7, #32]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f9fd 	bl	800606a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e07b      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d034      	beq.n	8005d1e <HAL_I2C_Master_Transmit+0x1ca>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d130      	bne.n	8005d1e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2180      	movs	r1, #128	@ 0x80
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f976 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e04d      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2bff      	cmp	r3, #255	@ 0xff
 8005cde:	d90e      	bls.n	8005cfe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	22ff      	movs	r2, #255	@ 0xff
 8005ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	8979      	ldrh	r1, [r7, #10]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fbae 	bl	8006458 <I2C_TransferConfig>
 8005cfc:	e00f      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	8979      	ldrh	r1, [r7, #10]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fb9d 	bl	8006458 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d19e      	bne.n	8005c66 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	6a39      	ldr	r1, [r7, #32]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f9e3 	bl	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e01a      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2220      	movs	r2, #32
 8005d42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <HAL_I2C_Master_Transmit+0x22c>)
 8005d50:	400b      	ands	r3, r1
 8005d52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	80002000 	.word	0x80002000
 8005d80:	fe00e800 	.word	0xfe00e800

08005d84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	460b      	mov	r3, r1
 8005d92:	817b      	strh	r3, [r7, #10]
 8005d94:	4613      	mov	r3, r2
 8005d96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	f040 80db 	bne.w	8005f5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_I2C_Master_Receive+0x30>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e0d4      	b.n	8005f5e <HAL_I2C_Master_Receive+0x1da>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dbc:	f7fd feb0 	bl	8003b20 <HAL_GetTick>
 8005dc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	2319      	movs	r3, #25
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8f2 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0bf      	b.n	8005f5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2222      	movs	r2, #34	@ 0x22
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2210      	movs	r2, #16
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	893a      	ldrh	r2, [r7, #8]
 8005dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2bff      	cmp	r3, #255	@ 0xff
 8005e0e:	d90e      	bls.n	8005e2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	8979      	ldrh	r1, [r7, #10]
 8005e1e:	4b52      	ldr	r3, [pc, #328]	@ (8005f68 <HAL_I2C_Master_Receive+0x1e4>)
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fb16 	bl	8006458 <I2C_TransferConfig>
 8005e2c:	e06d      	b.n	8005f0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	8979      	ldrh	r1, [r7, #10]
 8005e40:	4b49      	ldr	r3, [pc, #292]	@ (8005f68 <HAL_I2C_Master_Receive+0x1e4>)
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fb05 	bl	8006458 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e4e:	e05c      	b.n	8005f0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	6a39      	ldr	r1, [r7, #32]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f993 	bl	8006180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e07c      	b.n	8005f5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d034      	beq.n	8005f0a <HAL_I2C_Master_Receive+0x186>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d130      	bne.n	8005f0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2180      	movs	r1, #128	@ 0x80
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f880 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e04d      	b.n	8005f5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2bff      	cmp	r3, #255	@ 0xff
 8005eca:	d90e      	bls.n	8005eea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	22ff      	movs	r2, #255	@ 0xff
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	8979      	ldrh	r1, [r7, #10]
 8005eda:	2300      	movs	r3, #0
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fab8 	bl	8006458 <I2C_TransferConfig>
 8005ee8:	e00f      	b.n	8005f0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	8979      	ldrh	r1, [r7, #10]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 faa7 	bl	8006458 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d19d      	bne.n	8005e50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	6a39      	ldr	r1, [r7, #32]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f8ed 	bl	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e01a      	b.n	8005f5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <HAL_I2C_Master_Receive+0x1e8>)
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f5c:	2302      	movs	r3, #2
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	80002400 	.word	0x80002400
 8005f6c:	fe00e800 	.word	0xfe00e800

08005f70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d103      	bne.n	8005f8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d007      	beq.n	8005fac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	619a      	str	r2, [r3, #24]
  }
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc8:	e03b      	b.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f962 	bl	8006298 <I2C_IsErrorOccurred>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e041      	b.n	8006062 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d02d      	beq.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fd fd9b 	bl	8003b20 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0x44>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d122      	bne.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4013      	ands	r3, r2
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	429a      	cmp	r2, r3
 8006018:	d113      	bne.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e00f      	b.n	8006062 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0b4      	beq.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006076:	e033      	b.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f90b 	bl	8006298 <I2C_IsErrorOccurred>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e031      	b.n	80060f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d025      	beq.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006094:	f7fd fd44 	bl	8003b20 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11a      	bne.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d013      	beq.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e007      	b.n	80060f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d1c4      	bne.n	8006078 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006104:	e02f      	b.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f8c4 	bl	8006298 <I2C_IsErrorOccurred>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e02d      	b.n	8006176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611a:	f7fd fd01 	bl	8003b20 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11a      	bne.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b20      	cmp	r3, #32
 800613c:	d013      	beq.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0220 	orr.w	r2, r3, #32
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e007      	b.n	8006176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b20      	cmp	r3, #32
 8006172:	d1c8      	bne.n	8006106 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006190:	e071      	b.n	8006276 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f87e 	bl	8006298 <I2C_IsErrorOccurred>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d13b      	bne.n	800622c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d138      	bne.n	800622c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d105      	bne.n	80061d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d121      	bne.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2210      	movs	r2, #16
 80061e8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2204      	movs	r2, #4
 80061ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2220      	movs	r2, #32
 80061f6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b24      	ldr	r3, [pc, #144]	@ (8006294 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006204:	400b      	ands	r3, r1
 8006206:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
 8006224:	e002      	b.n	800622c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800622c:	f7fd fc78 	bl	8003b20 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d119      	bne.n	8006276 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d116      	bne.n	8006276 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b04      	cmp	r3, #4
 8006254:	d00f      	beq.n	8006276 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b04      	cmp	r3, #4
 8006282:	d002      	beq.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d083      	beq.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800628a:	7dfb      	ldrb	r3, [r7, #23]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	fe00e800 	.word	0xfe00e800

08006298 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	@ 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d068      	beq.n	8006396 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2210      	movs	r2, #16
 80062ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062cc:	e049      	b.n	8006362 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d045      	beq.n	8006362 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062d6:	f7fd fc23 	bl	8003b20 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <I2C_IsErrorOccurred+0x54>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d13a      	bne.n	8006362 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630e:	d121      	bne.n	8006354 <I2C_IsErrorOccurred+0xbc>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006316:	d01d      	beq.n	8006354 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006318:	7cfb      	ldrb	r3, [r7, #19]
 800631a:	2b20      	cmp	r3, #32
 800631c:	d01a      	beq.n	8006354 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800632c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800632e:	f7fd fbf7 	bl	8003b20 <HAL_GetTick>
 8006332:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006334:	e00e      	b.n	8006354 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006336:	f7fd fbf3 	bl	8003b20 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b19      	cmp	r3, #25
 8006342:	d907      	bls.n	8006354 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	f043 0320 	orr.w	r3, r3, #32
 800634a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006352:	e006      	b.n	8006362 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b20      	cmp	r3, #32
 8006360:	d1e9      	bne.n	8006336 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b20      	cmp	r3, #32
 800636e:	d003      	beq.n	8006378 <I2C_IsErrorOccurred+0xe0>
 8006370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0aa      	beq.n	80062ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2220      	movs	r2, #32
 8006386:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	f043 0304 	orr.w	r3, r3, #4
 800638e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	f043 0308 	orr.w	r3, r3, #8
 80063d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	f043 0302 	orr.w	r3, r3, #2
 80063f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01c      	beq.n	8006446 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff fdaf 	bl	8005f70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6859      	ldr	r1, [r3, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <I2C_IsErrorOccurred+0x1bc>)
 800641e:	400b      	ands	r3, r1
 8006420:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	@ 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	fe00e800 	.word	0xfe00e800

08006458 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	4613      	mov	r3, r2
 8006468:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800646a:	897b      	ldrh	r3, [r7, #10]
 800646c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006470:	7a7b      	ldrb	r3, [r7, #9]
 8006472:	041b      	lsls	r3, r3, #16
 8006474:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006478:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	4313      	orrs	r3, r2
 8006482:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006486:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	0d5b      	lsrs	r3, r3, #21
 8006492:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006496:	4b08      	ldr	r3, [pc, #32]	@ (80064b8 <I2C_TransferConfig+0x60>)
 8006498:	430b      	orrs	r3, r1
 800649a:	43db      	mvns	r3, r3
 800649c:	ea02 0103 	and.w	r1, r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	03ff63ff 	.word	0x03ff63ff

080064bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d138      	bne.n	8006544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064dc:	2302      	movs	r3, #2
 80064de:	e032      	b.n	8006546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	@ 0x24
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0201 	bic.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800650e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e000      	b.n	8006546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	d139      	bne.n	80065dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006572:	2302      	movs	r3, #2
 8006574:	e033      	b.n	80065de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2224      	movs	r2, #36	@ 0x24
 8006582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80065f0:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <HAL_PWREx_GetVoltageRange+0x18>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40007000 	.word	0x40007000

08006608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006616:	d130      	bne.n	800667a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006618:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006624:	d038      	beq.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006626:	4b20      	ldr	r3, [pc, #128]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800662e:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006630:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006636:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2232      	movs	r2, #50	@ 0x32
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	4a1b      	ldr	r2, [pc, #108]	@ (80066b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	0c9b      	lsrs	r3, r3, #18
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800664c:	e002      	b.n	8006654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b01      	subs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006654:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006660:	d102      	bne.n	8006668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f2      	bne.n	800664e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006668:	4b0f      	ldr	r3, [pc, #60]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006674:	d110      	bne.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e00f      	b.n	800669a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800667a:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006686:	d007      	beq.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006688:	4b07      	ldr	r3, [pc, #28]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006690:	4a05      	ldr	r2, [pc, #20]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40007000 	.word	0x40007000
 80066ac:	200001b8 	.word	0x200001b8
 80066b0:	431bde83 	.word	0x431bde83

080066b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f000 bc08 	b.w	8006ed8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c8:	4b96      	ldr	r3, [pc, #600]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066d2:	4b94      	ldr	r3, [pc, #592]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80e4 	beq.w	80068b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_RCC_OscConfig+0x4c>
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	f040 808b 	bne.w	800680e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	f040 8087 	bne.w	800680e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006700:	4b88      	ldr	r3, [pc, #544]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_OscConfig+0x64>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e3df      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	4b81      	ldr	r3, [pc, #516]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <HAL_RCC_OscConfig+0x7e>
 8006728:	4b7e      	ldr	r3, [pc, #504]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006730:	e005      	b.n	800673e <HAL_RCC_OscConfig+0x8a>
 8006732:	4b7c      	ldr	r3, [pc, #496]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800673e:	4293      	cmp	r3, r2
 8006740:	d223      	bcs.n	800678a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fdc4 	bl	80072d4 <RCC_SetFlashLatencyFromMSIRange>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e3c0      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006756:	4b73      	ldr	r3, [pc, #460]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a72      	ldr	r2, [pc, #456]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800675c:	f043 0308 	orr.w	r3, r3, #8
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4b70      	ldr	r3, [pc, #448]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	496d      	ldr	r1, [pc, #436]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006774:	4b6b      	ldr	r3, [pc, #428]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	4968      	ldr	r1, [pc, #416]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006784:	4313      	orrs	r3, r2
 8006786:	604b      	str	r3, [r1, #4]
 8006788:	e025      	b.n	80067d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678a:	4b66      	ldr	r3, [pc, #408]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a65      	ldr	r2, [pc, #404]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006790:	f043 0308 	orr.w	r3, r3, #8
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b63      	ldr	r3, [pc, #396]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	4960      	ldr	r1, [pc, #384]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	495b      	ldr	r1, [pc, #364]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fd84 	bl	80072d4 <RCC_SetFlashLatencyFromMSIRange>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e380      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067d6:	f000 fc87 	bl	80070e8 <HAL_RCC_GetSysClockFreq>
 80067da:	4602      	mov	r2, r0
 80067dc:	4b51      	ldr	r3, [pc, #324]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	091b      	lsrs	r3, r3, #4
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	4950      	ldr	r1, [pc, #320]	@ (8006928 <HAL_RCC_OscConfig+0x274>)
 80067e8:	5ccb      	ldrb	r3, [r1, r3]
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	fa22 f303 	lsr.w	r3, r2, r3
 80067f2:	4a4e      	ldr	r2, [pc, #312]	@ (800692c <HAL_RCC_OscConfig+0x278>)
 80067f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067f6:	4b4e      	ldr	r3, [pc, #312]	@ (8006930 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fc ffe8 	bl	80037d0 <HAL_InitTick>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d052      	beq.n	80068b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	e364      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d032      	beq.n	800687c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006816:	4b43      	ldr	r3, [pc, #268]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a42      	ldr	r2, [pc, #264]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006822:	f7fd f97d 	bl	8003b20 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800682a:	f7fd f979 	bl	8003b20 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e34d      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800683c:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006848:	4b36      	ldr	r3, [pc, #216]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a35      	ldr	r2, [pc, #212]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800684e:	f043 0308 	orr.w	r3, r3, #8
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b33      	ldr	r3, [pc, #204]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4930      	ldr	r1, [pc, #192]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006866:	4b2f      	ldr	r3, [pc, #188]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	492b      	ldr	r1, [pc, #172]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]
 800687a:	e01a      	b.n	80068b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800687c:	4b29      	ldr	r3, [pc, #164]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a28      	ldr	r2, [pc, #160]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006888:	f7fd f94a 	bl	8003b20 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006890:	f7fd f946 	bl	8003b20 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e31a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80068a2:	4b20      	ldr	r3, [pc, #128]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x1dc>
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d073      	beq.n	80069a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d005      	beq.n	80068d0 <HAL_RCC_OscConfig+0x21c>
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b0c      	cmp	r3, #12
 80068c8:	d10e      	bne.n	80068e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d063      	beq.n	80069a4 <HAL_RCC_OscConfig+0x2f0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d15f      	bne.n	80069a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e2f7      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x24c>
 80068f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e025      	b.n	800694c <HAL_RCC_OscConfig+0x298>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006908:	d114      	bne.n	8006934 <HAL_RCC_OscConfig+0x280>
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a05      	ldr	r2, [pc, #20]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b03      	ldr	r3, [pc, #12]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a02      	ldr	r2, [pc, #8]	@ (8006924 <HAL_RCC_OscConfig+0x270>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e013      	b.n	800694c <HAL_RCC_OscConfig+0x298>
 8006924:	40021000 	.word	0x40021000
 8006928:	0800db38 	.word	0x0800db38
 800692c:	200001b8 	.word	0x200001b8
 8006930:	200001bc 	.word	0x200001bc
 8006934:	4ba0      	ldr	r3, [pc, #640]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a9f      	ldr	r2, [pc, #636]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4b9d      	ldr	r3, [pc, #628]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a9c      	ldr	r2, [pc, #624]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fd f8e4 	bl	8003b20 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800695c:	f7fd f8e0 	bl	8003b20 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	@ 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e2b4      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800696e:	4b92      	ldr	r3, [pc, #584]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x2a8>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fd f8d0 	bl	8003b20 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006984:	f7fd f8cc 	bl	8003b20 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	@ 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e2a0      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006996:	4b88      	ldr	r3, [pc, #544]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x2d0>
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d060      	beq.n	8006a74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_OscConfig+0x310>
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b0c      	cmp	r3, #12
 80069bc:	d119      	bne.n	80069f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d116      	bne.n	80069f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069c4:	4b7c      	ldr	r3, [pc, #496]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_OscConfig+0x328>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e27d      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069dc:	4b76      	ldr	r3, [pc, #472]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	4973      	ldr	r1, [pc, #460]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f0:	e040      	b.n	8006a74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d023      	beq.n	8006a42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069fa:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6e      	ldr	r2, [pc, #440]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fd f88b 	bl	8003b20 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a0e:	f7fd f887 	bl	8003b20 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e25b      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a20:	4b65      	ldr	r3, [pc, #404]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b62      	ldr	r3, [pc, #392]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	495f      	ldr	r1, [pc, #380]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
 8006a40:	e018      	b.n	8006a74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b5d      	ldr	r3, [pc, #372]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a5c      	ldr	r2, [pc, #368]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fd f867 	bl	8003b20 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a56:	f7fd f863 	bl	8003b20 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e237      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a68:	4b53      	ldr	r3, [pc, #332]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f0      	bne.n	8006a56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d03c      	beq.n	8006afa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01c      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a88:	4b4b      	ldr	r3, [pc, #300]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a98:	f7fd f842 	bl	8003b20 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa0:	f7fd f83e 	bl	8003b20 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e212      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ab2:	4b41      	ldr	r3, [pc, #260]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0ef      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x3ec>
 8006ac0:	e01b      	b.n	8006afa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad2:	f7fd f825 	bl	8003b20 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ada:	f7fd f821 	bl	8003b20 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e1f5      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006aec:	4b32      	ldr	r3, [pc, #200]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1ef      	bne.n	8006ada <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80a6 	beq.w	8006c54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10d      	bne.n	8006b34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b18:	4b27      	ldr	r3, [pc, #156]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1c:	4a26      	ldr	r2, [pc, #152]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b24:	4b24      	ldr	r3, [pc, #144]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b34:	4b21      	ldr	r3, [pc, #132]	@ (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d118      	bne.n	8006b72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b40:	4b1e      	ldr	r3, [pc, #120]	@ (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b4c:	f7fc ffe8 	bl	8003b20 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fc ffe4 	bl	8003b20 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e1b8      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b66:	4b15      	ldr	r3, [pc, #84]	@ (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d108      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4d8>
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b80:	4a0d      	ldr	r2, [pc, #52]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b8a:	e029      	b.n	8006be0 <HAL_RCC_OscConfig+0x52c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d115      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x50c>
 8006b94:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9a:	4a07      	ldr	r2, [pc, #28]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b9c:	f043 0304 	orr.w	r3, r3, #4
 8006ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006baa:	4a03      	ldr	r2, [pc, #12]	@ (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bb4:	e014      	b.n	8006be0 <HAL_RCC_OscConfig+0x52c>
 8006bb6:	bf00      	nop
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40007000 	.word	0x40007000
 8006bc0:	4b9d      	ldr	r3, [pc, #628]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	4a9c      	ldr	r2, [pc, #624]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bd0:	4b99      	ldr	r3, [pc, #612]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	4a98      	ldr	r2, [pc, #608]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d016      	beq.n	8006c16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fc ff9a 	bl	8003b20 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bee:	e00a      	b.n	8006c06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf0:	f7fc ff96 	bl	8003b20 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e168      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c06:	4b8c      	ldr	r3, [pc, #560]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0ed      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x53c>
 8006c14:	e015      	b.n	8006c42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c16:	f7fc ff83 	bl	8003b20 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c1c:	e00a      	b.n	8006c34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fc ff7f 	bl	8003b20 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e151      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c34:	4b80      	ldr	r3, [pc, #512]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1ed      	bne.n	8006c1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c42:	7ffb      	ldrb	r3, [r7, #31]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d105      	bne.n	8006c54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c48:	4b7b      	ldr	r3, [pc, #492]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4c:	4a7a      	ldr	r2, [pc, #488]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d03c      	beq.n	8006cda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01c      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c68:	4b73      	ldr	r3, [pc, #460]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c6e:	4a72      	ldr	r2, [pc, #456]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c78:	f7fc ff52 	bl	8003b20 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c80:	f7fc ff4e 	bl	8003b20 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e122      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c92:	4b69      	ldr	r3, [pc, #420]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0ef      	beq.n	8006c80 <HAL_RCC_OscConfig+0x5cc>
 8006ca0:	e01b      	b.n	8006cda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ca2:	4b65      	ldr	r3, [pc, #404]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ca8:	4a63      	ldr	r2, [pc, #396]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb2:	f7fc ff35 	bl	8003b20 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cba:	f7fc ff31 	bl	8003b20 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e105      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1ef      	bne.n	8006cba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80f9 	beq.w	8006ed6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	f040 80cf 	bne.w	8006e8c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006cee:	4b52      	ldr	r3, [pc, #328]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f003 0203 	and.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d12c      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d123      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d11b      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d113      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	3b01      	subs	r3, #1
 8006d42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d109      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d071      	beq.n	8006e40 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b0c      	cmp	r3, #12
 8006d60:	d068      	beq.n	8006e34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d62:	4b35      	ldr	r3, [pc, #212]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d105      	bne.n	8006d7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006d6e:	4b32      	ldr	r3, [pc, #200]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e0ac      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2d      	ldr	r2, [pc, #180]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006d84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d8a:	f7fc fec9 	bl	8003b20 <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d92:	f7fc fec5 	bl	8003b20 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e099      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da4:	4b24      	ldr	r3, [pc, #144]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db0:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	4b21      	ldr	r3, [pc, #132]	@ (8006e3c <HAL_RCC_OscConfig+0x788>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	0112      	lsls	r2, r2, #4
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dca:	0212      	lsls	r2, r2, #8
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006dd2:	0852      	lsrs	r2, r2, #1
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0552      	lsls	r2, r2, #21
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006dde:	0852      	lsrs	r2, r2, #1
 8006de0:	3a01      	subs	r2, #1
 8006de2:	0652      	lsls	r2, r2, #25
 8006de4:	4311      	orrs	r1, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006dea:	06d2      	lsls	r2, r2, #27
 8006dec:	430a      	orrs	r2, r1
 8006dee:	4912      	ldr	r1, [pc, #72]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006df4:	4b10      	ldr	r3, [pc, #64]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a0f      	ldr	r2, [pc, #60]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e00:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4a0c      	ldr	r2, [pc, #48]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e0c:	f7fc fe88 	bl	8003b20 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fc fe84 	bl	8003b20 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e058      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e26:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <HAL_RCC_OscConfig+0x784>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e32:	e050      	b.n	8006ed6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e04f      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e40:	4b27      	ldr	r3, [pc, #156]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d144      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e4c:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a23      	ldr	r2, [pc, #140]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e58:	4b21      	ldr	r3, [pc, #132]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4a20      	ldr	r2, [pc, #128]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e64:	f7fc fe5c 	bl	8003b20 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fc fe58 	bl	8003b20 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e02c      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x7b8>
 8006e8a:	e024      	b.n	8006ed6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b0c      	cmp	r3, #12
 8006e90:	d01f      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e92:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a12      	ldr	r2, [pc, #72]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fc fe3f 	bl	8003b20 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fc fe3b 	bl	8003b20 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e00f      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eb8:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f0      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	4905      	ldr	r1, [pc, #20]	@ (8006ee0 <HAL_RCC_OscConfig+0x82c>)
 8006eca:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <HAL_RCC_OscConfig+0x830>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]
 8006ed0:	e001      	b.n	8006ed6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	feeefffc 	.word	0xfeeefffc

08006ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0e7      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006efc:	4b75      	ldr	r3, [pc, #468]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d910      	bls.n	8006f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0a:	4b72      	ldr	r3, [pc, #456]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 0207 	bic.w	r2, r3, #7
 8006f12:	4970      	ldr	r1, [pc, #448]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0cf      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	4b66      	ldr	r3, [pc, #408]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d908      	bls.n	8006f5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f48:	4b63      	ldr	r3, [pc, #396]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4960      	ldr	r1, [pc, #384]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d04c      	beq.n	8007000 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d121      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e0a6      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f86:	4b54      	ldr	r3, [pc, #336]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d115      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e09a      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e08e      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fae:	4b4a      	ldr	r3, [pc, #296]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e086      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fbe:	4b46      	ldr	r3, [pc, #280]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f023 0203 	bic.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4943      	ldr	r1, [pc, #268]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd0:	f7fc fda6 	bl	8003b20 <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	e00a      	b.n	8006fee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fc fda2 	bl	8003b20 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e06e      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	4b3a      	ldr	r3, [pc, #232]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 020c 	and.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d1eb      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d010      	beq.n	800702e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	4b31      	ldr	r3, [pc, #196]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007018:	429a      	cmp	r2, r3
 800701a:	d208      	bcs.n	800702e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800701c:	4b2e      	ldr	r3, [pc, #184]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	492b      	ldr	r1, [pc, #172]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800702e:	4b29      	ldr	r3, [pc, #164]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d210      	bcs.n	800705e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703c:	4b25      	ldr	r3, [pc, #148]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f023 0207 	bic.w	r2, r3, #7
 8007044:	4923      	ldr	r1, [pc, #140]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800704c:	4b21      	ldr	r3, [pc, #132]	@ (80070d4 <HAL_RCC_ClockConfig+0x1ec>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e036      	b.n	80070cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800706a:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	4918      	ldr	r1, [pc, #96]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007078:	4313      	orrs	r3, r2
 800707a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d009      	beq.n	800709c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007088:	4b13      	ldr	r3, [pc, #76]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	4910      	ldr	r1, [pc, #64]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007098:	4313      	orrs	r3, r2
 800709a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800709c:	f000 f824 	bl	80070e8 <HAL_RCC_GetSysClockFreq>
 80070a0:	4602      	mov	r2, r0
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <HAL_RCC_ClockConfig+0x1f0>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	490b      	ldr	r1, [pc, #44]	@ (80070dc <HAL_RCC_ClockConfig+0x1f4>)
 80070ae:	5ccb      	ldrb	r3, [r1, r3]
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	4a09      	ldr	r2, [pc, #36]	@ (80070e0 <HAL_RCC_ClockConfig+0x1f8>)
 80070ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070bc:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <HAL_RCC_ClockConfig+0x1fc>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fc fb85 	bl	80037d0 <HAL_InitTick>
 80070c6:	4603      	mov	r3, r0
 80070c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80070ca:	7afb      	ldrb	r3, [r7, #11]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40022000 	.word	0x40022000
 80070d8:	40021000 	.word	0x40021000
 80070dc:	0800db38 	.word	0x0800db38
 80070e0:	200001b8 	.word	0x200001b8
 80070e4:	200001bc 	.word	0x200001bc

080070e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b089      	sub	sp, #36	@ 0x24
 80070ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f6:	4b3e      	ldr	r3, [pc, #248]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007100:	4b3b      	ldr	r3, [pc, #236]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_RCC_GetSysClockFreq+0x34>
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b0c      	cmp	r3, #12
 8007114:	d121      	bne.n	800715a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d11e      	bne.n	800715a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800711c:	4b34      	ldr	r3, [pc, #208]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007128:	4b31      	ldr	r3, [pc, #196]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800712a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	f003 030f 	and.w	r3, r3, #15
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	e005      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007138:	4b2d      	ldr	r3, [pc, #180]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007144:	4a2b      	ldr	r2, [pc, #172]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007158:	e00a      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d102      	bne.n	8007166 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007160:	4b25      	ldr	r3, [pc, #148]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	e004      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d101      	bne.n	8007170 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800716c:	4b23      	ldr	r3, [pc, #140]	@ (80071fc <HAL_RCC_GetSysClockFreq+0x114>)
 800716e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b0c      	cmp	r3, #12
 8007174:	d134      	bne.n	80071e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007176:	4b1e      	ldr	r3, [pc, #120]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d003      	beq.n	800718e <HAL_RCC_GetSysClockFreq+0xa6>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d003      	beq.n	8007194 <HAL_RCC_GetSysClockFreq+0xac>
 800718c:	e005      	b.n	800719a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800718e:	4b1a      	ldr	r3, [pc, #104]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007190:	617b      	str	r3, [r7, #20]
      break;
 8007192:	e005      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007194:	4b19      	ldr	r3, [pc, #100]	@ (80071fc <HAL_RCC_GetSysClockFreq+0x114>)
 8007196:	617b      	str	r3, [r7, #20]
      break;
 8007198:	e002      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	617b      	str	r3, [r7, #20]
      break;
 800719e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071a0:	4b13      	ldr	r3, [pc, #76]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	3301      	adds	r3, #1
 80071ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071ae:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	fb03 f202 	mul.w	r2, r3, r2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071c6:	4b0a      	ldr	r3, [pc, #40]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	0e5b      	lsrs	r3, r3, #25
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	3301      	adds	r3, #1
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	fbb2 f3f3 	udiv	r3, r2, r3
 80071de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80071e0:	69bb      	ldr	r3, [r7, #24]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3724      	adds	r7, #36	@ 0x24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40021000 	.word	0x40021000
 80071f4:	0800db50 	.word	0x0800db50
 80071f8:	00f42400 	.word	0x00f42400
 80071fc:	007a1200 	.word	0x007a1200

08007200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007204:	4b03      	ldr	r3, [pc, #12]	@ (8007214 <HAL_RCC_GetHCLKFreq+0x14>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	200001b8 	.word	0x200001b8

08007218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800721c:	f7ff fff0 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007220:	4602      	mov	r2, r0
 8007222:	4b06      	ldr	r3, [pc, #24]	@ (800723c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	4904      	ldr	r1, [pc, #16]	@ (8007240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021000 	.word	0x40021000
 8007240:	0800db48 	.word	0x0800db48

08007244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007248:	f7ff ffda 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	0adb      	lsrs	r3, r3, #11
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4904      	ldr	r1, [pc, #16]	@ (800726c <HAL_RCC_GetPCLK2Freq+0x28>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40021000 	.word	0x40021000
 800726c:	0800db48 	.word	0x0800db48

08007270 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	220f      	movs	r2, #15
 800727e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007280:	4b12      	ldr	r3, [pc, #72]	@ (80072cc <HAL_RCC_GetClockConfig+0x5c>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 0203 	and.w	r2, r3, #3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800728c:	4b0f      	ldr	r3, [pc, #60]	@ (80072cc <HAL_RCC_GetClockConfig+0x5c>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007298:	4b0c      	ldr	r3, [pc, #48]	@ (80072cc <HAL_RCC_GetClockConfig+0x5c>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072a4:	4b09      	ldr	r3, [pc, #36]	@ (80072cc <HAL_RCC_GetClockConfig+0x5c>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	08db      	lsrs	r3, r3, #3
 80072aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <HAL_RCC_GetClockConfig+0x60>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0207 	and.w	r2, r3, #7
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	601a      	str	r2, [r3, #0]
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40021000 	.word	0x40021000
 80072d0:	40022000 	.word	0x40022000

080072d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80072e0:	4b2a      	ldr	r3, [pc, #168]	@ (800738c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80072ec:	f7ff f97e 	bl	80065ec <HAL_PWREx_GetVoltageRange>
 80072f0:	6178      	str	r0, [r7, #20]
 80072f2:	e014      	b.n	800731e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80072f4:	4b25      	ldr	r3, [pc, #148]	@ (800738c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f8:	4a24      	ldr	r2, [pc, #144]	@ (800738c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007300:	4b22      	ldr	r3, [pc, #136]	@ (800738c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800730c:	f7ff f96e 	bl	80065ec <HAL_PWREx_GetVoltageRange>
 8007310:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007312:	4b1e      	ldr	r3, [pc, #120]	@ (800738c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800731c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007324:	d10b      	bne.n	800733e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b80      	cmp	r3, #128	@ 0x80
 800732a:	d919      	bls.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007330:	d902      	bls.n	8007338 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007332:	2302      	movs	r3, #2
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	e013      	b.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007338:	2301      	movs	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	e010      	b.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b80      	cmp	r3, #128	@ 0x80
 8007342:	d902      	bls.n	800734a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007344:	2303      	movs	r3, #3
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	e00a      	b.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b80      	cmp	r3, #128	@ 0x80
 800734e:	d102      	bne.n	8007356 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007350:	2302      	movs	r3, #2
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	e004      	b.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b70      	cmp	r3, #112	@ 0x70
 800735a:	d101      	bne.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800735c:	2301      	movs	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007360:	4b0b      	ldr	r3, [pc, #44]	@ (8007390 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f023 0207 	bic.w	r2, r3, #7
 8007368:	4909      	ldr	r1, [pc, #36]	@ (8007390 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	d001      	beq.n	8007382 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40021000 	.word	0x40021000
 8007390:	40022000 	.word	0x40022000

08007394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800739c:	2300      	movs	r3, #0
 800739e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073a0:	2300      	movs	r3, #0
 80073a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d041      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073b8:	d02a      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073be:	d824      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073c4:	d008      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073ca:	d81e      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d4:	d010      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073d6:	e018      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073d8:	4b86      	ldr	r3, [pc, #536]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a85      	ldr	r2, [pc, #532]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073e4:	e015      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 facd 	bl	800798c <RCCEx_PLLSAI1_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073f6:	e00c      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3320      	adds	r3, #32
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fbb6 	bl	8007b70 <RCCEx_PLLSAI2_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007408:	e003      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	74fb      	strb	r3, [r7, #19]
      break;
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007412:	7cfb      	ldrb	r3, [r7, #19]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007418:	4b76      	ldr	r3, [pc, #472]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007426:	4973      	ldr	r1, [pc, #460]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800742e:	e001      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d041      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007444:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007448:	d02a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800744a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800744e:	d824      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007454:	d008      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800745a:	d81e      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007464:	d010      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007466:	e018      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007468:	4b62      	ldr	r3, [pc, #392]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a61      	ldr	r2, [pc, #388]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800746e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007472:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007474:	e015      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fa85 	bl	800798c <RCCEx_PLLSAI1_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007486:	e00c      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3320      	adds	r3, #32
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fb6e 	bl	8007b70 <RCCEx_PLLSAI2_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007498:	e003      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	74fb      	strb	r3, [r7, #19]
      break;
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80074a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a2:	7cfb      	ldrb	r3, [r7, #19]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074a8:	4b52      	ldr	r3, [pc, #328]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b6:	494f      	ldr	r1, [pc, #316]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80074be:	e001      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	7cfb      	ldrb	r3, [r7, #19]
 80074c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80a0 	beq.w	8007612 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074d2:	2300      	movs	r3, #0
 80074d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074d6:	4b47      	ldr	r3, [pc, #284]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80074e6:	2300      	movs	r3, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00d      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ec:	4b41      	ldr	r3, [pc, #260]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f0:	4a40      	ldr	r2, [pc, #256]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074f8:	4b3e      	ldr	r3, [pc, #248]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007500:	60bb      	str	r3, [r7, #8]
 8007502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007504:	2301      	movs	r3, #1
 8007506:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007508:	4b3b      	ldr	r3, [pc, #236]	@ (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3a      	ldr	r2, [pc, #232]	@ (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007514:	f7fc fb04 	bl	8003b20 <HAL_GetTick>
 8007518:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800751a:	e009      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751c:	f7fc fb00 	bl	8003b20 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d902      	bls.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	74fb      	strb	r3, [r7, #19]
        break;
 800752e:	e005      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007530:	4b31      	ldr	r3, [pc, #196]	@ (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0ef      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800753c:	7cfb      	ldrb	r3, [r7, #19]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d15c      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007542:	4b2c      	ldr	r3, [pc, #176]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800754c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01f      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	429a      	cmp	r2, r3
 800755e:	d019      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007560:	4b24      	ldr	r3, [pc, #144]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800756a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800756c:	4b21      	ldr	r3, [pc, #132]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007572:	4a20      	ldr	r2, [pc, #128]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800757c:	4b1d      	ldr	r3, [pc, #116]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007582:	4a1c      	ldr	r2, [pc, #112]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800758c:	4a19      	ldr	r2, [pc, #100]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759e:	f7fc fabf 	bl	8003b20 <HAL_GetTick>
 80075a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075a4:	e00b      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a6:	f7fc fabb 	bl	8003b20 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d902      	bls.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	74fb      	strb	r3, [r7, #19]
            break;
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075be:	4b0d      	ldr	r3, [pc, #52]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0ec      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10c      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075d2:	4b08      	ldr	r3, [pc, #32]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e2:	4904      	ldr	r1, [pc, #16]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80075ea:	e009      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075ec:	7cfb      	ldrb	r3, [r7, #19]
 80075ee:	74bb      	strb	r3, [r7, #18]
 80075f0:	e006      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80075f2:	bf00      	nop
 80075f4:	40021000 	.word	0x40021000
 80075f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fc:	7cfb      	ldrb	r3, [r7, #19]
 80075fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007600:	7c7b      	ldrb	r3, [r7, #17]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d105      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007606:	4ba6      	ldr	r3, [pc, #664]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760a:	4aa5      	ldr	r2, [pc, #660]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800761e:	4ba0      	ldr	r3, [pc, #640]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f023 0203 	bic.w	r2, r3, #3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	499c      	ldr	r1, [pc, #624]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007640:	4b97      	ldr	r3, [pc, #604]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007646:	f023 020c 	bic.w	r2, r3, #12
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764e:	4994      	ldr	r1, [pc, #592]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007662:	4b8f      	ldr	r3, [pc, #572]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	498b      	ldr	r1, [pc, #556]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007684:	4b86      	ldr	r3, [pc, #536]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007692:	4983      	ldr	r1, [pc, #524]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076a6:	4b7e      	ldr	r3, [pc, #504]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b4:	497a      	ldr	r1, [pc, #488]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076c8:	4b75      	ldr	r3, [pc, #468]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d6:	4972      	ldr	r1, [pc, #456]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ea:	4b6d      	ldr	r3, [pc, #436]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076f8:	4969      	ldr	r1, [pc, #420]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800770c:	4b64      	ldr	r3, [pc, #400]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007712:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800771a:	4961      	ldr	r1, [pc, #388]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800772e:	4b5c      	ldr	r3, [pc, #368]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007734:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800773c:	4958      	ldr	r1, [pc, #352]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007750:	4b53      	ldr	r3, [pc, #332]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007756:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775e:	4950      	ldr	r1, [pc, #320]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007772:	4b4b      	ldr	r3, [pc, #300]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007778:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007780:	4947      	ldr	r1, [pc, #284]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007794:	4b42      	ldr	r3, [pc, #264]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800779a:	f023 0203 	bic.w	r2, r3, #3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	493f      	ldr	r1, [pc, #252]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d028      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077b6:	4b3a      	ldr	r3, [pc, #232]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c4:	4936      	ldr	r1, [pc, #216]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d4:	d106      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077d6:	4b32      	ldr	r3, [pc, #200]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	4a31      	ldr	r2, [pc, #196]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077e0:	60d3      	str	r3, [r2, #12]
 80077e2:	e011      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077ec:	d10c      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3304      	adds	r3, #4
 80077f2:	2101      	movs	r1, #1
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 f8c9 	bl	800798c <RCCEx_PLLSAI1_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007804:	7cfb      	ldrb	r3, [r7, #19]
 8007806:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d028      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007814:	4b22      	ldr	r3, [pc, #136]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800781a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007822:	491f      	ldr	r1, [pc, #124]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007832:	d106      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007834:	4b1a      	ldr	r3, [pc, #104]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	4a19      	ldr	r2, [pc, #100]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800783a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800783e:	60d3      	str	r3, [r2, #12]
 8007840:	e011      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800784a:	d10c      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3304      	adds	r3, #4
 8007850:	2101      	movs	r1, #1
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f89a 	bl	800798c <RCCEx_PLLSAI1_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800785c:	7cfb      	ldrb	r3, [r7, #19]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007862:	7cfb      	ldrb	r3, [r7, #19]
 8007864:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d02a      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007872:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007878:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007880:	4907      	ldr	r1, [pc, #28]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800788c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007890:	d108      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007892:	4b03      	ldr	r3, [pc, #12]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	4a02      	ldr	r2, [pc, #8]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007898:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800789c:	60d3      	str	r3, [r2, #12]
 800789e:	e013      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80078a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3304      	adds	r3, #4
 80078b2:	2101      	movs	r1, #1
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f869 	bl	800798c <RCCEx_PLLSAI1_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078be:	7cfb      	ldrb	r3, [r7, #19]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80078c4:	7cfb      	ldrb	r3, [r7, #19]
 80078c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02f      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80078d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078e2:	4929      	ldr	r1, [pc, #164]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078f2:	d10d      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3304      	adds	r3, #4
 80078f8:	2102      	movs	r1, #2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f846 	bl	800798c <RCCEx_PLLSAI1_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007904:	7cfb      	ldrb	r3, [r7, #19]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d014      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800790a:	7cfb      	ldrb	r3, [r7, #19]
 800790c:	74bb      	strb	r3, [r7, #18]
 800790e:	e011      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007918:	d10c      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3320      	adds	r3, #32
 800791e:	2102      	movs	r1, #2
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f925 	bl	8007b70 <RCCEx_PLLSAI2_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800792a:	7cfb      	ldrb	r3, [r7, #19]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007930:	7cfb      	ldrb	r3, [r7, #19]
 8007932:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007940:	4b11      	ldr	r3, [pc, #68]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007946:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007950:	490d      	ldr	r1, [pc, #52]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007964:	4b08      	ldr	r3, [pc, #32]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007974:	4904      	ldr	r1, [pc, #16]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800797c:	7cbb      	ldrb	r3, [r7, #18]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40021000 	.word	0x40021000

0800798c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800799a:	4b74      	ldr	r3, [pc, #464]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d018      	beq.n	80079d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80079a6:	4b71      	ldr	r3, [pc, #452]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f003 0203 	and.w	r2, r3, #3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d10d      	bne.n	80079d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
       ||
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80079be:	4b6b      	ldr	r3, [pc, #428]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
       ||
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d047      	beq.n	8007a62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	73fb      	strb	r3, [r7, #15]
 80079d6:	e044      	b.n	8007a62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d018      	beq.n	8007a12 <RCCEx_PLLSAI1_Config+0x86>
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d825      	bhi.n	8007a30 <RCCEx_PLLSAI1_Config+0xa4>
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d002      	beq.n	80079ee <RCCEx_PLLSAI1_Config+0x62>
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d009      	beq.n	8007a00 <RCCEx_PLLSAI1_Config+0x74>
 80079ec:	e020      	b.n	8007a30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80079ee:	4b5f      	ldr	r3, [pc, #380]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11d      	bne.n	8007a36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079fe:	e01a      	b.n	8007a36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a00:	4b5a      	ldr	r3, [pc, #360]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d116      	bne.n	8007a3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a10:	e013      	b.n	8007a3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a12:	4b56      	ldr	r3, [pc, #344]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10f      	bne.n	8007a3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a1e:	4b53      	ldr	r3, [pc, #332]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a2e:	e006      	b.n	8007a3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	73fb      	strb	r3, [r7, #15]
      break;
 8007a34:	e004      	b.n	8007a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a36:	bf00      	nop
 8007a38:	e002      	b.n	8007a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a3a:	bf00      	nop
 8007a3c:	e000      	b.n	8007a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a46:	4b49      	ldr	r3, [pc, #292]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6819      	ldr	r1, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	4943      	ldr	r1, [pc, #268]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d17c      	bne.n	8007b62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007a68:	4b40      	ldr	r3, [pc, #256]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a74:	f7fc f854 	bl	8003b20 <HAL_GetTick>
 8007a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a7a:	e009      	b.n	8007a90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a7c:	f7fc f850 	bl	8003b20 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d902      	bls.n	8007a90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a8e:	e005      	b.n	8007a9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a90:	4b36      	ldr	r3, [pc, #216]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1ef      	bne.n	8007a7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d15f      	bne.n	8007b62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d110      	bne.n	8007aca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007aa8:	4b30      	ldr	r3, [pc, #192]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007ab0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6892      	ldr	r2, [r2, #8]
 8007ab8:	0211      	lsls	r1, r2, #8
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	06d2      	lsls	r2, r2, #27
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	492a      	ldr	r1, [pc, #168]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	610b      	str	r3, [r1, #16]
 8007ac8:	e027      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d112      	bne.n	8007af6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ad0:	4b26      	ldr	r3, [pc, #152]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007ad8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6892      	ldr	r2, [r2, #8]
 8007ae0:	0211      	lsls	r1, r2, #8
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6912      	ldr	r2, [r2, #16]
 8007ae6:	0852      	lsrs	r2, r2, #1
 8007ae8:	3a01      	subs	r2, #1
 8007aea:	0552      	lsls	r2, r2, #21
 8007aec:	430a      	orrs	r2, r1
 8007aee:	491f      	ldr	r1, [pc, #124]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	610b      	str	r3, [r1, #16]
 8007af4:	e011      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007af6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007afe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6892      	ldr	r2, [r2, #8]
 8007b06:	0211      	lsls	r1, r2, #8
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6952      	ldr	r2, [r2, #20]
 8007b0c:	0852      	lsrs	r2, r2, #1
 8007b0e:	3a01      	subs	r2, #1
 8007b10:	0652      	lsls	r2, r2, #25
 8007b12:	430a      	orrs	r2, r1
 8007b14:	4915      	ldr	r1, [pc, #84]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b1a:	4b14      	ldr	r3, [pc, #80]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a13      	ldr	r2, [pc, #76]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b26:	f7fb fffb 	bl	8003b20 <HAL_GetTick>
 8007b2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b2c:	e009      	b.n	8007b42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b2e:	f7fb fff7 	bl	8003b20 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d902      	bls.n	8007b42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	73fb      	strb	r3, [r7, #15]
          break;
 8007b40:	e005      	b.n	8007b4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b42:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ef      	beq.n	8007b2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	4903      	ldr	r1, [pc, #12]	@ (8007b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40021000 	.word	0x40021000

08007b70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b7e:	4b69      	ldr	r3, [pc, #420]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d018      	beq.n	8007bbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007b8a:	4b66      	ldr	r3, [pc, #408]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f003 0203 	and.w	r2, r3, #3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d10d      	bne.n	8007bb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
       ||
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007ba2:	4b60      	ldr	r3, [pc, #384]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
       ||
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d047      	beq.n	8007c46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
 8007bba:	e044      	b.n	8007c46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d018      	beq.n	8007bf6 <RCCEx_PLLSAI2_Config+0x86>
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d825      	bhi.n	8007c14 <RCCEx_PLLSAI2_Config+0xa4>
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d002      	beq.n	8007bd2 <RCCEx_PLLSAI2_Config+0x62>
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d009      	beq.n	8007be4 <RCCEx_PLLSAI2_Config+0x74>
 8007bd0:	e020      	b.n	8007c14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bd2:	4b54      	ldr	r3, [pc, #336]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d11d      	bne.n	8007c1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007be2:	e01a      	b.n	8007c1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007be4:	4b4f      	ldr	r3, [pc, #316]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d116      	bne.n	8007c1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bf4:	e013      	b.n	8007c1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10f      	bne.n	8007c22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c02:	4b48      	ldr	r3, [pc, #288]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c12:	e006      	b.n	8007c22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
      break;
 8007c18:	e004      	b.n	8007c24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c1a:	bf00      	nop
 8007c1c:	e002      	b.n	8007c24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c1e:	bf00      	nop
 8007c20:	e000      	b.n	8007c24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10d      	bne.n	8007c46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	4938      	ldr	r1, [pc, #224]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d166      	bne.n	8007d1a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007c4c:	4b35      	ldr	r3, [pc, #212]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a34      	ldr	r2, [pc, #208]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c58:	f7fb ff62 	bl	8003b20 <HAL_GetTick>
 8007c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c5e:	e009      	b.n	8007c74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007c60:	f7fb ff5e 	bl	8003b20 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d902      	bls.n	8007c74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
        break;
 8007c72:	e005      	b.n	8007c80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c74:	4b2b      	ldr	r3, [pc, #172]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1ef      	bne.n	8007c60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d149      	bne.n	8007d1a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d110      	bne.n	8007cae <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c8c:	4b25      	ldr	r3, [pc, #148]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007c94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6892      	ldr	r2, [r2, #8]
 8007c9c:	0211      	lsls	r1, r2, #8
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	68d2      	ldr	r2, [r2, #12]
 8007ca2:	06d2      	lsls	r2, r2, #27
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	491f      	ldr	r1, [pc, #124]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	614b      	str	r3, [r1, #20]
 8007cac:	e011      	b.n	8007cd2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cae:	4b1d      	ldr	r3, [pc, #116]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007cb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6892      	ldr	r2, [r2, #8]
 8007cbe:	0211      	lsls	r1, r2, #8
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6912      	ldr	r2, [r2, #16]
 8007cc4:	0852      	lsrs	r2, r2, #1
 8007cc6:	3a01      	subs	r2, #1
 8007cc8:	0652      	lsls	r2, r2, #25
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	4915      	ldr	r1, [pc, #84]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007cd2:	4b14      	ldr	r3, [pc, #80]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a13      	ldr	r2, [pc, #76]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cde:	f7fb ff1f 	bl	8003b20 <HAL_GetTick>
 8007ce2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ce4:	e009      	b.n	8007cfa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ce6:	f7fb ff1b 	bl	8003b20 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d902      	bls.n	8007cfa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	73fb      	strb	r3, [r7, #15]
          break;
 8007cf8:	e005      	b.n	8007d06 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0ef      	beq.n	8007ce6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d106      	bne.n	8007d1a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	4903      	ldr	r1, [pc, #12]	@ (8007d24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40021000 	.word	0x40021000

08007d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e095      	b.n	8007e66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d108      	bne.n	8007d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d4a:	d009      	beq.n	8007d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	61da      	str	r2, [r3, #28]
 8007d52:	e005      	b.n	8007d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fb fa54 	bl	8003228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007da0:	d902      	bls.n	8007da8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e002      	b.n	8007dae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007db6:	d007      	beq.n	8007dc8 <HAL_SPI_Init+0xa0>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007dc0:	d002      	beq.n	8007dc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0a:	ea42 0103 	orr.w	r1, r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	0c1b      	lsrs	r3, r3, #16
 8007e24:	f003 0204 	and.w	r2, r3, #4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007e44:	ea42 0103 	orr.w	r1, r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	099b      	lsrs	r3, r3, #6
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10f      	bne.n	8007eb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	099b      	lsrs	r3, r3, #6
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
    return;
 8007eb2:	e0d7      	b.n	8008064 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <HAL_SPI_IRQHandler+0x66>
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	09db      	lsrs	r3, r3, #7
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
    return;
 8007ed4:	e0c6      	b.n	8008064 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10c      	bne.n	8007efc <HAL_SPI_IRQHandler+0x8c>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	099b      	lsrs	r3, r3, #6
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80b4 	beq.w	8008064 <HAL_SPI_IRQHandler+0x1f4>
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80ad 	beq.w	8008064 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	099b      	lsrs	r3, r3, #6
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d023      	beq.n	8007f5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d011      	beq.n	8007f46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f26:	f043 0204 	orr.w	r2, r3, #4
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	617b      	str	r3, [r7, #20]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	e00b      	b.n	8007f5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	693b      	ldr	r3, [r7, #16]
        return;
 8007f5c:	e082      	b.n	8008064 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d014      	beq.n	8007f94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6e:	f043 0201 	orr.w	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	0a1b      	lsrs	r3, r3, #8
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00c      	beq.n	8007fba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa4:	f043 0208 	orr.w	r2, r3, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d04f      	beq.n	8008062 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_SPI_IRQHandler+0x17e>
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d034      	beq.n	8008058 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0203 	bic.w	r2, r2, #3
 8007ffc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008002:	2b00      	cmp	r3, #0
 8008004:	d011      	beq.n	800802a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800a:	4a18      	ldr	r2, [pc, #96]	@ (800806c <HAL_SPI_IRQHandler+0x1fc>)
 800800c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd f9fe 	bl	8005414 <HAL_DMA_Abort_IT>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008022:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	2b00      	cmp	r3, #0
 8008030:	d016      	beq.n	8008060 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008036:	4a0d      	ldr	r2, [pc, #52]	@ (800806c <HAL_SPI_IRQHandler+0x1fc>)
 8008038:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803e:	4618      	mov	r0, r3
 8008040:	f7fd f9e8 	bl	8005414 <HAL_DMA_Abort_IT>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800804e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008056:	e003      	b.n	8008060 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f809 	bl	8008070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800805e:	e000      	b.n	8008062 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008060:	bf00      	nop
    return;
 8008062:	bf00      	nop
  }
}
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	08008085 	.word	0x08008085

08008070 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008090:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ffe5 	bl	8008070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e049      	b.n	8008154 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fb f945 	bl	8003364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fa9d 	bl	800862c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b01      	cmp	r3, #1
 800816e:	d001      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e04f      	b.n	8008214 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a23      	ldr	r2, [pc, #140]	@ (8008220 <HAL_TIM_Base_Start_IT+0xc4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01d      	beq.n	80081d2 <HAL_TIM_Base_Start_IT+0x76>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819e:	d018      	beq.n	80081d2 <HAL_TIM_Base_Start_IT+0x76>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008224 <HAL_TIM_Base_Start_IT+0xc8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d013      	beq.n	80081d2 <HAL_TIM_Base_Start_IT+0x76>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008228 <HAL_TIM_Base_Start_IT+0xcc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00e      	beq.n	80081d2 <HAL_TIM_Base_Start_IT+0x76>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1c      	ldr	r2, [pc, #112]	@ (800822c <HAL_TIM_Base_Start_IT+0xd0>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d009      	beq.n	80081d2 <HAL_TIM_Base_Start_IT+0x76>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <HAL_TIM_Base_Start_IT+0xd4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_TIM_Base_Start_IT+0x76>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a19      	ldr	r2, [pc, #100]	@ (8008234 <HAL_TIM_Base_Start_IT+0xd8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d115      	bne.n	80081fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	4b17      	ldr	r3, [pc, #92]	@ (8008238 <HAL_TIM_Base_Start_IT+0xdc>)
 80081da:	4013      	ands	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b06      	cmp	r3, #6
 80081e2:	d015      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0xb4>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ea:	d011      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fc:	e008      	b.n	8008210 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0201 	orr.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e000      	b.n	8008212 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008210:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40000c00 	.word	0x40000c00
 8008230:	40013400 	.word	0x40013400
 8008234:	40014000 	.word	0x40014000
 8008238:	00010007 	.word	0x00010007

0800823c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d020      	beq.n	80082a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01b      	beq.n	80082a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0202 	mvn.w	r2, #2
 8008270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f9b2 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 800828c:	e005      	b.n	800829a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9a4 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f9b5 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d020      	beq.n	80082ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01b      	beq.n	80082ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0204 	mvn.w	r2, #4
 80082bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f98c 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 80082d8:	e005      	b.n	80082e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f97e 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f98f 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d020      	beq.n	8008338 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 0308 	and.w	r3, r3, #8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01b      	beq.n	8008338 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0208 	mvn.w	r2, #8
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2204      	movs	r2, #4
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f966 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f958 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f969 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b00      	cmp	r3, #0
 8008340:	d020      	beq.n	8008384 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01b      	beq.n	8008384 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0210 	mvn.w	r2, #16
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2208      	movs	r2, #8
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f940 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f932 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f943 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0201 	mvn.w	r2, #1
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fa fda4 	bl	8002ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00c      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fafd 	bl	80089d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 faf5 	bl	80089e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00c      	beq.n	800841e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8fd 	bl	8008618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00c      	beq.n	8008442 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f06f 0220 	mvn.w	r2, #32
 800843a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fabd 	bl	80089bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_TIM_ConfigClockSource+0x1c>
 8008462:	2302      	movs	r3, #2
 8008464:	e0b6      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x18a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008484:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008488:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008490:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a2:	d03e      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0xd8>
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a8:	f200 8087 	bhi.w	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b0:	f000 8086 	beq.w	80085c0 <HAL_TIM_ConfigClockSource+0x176>
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b8:	d87f      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084ba:	2b70      	cmp	r3, #112	@ 0x70
 80084bc:	d01a      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0xaa>
 80084be:	2b70      	cmp	r3, #112	@ 0x70
 80084c0:	d87b      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084c2:	2b60      	cmp	r3, #96	@ 0x60
 80084c4:	d050      	beq.n	8008568 <HAL_TIM_ConfigClockSource+0x11e>
 80084c6:	2b60      	cmp	r3, #96	@ 0x60
 80084c8:	d877      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084ca:	2b50      	cmp	r3, #80	@ 0x50
 80084cc:	d03c      	beq.n	8008548 <HAL_TIM_ConfigClockSource+0xfe>
 80084ce:	2b50      	cmp	r3, #80	@ 0x50
 80084d0:	d873      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084d2:	2b40      	cmp	r3, #64	@ 0x40
 80084d4:	d058      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x13e>
 80084d6:	2b40      	cmp	r3, #64	@ 0x40
 80084d8:	d86f      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084da:	2b30      	cmp	r3, #48	@ 0x30
 80084dc:	d064      	beq.n	80085a8 <HAL_TIM_ConfigClockSource+0x15e>
 80084de:	2b30      	cmp	r3, #48	@ 0x30
 80084e0:	d86b      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d060      	beq.n	80085a8 <HAL_TIM_ConfigClockSource+0x15e>
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d867      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d05c      	beq.n	80085a8 <HAL_TIM_ConfigClockSource+0x15e>
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	d05a      	beq.n	80085a8 <HAL_TIM_ConfigClockSource+0x15e>
 80084f2:	e062      	b.n	80085ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008504:	f000 f9b2 	bl	800886c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008516:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	609a      	str	r2, [r3, #8]
      break;
 8008520:	e04f      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	f000 f99b 	bl	800886c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008544:	609a      	str	r2, [r3, #8]
      break;
 8008546:	e03c      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008554:	461a      	mov	r2, r3
 8008556:	f000 f90f 	bl	8008778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2150      	movs	r1, #80	@ 0x50
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f968 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 8008566:	e02c      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008574:	461a      	mov	r2, r3
 8008576:	f000 f92e 	bl	80087d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2160      	movs	r1, #96	@ 0x60
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f958 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 8008586:	e01c      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008594:	461a      	mov	r2, r3
 8008596:	f000 f8ef 	bl	8008778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2140      	movs	r1, #64	@ 0x40
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f948 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 80085a6:	e00c      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f000 f93f 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 80085b8:	e003      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
      break;
 80085be:	e000      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80085c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a46      	ldr	r2, [pc, #280]	@ (8008758 <TIM_Base_SetConfig+0x12c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d013      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864a:	d00f      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a43      	ldr	r2, [pc, #268]	@ (800875c <TIM_Base_SetConfig+0x130>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00b      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a42      	ldr	r2, [pc, #264]	@ (8008760 <TIM_Base_SetConfig+0x134>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d007      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a41      	ldr	r2, [pc, #260]	@ (8008764 <TIM_Base_SetConfig+0x138>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a40      	ldr	r2, [pc, #256]	@ (8008768 <TIM_Base_SetConfig+0x13c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d108      	bne.n	800867e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a35      	ldr	r2, [pc, #212]	@ (8008758 <TIM_Base_SetConfig+0x12c>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d01f      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868c:	d01b      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a32      	ldr	r2, [pc, #200]	@ (800875c <TIM_Base_SetConfig+0x130>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d017      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a31      	ldr	r2, [pc, #196]	@ (8008760 <TIM_Base_SetConfig+0x134>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d013      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a30      	ldr	r2, [pc, #192]	@ (8008764 <TIM_Base_SetConfig+0x138>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00f      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008768 <TIM_Base_SetConfig+0x13c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00b      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a2e      	ldr	r2, [pc, #184]	@ (800876c <TIM_Base_SetConfig+0x140>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d007      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008770 <TIM_Base_SetConfig+0x144>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d003      	beq.n	80086c6 <TIM_Base_SetConfig+0x9a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008774 <TIM_Base_SetConfig+0x148>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d108      	bne.n	80086d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a16      	ldr	r2, [pc, #88]	@ (8008758 <TIM_Base_SetConfig+0x12c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00f      	beq.n	8008724 <TIM_Base_SetConfig+0xf8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a18      	ldr	r2, [pc, #96]	@ (8008768 <TIM_Base_SetConfig+0x13c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00b      	beq.n	8008724 <TIM_Base_SetConfig+0xf8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a17      	ldr	r2, [pc, #92]	@ (800876c <TIM_Base_SetConfig+0x140>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d007      	beq.n	8008724 <TIM_Base_SetConfig+0xf8>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a16      	ldr	r2, [pc, #88]	@ (8008770 <TIM_Base_SetConfig+0x144>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_Base_SetConfig+0xf8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a15      	ldr	r2, [pc, #84]	@ (8008774 <TIM_Base_SetConfig+0x148>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d103      	bne.n	800872c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	d105      	bne.n	800874a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f023 0201 	bic.w	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]
  }
}
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	40012c00 	.word	0x40012c00
 800875c:	40000400 	.word	0x40000400
 8008760:	40000800 	.word	0x40000800
 8008764:	40000c00 	.word	0x40000c00
 8008768:	40013400 	.word	0x40013400
 800876c:	40014000 	.word	0x40014000
 8008770:	40014400 	.word	0x40014400
 8008774:	40014800 	.word	0x40014800

08008778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	f023 0201 	bic.w	r2, r3, #1
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f023 030a 	bic.w	r3, r3, #10
 80087b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	621a      	str	r2, [r3, #32]
}
 80087ca:	bf00      	nop
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b087      	sub	sp, #28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	f023 0210 	bic.w	r2, r3, #16
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	031b      	lsls	r3, r3, #12
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008812:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4313      	orrs	r3, r2
 8008854:	f043 0307 	orr.w	r3, r3, #7
 8008858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	609a      	str	r2, [r3, #8]
}
 8008860:	bf00      	nop
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	021a      	lsls	r2, r3, #8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	431a      	orrs	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4313      	orrs	r3, r2
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	609a      	str	r2, [r3, #8]
}
 80088a0:	bf00      	nop
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e068      	b.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a2e      	ldr	r2, [pc, #184]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d004      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a2d      	ldr	r2, [pc, #180]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d108      	bne.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008910:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1e      	ldr	r2, [pc, #120]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d01d      	beq.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008936:	d018      	beq.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1b      	ldr	r2, [pc, #108]	@ (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d013      	beq.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a1a      	ldr	r2, [pc, #104]	@ (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d00e      	beq.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a18      	ldr	r2, [pc, #96]	@ (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d009      	beq.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a13      	ldr	r2, [pc, #76]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d004      	beq.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a14      	ldr	r2, [pc, #80]	@ (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d10c      	bne.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	4313      	orrs	r3, r2
 800897a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40012c00 	.word	0x40012c00
 80089a8:	40013400 	.word	0x40013400
 80089ac:	40000400 	.word	0x40000400
 80089b0:	40000800 	.word	0x40000800
 80089b4:	40000c00 	.word	0x40000c00
 80089b8:	40014000 	.word	0x40014000

080089bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e040      	b.n	8008a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fa fcfc 	bl	8003418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2224      	movs	r2, #36	@ 0x24
 8008a24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0201 	bic.w	r2, r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fedc 	bl	80097fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fc21 	bl	800928c <UART_SetConfig>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e01b      	b.n	8008a8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 ff5b 	bl	8009940 <UART_CheckIdleState>
 8008a8a:	4603      	mov	r3, r0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08a      	sub	sp, #40	@ 0x28
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d177      	bne.n	8008b9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_UART_Transmit+0x24>
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e070      	b.n	8008b9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2221      	movs	r2, #33	@ 0x21
 8008ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aca:	f7fb f829 	bl	8003b20 <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae8:	d108      	bne.n	8008afc <HAL_UART_Transmit+0x68>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	61bb      	str	r3, [r7, #24]
 8008afa:	e003      	b.n	8008b04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b04:	e02f      	b.n	8008b66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2180      	movs	r1, #128	@ 0x80
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 ffbd 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e03b      	b.n	8008b9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10b      	bne.n	8008b44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	881a      	ldrh	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b38:	b292      	uxth	r2, r2
 8008b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	3302      	adds	r3, #2
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e007      	b.n	8008b54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	3301      	adds	r3, #1
 8008b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1c9      	bne.n	8008b06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2140      	movs	r1, #64	@ 0x40
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 ff87 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e005      	b.n	8008b9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e000      	b.n	8008b9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008b9c:	2302      	movs	r3, #2
  }
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	@ 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d137      	bne.n	8008c30 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_UART_Receive_DMA+0x24>
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e030      	b.n	8008c32 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <HAL_UART_Receive_DMA+0x94>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d01f      	beq.n	8008c20 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d018      	beq.n	8008c20 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0c:	623b      	str	r3, [r7, #32]
 8008c0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	69f9      	ldr	r1, [r7, #28]
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e6      	bne.n	8008bee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	461a      	mov	r2, r3
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 ffa0 	bl	8009b6c <UART_Start_Receive_DMA>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	e000      	b.n	8008c32 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c30:	2302      	movs	r3, #2
  }
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3728      	adds	r7, #40	@ 0x28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40008000 	.word	0x40008000

08008c40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b0ba      	sub	sp, #232	@ 0xe8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c6e:	4013      	ands	r3, r2
 8008c70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d115      	bne.n	8008ca8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c80:	f003 0320 	and.w	r3, r3, #32
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d009      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 82ca 	beq.w	8009232 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
      }
      return;
 8008ca6:	e2c4      	b.n	8009232 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 8117 	beq.w	8008ee0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008cbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008cc2:	4b85      	ldr	r3, [pc, #532]	@ (8008ed8 <HAL_UART_IRQHandler+0x298>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 810a 	beq.w	8008ee0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d011      	beq.n	8008cfc <HAL_UART_IRQHandler+0xbc>
 8008cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cf2:	f043 0201 	orr.w	r2, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d011      	beq.n	8008d2c <HAL_UART_IRQHandler+0xec>
 8008d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d22:	f043 0204 	orr.w	r2, r3, #4
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d011      	beq.n	8008d5c <HAL_UART_IRQHandler+0x11c>
 8008d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2204      	movs	r2, #4
 8008d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d52:	f043 0202 	orr.w	r2, r3, #2
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d60:	f003 0308 	and.w	r3, r3, #8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d017      	beq.n	8008d98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d6c:	f003 0320 	and.w	r3, r3, #32
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2208      	movs	r2, #8
 8008d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d8e:	f043 0208 	orr.w	r2, r3, #8
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d012      	beq.n	8008dca <HAL_UART_IRQHandler+0x18a>
 8008da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00c      	beq.n	8008dca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dc0:	f043 0220 	orr.w	r2, r3, #32
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 8230 	beq.w	8009236 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e12:	2b40      	cmp	r3, #64	@ 0x40
 8008e14:	d005      	beq.n	8008e22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d04f      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 ff68 	bl	8009cf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e32:	2b40      	cmp	r3, #64	@ 0x40
 8008e34:	d141      	bne.n	8008eba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1d9      	bne.n	8008e36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d013      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8e:	4a13      	ldr	r2, [pc, #76]	@ (8008edc <HAL_UART_IRQHandler+0x29c>)
 8008e90:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fc fabc 	bl	8005414 <HAL_DMA_Abort_IT>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb0:	e00f      	b.n	8008ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7f8 fec8 	bl	8001c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	e00b      	b.n	8008ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7f8 fec4 	bl	8001c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec0:	e007      	b.n	8008ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7f8 fec0 	bl	8001c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008ed0:	e1b1      	b.n	8009236 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed2:	bf00      	nop
    return;
 8008ed4:	e1af      	b.n	8009236 <HAL_UART_IRQHandler+0x5f6>
 8008ed6:	bf00      	nop
 8008ed8:	04000120 	.word	0x04000120
 8008edc:	08009fa9 	.word	0x08009fa9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	f040 816a 	bne.w	80091be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8163 	beq.w	80091be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efc:	f003 0310 	and.w	r3, r3, #16
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 815c 	beq.w	80091be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f18:	2b40      	cmp	r3, #64	@ 0x40
 8008f1a:	f040 80d4 	bne.w	80090c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 80ad 	beq.w	800908e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	f080 80a5 	bcs.w	800908e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f040 8086 	bne.w	800906c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1da      	bne.n	8008f60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e1      	bne.n	8008faa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3308      	adds	r3, #8
 8009006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800900a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800900c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e3      	bne.n	8008fe6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800903a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800903c:	f023 0310 	bic.w	r3, r3, #16
 8009040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800904e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009050:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800905c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e4      	bne.n	800902c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009066:	4618      	mov	r0, r3
 8009068:	f7fc f996 	bl	8005398 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800907e:	b29b      	uxth	r3, r3
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	b29b      	uxth	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f8f4 	bl	8009274 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800908c:	e0d5      	b.n	800923a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009094:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009098:	429a      	cmp	r2, r3
 800909a:	f040 80ce 	bne.w	800923a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b20      	cmp	r3, #32
 80090ac:	f040 80c5 	bne.w	800923a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f8d8 	bl	8009274 <HAL_UARTEx_RxEventCallback>
      return;
 80090c4:	e0b9      	b.n	800923a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80ab 	beq.w	800923e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80090e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80a6 	beq.w	800923e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009102:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009114:	647b      	str	r3, [r7, #68]	@ 0x44
 8009116:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800911a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e4      	bne.n	80090f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	623b      	str	r3, [r7, #32]
   return(result);
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	f023 0301 	bic.w	r3, r3, #1
 800913e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800914c:	633a      	str	r2, [r7, #48]	@ 0x30
 800914e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e3      	bne.n	8009128 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	60fb      	str	r3, [r7, #12]
   return(result);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f023 0310 	bic.w	r3, r3, #16
 8009188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009196:	61fb      	str	r3, [r7, #28]
 8009198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	69b9      	ldr	r1, [r7, #24]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	617b      	str	r3, [r7, #20]
   return(result);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e4      	bne.n	8009174 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2202      	movs	r2, #2
 80091ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f85c 	bl	8009274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091bc:	e03f      	b.n	800923e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00e      	beq.n	80091e8 <HAL_UART_IRQHandler+0x5a8>
 80091ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d008      	beq.n	80091e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80091de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 ff88 	bl	800a0f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091e6:	e02d      	b.n	8009244 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d008      	beq.n	8009212 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01c      	beq.n	8009242 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
    }
    return;
 8009210:	e017      	b.n	8009242 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d012      	beq.n	8009244 <HAL_UART_IRQHandler+0x604>
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fed2 	bl	8009fd4 <UART_EndTransmit_IT>
    return;
 8009230:	e008      	b.n	8009244 <HAL_UART_IRQHandler+0x604>
      return;
 8009232:	bf00      	nop
 8009234:	e006      	b.n	8009244 <HAL_UART_IRQHandler+0x604>
    return;
 8009236:	bf00      	nop
 8009238:	e004      	b.n	8009244 <HAL_UART_IRQHandler+0x604>
      return;
 800923a:	bf00      	nop
 800923c:	e002      	b.n	8009244 <HAL_UART_IRQHandler+0x604>
      return;
 800923e:	bf00      	nop
 8009240:	e000      	b.n	8009244 <HAL_UART_IRQHandler+0x604>
    return;
 8009242:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009244:	37e8      	adds	r7, #232	@ 0xe8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop

0800924c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800928c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009290:	b08a      	sub	sp, #40	@ 0x28
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	431a      	orrs	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	4ba4      	ldr	r3, [pc, #656]	@ (800954c <UART_SetConfig+0x2c0>)
 80092bc:	4013      	ands	r3, r2
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	6812      	ldr	r2, [r2, #0]
 80092c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092c4:	430b      	orrs	r3, r1
 80092c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a99      	ldr	r2, [pc, #612]	@ (8009550 <UART_SetConfig+0x2c4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d004      	beq.n	80092f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f4:	4313      	orrs	r3, r2
 80092f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009308:	430a      	orrs	r2, r1
 800930a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a90      	ldr	r2, [pc, #576]	@ (8009554 <UART_SetConfig+0x2c8>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d126      	bne.n	8009364 <UART_SetConfig+0xd8>
 8009316:	4b90      	ldr	r3, [pc, #576]	@ (8009558 <UART_SetConfig+0x2cc>)
 8009318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	2b03      	cmp	r3, #3
 8009322:	d81b      	bhi.n	800935c <UART_SetConfig+0xd0>
 8009324:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <UART_SetConfig+0xa0>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	0800933d 	.word	0x0800933d
 8009330:	0800934d 	.word	0x0800934d
 8009334:	08009345 	.word	0x08009345
 8009338:	08009355 	.word	0x08009355
 800933c:	2301      	movs	r3, #1
 800933e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009342:	e116      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009344:	2302      	movs	r3, #2
 8009346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800934a:	e112      	b.n	8009572 <UART_SetConfig+0x2e6>
 800934c:	2304      	movs	r3, #4
 800934e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009352:	e10e      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009354:	2308      	movs	r3, #8
 8009356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800935a:	e10a      	b.n	8009572 <UART_SetConfig+0x2e6>
 800935c:	2310      	movs	r3, #16
 800935e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009362:	e106      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a7c      	ldr	r2, [pc, #496]	@ (800955c <UART_SetConfig+0x2d0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d138      	bne.n	80093e0 <UART_SetConfig+0x154>
 800936e:	4b7a      	ldr	r3, [pc, #488]	@ (8009558 <UART_SetConfig+0x2cc>)
 8009370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009374:	f003 030c 	and.w	r3, r3, #12
 8009378:	2b0c      	cmp	r3, #12
 800937a:	d82d      	bhi.n	80093d8 <UART_SetConfig+0x14c>
 800937c:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <UART_SetConfig+0xf8>)
 800937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009382:	bf00      	nop
 8009384:	080093b9 	.word	0x080093b9
 8009388:	080093d9 	.word	0x080093d9
 800938c:	080093d9 	.word	0x080093d9
 8009390:	080093d9 	.word	0x080093d9
 8009394:	080093c9 	.word	0x080093c9
 8009398:	080093d9 	.word	0x080093d9
 800939c:	080093d9 	.word	0x080093d9
 80093a0:	080093d9 	.word	0x080093d9
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093d9 	.word	0x080093d9
 80093ac:	080093d9 	.word	0x080093d9
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093d1 	.word	0x080093d1
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093be:	e0d8      	b.n	8009572 <UART_SetConfig+0x2e6>
 80093c0:	2302      	movs	r3, #2
 80093c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093c6:	e0d4      	b.n	8009572 <UART_SetConfig+0x2e6>
 80093c8:	2304      	movs	r3, #4
 80093ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ce:	e0d0      	b.n	8009572 <UART_SetConfig+0x2e6>
 80093d0:	2308      	movs	r3, #8
 80093d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093d6:	e0cc      	b.n	8009572 <UART_SetConfig+0x2e6>
 80093d8:	2310      	movs	r3, #16
 80093da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093de:	e0c8      	b.n	8009572 <UART_SetConfig+0x2e6>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a5e      	ldr	r2, [pc, #376]	@ (8009560 <UART_SetConfig+0x2d4>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d125      	bne.n	8009436 <UART_SetConfig+0x1aa>
 80093ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009558 <UART_SetConfig+0x2cc>)
 80093ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093f4:	2b30      	cmp	r3, #48	@ 0x30
 80093f6:	d016      	beq.n	8009426 <UART_SetConfig+0x19a>
 80093f8:	2b30      	cmp	r3, #48	@ 0x30
 80093fa:	d818      	bhi.n	800942e <UART_SetConfig+0x1a2>
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d00a      	beq.n	8009416 <UART_SetConfig+0x18a>
 8009400:	2b20      	cmp	r3, #32
 8009402:	d814      	bhi.n	800942e <UART_SetConfig+0x1a2>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <UART_SetConfig+0x182>
 8009408:	2b10      	cmp	r3, #16
 800940a:	d008      	beq.n	800941e <UART_SetConfig+0x192>
 800940c:	e00f      	b.n	800942e <UART_SetConfig+0x1a2>
 800940e:	2300      	movs	r3, #0
 8009410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009414:	e0ad      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009416:	2302      	movs	r3, #2
 8009418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800941c:	e0a9      	b.n	8009572 <UART_SetConfig+0x2e6>
 800941e:	2304      	movs	r3, #4
 8009420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009424:	e0a5      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009426:	2308      	movs	r3, #8
 8009428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800942c:	e0a1      	b.n	8009572 <UART_SetConfig+0x2e6>
 800942e:	2310      	movs	r3, #16
 8009430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009434:	e09d      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a4a      	ldr	r2, [pc, #296]	@ (8009564 <UART_SetConfig+0x2d8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d125      	bne.n	800948c <UART_SetConfig+0x200>
 8009440:	4b45      	ldr	r3, [pc, #276]	@ (8009558 <UART_SetConfig+0x2cc>)
 8009442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009446:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800944a:	2bc0      	cmp	r3, #192	@ 0xc0
 800944c:	d016      	beq.n	800947c <UART_SetConfig+0x1f0>
 800944e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009450:	d818      	bhi.n	8009484 <UART_SetConfig+0x1f8>
 8009452:	2b80      	cmp	r3, #128	@ 0x80
 8009454:	d00a      	beq.n	800946c <UART_SetConfig+0x1e0>
 8009456:	2b80      	cmp	r3, #128	@ 0x80
 8009458:	d814      	bhi.n	8009484 <UART_SetConfig+0x1f8>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <UART_SetConfig+0x1d8>
 800945e:	2b40      	cmp	r3, #64	@ 0x40
 8009460:	d008      	beq.n	8009474 <UART_SetConfig+0x1e8>
 8009462:	e00f      	b.n	8009484 <UART_SetConfig+0x1f8>
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800946a:	e082      	b.n	8009572 <UART_SetConfig+0x2e6>
 800946c:	2302      	movs	r3, #2
 800946e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009472:	e07e      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009474:	2304      	movs	r3, #4
 8009476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800947a:	e07a      	b.n	8009572 <UART_SetConfig+0x2e6>
 800947c:	2308      	movs	r3, #8
 800947e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009482:	e076      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009484:	2310      	movs	r3, #16
 8009486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800948a:	e072      	b.n	8009572 <UART_SetConfig+0x2e6>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a35      	ldr	r2, [pc, #212]	@ (8009568 <UART_SetConfig+0x2dc>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d12a      	bne.n	80094ec <UART_SetConfig+0x260>
 8009496:	4b30      	ldr	r3, [pc, #192]	@ (8009558 <UART_SetConfig+0x2cc>)
 8009498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800949c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094a4:	d01a      	beq.n	80094dc <UART_SetConfig+0x250>
 80094a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094aa:	d81b      	bhi.n	80094e4 <UART_SetConfig+0x258>
 80094ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b0:	d00c      	beq.n	80094cc <UART_SetConfig+0x240>
 80094b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b6:	d815      	bhi.n	80094e4 <UART_SetConfig+0x258>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <UART_SetConfig+0x238>
 80094bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c0:	d008      	beq.n	80094d4 <UART_SetConfig+0x248>
 80094c2:	e00f      	b.n	80094e4 <UART_SetConfig+0x258>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094ca:	e052      	b.n	8009572 <UART_SetConfig+0x2e6>
 80094cc:	2302      	movs	r3, #2
 80094ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094d2:	e04e      	b.n	8009572 <UART_SetConfig+0x2e6>
 80094d4:	2304      	movs	r3, #4
 80094d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094da:	e04a      	b.n	8009572 <UART_SetConfig+0x2e6>
 80094dc:	2308      	movs	r3, #8
 80094de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094e2:	e046      	b.n	8009572 <UART_SetConfig+0x2e6>
 80094e4:	2310      	movs	r3, #16
 80094e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094ea:	e042      	b.n	8009572 <UART_SetConfig+0x2e6>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a17      	ldr	r2, [pc, #92]	@ (8009550 <UART_SetConfig+0x2c4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d13a      	bne.n	800956c <UART_SetConfig+0x2e0>
 80094f6:	4b18      	ldr	r3, [pc, #96]	@ (8009558 <UART_SetConfig+0x2cc>)
 80094f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009504:	d01a      	beq.n	800953c <UART_SetConfig+0x2b0>
 8009506:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800950a:	d81b      	bhi.n	8009544 <UART_SetConfig+0x2b8>
 800950c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009510:	d00c      	beq.n	800952c <UART_SetConfig+0x2a0>
 8009512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009516:	d815      	bhi.n	8009544 <UART_SetConfig+0x2b8>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <UART_SetConfig+0x298>
 800951c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009520:	d008      	beq.n	8009534 <UART_SetConfig+0x2a8>
 8009522:	e00f      	b.n	8009544 <UART_SetConfig+0x2b8>
 8009524:	2300      	movs	r3, #0
 8009526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800952a:	e022      	b.n	8009572 <UART_SetConfig+0x2e6>
 800952c:	2302      	movs	r3, #2
 800952e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009532:	e01e      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009534:	2304      	movs	r3, #4
 8009536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800953a:	e01a      	b.n	8009572 <UART_SetConfig+0x2e6>
 800953c:	2308      	movs	r3, #8
 800953e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009542:	e016      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009544:	2310      	movs	r3, #16
 8009546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800954a:	e012      	b.n	8009572 <UART_SetConfig+0x2e6>
 800954c:	efff69f3 	.word	0xefff69f3
 8009550:	40008000 	.word	0x40008000
 8009554:	40013800 	.word	0x40013800
 8009558:	40021000 	.word	0x40021000
 800955c:	40004400 	.word	0x40004400
 8009560:	40004800 	.word	0x40004800
 8009564:	40004c00 	.word	0x40004c00
 8009568:	40005000 	.word	0x40005000
 800956c:	2310      	movs	r3, #16
 800956e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a9f      	ldr	r2, [pc, #636]	@ (80097f4 <UART_SetConfig+0x568>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d17a      	bne.n	8009672 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800957c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009580:	2b08      	cmp	r3, #8
 8009582:	d824      	bhi.n	80095ce <UART_SetConfig+0x342>
 8009584:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <UART_SetConfig+0x300>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095cf 	.word	0x080095cf
 8009594:	080095b9 	.word	0x080095b9
 8009598:	080095cf 	.word	0x080095cf
 800959c:	080095bf 	.word	0x080095bf
 80095a0:	080095cf 	.word	0x080095cf
 80095a4:	080095cf 	.word	0x080095cf
 80095a8:	080095cf 	.word	0x080095cf
 80095ac:	080095c7 	.word	0x080095c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7fd fe32 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 80095b4:	61f8      	str	r0, [r7, #28]
        break;
 80095b6:	e010      	b.n	80095da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095b8:	4b8f      	ldr	r3, [pc, #572]	@ (80097f8 <UART_SetConfig+0x56c>)
 80095ba:	61fb      	str	r3, [r7, #28]
        break;
 80095bc:	e00d      	b.n	80095da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095be:	f7fd fd93 	bl	80070e8 <HAL_RCC_GetSysClockFreq>
 80095c2:	61f8      	str	r0, [r7, #28]
        break;
 80095c4:	e009      	b.n	80095da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ca:	61fb      	str	r3, [r7, #28]
        break;
 80095cc:	e005      	b.n	80095da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80095d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80fb 	beq.w	80097d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4413      	add	r3, r2
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d305      	bcc.n	80095fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d903      	bls.n	8009606 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009604:	e0e8      	b.n	80097d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	2200      	movs	r2, #0
 800960a:	461c      	mov	r4, r3
 800960c:	4615      	mov	r5, r2
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	022b      	lsls	r3, r5, #8
 8009618:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800961c:	0222      	lsls	r2, r4, #8
 800961e:	68f9      	ldr	r1, [r7, #12]
 8009620:	6849      	ldr	r1, [r1, #4]
 8009622:	0849      	lsrs	r1, r1, #1
 8009624:	2000      	movs	r0, #0
 8009626:	4688      	mov	r8, r1
 8009628:	4681      	mov	r9, r0
 800962a:	eb12 0a08 	adds.w	sl, r2, r8
 800962e:	eb43 0b09 	adc.w	fp, r3, r9
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009640:	4650      	mov	r0, sl
 8009642:	4659      	mov	r1, fp
 8009644:	f7f7 fa1a 	bl	8000a7c <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4613      	mov	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009656:	d308      	bcc.n	800966a <UART_SetConfig+0x3de>
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800965e:	d204      	bcs.n	800966a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	60da      	str	r2, [r3, #12]
 8009668:	e0b6      	b.n	80097d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009670:	e0b2      	b.n	80097d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800967a:	d15e      	bne.n	800973a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800967c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009680:	2b08      	cmp	r3, #8
 8009682:	d828      	bhi.n	80096d6 <UART_SetConfig+0x44a>
 8009684:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <UART_SetConfig+0x400>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	080096b1 	.word	0x080096b1
 8009690:	080096b9 	.word	0x080096b9
 8009694:	080096c1 	.word	0x080096c1
 8009698:	080096d7 	.word	0x080096d7
 800969c:	080096c7 	.word	0x080096c7
 80096a0:	080096d7 	.word	0x080096d7
 80096a4:	080096d7 	.word	0x080096d7
 80096a8:	080096d7 	.word	0x080096d7
 80096ac:	080096cf 	.word	0x080096cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096b0:	f7fd fdb2 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 80096b4:	61f8      	str	r0, [r7, #28]
        break;
 80096b6:	e014      	b.n	80096e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096b8:	f7fd fdc4 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 80096bc:	61f8      	str	r0, [r7, #28]
        break;
 80096be:	e010      	b.n	80096e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096c0:	4b4d      	ldr	r3, [pc, #308]	@ (80097f8 <UART_SetConfig+0x56c>)
 80096c2:	61fb      	str	r3, [r7, #28]
        break;
 80096c4:	e00d      	b.n	80096e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096c6:	f7fd fd0f 	bl	80070e8 <HAL_RCC_GetSysClockFreq>
 80096ca:	61f8      	str	r0, [r7, #28]
        break;
 80096cc:	e009      	b.n	80096e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096d2:	61fb      	str	r3, [r7, #28]
        break;
 80096d4:	e005      	b.n	80096e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80096e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d077      	beq.n	80097d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	005a      	lsls	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	441a      	add	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b0f      	cmp	r3, #15
 8009702:	d916      	bls.n	8009732 <UART_SetConfig+0x4a6>
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800970a:	d212      	bcs.n	8009732 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	b29b      	uxth	r3, r3
 8009710:	f023 030f 	bic.w	r3, r3, #15
 8009714:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	b29b      	uxth	r3, r3
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	b29a      	uxth	r2, r3
 8009722:	8afb      	ldrh	r3, [r7, #22]
 8009724:	4313      	orrs	r3, r2
 8009726:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	8afa      	ldrh	r2, [r7, #22]
 800972e:	60da      	str	r2, [r3, #12]
 8009730:	e052      	b.n	80097d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009738:	e04e      	b.n	80097d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800973a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800973e:	2b08      	cmp	r3, #8
 8009740:	d827      	bhi.n	8009792 <UART_SetConfig+0x506>
 8009742:	a201      	add	r2, pc, #4	@ (adr r2, 8009748 <UART_SetConfig+0x4bc>)
 8009744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009748:	0800976d 	.word	0x0800976d
 800974c:	08009775 	.word	0x08009775
 8009750:	0800977d 	.word	0x0800977d
 8009754:	08009793 	.word	0x08009793
 8009758:	08009783 	.word	0x08009783
 800975c:	08009793 	.word	0x08009793
 8009760:	08009793 	.word	0x08009793
 8009764:	08009793 	.word	0x08009793
 8009768:	0800978b 	.word	0x0800978b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800976c:	f7fd fd54 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8009770:	61f8      	str	r0, [r7, #28]
        break;
 8009772:	e014      	b.n	800979e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009774:	f7fd fd66 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 8009778:	61f8      	str	r0, [r7, #28]
        break;
 800977a:	e010      	b.n	800979e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800977c:	4b1e      	ldr	r3, [pc, #120]	@ (80097f8 <UART_SetConfig+0x56c>)
 800977e:	61fb      	str	r3, [r7, #28]
        break;
 8009780:	e00d      	b.n	800979e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009782:	f7fd fcb1 	bl	80070e8 <HAL_RCC_GetSysClockFreq>
 8009786:	61f8      	str	r0, [r7, #28]
        break;
 8009788:	e009      	b.n	800979e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800978e:	61fb      	str	r3, [r7, #28]
        break;
 8009790:	e005      	b.n	800979e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800979c:	bf00      	nop
    }

    if (pclk != 0U)
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d019      	beq.n	80097d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	085a      	lsrs	r2, r3, #1
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	441a      	add	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2b0f      	cmp	r3, #15
 80097bc:	d909      	bls.n	80097d2 <UART_SetConfig+0x546>
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097c4:	d205      	bcs.n	80097d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60da      	str	r2, [r3, #12]
 80097d0:	e002      	b.n	80097d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80097e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3728      	adds	r7, #40	@ 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097f2:	bf00      	nop
 80097f4:	40008000 	.word	0x40008000
 80097f8:	00f42400 	.word	0x00f42400

080097fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	430a      	orrs	r2, r1
 8009846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	f003 0304 	and.w	r3, r3, #4
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009890:	f003 0310 	and.w	r3, r3, #16
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b2:	f003 0320 	and.w	r3, r3, #32
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01a      	beq.n	8009912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098fa:	d10a      	bne.n	8009912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	605a      	str	r2, [r3, #4]
  }
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b098      	sub	sp, #96	@ 0x60
 8009944:	af02      	add	r7, sp, #8
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009950:	f7fa f8e6 	bl	8003b20 <HAL_GetTick>
 8009954:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b08      	cmp	r3, #8
 8009962:	d12e      	bne.n	80099c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800996c:	2200      	movs	r2, #0
 800996e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f88c 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d021      	beq.n	80099c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800998c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009992:	653b      	str	r3, [r7, #80]	@ 0x50
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800999c:	647b      	str	r3, [r7, #68]	@ 0x44
 800999e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e6      	bne.n	800997e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e062      	b.n	8009a88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d149      	bne.n	8009a64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099d8:	2200      	movs	r2, #0
 80099da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f856 	bl	8009a90 <UART_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d03c      	beq.n	8009a64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	623b      	str	r3, [r7, #32]
   return(result);
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e6      	bne.n	80099ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a3c:	61fa      	str	r2, [r7, #28]
 8009a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	617b      	str	r3, [r7, #20]
   return(result);
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e5      	bne.n	8009a1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e011      	b.n	8009a88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3758      	adds	r7, #88	@ 0x58
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aa0:	e04f      	b.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d04b      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aaa:	f7fa f839 	bl	8003b20 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d302      	bcc.n	8009ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e04e      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d037      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2b80      	cmp	r3, #128	@ 0x80
 8009ad6:	d034      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d031      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d110      	bne.n	8009b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2208      	movs	r2, #8
 8009af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f8ff 	bl	8009cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2208      	movs	r2, #8
 8009afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e029      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b1c:	d111      	bne.n	8009b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f8e5 	bl	8009cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e00f      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d0a0      	beq.n	8009aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b096      	sub	sp, #88	@ 0x58
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	88fa      	ldrh	r2, [r7, #6]
 8009b84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2222      	movs	r2, #34	@ 0x22
 8009b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d028      	beq.n	8009bf2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ca0 <UART_Start_Receive_DMA+0x134>)
 8009ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bac:	4a3d      	ldr	r2, [pc, #244]	@ (8009ca4 <UART_Start_Receive_DMA+0x138>)
 8009bae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ca8 <UART_Start_Receive_DMA+0x13c>)
 8009bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3324      	adds	r3, #36	@ 0x24
 8009bca:	4619      	mov	r1, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	f7fb fb80 	bl	80052d8 <HAL_DMA_Start_IT>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2210      	movs	r2, #16
 8009be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e051      	b.n	8009c96 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d018      	beq.n	8009c2c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c1a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e6      	bne.n	8009bfa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3308      	adds	r3, #8
 8009c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3308      	adds	r3, #8
 8009c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c80:	623a      	str	r2, [r7, #32]
 8009c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	69f9      	ldr	r1, [r7, #28]
 8009c86:	6a3a      	ldr	r2, [r7, #32]
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e5      	bne.n	8009c60 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3758      	adds	r7, #88	@ 0x58
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	08009dc1 	.word	0x08009dc1
 8009ca4:	08009eed 	.word	0x08009eed
 8009ca8:	08009f2b 	.word	0x08009f2b

08009cac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b089      	sub	sp, #36	@ 0x24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	61bb      	str	r3, [r7, #24]
 8009cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6979      	ldr	r1, [r7, #20]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e6      	bne.n	8009cb4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009cec:	bf00      	nop
 8009cee:	3724      	adds	r7, #36	@ 0x24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b095      	sub	sp, #84	@ 0x54
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e6      	bne.n	8009d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e5      	bne.n	8009d32 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d118      	bne.n	8009da0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f023 0310 	bic.w	r3, r3, #16
 8009d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6979      	ldr	r1, [r7, #20]
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	613b      	str	r3, [r7, #16]
   return(result);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e6      	bne.n	8009d6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009db4:	bf00      	nop
 8009db6:	3754      	adds	r7, #84	@ 0x54
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b09c      	sub	sp, #112	@ 0x70
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dcc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d171      	bne.n	8009ec0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e6      	bne.n	8009de4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e28:	f023 0301 	bic.w	r3, r3, #1
 8009e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e36:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e5      	bne.n	8009e16 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	623b      	str	r3, [r7, #32]
   return(result);
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3308      	adds	r3, #8
 8009e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e5      	bne.n	8009e4a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d118      	bne.n	8009ec0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	e853 3f00 	ldrex	r3, [r3]
 8009e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0310 	bic.w	r3, r3, #16
 8009ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eac:	61fb      	str	r3, [r7, #28]
 8009eae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	69b9      	ldr	r1, [r7, #24]
 8009eb2:	69fa      	ldr	r2, [r7, #28]
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e6      	bne.n	8009e8e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d107      	bne.n	8009ede <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ed8:	f7ff f9cc 	bl	8009274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009edc:	e002      	b.n	8009ee4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009ede:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ee0:	f7ff f9b4 	bl	800924c <HAL_UART_RxCpltCallback>
}
 8009ee4:	bf00      	nop
 8009ee6:	3770      	adds	r7, #112	@ 0x70
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d109      	bne.n	8009f1c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4619      	mov	r1, r3
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff f9ad 	bl	8009274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f1a:	e002      	b.n	8009f22 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff f99f 	bl	8009260 <HAL_UART_RxHalfCpltCallback>
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f50:	2b80      	cmp	r3, #128	@ 0x80
 8009f52:	d109      	bne.n	8009f68 <UART_DMAError+0x3e>
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	2b21      	cmp	r3, #33	@ 0x21
 8009f58:	d106      	bne.n	8009f68 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009f62:	6978      	ldr	r0, [r7, #20]
 8009f64:	f7ff fea2 	bl	8009cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f72:	2b40      	cmp	r3, #64	@ 0x40
 8009f74:	d109      	bne.n	8009f8a <UART_DMAError+0x60>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b22      	cmp	r3, #34	@ 0x22
 8009f7a:	d106      	bne.n	8009f8a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009f84:	6978      	ldr	r0, [r7, #20]
 8009f86:	f7ff feb7 	bl	8009cf8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f90:	f043 0210 	orr.w	r2, r3, #16
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	f7f7 fe54 	bl	8001c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7f7 fe3e 	bl	8001c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fcc:	bf00      	nop
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ff0:	61fb      	str	r3, [r7, #28]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	61bb      	str	r3, [r7, #24]
 8009ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6979      	ldr	r1, [r7, #20]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	613b      	str	r3, [r7, #16]
   return(result);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e6      	bne.n	8009fdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7f7 fde8 	bl	8001bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a020:	bf00      	nop
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e056      	b.n	800a0ee <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d106      	bne.n	800a056 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7f9 f9e1 	bl	8003418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2224      	movs	r2, #36	@ 0x24
 800a05a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0201 	bic.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff fbc1 	bl	80097fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff f906 	bl	800928c <UART_SetConfig>
 800a080:	4603      	mov	r3, r0
 800a082:	2b01      	cmp	r3, #1
 800a084:	d101      	bne.n	800a08a <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e031      	b.n	800a0ee <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a098:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	055b      	lsls	r3, r3, #21
 800a0b2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	041b      	lsls	r3, r3, #16
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800a0c8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	6812      	ldr	r2, [r2, #0]
 800a0d0:	6979      	ldr	r1, [r7, #20]
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0201 	orr.w	r2, r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fc2a 	bl	8009940 <UART_CheckIdleState>
 800a0ec:	4603      	mov	r3, r0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b083      	sub	sp, #12
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <__NVIC_SetPriority>:
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	4603      	mov	r3, r0
 800a114:	6039      	str	r1, [r7, #0]
 800a116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	db0a      	blt.n	800a136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	b2da      	uxtb	r2, r3
 800a124:	490c      	ldr	r1, [pc, #48]	@ (800a158 <__NVIC_SetPriority+0x4c>)
 800a126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a12a:	0112      	lsls	r2, r2, #4
 800a12c:	b2d2      	uxtb	r2, r2
 800a12e:	440b      	add	r3, r1
 800a130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a134:	e00a      	b.n	800a14c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	4908      	ldr	r1, [pc, #32]	@ (800a15c <__NVIC_SetPriority+0x50>)
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	3b04      	subs	r3, #4
 800a144:	0112      	lsls	r2, r2, #4
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	440b      	add	r3, r1
 800a14a:	761a      	strb	r2, [r3, #24]
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	e000e100 	.word	0xe000e100
 800a15c:	e000ed00 	.word	0xe000ed00

0800a160 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <SysTick_Handler+0x1c>)
 800a166:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a168:	f001 fd18 	bl	800bb9c <xTaskGetSchedulerState>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d001      	beq.n	800a176 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a172:	f002 fb11 	bl	800c798 <xPortSysTickHandler>
  }
}
 800a176:	bf00      	nop
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	e000e010 	.word	0xe000e010

0800a180 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a184:	2100      	movs	r1, #0
 800a186:	f06f 0004 	mvn.w	r0, #4
 800a18a:	f7ff ffbf 	bl	800a10c <__NVIC_SetPriority>
#endif
}
 800a18e:	bf00      	nop
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a19a:	f3ef 8305 	mrs	r3, IPSR
 800a19e:	603b      	str	r3, [r7, #0]
  return(result);
 800a1a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1a6:	f06f 0305 	mvn.w	r3, #5
 800a1aa:	607b      	str	r3, [r7, #4]
 800a1ac:	e00c      	b.n	800a1c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <osKernelInitialize+0x44>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1b6:	4b08      	ldr	r3, [pc, #32]	@ (800a1d8 <osKernelInitialize+0x44>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	e002      	b.n	800a1c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1c8:	687b      	ldr	r3, [r7, #4]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	20000d34 	.word	0x20000d34

0800a1dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e2:	f3ef 8305 	mrs	r3, IPSR
 800a1e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1ee:	f06f 0305 	mvn.w	r3, #5
 800a1f2:	607b      	str	r3, [r7, #4]
 800a1f4:	e010      	b.n	800a218 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <osKernelStart+0x48>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d109      	bne.n	800a212 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1fe:	f7ff ffbf 	bl	800a180 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a202:	4b08      	ldr	r3, [pc, #32]	@ (800a224 <osKernelStart+0x48>)
 800a204:	2202      	movs	r2, #2
 800a206:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a208:	f001 f87a 	bl	800b300 <vTaskStartScheduler>
      stat = osOK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	e002      	b.n	800a218 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a212:	f04f 33ff 	mov.w	r3, #4294967295
 800a216:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a218:	687b      	ldr	r3, [r7, #4]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20000d34 	.word	0x20000d34

0800a228 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08e      	sub	sp, #56	@ 0x38
 800a22c:	af04      	add	r7, sp, #16
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a238:	f3ef 8305 	mrs	r3, IPSR
 800a23c:	617b      	str	r3, [r7, #20]
  return(result);
 800a23e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a240:	2b00      	cmp	r3, #0
 800a242:	d17e      	bne.n	800a342 <osThreadNew+0x11a>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d07b      	beq.n	800a342 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a24a:	2380      	movs	r3, #128	@ 0x80
 800a24c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a24e:	2318      	movs	r3, #24
 800a250:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a256:	f04f 33ff 	mov.w	r3, #4294967295
 800a25a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d045      	beq.n	800a2ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <osThreadNew+0x48>
        name = attr->name;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d008      	beq.n	800a296 <osThreadNew+0x6e>
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	2b38      	cmp	r3, #56	@ 0x38
 800a288:	d805      	bhi.n	800a296 <osThreadNew+0x6e>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <osThreadNew+0x72>
        return (NULL);
 800a296:	2300      	movs	r3, #0
 800a298:	e054      	b.n	800a344 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	089b      	lsrs	r3, r3, #2
 800a2a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <osThreadNew+0xa8>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	2b5b      	cmp	r3, #91	@ 0x5b
 800a2b8:	d90a      	bls.n	800a2d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d006      	beq.n	800a2d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <osThreadNew+0xa8>
        mem = 1;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	e010      	b.n	800a2f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10c      	bne.n	800a2f2 <osThreadNew+0xca>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d108      	bne.n	800a2f2 <osThreadNew+0xca>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d104      	bne.n	800a2f2 <osThreadNew+0xca>
          mem = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61bb      	str	r3, [r7, #24]
 800a2ec:	e001      	b.n	800a2f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d110      	bne.n	800a31a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6a3a      	ldr	r2, [r7, #32]
 800a30c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 fe1a 	bl	800af48 <xTaskCreateStatic>
 800a314:	4603      	mov	r3, r0
 800a316:	613b      	str	r3, [r7, #16]
 800a318:	e013      	b.n	800a342 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d110      	bne.n	800a342 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	b29a      	uxth	r2, r3
 800a324:	f107 0310 	add.w	r3, r7, #16
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 fe68 	bl	800b008 <xTaskCreate>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d001      	beq.n	800a342 <osThreadNew+0x11a>
            hTask = NULL;
 800a33e:	2300      	movs	r3, #0
 800a340:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a342:	693b      	ldr	r3, [r7, #16]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3728      	adds	r7, #40	@ 0x28
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a354:	f3ef 8305 	mrs	r3, IPSR
 800a358:	60bb      	str	r3, [r7, #8]
  return(result);
 800a35a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <osDelay+0x1c>
    stat = osErrorISR;
 800a360:	f06f 0305 	mvn.w	r3, #5
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	e007      	b.n	800a378 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d002      	beq.n	800a378 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 ff8e 	bl	800b294 <vTaskDelay>
    }
  }

  return (stat);
 800a378:	68fb      	ldr	r3, [r7, #12]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a07      	ldr	r2, [pc, #28]	@ (800a3b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	4a06      	ldr	r2, [pc, #24]	@ (800a3b4 <vApplicationGetIdleTaskMemory+0x30>)
 800a39a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2280      	movs	r2, #128	@ 0x80
 800a3a0:	601a      	str	r2, [r3, #0]
}
 800a3a2:	bf00      	nop
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	20000d38 	.word	0x20000d38
 800a3b4:	20000d94 	.word	0x20000d94

0800a3b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a07      	ldr	r2, [pc, #28]	@ (800a3e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	4a06      	ldr	r2, [pc, #24]	@ (800a3e8 <vApplicationGetTimerTaskMemory+0x30>)
 800a3ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3d6:	601a      	str	r2, [r3, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	20000f94 	.word	0x20000f94
 800a3e8:	20000ff0 	.word	0x20000ff0

0800a3ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f103 0208 	add.w	r2, r3, #8
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f04f 32ff 	mov.w	r2, #4294967295
 800a404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f103 0208 	add.w	r2, r3, #8
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f103 0208 	add.w	r2, r3, #8
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a43a:	bf00      	nop
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	601a      	str	r2, [r3, #0]
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a4:	d103      	bne.n	800a4ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e00c      	b.n	800a4c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	e002      	b.n	800a4bc <vListInsert+0x2e>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d2f6      	bcs.n	800a4b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	6892      	ldr	r2, [r2, #8]
 800a516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	6852      	ldr	r2, [r2, #4]
 800a520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d103      	bne.n	800a534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	1e5a      	subs	r2, r3, #1
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	e7fd      	b.n	800a57c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a580:	f002 f87a 	bl	800c678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58c:	68f9      	ldr	r1, [r7, #12]
 800a58e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a590:	fb01 f303 	mul.w	r3, r1, r3
 800a594:	441a      	add	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	68f9      	ldr	r1, [r7, #12]
 800a5b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a5b6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ba:	441a      	add	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	22ff      	movs	r2, #255	@ 0xff
 800a5c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	22ff      	movs	r2, #255	@ 0xff
 800a5cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d114      	bne.n	800a600 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01a      	beq.n	800a614 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3310      	adds	r3, #16
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 f91a 	bl	800b81c <xTaskRemoveFromEventList>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a624 <xQueueGenericReset+0xd0>)
 800a5f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	e009      	b.n	800a614 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3310      	adds	r3, #16
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fef1 	bl	800a3ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3324      	adds	r3, #36	@ 0x24
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff feec 	bl	800a3ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a614:	f002 f862 	bl	800c6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a618:	2301      	movs	r3, #1
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	e000ed04 	.word	0xe000ed04

0800a628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08e      	sub	sp, #56	@ 0x38
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10b      	bne.n	800a654 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a64e:	bf00      	nop
 800a650:	bf00      	nop
 800a652:	e7fd      	b.n	800a650 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <xQueueGenericCreateStatic+0x56>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <xQueueGenericCreateStatic+0x5a>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueGenericCreateStatic+0x5c>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	623b      	str	r3, [r7, #32]
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <xQueueGenericCreateStatic+0x84>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <xQueueGenericCreateStatic+0x88>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <xQueueGenericCreateStatic+0x8a>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10b      	bne.n	800a6ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	61fb      	str	r3, [r7, #28]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6ce:	2350      	movs	r3, #80	@ 0x50
 800a6d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2b50      	cmp	r3, #80	@ 0x50
 800a6d6:	d00b      	beq.n	800a6f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	61bb      	str	r3, [r7, #24]
}
 800a6ea:	bf00      	nop
 800a6ec:	bf00      	nop
 800a6ee:	e7fd      	b.n	800a6ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00d      	beq.n	800a718 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a704:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	4613      	mov	r3, r2
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	68b9      	ldr	r1, [r7, #8]
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f805 	bl	800a722 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3730      	adds	r7, #48	@ 0x30
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d103      	bne.n	800a73e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	e002      	b.n	800a744 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a750:	2101      	movs	r1, #1
 800a752:	69b8      	ldr	r0, [r7, #24]
 800a754:	f7ff fefe 	bl	800a554 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	78fa      	ldrb	r2, [r7, #3]
 800a75c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08e      	sub	sp, #56	@ 0x38
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a776:	2300      	movs	r3, #0
 800a778:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10b      	bne.n	800a79c <xQueueGenericSend+0x34>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a796:	bf00      	nop
 800a798:	bf00      	nop
 800a79a:	e7fd      	b.n	800a798 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <xQueueGenericSend+0x42>
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <xQueueGenericSend+0x46>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e000      	b.n	800a7b0 <xQueueGenericSend+0x48>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10b      	bne.n	800a7cc <xQueueGenericSend+0x64>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7c6:	bf00      	nop
 800a7c8:	bf00      	nop
 800a7ca:	e7fd      	b.n	800a7c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d103      	bne.n	800a7da <xQueueGenericSend+0x72>
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d101      	bne.n	800a7de <xQueueGenericSend+0x76>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <xQueueGenericSend+0x78>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <xQueueGenericSend+0x94>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	623b      	str	r3, [r7, #32]
}
 800a7f6:	bf00      	nop
 800a7f8:	bf00      	nop
 800a7fa:	e7fd      	b.n	800a7f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7fc:	f001 f9ce 	bl	800bb9c <xTaskGetSchedulerState>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <xQueueGenericSend+0xa4>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <xQueueGenericSend+0xa8>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e000      	b.n	800a812 <xQueueGenericSend+0xaa>
 800a810:	2300      	movs	r3, #0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xQueueGenericSend+0xc6>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61fb      	str	r3, [r7, #28]
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	e7fd      	b.n	800a82a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82e:	f001 ff23 	bl	800c678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d302      	bcc.n	800a844 <xQueueGenericSend+0xdc>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d129      	bne.n	800a898 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a84a:	f000 fa0f 	bl	800ac6c <prvCopyDataToQueue>
 800a84e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	d010      	beq.n	800a87a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85a:	3324      	adds	r3, #36	@ 0x24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 ffdd 	bl	800b81c <xTaskRemoveFromEventList>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d013      	beq.n	800a890 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a868:	4b3f      	ldr	r3, [pc, #252]	@ (800a968 <xQueueGenericSend+0x200>)
 800a86a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	e00a      	b.n	800a890 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d007      	beq.n	800a890 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a880:	4b39      	ldr	r3, [pc, #228]	@ (800a968 <xQueueGenericSend+0x200>)
 800a882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a890:	f001 ff24 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800a894:	2301      	movs	r3, #1
 800a896:	e063      	b.n	800a960 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d103      	bne.n	800a8a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a89e:	f001 ff1d 	bl	800c6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e05c      	b.n	800a960 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8ac:	f107 0314 	add.w	r3, r7, #20
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f001 f817 	bl	800b8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8ba:	f001 ff0f 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8be:	f000 fd87 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8c2:	f001 fed9 	bl	800c678 <vPortEnterCritical>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d103      	bne.n	800a8dc <xQueueGenericSend+0x174>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e8:	d103      	bne.n	800a8f2 <xQueueGenericSend+0x18a>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8f2:	f001 fef3 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8f6:	1d3a      	adds	r2, r7, #4
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f001 f806 	bl	800b910 <xTaskCheckForTimeOut>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d124      	bne.n	800a954 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a90a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a90c:	f000 faa6 	bl	800ae5c <prvIsQueueFull>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d018      	beq.n	800a948 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	3310      	adds	r3, #16
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 ff2a 	bl	800b778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a924:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a926:	f000 fa31 	bl	800ad8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a92a:	f000 fd5f 	bl	800b3ec <xTaskResumeAll>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	f47f af7c 	bne.w	800a82e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a936:	4b0c      	ldr	r3, [pc, #48]	@ (800a968 <xQueueGenericSend+0x200>)
 800a938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	e772      	b.n	800a82e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a948:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a94a:	f000 fa1f 	bl	800ad8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a94e:	f000 fd4d 	bl	800b3ec <xTaskResumeAll>
 800a952:	e76c      	b.n	800a82e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a956:	f000 fa19 	bl	800ad8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a95a:	f000 fd47 	bl	800b3ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a95e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a960:	4618      	mov	r0, r3
 800a962:	3738      	adds	r7, #56	@ 0x38
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b090      	sub	sp, #64	@ 0x40
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d103      	bne.n	800a9aa <xQueueGenericSendFromISR+0x3e>
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <xQueueGenericSendFromISR+0x42>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e000      	b.n	800a9b0 <xQueueGenericSendFromISR+0x44>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10b      	bne.n	800a9cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9c6:	bf00      	nop
 800a9c8:	bf00      	nop
 800a9ca:	e7fd      	b.n	800a9c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d103      	bne.n	800a9da <xQueueGenericSendFromISR+0x6e>
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d101      	bne.n	800a9de <xQueueGenericSendFromISR+0x72>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e000      	b.n	800a9e0 <xQueueGenericSendFromISR+0x74>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	623b      	str	r3, [r7, #32]
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	e7fd      	b.n	800a9f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9fc:	f001 ff1c 	bl	800c838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa00:	f3ef 8211 	mrs	r2, BASEPRI
 800aa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	61fa      	str	r2, [r7, #28]
 800aa16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d302      	bcc.n	800aa2e <xQueueGenericSendFromISR+0xc2>
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d12f      	bne.n	800aa8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa44:	f000 f912 	bl	800ac6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa50:	d112      	bne.n	800aa78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d016      	beq.n	800aa88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	3324      	adds	r3, #36	@ 0x24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fedc 	bl	800b81c <xTaskRemoveFromEventList>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00e      	beq.n	800aa88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	e007      	b.n	800aa88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	b25a      	sxtb	r2, r3
 800aa82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa8c:	e001      	b.n	800aa92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3740      	adds	r7, #64	@ 0x40
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08c      	sub	sp, #48	@ 0x30
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10b      	bne.n	800aada <xQueueReceive+0x32>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	623b      	str	r3, [r7, #32]
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
 800aad8:	e7fd      	b.n	800aad6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <xQueueReceive+0x40>
 800aae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <xQueueReceive+0x44>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <xQueueReceive+0x46>
 800aaec:	2300      	movs	r3, #0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10b      	bne.n	800ab0a <xQueueReceive+0x62>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	61fb      	str	r3, [r7, #28]
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop
 800ab08:	e7fd      	b.n	800ab06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab0a:	f001 f847 	bl	800bb9c <xTaskGetSchedulerState>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <xQueueReceive+0x72>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <xQueueReceive+0x76>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e000      	b.n	800ab20 <xQueueReceive+0x78>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10b      	bne.n	800ab3c <xQueueReceive+0x94>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61bb      	str	r3, [r7, #24]
}
 800ab36:	bf00      	nop
 800ab38:	bf00      	nop
 800ab3a:	e7fd      	b.n	800ab38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab3c:	f001 fd9c 	bl	800c678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01f      	beq.n	800ab8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab50:	f000 f8f6 	bl	800ad40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00f      	beq.n	800ab84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab66:	3310      	adds	r3, #16
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 fe57 	bl	800b81c <xTaskRemoveFromEventList>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d007      	beq.n	800ab84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab74:	4b3c      	ldr	r3, [pc, #240]	@ (800ac68 <xQueueReceive+0x1c0>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab84:	f001 fdaa 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e069      	b.n	800ac60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d103      	bne.n	800ab9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab92:	f001 fda3 	bl	800c6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab96:	2300      	movs	r3, #0
 800ab98:	e062      	b.n	800ac60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aba0:	f107 0310 	add.w	r3, r7, #16
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fe9d 	bl	800b8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abaa:	2301      	movs	r3, #1
 800abac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abae:	f001 fd95 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abb2:	f000 fc0d 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abb6:	f001 fd5f 	bl	800c678 <vPortEnterCritical>
 800abba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abc0:	b25b      	sxtb	r3, r3
 800abc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc6:	d103      	bne.n	800abd0 <xQueueReceive+0x128>
 800abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abd6:	b25b      	sxtb	r3, r3
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d103      	bne.n	800abe6 <xQueueReceive+0x13e>
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abe6:	f001 fd79 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abea:	1d3a      	adds	r2, r7, #4
 800abec:	f107 0310 	add.w	r3, r7, #16
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fe8c 	bl	800b910 <xTaskCheckForTimeOut>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d123      	bne.n	800ac46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac00:	f000 f916 	bl	800ae30 <prvIsQueueEmpty>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d017      	beq.n	800ac3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0c:	3324      	adds	r3, #36	@ 0x24
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fdb0 	bl	800b778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac1a:	f000 f8b7 	bl	800ad8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac1e:	f000 fbe5 	bl	800b3ec <xTaskResumeAll>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d189      	bne.n	800ab3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ac28:	4b0f      	ldr	r3, [pc, #60]	@ (800ac68 <xQueueReceive+0x1c0>)
 800ac2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	e780      	b.n	800ab3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac3c:	f000 f8a6 	bl	800ad8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac40:	f000 fbd4 	bl	800b3ec <xTaskResumeAll>
 800ac44:	e77a      	b.n	800ab3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac48:	f000 f8a0 	bl	800ad8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac4c:	f000 fbce 	bl	800b3ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac52:	f000 f8ed 	bl	800ae30 <prvIsQueueEmpty>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f43f af6f 	beq.w	800ab3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3730      	adds	r7, #48	@ 0x30
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10d      	bne.n	800aca6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d14d      	bne.n	800ad2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 ff9e 	bl	800bbd8 <xTaskPriorityDisinherit>
 800ac9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	e043      	b.n	800ad2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d119      	bne.n	800ace0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6858      	ldr	r0, [r3, #4]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb4:	461a      	mov	r2, r3
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	f002 f8c4 	bl	800ce44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc4:	441a      	add	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d32b      	bcc.n	800ad2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	e026      	b.n	800ad2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68d8      	ldr	r0, [r3, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace8:	461a      	mov	r2, r3
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	f002 f8aa 	bl	800ce44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf8:	425b      	negs	r3, r3
 800acfa:	441a      	add	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d207      	bcs.n	800ad1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad14:	425b      	negs	r3, r3
 800ad16:	441a      	add	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d105      	bne.n	800ad2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ad36:	697b      	ldr	r3, [r7, #20]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d018      	beq.n	800ad84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5a:	441a      	add	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68da      	ldr	r2, [r3, #12]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d303      	bcc.n	800ad74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68d9      	ldr	r1, [r3, #12]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6838      	ldr	r0, [r7, #0]
 800ad80:	f002 f860 	bl	800ce44 <memcpy>
	}
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad94:	f001 fc70 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ada0:	e011      	b.n	800adc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d012      	beq.n	800add0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3324      	adds	r3, #36	@ 0x24
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fd34 	bl	800b81c <xTaskRemoveFromEventList>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800adba:	f000 fe0d 	bl	800b9d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dce9      	bgt.n	800ada2 <prvUnlockQueue+0x16>
 800adce:	e000      	b.n	800add2 <prvUnlockQueue+0x46>
					break;
 800add0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	22ff      	movs	r2, #255	@ 0xff
 800add6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800adda:	f001 fc7f 	bl	800c6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adde:	f001 fc4b 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ade8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adea:	e011      	b.n	800ae10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d012      	beq.n	800ae1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3310      	adds	r3, #16
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 fd0f 	bl	800b81c <xTaskRemoveFromEventList>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae04:	f000 fde8 	bl	800b9d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dce9      	bgt.n	800adec <prvUnlockQueue+0x60>
 800ae18:	e000      	b.n	800ae1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	22ff      	movs	r2, #255	@ 0xff
 800ae20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ae24:	f001 fc5a 	bl	800c6dc <vPortExitCritical>
}
 800ae28:	bf00      	nop
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae38:	f001 fc1e 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae44:	2301      	movs	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	e001      	b.n	800ae4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae4e:	f001 fc45 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800ae52:	68fb      	ldr	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae64:	f001 fc08 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d102      	bne.n	800ae7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae74:	2301      	movs	r3, #1
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	e001      	b.n	800ae7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae7e:	f001 fc2d 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800ae82:	68fb      	ldr	r3, [r7, #12]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	e014      	b.n	800aec6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae9c:	4a0f      	ldr	r2, [pc, #60]	@ (800aedc <vQueueAddToRegistry+0x50>)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10b      	bne.n	800aec0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aea8:	490c      	ldr	r1, [pc, #48]	@ (800aedc <vQueueAddToRegistry+0x50>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aeb2:	4a0a      	ldr	r2, [pc, #40]	@ (800aedc <vQueueAddToRegistry+0x50>)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	4413      	add	r3, r2
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aebe:	e006      	b.n	800aece <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3301      	adds	r3, #1
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b07      	cmp	r3, #7
 800aeca:	d9e7      	bls.n	800ae9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	200013f0 	.word	0x200013f0

0800aee0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aef0:	f001 fbc2 	bl	800c678 <vPortEnterCritical>
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d103      	bne.n	800af0a <vQueueWaitForMessageRestricted+0x2a>
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af10:	b25b      	sxtb	r3, r3
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d103      	bne.n	800af20 <vQueueWaitForMessageRestricted+0x40>
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af20:	f001 fbdc 	bl	800c6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	3324      	adds	r3, #36	@ 0x24
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fc45 	bl	800b7c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af3a:	6978      	ldr	r0, [r7, #20]
 800af3c:	f7ff ff26 	bl	800ad8c <prvUnlockQueue>
	}
 800af40:	bf00      	nop
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08e      	sub	sp, #56	@ 0x38
 800af4c:	af04      	add	r7, sp, #16
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10b      	bne.n	800af74 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	623b      	str	r3, [r7, #32]
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	e7fd      	b.n	800af70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10b      	bne.n	800af92 <xTaskCreateStatic+0x4a>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	61fb      	str	r3, [r7, #28]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af92:	235c      	movs	r3, #92	@ 0x5c
 800af94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b5c      	cmp	r3, #92	@ 0x5c
 800af9a:	d00b      	beq.n	800afb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	61bb      	str	r3, [r7, #24]
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	e7fd      	b.n	800afb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01e      	beq.n	800affa <xTaskCreateStatic+0xb2>
 800afbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01b      	beq.n	800affa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afd4:	2300      	movs	r3, #0
 800afd6:	9303      	str	r3, [sp, #12]
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afda:	9302      	str	r3, [sp, #8]
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f850 	bl	800b092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aff4:	f000 f8de 	bl	800b1b4 <prvAddNewTaskToReadyList>
 800aff8:	e001      	b.n	800affe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800affe:	697b      	ldr	r3, [r7, #20]
	}
 800b000:	4618      	mov	r0, r3
 800b002:	3728      	adds	r7, #40	@ 0x28
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08c      	sub	sp, #48	@ 0x30
 800b00c:	af04      	add	r7, sp, #16
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	4613      	mov	r3, r2
 800b016:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b018:	88fb      	ldrh	r3, [r7, #6]
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f001 fc4d 	bl	800c8bc <pvPortMalloc>
 800b022:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00e      	beq.n	800b048 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b02a:	205c      	movs	r0, #92	@ 0x5c
 800b02c:	f001 fc46 	bl	800c8bc <pvPortMalloc>
 800b030:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b03e:	e005      	b.n	800b04c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b040:	6978      	ldr	r0, [r7, #20]
 800b042:	f001 fd09 	bl	800ca58 <vPortFree>
 800b046:	e001      	b.n	800b04c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d017      	beq.n	800b082 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b05a:	88fa      	ldrh	r2, [r7, #6]
 800b05c:	2300      	movs	r3, #0
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f80e 	bl	800b092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b076:	69f8      	ldr	r0, [r7, #28]
 800b078:	f000 f89c 	bl	800b1b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b07c:	2301      	movs	r3, #1
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	e002      	b.n	800b088 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b082:	f04f 33ff 	mov.w	r3, #4294967295
 800b086:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b088:	69bb      	ldr	r3, [r7, #24]
	}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b088      	sub	sp, #32
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
 800b09e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	21a5      	movs	r1, #165	@ 0xa5
 800b0ac:	f001 fe76 	bl	800cd9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	f023 0307 	bic.w	r3, r3, #7
 800b0c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	f003 0307 	and.w	r3, r3, #7
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	617b      	str	r3, [r7, #20]
}
 800b0e6:	bf00      	nop
 800b0e8:	bf00      	nop
 800b0ea:	e7fd      	b.n	800b0e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d01f      	beq.n	800b132 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61fb      	str	r3, [r7, #28]
 800b0f6:	e012      	b.n	800b11e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	7819      	ldrb	r1, [r3, #0]
 800b100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	4413      	add	r3, r2
 800b106:	3334      	adds	r3, #52	@ 0x34
 800b108:	460a      	mov	r2, r1
 800b10a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3301      	adds	r3, #1
 800b11c:	61fb      	str	r3, [r7, #28]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	2b0f      	cmp	r3, #15
 800b122:	d9e9      	bls.n	800b0f8 <prvInitialiseNewTask+0x66>
 800b124:	e000      	b.n	800b128 <prvInitialiseNewTask+0x96>
			{
				break;
 800b126:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b130:	e003      	b.n	800b13a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13c:	2b37      	cmp	r3, #55	@ 0x37
 800b13e:	d901      	bls.n	800b144 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b140:	2337      	movs	r3, #55	@ 0x37
 800b142:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b148:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b14e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b152:	2200      	movs	r2, #0
 800b154:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b158:	3304      	adds	r3, #4
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff f966 	bl	800a42c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b162:	3318      	adds	r3, #24
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff f961 	bl	800a42c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b16e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b172:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b17e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	2200      	movs	r2, #0
 800b184:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	68f9      	ldr	r1, [r7, #12]
 800b192:	69b8      	ldr	r0, [r7, #24]
 800b194:	f001 f93e 	bl	800c414 <pxPortInitialiseStack>
 800b198:	4602      	mov	r2, r0
 800b19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1aa:	bf00      	nop
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1bc:	f001 fa5c 	bl	800c678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1c0:	4b2d      	ldr	r3, [pc, #180]	@ (800b278 <prvAddNewTaskToReadyList+0xc4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	4a2c      	ldr	r2, [pc, #176]	@ (800b278 <prvAddNewTaskToReadyList+0xc4>)
 800b1c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1ca:	4b2c      	ldr	r3, [pc, #176]	@ (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d109      	bne.n	800b1e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1d8:	4b27      	ldr	r3, [pc, #156]	@ (800b278 <prvAddNewTaskToReadyList+0xc4>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d110      	bne.n	800b202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1e0:	f000 fc1e 	bl	800ba20 <prvInitialiseTaskLists>
 800b1e4:	e00d      	b.n	800b202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1e6:	4b26      	ldr	r3, [pc, #152]	@ (800b280 <prvAddNewTaskToReadyList+0xcc>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ee:	4b23      	ldr	r3, [pc, #140]	@ (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d802      	bhi.n	800b202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1fc:	4a1f      	ldr	r2, [pc, #124]	@ (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b202:	4b20      	ldr	r3, [pc, #128]	@ (800b284 <prvAddNewTaskToReadyList+0xd0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	4a1e      	ldr	r2, [pc, #120]	@ (800b284 <prvAddNewTaskToReadyList+0xd0>)
 800b20a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b20c:	4b1d      	ldr	r3, [pc, #116]	@ (800b284 <prvAddNewTaskToReadyList+0xd0>)
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b218:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <prvAddNewTaskToReadyList+0xd4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d903      	bls.n	800b228 <prvAddNewTaskToReadyList+0x74>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b224:	4a18      	ldr	r2, [pc, #96]	@ (800b288 <prvAddNewTaskToReadyList+0xd4>)
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4a15      	ldr	r2, [pc, #84]	@ (800b28c <prvAddNewTaskToReadyList+0xd8>)
 800b236:	441a      	add	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3304      	adds	r3, #4
 800b23c:	4619      	mov	r1, r3
 800b23e:	4610      	mov	r0, r2
 800b240:	f7ff f901 	bl	800a446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b244:	f001 fa4a 	bl	800c6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b248:	4b0d      	ldr	r3, [pc, #52]	@ (800b280 <prvAddNewTaskToReadyList+0xcc>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00e      	beq.n	800b26e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b250:	4b0a      	ldr	r3, [pc, #40]	@ (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d207      	bcs.n	800b26e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b25e:	4b0c      	ldr	r3, [pc, #48]	@ (800b290 <prvAddNewTaskToReadyList+0xdc>)
 800b260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20001904 	.word	0x20001904
 800b27c:	20001430 	.word	0x20001430
 800b280:	20001910 	.word	0x20001910
 800b284:	20001920 	.word	0x20001920
 800b288:	2000190c 	.word	0x2000190c
 800b28c:	20001434 	.word	0x20001434
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d018      	beq.n	800b2d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2a6:	4b14      	ldr	r3, [pc, #80]	@ (800b2f8 <vTaskDelay+0x64>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <vTaskDelay+0x32>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60bb      	str	r3, [r7, #8]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2c6:	f000 f883 	bl	800b3d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fcf3 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2d2:	f000 f88b 	bl	800b3ec <xTaskResumeAll>
 800b2d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d107      	bne.n	800b2ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b2de:	4b07      	ldr	r3, [pc, #28]	@ (800b2fc <vTaskDelay+0x68>)
 800b2e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	2000192c 	.word	0x2000192c
 800b2fc:	e000ed04 	.word	0xe000ed04

0800b300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	@ 0x28
 800b304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b30e:	463a      	mov	r2, r7
 800b310:	1d39      	adds	r1, r7, #4
 800b312:	f107 0308 	add.w	r3, r7, #8
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff f834 	bl	800a384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	9202      	str	r2, [sp, #8]
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	2300      	movs	r3, #0
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	2300      	movs	r3, #0
 800b32c:	460a      	mov	r2, r1
 800b32e:	4922      	ldr	r1, [pc, #136]	@ (800b3b8 <vTaskStartScheduler+0xb8>)
 800b330:	4822      	ldr	r0, [pc, #136]	@ (800b3bc <vTaskStartScheduler+0xbc>)
 800b332:	f7ff fe09 	bl	800af48 <xTaskCreateStatic>
 800b336:	4603      	mov	r3, r0
 800b338:	4a21      	ldr	r2, [pc, #132]	@ (800b3c0 <vTaskStartScheduler+0xc0>)
 800b33a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b33c:	4b20      	ldr	r3, [pc, #128]	@ (800b3c0 <vTaskStartScheduler+0xc0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b344:	2301      	movs	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	e001      	b.n	800b34e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d102      	bne.n	800b35a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b354:	f000 fd04 	bl	800bd60 <xTimerCreateTimerTask>
 800b358:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d116      	bne.n	800b38e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	613b      	str	r3, [r7, #16]
}
 800b372:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b374:	4b13      	ldr	r3, [pc, #76]	@ (800b3c4 <vTaskStartScheduler+0xc4>)
 800b376:	f04f 32ff 	mov.w	r2, #4294967295
 800b37a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b37c:	4b12      	ldr	r3, [pc, #72]	@ (800b3c8 <vTaskStartScheduler+0xc8>)
 800b37e:	2201      	movs	r2, #1
 800b380:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b382:	4b12      	ldr	r3, [pc, #72]	@ (800b3cc <vTaskStartScheduler+0xcc>)
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b388:	f001 f8d2 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b38c:	e00f      	b.n	800b3ae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b394:	d10b      	bne.n	800b3ae <vTaskStartScheduler+0xae>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	60fb      	str	r3, [r7, #12]
}
 800b3a8:	bf00      	nop
 800b3aa:	bf00      	nop
 800b3ac:	e7fd      	b.n	800b3aa <vTaskStartScheduler+0xaa>
}
 800b3ae:	bf00      	nop
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800da90 	.word	0x0800da90
 800b3bc:	0800b9f1 	.word	0x0800b9f1
 800b3c0:	20001928 	.word	0x20001928
 800b3c4:	20001924 	.word	0x20001924
 800b3c8:	20001910 	.word	0x20001910
 800b3cc:	20001908 	.word	0x20001908

0800b3d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3d4:	4b04      	ldr	r3, [pc, #16]	@ (800b3e8 <vTaskSuspendAll+0x18>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a03      	ldr	r2, [pc, #12]	@ (800b3e8 <vTaskSuspendAll+0x18>)
 800b3dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	2000192c 	.word	0x2000192c

0800b3ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3fa:	4b42      	ldr	r3, [pc, #264]	@ (800b504 <xTaskResumeAll+0x118>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10b      	bne.n	800b41a <xTaskResumeAll+0x2e>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	603b      	str	r3, [r7, #0]
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	e7fd      	b.n	800b416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b41a:	f001 f92d 	bl	800c678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b41e:	4b39      	ldr	r3, [pc, #228]	@ (800b504 <xTaskResumeAll+0x118>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3b01      	subs	r3, #1
 800b424:	4a37      	ldr	r2, [pc, #220]	@ (800b504 <xTaskResumeAll+0x118>)
 800b426:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b428:	4b36      	ldr	r3, [pc, #216]	@ (800b504 <xTaskResumeAll+0x118>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d162      	bne.n	800b4f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b430:	4b35      	ldr	r3, [pc, #212]	@ (800b508 <xTaskResumeAll+0x11c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d05e      	beq.n	800b4f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b438:	e02f      	b.n	800b49a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b43a:	4b34      	ldr	r3, [pc, #208]	@ (800b50c <xTaskResumeAll+0x120>)
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3318      	adds	r3, #24
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff f85a 	bl	800a500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3304      	adds	r3, #4
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff f855 	bl	800a500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45a:	4b2d      	ldr	r3, [pc, #180]	@ (800b510 <xTaskResumeAll+0x124>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d903      	bls.n	800b46a <xTaskResumeAll+0x7e>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b466:	4a2a      	ldr	r2, [pc, #168]	@ (800b510 <xTaskResumeAll+0x124>)
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4a27      	ldr	r2, [pc, #156]	@ (800b514 <xTaskResumeAll+0x128>)
 800b478:	441a      	add	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f7fe ffe0 	bl	800a446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b48a:	4b23      	ldr	r3, [pc, #140]	@ (800b518 <xTaskResumeAll+0x12c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b490:	429a      	cmp	r2, r3
 800b492:	d302      	bcc.n	800b49a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b494:	4b21      	ldr	r3, [pc, #132]	@ (800b51c <xTaskResumeAll+0x130>)
 800b496:	2201      	movs	r2, #1
 800b498:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b49a:	4b1c      	ldr	r3, [pc, #112]	@ (800b50c <xTaskResumeAll+0x120>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1cb      	bne.n	800b43a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4a8:	f000 fb58 	bl	800bb5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b520 <xTaskResumeAll+0x134>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d010      	beq.n	800b4da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4b8:	f000 f846 	bl	800b548 <xTaskIncrementTick>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b4c2:	4b16      	ldr	r3, [pc, #88]	@ (800b51c <xTaskResumeAll+0x130>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1f1      	bne.n	800b4b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b4d4:	4b12      	ldr	r3, [pc, #72]	@ (800b520 <xTaskResumeAll+0x134>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4da:	4b10      	ldr	r3, [pc, #64]	@ (800b51c <xTaskResumeAll+0x130>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b524 <xTaskResumeAll+0x138>)
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4f6:	f001 f8f1 	bl	800c6dc <vPortExitCritical>

	return xAlreadyYielded;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2000192c 	.word	0x2000192c
 800b508:	20001904 	.word	0x20001904
 800b50c:	200018c4 	.word	0x200018c4
 800b510:	2000190c 	.word	0x2000190c
 800b514:	20001434 	.word	0x20001434
 800b518:	20001430 	.word	0x20001430
 800b51c:	20001918 	.word	0x20001918
 800b520:	20001914 	.word	0x20001914
 800b524:	e000ed04 	.word	0xe000ed04

0800b528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b52e:	4b05      	ldr	r3, [pc, #20]	@ (800b544 <xTaskGetTickCount+0x1c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b534:	687b      	ldr	r3, [r7, #4]
}
 800b536:	4618      	mov	r0, r3
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20001908 	.word	0x20001908

0800b548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b552:	4b4f      	ldr	r3, [pc, #316]	@ (800b690 <xTaskIncrementTick+0x148>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f040 8090 	bne.w	800b67c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b55c:	4b4d      	ldr	r3, [pc, #308]	@ (800b694 <xTaskIncrementTick+0x14c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b564:	4a4b      	ldr	r2, [pc, #300]	@ (800b694 <xTaskIncrementTick+0x14c>)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d121      	bne.n	800b5b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b570:	4b49      	ldr	r3, [pc, #292]	@ (800b698 <xTaskIncrementTick+0x150>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00b      	beq.n	800b592 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	603b      	str	r3, [r7, #0]
}
 800b58c:	bf00      	nop
 800b58e:	bf00      	nop
 800b590:	e7fd      	b.n	800b58e <xTaskIncrementTick+0x46>
 800b592:	4b41      	ldr	r3, [pc, #260]	@ (800b698 <xTaskIncrementTick+0x150>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	4b40      	ldr	r3, [pc, #256]	@ (800b69c <xTaskIncrementTick+0x154>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a3e      	ldr	r2, [pc, #248]	@ (800b698 <xTaskIncrementTick+0x150>)
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	4a3e      	ldr	r2, [pc, #248]	@ (800b69c <xTaskIncrementTick+0x154>)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	4b3e      	ldr	r3, [pc, #248]	@ (800b6a0 <xTaskIncrementTick+0x158>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	4a3c      	ldr	r2, [pc, #240]	@ (800b6a0 <xTaskIncrementTick+0x158>)
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	f000 fad4 	bl	800bb5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b6a4 <xTaskIncrementTick+0x15c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d349      	bcc.n	800b652 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5be:	4b36      	ldr	r3, [pc, #216]	@ (800b698 <xTaskIncrementTick+0x150>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d104      	bne.n	800b5d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c8:	4b36      	ldr	r3, [pc, #216]	@ (800b6a4 <xTaskIncrementTick+0x15c>)
 800b5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ce:	601a      	str	r2, [r3, #0]
					break;
 800b5d0:	e03f      	b.n	800b652 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d2:	4b31      	ldr	r3, [pc, #196]	@ (800b698 <xTaskIncrementTick+0x150>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d203      	bcs.n	800b5f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5ea:	4a2e      	ldr	r2, [pc, #184]	@ (800b6a4 <xTaskIncrementTick+0x15c>)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5f0:	e02f      	b.n	800b652 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe ff82 	bl	800a500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	3318      	adds	r3, #24
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe ff79 	bl	800a500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b612:	4b25      	ldr	r3, [pc, #148]	@ (800b6a8 <xTaskIncrementTick+0x160>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d903      	bls.n	800b622 <xTaskIncrementTick+0xda>
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61e:	4a22      	ldr	r2, [pc, #136]	@ (800b6a8 <xTaskIncrementTick+0x160>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6ac <xTaskIncrementTick+0x164>)
 800b630:	441a      	add	r2, r3
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	3304      	adds	r3, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4610      	mov	r0, r2
 800b63a:	f7fe ff04 	bl	800a446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b642:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b0 <xTaskIncrementTick+0x168>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b648:	429a      	cmp	r2, r3
 800b64a:	d3b8      	bcc.n	800b5be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b64c:	2301      	movs	r3, #1
 800b64e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b650:	e7b5      	b.n	800b5be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b652:	4b17      	ldr	r3, [pc, #92]	@ (800b6b0 <xTaskIncrementTick+0x168>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b658:	4914      	ldr	r1, [pc, #80]	@ (800b6ac <xTaskIncrementTick+0x164>)
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	440b      	add	r3, r1
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d901      	bls.n	800b66e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b66a:	2301      	movs	r3, #1
 800b66c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b66e:	4b11      	ldr	r3, [pc, #68]	@ (800b6b4 <xTaskIncrementTick+0x16c>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d007      	beq.n	800b686 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	e004      	b.n	800b686 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b67c:	4b0e      	ldr	r3, [pc, #56]	@ (800b6b8 <xTaskIncrementTick+0x170>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3301      	adds	r3, #1
 800b682:	4a0d      	ldr	r2, [pc, #52]	@ (800b6b8 <xTaskIncrementTick+0x170>)
 800b684:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b686:	697b      	ldr	r3, [r7, #20]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	2000192c 	.word	0x2000192c
 800b694:	20001908 	.word	0x20001908
 800b698:	200018bc 	.word	0x200018bc
 800b69c:	200018c0 	.word	0x200018c0
 800b6a0:	2000191c 	.word	0x2000191c
 800b6a4:	20001924 	.word	0x20001924
 800b6a8:	2000190c 	.word	0x2000190c
 800b6ac:	20001434 	.word	0x20001434
 800b6b0:	20001430 	.word	0x20001430
 800b6b4:	20001918 	.word	0x20001918
 800b6b8:	20001914 	.word	0x20001914

0800b6bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6c2:	4b28      	ldr	r3, [pc, #160]	@ (800b764 <vTaskSwitchContext+0xa8>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6ca:	4b27      	ldr	r3, [pc, #156]	@ (800b768 <vTaskSwitchContext+0xac>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6d0:	e042      	b.n	800b758 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b6d2:	4b25      	ldr	r3, [pc, #148]	@ (800b768 <vTaskSwitchContext+0xac>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d8:	4b24      	ldr	r3, [pc, #144]	@ (800b76c <vTaskSwitchContext+0xb0>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	e011      	b.n	800b704 <vTaskSwitchContext+0x48>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10b      	bne.n	800b6fe <vTaskSwitchContext+0x42>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	607b      	str	r3, [r7, #4]
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	e7fd      	b.n	800b6fa <vTaskSwitchContext+0x3e>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3b01      	subs	r3, #1
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	491a      	ldr	r1, [pc, #104]	@ (800b770 <vTaskSwitchContext+0xb4>)
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	440b      	add	r3, r1
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0e3      	beq.n	800b6e0 <vTaskSwitchContext+0x24>
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4613      	mov	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4a13      	ldr	r2, [pc, #76]	@ (800b770 <vTaskSwitchContext+0xb4>)
 800b724:	4413      	add	r3, r2
 800b726:	60bb      	str	r3, [r7, #8]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	605a      	str	r2, [r3, #4]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	3308      	adds	r3, #8
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d104      	bne.n	800b748 <vTaskSwitchContext+0x8c>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	685a      	ldr	r2, [r3, #4]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	605a      	str	r2, [r3, #4]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	4a09      	ldr	r2, [pc, #36]	@ (800b774 <vTaskSwitchContext+0xb8>)
 800b750:	6013      	str	r3, [r2, #0]
 800b752:	4a06      	ldr	r2, [pc, #24]	@ (800b76c <vTaskSwitchContext+0xb0>)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6013      	str	r3, [r2, #0]
}
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	2000192c 	.word	0x2000192c
 800b768:	20001918 	.word	0x20001918
 800b76c:	2000190c 	.word	0x2000190c
 800b770:	20001434 	.word	0x20001434
 800b774:	20001430 	.word	0x20001430

0800b778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10b      	bne.n	800b7a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	60fb      	str	r3, [r7, #12]
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	e7fd      	b.n	800b79c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7a0:	4b07      	ldr	r3, [pc, #28]	@ (800b7c0 <vTaskPlaceOnEventList+0x48>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3318      	adds	r3, #24
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7fe fe70 	bl	800a48e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	6838      	ldr	r0, [r7, #0]
 800b7b2:	f000 fa81 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20001430 	.word	0x20001430

0800b7c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10b      	bne.n	800b7ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	617b      	str	r3, [r7, #20]
}
 800b7e8:	bf00      	nop
 800b7ea:	bf00      	nop
 800b7ec:	e7fd      	b.n	800b7ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b818 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3318      	adds	r3, #24
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f7fe fe25 	bl	800a446 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b802:	f04f 33ff 	mov.w	r3, #4294967295
 800b806:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	68b8      	ldr	r0, [r7, #8]
 800b80c:	f000 fa54 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
	}
 800b810:	bf00      	nop
 800b812:	3718      	adds	r7, #24
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20001430 	.word	0x20001430

0800b81c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10b      	bne.n	800b84a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60fb      	str	r3, [r7, #12]
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	e7fd      	b.n	800b846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3318      	adds	r3, #24
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fe56 	bl	800a500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b854:	4b1d      	ldr	r3, [pc, #116]	@ (800b8cc <xTaskRemoveFromEventList+0xb0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d11d      	bne.n	800b898 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe fe4d 	bl	800a500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86a:	4b19      	ldr	r3, [pc, #100]	@ (800b8d0 <xTaskRemoveFromEventList+0xb4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d903      	bls.n	800b87a <xTaskRemoveFromEventList+0x5e>
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b876:	4a16      	ldr	r2, [pc, #88]	@ (800b8d0 <xTaskRemoveFromEventList+0xb4>)
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4a13      	ldr	r2, [pc, #76]	@ (800b8d4 <xTaskRemoveFromEventList+0xb8>)
 800b888:	441a      	add	r2, r3
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7fe fdd8 	bl	800a446 <vListInsertEnd>
 800b896:	e005      	b.n	800b8a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	3318      	adds	r3, #24
 800b89c:	4619      	mov	r1, r3
 800b89e:	480e      	ldr	r0, [pc, #56]	@ (800b8d8 <xTaskRemoveFromEventList+0xbc>)
 800b8a0:	f7fe fdd1 	bl	800a446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8dc <xTaskRemoveFromEventList+0xc0>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d905      	bls.n	800b8be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e0 <xTaskRemoveFromEventList+0xc4>)
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	e001      	b.n	800b8c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8c2:	697b      	ldr	r3, [r7, #20]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	2000192c 	.word	0x2000192c
 800b8d0:	2000190c 	.word	0x2000190c
 800b8d4:	20001434 	.word	0x20001434
 800b8d8:	200018c4 	.word	0x200018c4
 800b8dc:	20001430 	.word	0x20001430
 800b8e0:	20001918 	.word	0x20001918

0800b8e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8ec:	4b06      	ldr	r3, [pc, #24]	@ (800b908 <vTaskInternalSetTimeOutState+0x24>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8f4:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <vTaskInternalSetTimeOutState+0x28>)
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	605a      	str	r2, [r3, #4]
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	2000191c 	.word	0x2000191c
 800b90c:	20001908 	.word	0x20001908

0800b910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10b      	bne.n	800b938 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	613b      	str	r3, [r7, #16]
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	e7fd      	b.n	800b934 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10b      	bne.n	800b956 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	60fb      	str	r3, [r7, #12]
}
 800b950:	bf00      	nop
 800b952:	bf00      	nop
 800b954:	e7fd      	b.n	800b952 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b956:	f000 fe8f 	bl	800c678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b95a:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d0 <xTaskCheckForTimeOut+0xc0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	69ba      	ldr	r2, [r7, #24]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b972:	d102      	bne.n	800b97a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b974:	2300      	movs	r3, #0
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	e023      	b.n	800b9c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	4b15      	ldr	r3, [pc, #84]	@ (800b9d4 <xTaskCheckForTimeOut+0xc4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	429a      	cmp	r2, r3
 800b984:	d007      	beq.n	800b996 <xTaskCheckForTimeOut+0x86>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d302      	bcc.n	800b996 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b990:	2301      	movs	r3, #1
 800b992:	61fb      	str	r3, [r7, #28]
 800b994:	e015      	b.n	800b9c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d20b      	bcs.n	800b9b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	1ad2      	subs	r2, r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff ff99 	bl	800b8e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	61fb      	str	r3, [r7, #28]
 800b9b6:	e004      	b.n	800b9c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9c2:	f000 fe8b 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800b9c6:	69fb      	ldr	r3, [r7, #28]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3720      	adds	r7, #32
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20001908 	.word	0x20001908
 800b9d4:	2000191c 	.word	0x2000191c

0800b9d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9dc:	4b03      	ldr	r3, [pc, #12]	@ (800b9ec <vTaskMissedYield+0x14>)
 800b9de:	2201      	movs	r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]
}
 800b9e2:	bf00      	nop
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	20001918 	.word	0x20001918

0800b9f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9f8:	f000 f852 	bl	800baa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9fc:	4b06      	ldr	r3, [pc, #24]	@ (800ba18 <prvIdleTask+0x28>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d9f9      	bls.n	800b9f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba04:	4b05      	ldr	r3, [pc, #20]	@ (800ba1c <prvIdleTask+0x2c>)
 800ba06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba14:	e7f0      	b.n	800b9f8 <prvIdleTask+0x8>
 800ba16:	bf00      	nop
 800ba18:	20001434 	.word	0x20001434
 800ba1c:	e000ed04 	.word	0xe000ed04

0800ba20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba26:	2300      	movs	r3, #0
 800ba28:	607b      	str	r3, [r7, #4]
 800ba2a:	e00c      	b.n	800ba46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4a12      	ldr	r2, [pc, #72]	@ (800ba80 <prvInitialiseTaskLists+0x60>)
 800ba38:	4413      	add	r3, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fcd6 	bl	800a3ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3301      	adds	r3, #1
 800ba44:	607b      	str	r3, [r7, #4]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b37      	cmp	r3, #55	@ 0x37
 800ba4a:	d9ef      	bls.n	800ba2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba4c:	480d      	ldr	r0, [pc, #52]	@ (800ba84 <prvInitialiseTaskLists+0x64>)
 800ba4e:	f7fe fccd 	bl	800a3ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba52:	480d      	ldr	r0, [pc, #52]	@ (800ba88 <prvInitialiseTaskLists+0x68>)
 800ba54:	f7fe fcca 	bl	800a3ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba58:	480c      	ldr	r0, [pc, #48]	@ (800ba8c <prvInitialiseTaskLists+0x6c>)
 800ba5a:	f7fe fcc7 	bl	800a3ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba5e:	480c      	ldr	r0, [pc, #48]	@ (800ba90 <prvInitialiseTaskLists+0x70>)
 800ba60:	f7fe fcc4 	bl	800a3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba64:	480b      	ldr	r0, [pc, #44]	@ (800ba94 <prvInitialiseTaskLists+0x74>)
 800ba66:	f7fe fcc1 	bl	800a3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ba98 <prvInitialiseTaskLists+0x78>)
 800ba6c:	4a05      	ldr	r2, [pc, #20]	@ (800ba84 <prvInitialiseTaskLists+0x64>)
 800ba6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba70:	4b0a      	ldr	r3, [pc, #40]	@ (800ba9c <prvInitialiseTaskLists+0x7c>)
 800ba72:	4a05      	ldr	r2, [pc, #20]	@ (800ba88 <prvInitialiseTaskLists+0x68>)
 800ba74:	601a      	str	r2, [r3, #0]
}
 800ba76:	bf00      	nop
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	20001434 	.word	0x20001434
 800ba84:	20001894 	.word	0x20001894
 800ba88:	200018a8 	.word	0x200018a8
 800ba8c:	200018c4 	.word	0x200018c4
 800ba90:	200018d8 	.word	0x200018d8
 800ba94:	200018f0 	.word	0x200018f0
 800ba98:	200018bc 	.word	0x200018bc
 800ba9c:	200018c0 	.word	0x200018c0

0800baa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baa6:	e019      	b.n	800badc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800baa8:	f000 fde6 	bl	800c678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baac:	4b10      	ldr	r3, [pc, #64]	@ (800baf0 <prvCheckTasksWaitingTermination+0x50>)
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe fd21 	bl	800a500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800babe:	4b0d      	ldr	r3, [pc, #52]	@ (800baf4 <prvCheckTasksWaitingTermination+0x54>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	4a0b      	ldr	r2, [pc, #44]	@ (800baf4 <prvCheckTasksWaitingTermination+0x54>)
 800bac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bac8:	4b0b      	ldr	r3, [pc, #44]	@ (800baf8 <prvCheckTasksWaitingTermination+0x58>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3b01      	subs	r3, #1
 800bace:	4a0a      	ldr	r2, [pc, #40]	@ (800baf8 <prvCheckTasksWaitingTermination+0x58>)
 800bad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bad2:	f000 fe03 	bl	800c6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f810 	bl	800bafc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800badc:	4b06      	ldr	r3, [pc, #24]	@ (800baf8 <prvCheckTasksWaitingTermination+0x58>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e1      	bne.n	800baa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	200018d8 	.word	0x200018d8
 800baf4:	20001904 	.word	0x20001904
 800baf8:	200018ec 	.word	0x200018ec

0800bafc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d108      	bne.n	800bb20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 ffa0 	bl	800ca58 <vPortFree>
				vPortFree( pxTCB );
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 ff9d 	bl	800ca58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb1e:	e019      	b.n	800bb54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d103      	bne.n	800bb32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 ff94 	bl	800ca58 <vPortFree>
	}
 800bb30:	e010      	b.n	800bb54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d00b      	beq.n	800bb54 <prvDeleteTCB+0x58>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	60fb      	str	r3, [r7, #12]
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	e7fd      	b.n	800bb50 <prvDeleteTCB+0x54>
	}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb62:	4b0c      	ldr	r3, [pc, #48]	@ (800bb94 <prvResetNextTaskUnblockTime+0x38>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d104      	bne.n	800bb76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb98 <prvResetNextTaskUnblockTime+0x3c>)
 800bb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb74:	e008      	b.n	800bb88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb76:	4b07      	ldr	r3, [pc, #28]	@ (800bb94 <prvResetNextTaskUnblockTime+0x38>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	4a04      	ldr	r2, [pc, #16]	@ (800bb98 <prvResetNextTaskUnblockTime+0x3c>)
 800bb86:	6013      	str	r3, [r2, #0]
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	200018bc 	.word	0x200018bc
 800bb98:	20001924 	.word	0x20001924

0800bb9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bba2:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd0 <xTaskGetSchedulerState+0x34>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d102      	bne.n	800bbb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	e008      	b.n	800bbc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbb0:	4b08      	ldr	r3, [pc, #32]	@ (800bbd4 <xTaskGetSchedulerState+0x38>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbb8:	2302      	movs	r3, #2
 800bbba:	607b      	str	r3, [r7, #4]
 800bbbc:	e001      	b.n	800bbc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbc2:	687b      	ldr	r3, [r7, #4]
	}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	20001910 	.word	0x20001910
 800bbd4:	2000192c 	.word	0x2000192c

0800bbd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d058      	beq.n	800bca0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbee:	4b2f      	ldr	r3, [pc, #188]	@ (800bcac <xTaskPriorityDisinherit+0xd4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d00b      	beq.n	800bc10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	60fb      	str	r3, [r7, #12]
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	e7fd      	b.n	800bc0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10b      	bne.n	800bc30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	60bb      	str	r3, [r7, #8]
}
 800bc2a:	bf00      	nop
 800bc2c:	bf00      	nop
 800bc2e:	e7fd      	b.n	800bc2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc34:	1e5a      	subs	r2, r3, #1
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d02c      	beq.n	800bca0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d128      	bne.n	800bca0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fc54 	bl	800a500 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc70:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb0 <xTaskPriorityDisinherit+0xd8>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d903      	bls.n	800bc80 <xTaskPriorityDisinherit+0xa8>
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7c:	4a0c      	ldr	r2, [pc, #48]	@ (800bcb0 <xTaskPriorityDisinherit+0xd8>)
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4a09      	ldr	r2, [pc, #36]	@ (800bcb4 <xTaskPriorityDisinherit+0xdc>)
 800bc8e:	441a      	add	r2, r3
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fe fbd5 	bl	800a446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bca0:	697b      	ldr	r3, [r7, #20]
	}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20001430 	.word	0x20001430
 800bcb0:	2000190c 	.word	0x2000190c
 800bcb4:	20001434 	.word	0x20001434

0800bcb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcc2:	4b21      	ldr	r3, [pc, #132]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x90>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc8:	4b20      	ldr	r3, [pc, #128]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3304      	adds	r3, #4
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fc16 	bl	800a500 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcda:	d10a      	bne.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d007      	beq.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bce2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4819      	ldr	r0, [pc, #100]	@ (800bd50 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcec:	f7fe fbab 	bl	800a446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcf0:	e026      	b.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcfa:	4b14      	ldr	r3, [pc, #80]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d209      	bcs.n	800bd1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd0a:	4b12      	ldr	r3, [pc, #72]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4619      	mov	r1, r3
 800bd16:	4610      	mov	r0, r2
 800bd18:	f7fe fbb9 	bl	800a48e <vListInsert>
}
 800bd1c:	e010      	b.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b0a      	ldr	r3, [pc, #40]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fe fbaf 	bl	800a48e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd30:	4b0a      	ldr	r3, [pc, #40]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d202      	bcs.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd3a:	4a08      	ldr	r2, [pc, #32]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	6013      	str	r3, [r2, #0]
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20001908 	.word	0x20001908
 800bd4c:	20001430 	.word	0x20001430
 800bd50:	200018f0 	.word	0x200018f0
 800bd54:	200018c0 	.word	0x200018c0
 800bd58:	200018bc 	.word	0x200018bc
 800bd5c:	20001924 	.word	0x20001924

0800bd60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08a      	sub	sp, #40	@ 0x28
 800bd64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd6a:	f000 fb13 	bl	800c394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bde4 <xTimerCreateTimerTask+0x84>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d021      	beq.n	800bdba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd7e:	1d3a      	adds	r2, r7, #4
 800bd80:	f107 0108 	add.w	r1, r7, #8
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fb15 	bl	800a3b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	9202      	str	r2, [sp, #8]
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	2302      	movs	r3, #2
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	460a      	mov	r2, r1
 800bda0:	4911      	ldr	r1, [pc, #68]	@ (800bde8 <xTimerCreateTimerTask+0x88>)
 800bda2:	4812      	ldr	r0, [pc, #72]	@ (800bdec <xTimerCreateTimerTask+0x8c>)
 800bda4:	f7ff f8d0 	bl	800af48 <xTaskCreateStatic>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4a11      	ldr	r2, [pc, #68]	@ (800bdf0 <xTimerCreateTimerTask+0x90>)
 800bdac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdae:	4b10      	ldr	r3, [pc, #64]	@ (800bdf0 <xTimerCreateTimerTask+0x90>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10b      	bne.n	800bdd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdd8:	697b      	ldr	r3, [r7, #20]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20001960 	.word	0x20001960
 800bde8:	0800da98 	.word	0x0800da98
 800bdec:	0800bf2d 	.word	0x0800bf2d
 800bdf0:	20001964 	.word	0x20001964

0800bdf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08a      	sub	sp, #40	@ 0x28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be02:	2300      	movs	r3, #0
 800be04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10b      	bne.n	800be24 <xTimerGenericCommand+0x30>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	623b      	str	r3, [r7, #32]
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	e7fd      	b.n	800be20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be24:	4b19      	ldr	r3, [pc, #100]	@ (800be8c <xTimerGenericCommand+0x98>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d02a      	beq.n	800be82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	2b05      	cmp	r3, #5
 800be3c:	dc18      	bgt.n	800be70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be3e:	f7ff fead 	bl	800bb9c <xTaskGetSchedulerState>
 800be42:	4603      	mov	r3, r0
 800be44:	2b02      	cmp	r3, #2
 800be46:	d109      	bne.n	800be5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be48:	4b10      	ldr	r3, [pc, #64]	@ (800be8c <xTimerGenericCommand+0x98>)
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	f107 0110 	add.w	r1, r7, #16
 800be50:	2300      	movs	r3, #0
 800be52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be54:	f7fe fc88 	bl	800a768 <xQueueGenericSend>
 800be58:	6278      	str	r0, [r7, #36]	@ 0x24
 800be5a:	e012      	b.n	800be82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be5c:	4b0b      	ldr	r3, [pc, #44]	@ (800be8c <xTimerGenericCommand+0x98>)
 800be5e:	6818      	ldr	r0, [r3, #0]
 800be60:	f107 0110 	add.w	r1, r7, #16
 800be64:	2300      	movs	r3, #0
 800be66:	2200      	movs	r2, #0
 800be68:	f7fe fc7e 	bl	800a768 <xQueueGenericSend>
 800be6c:	6278      	str	r0, [r7, #36]	@ 0x24
 800be6e:	e008      	b.n	800be82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be70:	4b06      	ldr	r3, [pc, #24]	@ (800be8c <xTimerGenericCommand+0x98>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	f107 0110 	add.w	r1, r7, #16
 800be78:	2300      	movs	r3, #0
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	f7fe fd76 	bl	800a96c <xQueueGenericSendFromISR>
 800be80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be84:	4618      	mov	r0, r3
 800be86:	3728      	adds	r7, #40	@ 0x28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	20001960 	.word	0x20001960

0800be90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af02      	add	r7, sp, #8
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9a:	4b23      	ldr	r3, [pc, #140]	@ (800bf28 <prvProcessExpiredTimer+0x98>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe fb29 	bl	800a500 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d023      	beq.n	800bf04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	699a      	ldr	r2, [r3, #24]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	18d1      	adds	r1, r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	6978      	ldr	r0, [r7, #20]
 800beca:	f000 f8d5 	bl	800c078 <prvInsertTimerInActiveList>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d020      	beq.n	800bf16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bed4:	2300      	movs	r3, #0
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	2300      	movs	r3, #0
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	2100      	movs	r1, #0
 800bede:	6978      	ldr	r0, [r7, #20]
 800bee0:	f7ff ff88 	bl	800bdf4 <xTimerGenericCommand>
 800bee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d114      	bne.n	800bf16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	60fb      	str	r3, [r7, #12]
}
 800befe:	bf00      	nop
 800bf00:	bf00      	nop
 800bf02:	e7fd      	b.n	800bf00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf0a:	f023 0301 	bic.w	r3, r3, #1
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	6978      	ldr	r0, [r7, #20]
 800bf1c:	4798      	blx	r3
}
 800bf1e:	bf00      	nop
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20001958 	.word	0x20001958

0800bf2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf34:	f107 0308 	add.w	r3, r7, #8
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 f859 	bl	800bff0 <prvGetNextExpireTime>
 800bf3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4619      	mov	r1, r3
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 f805 	bl	800bf54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf4a:	f000 f8d7 	bl	800c0fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf4e:	bf00      	nop
 800bf50:	e7f0      	b.n	800bf34 <prvTimerTask+0x8>
	...

0800bf54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf5e:	f7ff fa37 	bl	800b3d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 f866 	bl	800c038 <prvSampleTimeNow>
 800bf6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d130      	bne.n	800bfd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10a      	bne.n	800bf90 <prvProcessTimerOrBlockTask+0x3c>
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d806      	bhi.n	800bf90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf82:	f7ff fa33 	bl	800b3ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf86:	68f9      	ldr	r1, [r7, #12]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ff81 	bl	800be90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf8e:	e024      	b.n	800bfda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d008      	beq.n	800bfa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf96:	4b13      	ldr	r3, [pc, #76]	@ (800bfe4 <prvProcessTimerOrBlockTask+0x90>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <prvProcessTimerOrBlockTask+0x50>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <prvProcessTimerOrBlockTask+0x52>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe8 <prvProcessTimerOrBlockTask+0x94>)
 800bfaa:	6818      	ldr	r0, [r3, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f7fe ff93 	bl	800aee0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfba:	f7ff fa17 	bl	800b3ec <xTaskResumeAll>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfc4:	4b09      	ldr	r3, [pc, #36]	@ (800bfec <prvProcessTimerOrBlockTask+0x98>)
 800bfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	f3bf 8f6f 	isb	sy
}
 800bfd4:	e001      	b.n	800bfda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfd6:	f7ff fa09 	bl	800b3ec <xTaskResumeAll>
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000195c 	.word	0x2000195c
 800bfe8:	20001960 	.word	0x20001960
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bff8:	4b0e      	ldr	r3, [pc, #56]	@ (800c034 <prvGetNextExpireTime+0x44>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <prvGetNextExpireTime+0x16>
 800c002:	2201      	movs	r2, #1
 800c004:	e000      	b.n	800c008 <prvGetNextExpireTime+0x18>
 800c006:	2200      	movs	r2, #0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d105      	bne.n	800c020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c014:	4b07      	ldr	r3, [pc, #28]	@ (800c034 <prvGetNextExpireTime+0x44>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	e001      	b.n	800c024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c024:	68fb      	ldr	r3, [r7, #12]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20001958 	.word	0x20001958

0800c038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c040:	f7ff fa72 	bl	800b528 <xTaskGetTickCount>
 800c044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c046:	4b0b      	ldr	r3, [pc, #44]	@ (800c074 <prvSampleTimeNow+0x3c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d205      	bcs.n	800c05c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c050:	f000 f93a 	bl	800c2c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	e002      	b.n	800c062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c062:	4a04      	ldr	r2, [pc, #16]	@ (800c074 <prvSampleTimeNow+0x3c>)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c068:	68fb      	ldr	r3, [r7, #12]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20001968 	.word	0x20001968

0800c078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d812      	bhi.n	800c0c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d302      	bcc.n	800c0b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	617b      	str	r3, [r7, #20]
 800c0b0:	e01b      	b.n	800c0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0b2:	4b10      	ldr	r3, [pc, #64]	@ (800c0f4 <prvInsertTimerInActiveList+0x7c>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4610      	mov	r0, r2
 800c0be:	f7fe f9e6 	bl	800a48e <vListInsert>
 800c0c2:	e012      	b.n	800c0ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d206      	bcs.n	800c0da <prvInsertTimerInActiveList+0x62>
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d302      	bcc.n	800c0da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e007      	b.n	800c0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0da:	4b07      	ldr	r3, [pc, #28]	@ (800c0f8 <prvInsertTimerInActiveList+0x80>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	f7fe f9d2 	bl	800a48e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0ea:	697b      	ldr	r3, [r7, #20]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	2000195c 	.word	0x2000195c
 800c0f8:	20001958 	.word	0x20001958

0800c0fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08e      	sub	sp, #56	@ 0x38
 800c100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c102:	e0ce      	b.n	800c2a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	da19      	bge.n	800c13e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c10a:	1d3b      	adds	r3, r7, #4
 800c10c:	3304      	adds	r3, #4
 800c10e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	61fb      	str	r3, [r7, #28]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c134:	6850      	ldr	r0, [r2, #4]
 800c136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c138:	6892      	ldr	r2, [r2, #8]
 800c13a:	4611      	mov	r1, r2
 800c13c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f2c0 80ae 	blt.w	800c2a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d004      	beq.n	800c15c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	3304      	adds	r3, #4
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe f9d2 	bl	800a500 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c15c:	463b      	mov	r3, r7
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff ff6a 	bl	800c038 <prvSampleTimeNow>
 800c164:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b09      	cmp	r3, #9
 800c16a:	f200 8097 	bhi.w	800c29c <prvProcessReceivedCommands+0x1a0>
 800c16e:	a201      	add	r2, pc, #4	@ (adr r2, 800c174 <prvProcessReceivedCommands+0x78>)
 800c170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c174:	0800c19d 	.word	0x0800c19d
 800c178:	0800c19d 	.word	0x0800c19d
 800c17c:	0800c19d 	.word	0x0800c19d
 800c180:	0800c213 	.word	0x0800c213
 800c184:	0800c227 	.word	0x0800c227
 800c188:	0800c273 	.word	0x0800c273
 800c18c:	0800c19d 	.word	0x0800c19d
 800c190:	0800c19d 	.word	0x0800c19d
 800c194:	0800c213 	.word	0x0800c213
 800c198:	0800c227 	.word	0x0800c227
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1a2:	f043 0301 	orr.w	r3, r3, #1
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	18d1      	adds	r1, r2, r3
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1bc:	f7ff ff5c 	bl	800c078 <prvInsertTimerInActiveList>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d06c      	beq.n	800c2a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d4:	f003 0304 	and.w	r3, r3, #4
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d061      	beq.n	800c2a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	441a      	add	r2, r3
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ee:	f7ff fe01 	bl	800bdf4 <xTimerGenericCommand>
 800c1f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d152      	bne.n	800c2a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	61bb      	str	r3, [r7, #24]
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	e7fd      	b.n	800c20e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c218:	f023 0301 	bic.w	r3, r3, #1
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c224:	e03d      	b.n	800c2a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c22c:	f043 0301 	orr.w	r3, r3, #1
 800c230:	b2da      	uxtb	r2, r3
 800c232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10b      	bne.n	800c25e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	617b      	str	r3, [r7, #20]
}
 800c258:	bf00      	nop
 800c25a:	bf00      	nop
 800c25c:	e7fd      	b.n	800c25a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c260:	699a      	ldr	r2, [r3, #24]
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	18d1      	adds	r1, r2, r3
 800c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c26c:	f7ff ff04 	bl	800c078 <prvInsertTimerInActiveList>
					break;
 800c270:	e017      	b.n	800c2a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c278:	f003 0302 	and.w	r3, r3, #2
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c282:	f000 fbe9 	bl	800ca58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c286:	e00c      	b.n	800c2a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c28a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c28e:	f023 0301 	bic.w	r3, r3, #1
 800c292:	b2da      	uxtb	r2, r3
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c29a:	e002      	b.n	800c2a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c29c:	bf00      	nop
 800c29e:	e000      	b.n	800c2a2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c2a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2a2:	4b08      	ldr	r3, [pc, #32]	@ (800c2c4 <prvProcessReceivedCommands+0x1c8>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	1d39      	adds	r1, r7, #4
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe fbfc 	bl	800aaa8 <xQueueReceive>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f47f af26 	bne.w	800c104 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	3730      	adds	r7, #48	@ 0x30
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20001960 	.word	0x20001960

0800c2c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b088      	sub	sp, #32
 800c2cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2ce:	e049      	b.n	800c364 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2d0:	4b2e      	ldr	r3, [pc, #184]	@ (800c38c <prvSwitchTimerLists+0xc4>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2da:	4b2c      	ldr	r3, [pc, #176]	@ (800c38c <prvSwitchTimerLists+0xc4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fe f909 	bl	800a500 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b00      	cmp	r3, #0
 800c302:	d02f      	beq.n	800c364 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	4413      	add	r3, r2
 800c30c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	429a      	cmp	r2, r3
 800c314:	d90e      	bls.n	800c334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c322:	4b1a      	ldr	r3, [pc, #104]	@ (800c38c <prvSwitchTimerLists+0xc4>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3304      	adds	r3, #4
 800c32a:	4619      	mov	r1, r3
 800c32c:	4610      	mov	r0, r2
 800c32e:	f7fe f8ae 	bl	800a48e <vListInsert>
 800c332:	e017      	b.n	800c364 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c334:	2300      	movs	r3, #0
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	2300      	movs	r3, #0
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	2100      	movs	r1, #0
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff fd58 	bl	800bdf4 <xTimerGenericCommand>
 800c344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10b      	bne.n	800c364 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	603b      	str	r3, [r7, #0]
}
 800c35e:	bf00      	nop
 800c360:	bf00      	nop
 800c362:	e7fd      	b.n	800c360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c364:	4b09      	ldr	r3, [pc, #36]	@ (800c38c <prvSwitchTimerLists+0xc4>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1b0      	bne.n	800c2d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c36e:	4b07      	ldr	r3, [pc, #28]	@ (800c38c <prvSwitchTimerLists+0xc4>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c374:	4b06      	ldr	r3, [pc, #24]	@ (800c390 <prvSwitchTimerLists+0xc8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a04      	ldr	r2, [pc, #16]	@ (800c38c <prvSwitchTimerLists+0xc4>)
 800c37a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c37c:	4a04      	ldr	r2, [pc, #16]	@ (800c390 <prvSwitchTimerLists+0xc8>)
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	6013      	str	r3, [r2, #0]
}
 800c382:	bf00      	nop
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20001958 	.word	0x20001958
 800c390:	2000195c 	.word	0x2000195c

0800c394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c39a:	f000 f96d 	bl	800c678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c39e:	4b15      	ldr	r3, [pc, #84]	@ (800c3f4 <prvCheckForValidListAndQueue+0x60>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d120      	bne.n	800c3e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3a6:	4814      	ldr	r0, [pc, #80]	@ (800c3f8 <prvCheckForValidListAndQueue+0x64>)
 800c3a8:	f7fe f820 	bl	800a3ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3ac:	4813      	ldr	r0, [pc, #76]	@ (800c3fc <prvCheckForValidListAndQueue+0x68>)
 800c3ae:	f7fe f81d 	bl	800a3ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3b2:	4b13      	ldr	r3, [pc, #76]	@ (800c400 <prvCheckForValidListAndQueue+0x6c>)
 800c3b4:	4a10      	ldr	r2, [pc, #64]	@ (800c3f8 <prvCheckForValidListAndQueue+0x64>)
 800c3b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3b8:	4b12      	ldr	r3, [pc, #72]	@ (800c404 <prvCheckForValidListAndQueue+0x70>)
 800c3ba:	4a10      	ldr	r2, [pc, #64]	@ (800c3fc <prvCheckForValidListAndQueue+0x68>)
 800c3bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	4b11      	ldr	r3, [pc, #68]	@ (800c408 <prvCheckForValidListAndQueue+0x74>)
 800c3c4:	4a11      	ldr	r2, [pc, #68]	@ (800c40c <prvCheckForValidListAndQueue+0x78>)
 800c3c6:	2110      	movs	r1, #16
 800c3c8:	200a      	movs	r0, #10
 800c3ca:	f7fe f92d 	bl	800a628 <xQueueGenericCreateStatic>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	4a08      	ldr	r2, [pc, #32]	@ (800c3f4 <prvCheckForValidListAndQueue+0x60>)
 800c3d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3d4:	4b07      	ldr	r3, [pc, #28]	@ (800c3f4 <prvCheckForValidListAndQueue+0x60>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d005      	beq.n	800c3e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3dc:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <prvCheckForValidListAndQueue+0x60>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	490b      	ldr	r1, [pc, #44]	@ (800c410 <prvCheckForValidListAndQueue+0x7c>)
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fd52 	bl	800ae8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3e8:	f000 f978 	bl	800c6dc <vPortExitCritical>
}
 800c3ec:	bf00      	nop
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20001960 	.word	0x20001960
 800c3f8:	20001930 	.word	0x20001930
 800c3fc:	20001944 	.word	0x20001944
 800c400:	20001958 	.word	0x20001958
 800c404:	2000195c 	.word	0x2000195c
 800c408:	20001a0c 	.word	0x20001a0c
 800c40c:	2000196c 	.word	0x2000196c
 800c410:	0800daa0 	.word	0x0800daa0

0800c414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3b04      	subs	r3, #4
 800c424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3b04      	subs	r3, #4
 800c432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f023 0201 	bic.w	r2, r3, #1
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3b04      	subs	r3, #4
 800c442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c444:	4a0c      	ldr	r2, [pc, #48]	@ (800c478 <pxPortInitialiseStack+0x64>)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3b14      	subs	r3, #20
 800c44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3b04      	subs	r3, #4
 800c45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f06f 0202 	mvn.w	r2, #2
 800c462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3b20      	subs	r3, #32
 800c468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c46a:	68fb      	ldr	r3, [r7, #12]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	0800c47d 	.word	0x0800c47d

0800c47c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c486:	4b13      	ldr	r3, [pc, #76]	@ (800c4d4 <prvTaskExitError+0x58>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48e:	d00b      	beq.n	800c4a8 <prvTaskExitError+0x2c>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60fb      	str	r3, [r7, #12]
}
 800c4a2:	bf00      	nop
 800c4a4:	bf00      	nop
 800c4a6:	e7fd      	b.n	800c4a4 <prvTaskExitError+0x28>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	60bb      	str	r3, [r7, #8]
}
 800c4ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4bc:	bf00      	nop
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0fc      	beq.n	800c4be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	200001c4 	.word	0x200001c4
	...

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	@ (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	20001430 	.word	0x20001430
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	@ (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c536:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <xPortStartScheduler+0x124>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a47      	ldr	r2, [pc, #284]	@ (800c658 <xPortStartScheduler+0x128>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d10b      	bne.n	800c558 <xPortStartScheduler+0x28>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	60fb      	str	r3, [r7, #12]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c558:	4b3e      	ldr	r3, [pc, #248]	@ (800c654 <xPortStartScheduler+0x124>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a3f      	ldr	r2, [pc, #252]	@ (800c65c <xPortStartScheduler+0x12c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d10b      	bne.n	800c57a <xPortStartScheduler+0x4a>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	613b      	str	r3, [r7, #16]
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	e7fd      	b.n	800c576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c57a:	4b39      	ldr	r3, [pc, #228]	@ (800c660 <xPortStartScheduler+0x130>)
 800c57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	22ff      	movs	r2, #255	@ 0xff
 800c58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b2db      	uxtb	r3, r3
 800c592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c594:	78fb      	ldrb	r3, [r7, #3]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	4b31      	ldr	r3, [pc, #196]	@ (800c664 <xPortStartScheduler+0x134>)
 800c5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5a2:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a8:	e009      	b.n	800c5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b4:	78fb      	ldrb	r3, [r7, #3]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c6:	2b80      	cmp	r3, #128	@ 0x80
 800c5c8:	d0ef      	beq.n	800c5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5ca:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f1c3 0307 	rsb	r3, r3, #7
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d00b      	beq.n	800c5ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	60bb      	str	r3, [r7, #8]
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	e7fd      	b.n	800c5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	021b      	lsls	r3, r3, #8
 800c5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c600:	4a19      	ldr	r2, [pc, #100]	@ (800c668 <xPortStartScheduler+0x138>)
 800c602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c60c:	4b17      	ldr	r3, [pc, #92]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a16      	ldr	r2, [pc, #88]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c618:	4b14      	ldr	r3, [pc, #80]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a13      	ldr	r2, [pc, #76]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c624:	f000 f8da 	bl	800c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c628:	4b11      	ldr	r3, [pc, #68]	@ (800c670 <xPortStartScheduler+0x140>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c62e:	f000 f8f9 	bl	800c824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <xPortStartScheduler+0x144>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a0f      	ldr	r2, [pc, #60]	@ (800c674 <xPortStartScheduler+0x144>)
 800c638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c63e:	f7ff ff63 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c642:	f7ff f83b 	bl	800b6bc <vTaskSwitchContext>
	prvTaskExitError();
 800c646:	f7ff ff19 	bl	800c47c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	e000ed00 	.word	0xe000ed00
 800c658:	410fc271 	.word	0x410fc271
 800c65c:	410fc270 	.word	0x410fc270
 800c660:	e000e400 	.word	0xe000e400
 800c664:	20001a5c 	.word	0x20001a5c
 800c668:	20001a60 	.word	0x20001a60
 800c66c:	e000ed20 	.word	0xe000ed20
 800c670:	200001c4 	.word	0x200001c4
 800c674:	e000ef34 	.word	0xe000ef34

0800c678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c692:	4b10      	ldr	r3, [pc, #64]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3301      	adds	r3, #1
 800c698:	4a0e      	ldr	r2, [pc, #56]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c69c:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d110      	bne.n	800c6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <vPortEnterCritical+0x60>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	603b      	str	r3, [r7, #0]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <vPortEnterCritical+0x4a>
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	200001c4 	.word	0x200001c4
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6e2:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <vPortExitCritical+0x50>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10b      	bne.n	800c702 <vPortExitCritical+0x26>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	607b      	str	r3, [r7, #4]
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	e7fd      	b.n	800c6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c702:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <vPortExitCritical+0x50>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3b01      	subs	r3, #1
 800c708:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <vPortExitCritical+0x50>)
 800c70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <vPortExitCritical+0x50>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <vPortExitCritical+0x44>
 800c714:	2300      	movs	r3, #0
 800c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f383 8811 	msr	BASEPRI, r3
}
 800c71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	200001c4 	.word	0x200001c4

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c754:	f380 8811 	msr	BASEPRI, r0
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f7fe ffac 	bl	800b6bc <vTaskSwitchContext>
 800c764:	f04f 0000 	mov.w	r0, #0
 800c768:	f380 8811 	msr	BASEPRI, r0
 800c76c:	bc09      	pop	{r0, r3}
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6808      	ldr	r0, [r1, #0]
 800c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c776:	f01e 0f10 	tst.w	lr, #16
 800c77a:	bf08      	it	eq
 800c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c780:	f380 8809 	msr	PSP, r0
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst>:
 800c790:	20001430 	.word	0x20001430
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b2:	f7fe fec9 	bl	800b548 <xTaskIncrementTick>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7bc:	4b06      	ldr	r3, [pc, #24]	@ (800c7d8 <xPortSysTickHandler+0x40>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c814 <vPortSetupTimerInterrupt+0x38>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c818 <vPortSetupTimerInterrupt+0x3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c81c <vPortSetupTimerInterrupt+0x40>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	099b      	lsrs	r3, r3, #6
 800c7f8:	4a09      	ldr	r2, [pc, #36]	@ (800c820 <vPortSetupTimerInterrupt+0x44>)
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7fe:	4b04      	ldr	r3, [pc, #16]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c800:	2207      	movs	r2, #7
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	e000e010 	.word	0xe000e010
 800c814:	e000e018 	.word	0xe000e018
 800c818:	200001b8 	.word	0x200001b8
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	e000e014 	.word	0xe000e014

0800c824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c834 <vPortEnableVFP+0x10>
 800c828:	6801      	ldr	r1, [r0, #0]
 800c82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c82e:	6001      	str	r1, [r0, #0]
 800c830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c832:	bf00      	nop
 800c834:	e000ed88 	.word	0xe000ed88

0800c838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c83e:	f3ef 8305 	mrs	r3, IPSR
 800c842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d915      	bls.n	800c876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c84a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ac <vPortValidateInterruptPriority+0x74>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c854:	4b16      	ldr	r3, [pc, #88]	@ (800c8b0 <vPortValidateInterruptPriority+0x78>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	7afa      	ldrb	r2, [r7, #11]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d20b      	bcs.n	800c876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
 800c872:	bf00      	nop
 800c874:	e7fd      	b.n	800c872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c876:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b4 <vPortValidateInterruptPriority+0x7c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c87e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b8 <vPortValidateInterruptPriority+0x80>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d90b      	bls.n	800c89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	603b      	str	r3, [r7, #0]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <vPortValidateInterruptPriority+0x62>
	}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	e000e3f0 	.word	0xe000e3f0
 800c8b0:	20001a5c 	.word	0x20001a5c
 800c8b4:	e000ed0c 	.word	0xe000ed0c
 800c8b8:	20001a60 	.word	0x20001a60

0800c8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08a      	sub	sp, #40	@ 0x28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8c8:	f7fe fd82 	bl	800b3d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ca40 <pvPortMalloc+0x184>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8d4:	f000 f924 	bl	800cb20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800ca44 <pvPortMalloc+0x188>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f040 8095 	bne.w	800ca10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01e      	beq.n	800c92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d015      	beq.n	800c92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f023 0307 	bic.w	r3, r3, #7
 800c904:	3308      	adds	r3, #8
 800c906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f003 0307 	and.w	r3, r3, #7
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00b      	beq.n	800c92a <pvPortMalloc+0x6e>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	617b      	str	r3, [r7, #20]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d06f      	beq.n	800ca10 <pvPortMalloc+0x154>
 800c930:	4b45      	ldr	r3, [pc, #276]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d86a      	bhi.n	800ca10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c93a:	4b44      	ldr	r3, [pc, #272]	@ (800ca4c <pvPortMalloc+0x190>)
 800c93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c93e:	4b43      	ldr	r3, [pc, #268]	@ (800ca4c <pvPortMalloc+0x190>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c944:	e004      	b.n	800c950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d903      	bls.n	800c962 <pvPortMalloc+0xa6>
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f1      	bne.n	800c946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c962:	4b37      	ldr	r3, [pc, #220]	@ (800ca40 <pvPortMalloc+0x184>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c968:	429a      	cmp	r2, r3
 800c96a:	d051      	beq.n	800ca10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2208      	movs	r2, #8
 800c972:	4413      	add	r3, r2
 800c974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	1ad2      	subs	r2, r2, r3
 800c986:	2308      	movs	r3, #8
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d920      	bls.n	800c9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4413      	add	r3, r2
 800c994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9ca:	69b8      	ldr	r0, [r7, #24]
 800c9cc:	f000 f90a 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d203      	bcs.n	800c9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ca44 <pvPortMalloc+0x188>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca06:	4b13      	ldr	r3, [pc, #76]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	4a11      	ldr	r2, [pc, #68]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca10:	f7fe fcec 	bl	800b3ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <pvPortMalloc+0x17a>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <pvPortMalloc+0x176>
	return pvReturn;
 800ca36:	69fb      	ldr	r3, [r7, #28]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	@ 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	2000417c 	.word	0x2000417c
 800ca44:	20004190 	.word	0x20004190
 800ca48:	20004180 	.word	0x20004180
 800ca4c:	20004174 	.word	0x20004174
 800ca50:	20004184 	.word	0x20004184
 800ca54:	20004188 	.word	0x20004188

0800ca58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d04f      	beq.n	800cb0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca6a:	2308      	movs	r3, #8
 800ca6c:	425b      	negs	r3, r3
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b25      	ldr	r3, [pc, #148]	@ (800cb14 <vPortFree+0xbc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4013      	ands	r3, r2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10b      	bne.n	800ca9e <vPortFree+0x46>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	60fb      	str	r3, [r7, #12]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00b      	beq.n	800cabe <vPortFree+0x66>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <vPortFree+0xbc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4013      	ands	r3, r2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01e      	beq.n	800cb0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d11a      	bne.n	800cb0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb14 <vPortFree+0xbc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	43db      	mvns	r3, r3
 800cade:	401a      	ands	r2, r3
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cae4:	f7fe fc74 	bl	800b3d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <vPortFree+0xc0>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4413      	add	r3, r2
 800caf2:	4a09      	ldr	r2, [pc, #36]	@ (800cb18 <vPortFree+0xc0>)
 800caf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f000 f874 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cafc:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <vPortFree+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	4a06      	ldr	r2, [pc, #24]	@ (800cb1c <vPortFree+0xc4>)
 800cb04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb06:	f7fe fc71 	bl	800b3ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20004190 	.word	0x20004190
 800cb18:	20004180 	.word	0x20004180
 800cb1c:	2000418c 	.word	0x2000418c

0800cb20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb26:	f242 7310 	movw	r3, #10000	@ 0x2710
 800cb2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb2c:	4b27      	ldr	r3, [pc, #156]	@ (800cbcc <prvHeapInit+0xac>)
 800cb2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0307 	and.w	r3, r3, #7
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00c      	beq.n	800cb54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3307      	adds	r3, #7
 800cb3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0307 	bic.w	r3, r3, #7
 800cb46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbcc <prvHeapInit+0xac>)
 800cb50:	4413      	add	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb58:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	4413      	add	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4a15      	ldr	r2, [pc, #84]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb82:	4b14      	ldr	r3, [pc, #80]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2200      	movs	r2, #0
 800cb88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb8a:	4b12      	ldr	r3, [pc, #72]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	1ad2      	subs	r2, r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cba0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd8 <prvHeapInit+0xb8>)
 800cbae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4a09      	ldr	r2, [pc, #36]	@ (800cbdc <prvHeapInit+0xbc>)
 800cbb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbb8:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <prvHeapInit+0xc0>)
 800cbba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cbbe:	601a      	str	r2, [r3, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	20001a64 	.word	0x20001a64
 800cbd0:	20004174 	.word	0x20004174
 800cbd4:	2000417c 	.word	0x2000417c
 800cbd8:	20004184 	.word	0x20004184
 800cbdc:	20004180 	.word	0x20004180
 800cbe0:	20004190 	.word	0x20004190

0800cbe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbec:	4b28      	ldr	r3, [pc, #160]	@ (800cc90 <prvInsertBlockIntoFreeList+0xac>)
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e002      	b.n	800cbf8 <prvInsertBlockIntoFreeList+0x14>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d8f7      	bhi.n	800cbf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d108      	bne.n	800cc26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	441a      	add	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d118      	bne.n	800cc6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d00d      	beq.n	800cc62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e008      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc62:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e003      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d002      	beq.n	800cc82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20004174 	.word	0x20004174
 800cc94:	2000417c 	.word	0x2000417c

0800cc98 <sniprintf>:
 800cc98:	b40c      	push	{r2, r3}
 800cc9a:	b530      	push	{r4, r5, lr}
 800cc9c:	4b18      	ldr	r3, [pc, #96]	@ (800cd00 <sniprintf+0x68>)
 800cc9e:	1e0c      	subs	r4, r1, #0
 800cca0:	681d      	ldr	r5, [r3, #0]
 800cca2:	b09d      	sub	sp, #116	@ 0x74
 800cca4:	da08      	bge.n	800ccb8 <sniprintf+0x20>
 800cca6:	238b      	movs	r3, #139	@ 0x8b
 800cca8:	602b      	str	r3, [r5, #0]
 800ccaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccae:	b01d      	add	sp, #116	@ 0x74
 800ccb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccb4:	b002      	add	sp, #8
 800ccb6:	4770      	bx	lr
 800ccb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ccbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccc0:	f04f 0300 	mov.w	r3, #0
 800ccc4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ccc6:	bf14      	ite	ne
 800ccc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cccc:	4623      	moveq	r3, r4
 800ccce:	9304      	str	r3, [sp, #16]
 800ccd0:	9307      	str	r3, [sp, #28]
 800ccd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccd6:	9002      	str	r0, [sp, #8]
 800ccd8:	9006      	str	r0, [sp, #24]
 800ccda:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ccde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cce0:	ab21      	add	r3, sp, #132	@ 0x84
 800cce2:	a902      	add	r1, sp, #8
 800cce4:	4628      	mov	r0, r5
 800cce6:	9301      	str	r3, [sp, #4]
 800cce8:	f000 fa0e 	bl	800d108 <_svfiprintf_r>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	bfbc      	itt	lt
 800ccf0:	238b      	movlt	r3, #139	@ 0x8b
 800ccf2:	602b      	strlt	r3, [r5, #0]
 800ccf4:	2c00      	cmp	r4, #0
 800ccf6:	d0da      	beq.n	800ccae <sniprintf+0x16>
 800ccf8:	9b02      	ldr	r3, [sp, #8]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	701a      	strb	r2, [r3, #0]
 800ccfe:	e7d6      	b.n	800ccae <sniprintf+0x16>
 800cd00:	200001c8 	.word	0x200001c8

0800cd04 <_vsniprintf_r>:
 800cd04:	b530      	push	{r4, r5, lr}
 800cd06:	4614      	mov	r4, r2
 800cd08:	2c00      	cmp	r4, #0
 800cd0a:	b09b      	sub	sp, #108	@ 0x6c
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	461a      	mov	r2, r3
 800cd10:	da05      	bge.n	800cd1e <_vsniprintf_r+0x1a>
 800cd12:	238b      	movs	r3, #139	@ 0x8b
 800cd14:	6003      	str	r3, [r0, #0]
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1a:	b01b      	add	sp, #108	@ 0x6c
 800cd1c:	bd30      	pop	{r4, r5, pc}
 800cd1e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cd22:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cd26:	f04f 0300 	mov.w	r3, #0
 800cd2a:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd2c:	bf14      	ite	ne
 800cd2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd32:	4623      	moveq	r3, r4
 800cd34:	9302      	str	r3, [sp, #8]
 800cd36:	9305      	str	r3, [sp, #20]
 800cd38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd3c:	9100      	str	r1, [sp, #0]
 800cd3e:	9104      	str	r1, [sp, #16]
 800cd40:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cd44:	4669      	mov	r1, sp
 800cd46:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cd48:	f000 f9de 	bl	800d108 <_svfiprintf_r>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	bfbc      	itt	lt
 800cd50:	238b      	movlt	r3, #139	@ 0x8b
 800cd52:	602b      	strlt	r3, [r5, #0]
 800cd54:	2c00      	cmp	r4, #0
 800cd56:	d0e0      	beq.n	800cd1a <_vsniprintf_r+0x16>
 800cd58:	9b00      	ldr	r3, [sp, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	e7dc      	b.n	800cd1a <_vsniprintf_r+0x16>

0800cd60 <vsniprintf>:
 800cd60:	b507      	push	{r0, r1, r2, lr}
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	4613      	mov	r3, r2
 800cd66:	460a      	mov	r2, r1
 800cd68:	4601      	mov	r1, r0
 800cd6a:	4803      	ldr	r0, [pc, #12]	@ (800cd78 <vsniprintf+0x18>)
 800cd6c:	6800      	ldr	r0, [r0, #0]
 800cd6e:	f7ff ffc9 	bl	800cd04 <_vsniprintf_r>
 800cd72:	b003      	add	sp, #12
 800cd74:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd78:	200001c8 	.word	0x200001c8

0800cd7c <memcmp>:
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	3901      	subs	r1, #1
 800cd80:	4402      	add	r2, r0
 800cd82:	4290      	cmp	r0, r2
 800cd84:	d101      	bne.n	800cd8a <memcmp+0xe>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e005      	b.n	800cd96 <memcmp+0x1a>
 800cd8a:	7803      	ldrb	r3, [r0, #0]
 800cd8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	d001      	beq.n	800cd98 <memcmp+0x1c>
 800cd94:	1b18      	subs	r0, r3, r4
 800cd96:	bd10      	pop	{r4, pc}
 800cd98:	3001      	adds	r0, #1
 800cd9a:	e7f2      	b.n	800cd82 <memcmp+0x6>

0800cd9c <memset>:
 800cd9c:	4402      	add	r2, r0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d100      	bne.n	800cda6 <memset+0xa>
 800cda4:	4770      	bx	lr
 800cda6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdaa:	e7f9      	b.n	800cda0 <memset+0x4>

0800cdac <strncpy>:
 800cdac:	b510      	push	{r4, lr}
 800cdae:	3901      	subs	r1, #1
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	b132      	cbz	r2, 800cdc2 <strncpy+0x16>
 800cdb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cdb8:	f803 4b01 	strb.w	r4, [r3], #1
 800cdbc:	3a01      	subs	r2, #1
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	d1f7      	bne.n	800cdb2 <strncpy+0x6>
 800cdc2:	441a      	add	r2, r3
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d100      	bne.n	800cdcc <strncpy+0x20>
 800cdca:	bd10      	pop	{r4, pc}
 800cdcc:	f803 1b01 	strb.w	r1, [r3], #1
 800cdd0:	e7f9      	b.n	800cdc6 <strncpy+0x1a>

0800cdd2 <strnlen>:
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	4401      	add	r1, r0
 800cdd8:	428a      	cmp	r2, r1
 800cdda:	4613      	mov	r3, r2
 800cddc:	d003      	beq.n	800cde6 <strnlen+0x14>
 800cdde:	781c      	ldrb	r4, [r3, #0]
 800cde0:	3201      	adds	r2, #1
 800cde2:	2c00      	cmp	r4, #0
 800cde4:	d1f8      	bne.n	800cdd8 <strnlen+0x6>
 800cde6:	1a18      	subs	r0, r3, r0
 800cde8:	bd10      	pop	{r4, pc}
	...

0800cdec <__errno>:
 800cdec:	4b01      	ldr	r3, [pc, #4]	@ (800cdf4 <__errno+0x8>)
 800cdee:	6818      	ldr	r0, [r3, #0]
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	200001c8 	.word	0x200001c8

0800cdf8 <__libc_init_array>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ce30 <__libc_init_array+0x38>)
 800cdfc:	4c0d      	ldr	r4, [pc, #52]	@ (800ce34 <__libc_init_array+0x3c>)
 800cdfe:	1b64      	subs	r4, r4, r5
 800ce00:	10a4      	asrs	r4, r4, #2
 800ce02:	2600      	movs	r6, #0
 800ce04:	42a6      	cmp	r6, r4
 800ce06:	d109      	bne.n	800ce1c <__libc_init_array+0x24>
 800ce08:	4d0b      	ldr	r5, [pc, #44]	@ (800ce38 <__libc_init_array+0x40>)
 800ce0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ce3c <__libc_init_array+0x44>)
 800ce0c:	f000 fc64 	bl	800d6d8 <_init>
 800ce10:	1b64      	subs	r4, r4, r5
 800ce12:	10a4      	asrs	r4, r4, #2
 800ce14:	2600      	movs	r6, #0
 800ce16:	42a6      	cmp	r6, r4
 800ce18:	d105      	bne.n	800ce26 <__libc_init_array+0x2e>
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce20:	4798      	blx	r3
 800ce22:	3601      	adds	r6, #1
 800ce24:	e7ee      	b.n	800ce04 <__libc_init_array+0xc>
 800ce26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2a:	4798      	blx	r3
 800ce2c:	3601      	adds	r6, #1
 800ce2e:	e7f2      	b.n	800ce16 <__libc_init_array+0x1e>
 800ce30:	0800dbbc 	.word	0x0800dbbc
 800ce34:	0800dbbc 	.word	0x0800dbbc
 800ce38:	0800dbbc 	.word	0x0800dbbc
 800ce3c:	0800dbc0 	.word	0x0800dbc0

0800ce40 <__retarget_lock_acquire_recursive>:
 800ce40:	4770      	bx	lr

0800ce42 <__retarget_lock_release_recursive>:
 800ce42:	4770      	bx	lr

0800ce44 <memcpy>:
 800ce44:	440a      	add	r2, r1
 800ce46:	4291      	cmp	r1, r2
 800ce48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce4c:	d100      	bne.n	800ce50 <memcpy+0xc>
 800ce4e:	4770      	bx	lr
 800ce50:	b510      	push	{r4, lr}
 800ce52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5a:	4291      	cmp	r1, r2
 800ce5c:	d1f9      	bne.n	800ce52 <memcpy+0xe>
 800ce5e:	bd10      	pop	{r4, pc}

0800ce60 <_free_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4605      	mov	r5, r0
 800ce64:	2900      	cmp	r1, #0
 800ce66:	d041      	beq.n	800ceec <_free_r+0x8c>
 800ce68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6c:	1f0c      	subs	r4, r1, #4
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bfb8      	it	lt
 800ce72:	18e4      	addlt	r4, r4, r3
 800ce74:	f000 f8e0 	bl	800d038 <__malloc_lock>
 800ce78:	4a1d      	ldr	r2, [pc, #116]	@ (800cef0 <_free_r+0x90>)
 800ce7a:	6813      	ldr	r3, [r2, #0]
 800ce7c:	b933      	cbnz	r3, 800ce8c <_free_r+0x2c>
 800ce7e:	6063      	str	r3, [r4, #4]
 800ce80:	6014      	str	r4, [r2, #0]
 800ce82:	4628      	mov	r0, r5
 800ce84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce88:	f000 b8dc 	b.w	800d044 <__malloc_unlock>
 800ce8c:	42a3      	cmp	r3, r4
 800ce8e:	d908      	bls.n	800cea2 <_free_r+0x42>
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	1821      	adds	r1, r4, r0
 800ce94:	428b      	cmp	r3, r1
 800ce96:	bf01      	itttt	eq
 800ce98:	6819      	ldreq	r1, [r3, #0]
 800ce9a:	685b      	ldreq	r3, [r3, #4]
 800ce9c:	1809      	addeq	r1, r1, r0
 800ce9e:	6021      	streq	r1, [r4, #0]
 800cea0:	e7ed      	b.n	800ce7e <_free_r+0x1e>
 800cea2:	461a      	mov	r2, r3
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	b10b      	cbz	r3, 800ceac <_free_r+0x4c>
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	d9fa      	bls.n	800cea2 <_free_r+0x42>
 800ceac:	6811      	ldr	r1, [r2, #0]
 800ceae:	1850      	adds	r0, r2, r1
 800ceb0:	42a0      	cmp	r0, r4
 800ceb2:	d10b      	bne.n	800cecc <_free_r+0x6c>
 800ceb4:	6820      	ldr	r0, [r4, #0]
 800ceb6:	4401      	add	r1, r0
 800ceb8:	1850      	adds	r0, r2, r1
 800ceba:	4283      	cmp	r3, r0
 800cebc:	6011      	str	r1, [r2, #0]
 800cebe:	d1e0      	bne.n	800ce82 <_free_r+0x22>
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	6053      	str	r3, [r2, #4]
 800cec6:	4408      	add	r0, r1
 800cec8:	6010      	str	r0, [r2, #0]
 800ceca:	e7da      	b.n	800ce82 <_free_r+0x22>
 800cecc:	d902      	bls.n	800ced4 <_free_r+0x74>
 800cece:	230c      	movs	r3, #12
 800ced0:	602b      	str	r3, [r5, #0]
 800ced2:	e7d6      	b.n	800ce82 <_free_r+0x22>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	1821      	adds	r1, r4, r0
 800ced8:	428b      	cmp	r3, r1
 800ceda:	bf04      	itt	eq
 800cedc:	6819      	ldreq	r1, [r3, #0]
 800cede:	685b      	ldreq	r3, [r3, #4]
 800cee0:	6063      	str	r3, [r4, #4]
 800cee2:	bf04      	itt	eq
 800cee4:	1809      	addeq	r1, r1, r0
 800cee6:	6021      	streq	r1, [r4, #0]
 800cee8:	6054      	str	r4, [r2, #4]
 800ceea:	e7ca      	b.n	800ce82 <_free_r+0x22>
 800ceec:	bd38      	pop	{r3, r4, r5, pc}
 800ceee:	bf00      	nop
 800cef0:	200042d8 	.word	0x200042d8

0800cef4 <sbrk_aligned>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4e0f      	ldr	r6, [pc, #60]	@ (800cf34 <sbrk_aligned+0x40>)
 800cef8:	460c      	mov	r4, r1
 800cefa:	6831      	ldr	r1, [r6, #0]
 800cefc:	4605      	mov	r5, r0
 800cefe:	b911      	cbnz	r1, 800cf06 <sbrk_aligned+0x12>
 800cf00:	f000 fba4 	bl	800d64c <_sbrk_r>
 800cf04:	6030      	str	r0, [r6, #0]
 800cf06:	4621      	mov	r1, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f000 fb9f 	bl	800d64c <_sbrk_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	d103      	bne.n	800cf1a <sbrk_aligned+0x26>
 800cf12:	f04f 34ff 	mov.w	r4, #4294967295
 800cf16:	4620      	mov	r0, r4
 800cf18:	bd70      	pop	{r4, r5, r6, pc}
 800cf1a:	1cc4      	adds	r4, r0, #3
 800cf1c:	f024 0403 	bic.w	r4, r4, #3
 800cf20:	42a0      	cmp	r0, r4
 800cf22:	d0f8      	beq.n	800cf16 <sbrk_aligned+0x22>
 800cf24:	1a21      	subs	r1, r4, r0
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 fb90 	bl	800d64c <_sbrk_r>
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d1f2      	bne.n	800cf16 <sbrk_aligned+0x22>
 800cf30:	e7ef      	b.n	800cf12 <sbrk_aligned+0x1e>
 800cf32:	bf00      	nop
 800cf34:	200042d4 	.word	0x200042d4

0800cf38 <_malloc_r>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	1ccd      	adds	r5, r1, #3
 800cf3e:	f025 0503 	bic.w	r5, r5, #3
 800cf42:	3508      	adds	r5, #8
 800cf44:	2d0c      	cmp	r5, #12
 800cf46:	bf38      	it	cc
 800cf48:	250c      	movcc	r5, #12
 800cf4a:	2d00      	cmp	r5, #0
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	db01      	blt.n	800cf54 <_malloc_r+0x1c>
 800cf50:	42a9      	cmp	r1, r5
 800cf52:	d904      	bls.n	800cf5e <_malloc_r+0x26>
 800cf54:	230c      	movs	r3, #12
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d034 <_malloc_r+0xfc>
 800cf62:	f000 f869 	bl	800d038 <__malloc_lock>
 800cf66:	f8d8 3000 	ldr.w	r3, [r8]
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	bb44      	cbnz	r4, 800cfc0 <_malloc_r+0x88>
 800cf6e:	4629      	mov	r1, r5
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7ff ffbf 	bl	800cef4 <sbrk_aligned>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	4604      	mov	r4, r0
 800cf7a:	d158      	bne.n	800d02e <_malloc_r+0xf6>
 800cf7c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf80:	4627      	mov	r7, r4
 800cf82:	2f00      	cmp	r7, #0
 800cf84:	d143      	bne.n	800d00e <_malloc_r+0xd6>
 800cf86:	2c00      	cmp	r4, #0
 800cf88:	d04b      	beq.n	800d022 <_malloc_r+0xea>
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	4630      	mov	r0, r6
 800cf90:	eb04 0903 	add.w	r9, r4, r3
 800cf94:	f000 fb5a 	bl	800d64c <_sbrk_r>
 800cf98:	4581      	cmp	r9, r0
 800cf9a:	d142      	bne.n	800d022 <_malloc_r+0xea>
 800cf9c:	6821      	ldr	r1, [r4, #0]
 800cf9e:	1a6d      	subs	r5, r5, r1
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff ffa6 	bl	800cef4 <sbrk_aligned>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d03a      	beq.n	800d022 <_malloc_r+0xea>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	442b      	add	r3, r5
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb6:	685a      	ldr	r2, [r3, #4]
 800cfb8:	bb62      	cbnz	r2, 800d014 <_malloc_r+0xdc>
 800cfba:	f8c8 7000 	str.w	r7, [r8]
 800cfbe:	e00f      	b.n	800cfe0 <_malloc_r+0xa8>
 800cfc0:	6822      	ldr	r2, [r4, #0]
 800cfc2:	1b52      	subs	r2, r2, r5
 800cfc4:	d420      	bmi.n	800d008 <_malloc_r+0xd0>
 800cfc6:	2a0b      	cmp	r2, #11
 800cfc8:	d917      	bls.n	800cffa <_malloc_r+0xc2>
 800cfca:	1961      	adds	r1, r4, r5
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	6025      	str	r5, [r4, #0]
 800cfd0:	bf18      	it	ne
 800cfd2:	6059      	strne	r1, [r3, #4]
 800cfd4:	6863      	ldr	r3, [r4, #4]
 800cfd6:	bf08      	it	eq
 800cfd8:	f8c8 1000 	streq.w	r1, [r8]
 800cfdc:	5162      	str	r2, [r4, r5]
 800cfde:	604b      	str	r3, [r1, #4]
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f000 f82f 	bl	800d044 <__malloc_unlock>
 800cfe6:	f104 000b 	add.w	r0, r4, #11
 800cfea:	1d23      	adds	r3, r4, #4
 800cfec:	f020 0007 	bic.w	r0, r0, #7
 800cff0:	1ac2      	subs	r2, r0, r3
 800cff2:	bf1c      	itt	ne
 800cff4:	1a1b      	subne	r3, r3, r0
 800cff6:	50a3      	strne	r3, [r4, r2]
 800cff8:	e7af      	b.n	800cf5a <_malloc_r+0x22>
 800cffa:	6862      	ldr	r2, [r4, #4]
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	bf0c      	ite	eq
 800d000:	f8c8 2000 	streq.w	r2, [r8]
 800d004:	605a      	strne	r2, [r3, #4]
 800d006:	e7eb      	b.n	800cfe0 <_malloc_r+0xa8>
 800d008:	4623      	mov	r3, r4
 800d00a:	6864      	ldr	r4, [r4, #4]
 800d00c:	e7ae      	b.n	800cf6c <_malloc_r+0x34>
 800d00e:	463c      	mov	r4, r7
 800d010:	687f      	ldr	r7, [r7, #4]
 800d012:	e7b6      	b.n	800cf82 <_malloc_r+0x4a>
 800d014:	461a      	mov	r2, r3
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d1fb      	bne.n	800d014 <_malloc_r+0xdc>
 800d01c:	2300      	movs	r3, #0
 800d01e:	6053      	str	r3, [r2, #4]
 800d020:	e7de      	b.n	800cfe0 <_malloc_r+0xa8>
 800d022:	230c      	movs	r3, #12
 800d024:	6033      	str	r3, [r6, #0]
 800d026:	4630      	mov	r0, r6
 800d028:	f000 f80c 	bl	800d044 <__malloc_unlock>
 800d02c:	e794      	b.n	800cf58 <_malloc_r+0x20>
 800d02e:	6005      	str	r5, [r0, #0]
 800d030:	e7d6      	b.n	800cfe0 <_malloc_r+0xa8>
 800d032:	bf00      	nop
 800d034:	200042d8 	.word	0x200042d8

0800d038 <__malloc_lock>:
 800d038:	4801      	ldr	r0, [pc, #4]	@ (800d040 <__malloc_lock+0x8>)
 800d03a:	f7ff bf01 	b.w	800ce40 <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	200042d0 	.word	0x200042d0

0800d044 <__malloc_unlock>:
 800d044:	4801      	ldr	r0, [pc, #4]	@ (800d04c <__malloc_unlock+0x8>)
 800d046:	f7ff befc 	b.w	800ce42 <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	200042d0 	.word	0x200042d0

0800d050 <__ssputs_r>:
 800d050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d054:	688e      	ldr	r6, [r1, #8]
 800d056:	461f      	mov	r7, r3
 800d058:	42be      	cmp	r6, r7
 800d05a:	680b      	ldr	r3, [r1, #0]
 800d05c:	4682      	mov	sl, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	4690      	mov	r8, r2
 800d062:	d82d      	bhi.n	800d0c0 <__ssputs_r+0x70>
 800d064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d068:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d06c:	d026      	beq.n	800d0bc <__ssputs_r+0x6c>
 800d06e:	6965      	ldr	r5, [r4, #20]
 800d070:	6909      	ldr	r1, [r1, #16]
 800d072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d076:	eba3 0901 	sub.w	r9, r3, r1
 800d07a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d07e:	1c7b      	adds	r3, r7, #1
 800d080:	444b      	add	r3, r9
 800d082:	106d      	asrs	r5, r5, #1
 800d084:	429d      	cmp	r5, r3
 800d086:	bf38      	it	cc
 800d088:	461d      	movcc	r5, r3
 800d08a:	0553      	lsls	r3, r2, #21
 800d08c:	d527      	bpl.n	800d0de <__ssputs_r+0x8e>
 800d08e:	4629      	mov	r1, r5
 800d090:	f7ff ff52 	bl	800cf38 <_malloc_r>
 800d094:	4606      	mov	r6, r0
 800d096:	b360      	cbz	r0, 800d0f2 <__ssputs_r+0xa2>
 800d098:	6921      	ldr	r1, [r4, #16]
 800d09a:	464a      	mov	r2, r9
 800d09c:	f7ff fed2 	bl	800ce44 <memcpy>
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0aa:	81a3      	strh	r3, [r4, #12]
 800d0ac:	6126      	str	r6, [r4, #16]
 800d0ae:	6165      	str	r5, [r4, #20]
 800d0b0:	444e      	add	r6, r9
 800d0b2:	eba5 0509 	sub.w	r5, r5, r9
 800d0b6:	6026      	str	r6, [r4, #0]
 800d0b8:	60a5      	str	r5, [r4, #8]
 800d0ba:	463e      	mov	r6, r7
 800d0bc:	42be      	cmp	r6, r7
 800d0be:	d900      	bls.n	800d0c2 <__ssputs_r+0x72>
 800d0c0:	463e      	mov	r6, r7
 800d0c2:	6820      	ldr	r0, [r4, #0]
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	4641      	mov	r1, r8
 800d0c8:	f000 faa6 	bl	800d618 <memmove>
 800d0cc:	68a3      	ldr	r3, [r4, #8]
 800d0ce:	1b9b      	subs	r3, r3, r6
 800d0d0:	60a3      	str	r3, [r4, #8]
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	4433      	add	r3, r6
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0de:	462a      	mov	r2, r5
 800d0e0:	f000 fac4 	bl	800d66c <_realloc_r>
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d1e0      	bne.n	800d0ac <__ssputs_r+0x5c>
 800d0ea:	6921      	ldr	r1, [r4, #16]
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	f7ff feb7 	bl	800ce60 <_free_r>
 800d0f2:	230c      	movs	r3, #12
 800d0f4:	f8ca 3000 	str.w	r3, [sl]
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	e7e9      	b.n	800d0da <__ssputs_r+0x8a>
	...

0800d108 <_svfiprintf_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	4698      	mov	r8, r3
 800d10e:	898b      	ldrh	r3, [r1, #12]
 800d110:	061b      	lsls	r3, r3, #24
 800d112:	b09d      	sub	sp, #116	@ 0x74
 800d114:	4607      	mov	r7, r0
 800d116:	460d      	mov	r5, r1
 800d118:	4614      	mov	r4, r2
 800d11a:	d510      	bpl.n	800d13e <_svfiprintf_r+0x36>
 800d11c:	690b      	ldr	r3, [r1, #16]
 800d11e:	b973      	cbnz	r3, 800d13e <_svfiprintf_r+0x36>
 800d120:	2140      	movs	r1, #64	@ 0x40
 800d122:	f7ff ff09 	bl	800cf38 <_malloc_r>
 800d126:	6028      	str	r0, [r5, #0]
 800d128:	6128      	str	r0, [r5, #16]
 800d12a:	b930      	cbnz	r0, 800d13a <_svfiprintf_r+0x32>
 800d12c:	230c      	movs	r3, #12
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	b01d      	add	sp, #116	@ 0x74
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	2340      	movs	r3, #64	@ 0x40
 800d13c:	616b      	str	r3, [r5, #20]
 800d13e:	2300      	movs	r3, #0
 800d140:	9309      	str	r3, [sp, #36]	@ 0x24
 800d142:	2320      	movs	r3, #32
 800d144:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d148:	f8cd 800c 	str.w	r8, [sp, #12]
 800d14c:	2330      	movs	r3, #48	@ 0x30
 800d14e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2ec <_svfiprintf_r+0x1e4>
 800d152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d156:	f04f 0901 	mov.w	r9, #1
 800d15a:	4623      	mov	r3, r4
 800d15c:	469a      	mov	sl, r3
 800d15e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d162:	b10a      	cbz	r2, 800d168 <_svfiprintf_r+0x60>
 800d164:	2a25      	cmp	r2, #37	@ 0x25
 800d166:	d1f9      	bne.n	800d15c <_svfiprintf_r+0x54>
 800d168:	ebba 0b04 	subs.w	fp, sl, r4
 800d16c:	d00b      	beq.n	800d186 <_svfiprintf_r+0x7e>
 800d16e:	465b      	mov	r3, fp
 800d170:	4622      	mov	r2, r4
 800d172:	4629      	mov	r1, r5
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ff6b 	bl	800d050 <__ssputs_r>
 800d17a:	3001      	adds	r0, #1
 800d17c:	f000 80a7 	beq.w	800d2ce <_svfiprintf_r+0x1c6>
 800d180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d182:	445a      	add	r2, fp
 800d184:	9209      	str	r2, [sp, #36]	@ 0x24
 800d186:	f89a 3000 	ldrb.w	r3, [sl]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 809f 	beq.w	800d2ce <_svfiprintf_r+0x1c6>
 800d190:	2300      	movs	r3, #0
 800d192:	f04f 32ff 	mov.w	r2, #4294967295
 800d196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d19a:	f10a 0a01 	add.w	sl, sl, #1
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	9307      	str	r3, [sp, #28]
 800d1a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1a8:	4654      	mov	r4, sl
 800d1aa:	2205      	movs	r2, #5
 800d1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b0:	484e      	ldr	r0, [pc, #312]	@ (800d2ec <_svfiprintf_r+0x1e4>)
 800d1b2:	f7f3 f825 	bl	8000200 <memchr>
 800d1b6:	9a04      	ldr	r2, [sp, #16]
 800d1b8:	b9d8      	cbnz	r0, 800d1f2 <_svfiprintf_r+0xea>
 800d1ba:	06d0      	lsls	r0, r2, #27
 800d1bc:	bf44      	itt	mi
 800d1be:	2320      	movmi	r3, #32
 800d1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1c4:	0711      	lsls	r1, r2, #28
 800d1c6:	bf44      	itt	mi
 800d1c8:	232b      	movmi	r3, #43	@ 0x2b
 800d1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1d4:	d015      	beq.n	800d202 <_svfiprintf_r+0xfa>
 800d1d6:	9a07      	ldr	r2, [sp, #28]
 800d1d8:	4654      	mov	r4, sl
 800d1da:	2000      	movs	r0, #0
 800d1dc:	f04f 0c0a 	mov.w	ip, #10
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e6:	3b30      	subs	r3, #48	@ 0x30
 800d1e8:	2b09      	cmp	r3, #9
 800d1ea:	d94b      	bls.n	800d284 <_svfiprintf_r+0x17c>
 800d1ec:	b1b0      	cbz	r0, 800d21c <_svfiprintf_r+0x114>
 800d1ee:	9207      	str	r2, [sp, #28]
 800d1f0:	e014      	b.n	800d21c <_svfiprintf_r+0x114>
 800d1f2:	eba0 0308 	sub.w	r3, r0, r8
 800d1f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	46a2      	mov	sl, r4
 800d200:	e7d2      	b.n	800d1a8 <_svfiprintf_r+0xa0>
 800d202:	9b03      	ldr	r3, [sp, #12]
 800d204:	1d19      	adds	r1, r3, #4
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	9103      	str	r1, [sp, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	bfbb      	ittet	lt
 800d20e:	425b      	neglt	r3, r3
 800d210:	f042 0202 	orrlt.w	r2, r2, #2
 800d214:	9307      	strge	r3, [sp, #28]
 800d216:	9307      	strlt	r3, [sp, #28]
 800d218:	bfb8      	it	lt
 800d21a:	9204      	strlt	r2, [sp, #16]
 800d21c:	7823      	ldrb	r3, [r4, #0]
 800d21e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d220:	d10a      	bne.n	800d238 <_svfiprintf_r+0x130>
 800d222:	7863      	ldrb	r3, [r4, #1]
 800d224:	2b2a      	cmp	r3, #42	@ 0x2a
 800d226:	d132      	bne.n	800d28e <_svfiprintf_r+0x186>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	1d1a      	adds	r2, r3, #4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	9203      	str	r2, [sp, #12]
 800d230:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d234:	3402      	adds	r4, #2
 800d236:	9305      	str	r3, [sp, #20]
 800d238:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d2fc <_svfiprintf_r+0x1f4>
 800d23c:	7821      	ldrb	r1, [r4, #0]
 800d23e:	2203      	movs	r2, #3
 800d240:	4650      	mov	r0, sl
 800d242:	f7f2 ffdd 	bl	8000200 <memchr>
 800d246:	b138      	cbz	r0, 800d258 <_svfiprintf_r+0x150>
 800d248:	9b04      	ldr	r3, [sp, #16]
 800d24a:	eba0 000a 	sub.w	r0, r0, sl
 800d24e:	2240      	movs	r2, #64	@ 0x40
 800d250:	4082      	lsls	r2, r0
 800d252:	4313      	orrs	r3, r2
 800d254:	3401      	adds	r4, #1
 800d256:	9304      	str	r3, [sp, #16]
 800d258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25c:	4824      	ldr	r0, [pc, #144]	@ (800d2f0 <_svfiprintf_r+0x1e8>)
 800d25e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d262:	2206      	movs	r2, #6
 800d264:	f7f2 ffcc 	bl	8000200 <memchr>
 800d268:	2800      	cmp	r0, #0
 800d26a:	d036      	beq.n	800d2da <_svfiprintf_r+0x1d2>
 800d26c:	4b21      	ldr	r3, [pc, #132]	@ (800d2f4 <_svfiprintf_r+0x1ec>)
 800d26e:	bb1b      	cbnz	r3, 800d2b8 <_svfiprintf_r+0x1b0>
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	3307      	adds	r3, #7
 800d274:	f023 0307 	bic.w	r3, r3, #7
 800d278:	3308      	adds	r3, #8
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27e:	4433      	add	r3, r6
 800d280:	9309      	str	r3, [sp, #36]	@ 0x24
 800d282:	e76a      	b.n	800d15a <_svfiprintf_r+0x52>
 800d284:	fb0c 3202 	mla	r2, ip, r2, r3
 800d288:	460c      	mov	r4, r1
 800d28a:	2001      	movs	r0, #1
 800d28c:	e7a8      	b.n	800d1e0 <_svfiprintf_r+0xd8>
 800d28e:	2300      	movs	r3, #0
 800d290:	3401      	adds	r4, #1
 800d292:	9305      	str	r3, [sp, #20]
 800d294:	4619      	mov	r1, r3
 800d296:	f04f 0c0a 	mov.w	ip, #10
 800d29a:	4620      	mov	r0, r4
 800d29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a0:	3a30      	subs	r2, #48	@ 0x30
 800d2a2:	2a09      	cmp	r2, #9
 800d2a4:	d903      	bls.n	800d2ae <_svfiprintf_r+0x1a6>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d0c6      	beq.n	800d238 <_svfiprintf_r+0x130>
 800d2aa:	9105      	str	r1, [sp, #20]
 800d2ac:	e7c4      	b.n	800d238 <_svfiprintf_r+0x130>
 800d2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e7f0      	b.n	800d29a <_svfiprintf_r+0x192>
 800d2b8:	ab03      	add	r3, sp, #12
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	462a      	mov	r2, r5
 800d2be:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f8 <_svfiprintf_r+0x1f0>)
 800d2c0:	a904      	add	r1, sp, #16
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	1c42      	adds	r2, r0, #1
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	d1d6      	bne.n	800d27c <_svfiprintf_r+0x174>
 800d2ce:	89ab      	ldrh	r3, [r5, #12]
 800d2d0:	065b      	lsls	r3, r3, #25
 800d2d2:	f53f af2d 	bmi.w	800d130 <_svfiprintf_r+0x28>
 800d2d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2d8:	e72c      	b.n	800d134 <_svfiprintf_r+0x2c>
 800d2da:	ab03      	add	r3, sp, #12
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	462a      	mov	r2, r5
 800d2e0:	4b05      	ldr	r3, [pc, #20]	@ (800d2f8 <_svfiprintf_r+0x1f0>)
 800d2e2:	a904      	add	r1, sp, #16
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f000 f879 	bl	800d3dc <_printf_i>
 800d2ea:	e7ed      	b.n	800d2c8 <_svfiprintf_r+0x1c0>
 800d2ec:	0800db80 	.word	0x0800db80
 800d2f0:	0800db8a 	.word	0x0800db8a
 800d2f4:	00000000 	.word	0x00000000
 800d2f8:	0800d051 	.word	0x0800d051
 800d2fc:	0800db86 	.word	0x0800db86

0800d300 <_printf_common>:
 800d300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d304:	4616      	mov	r6, r2
 800d306:	4698      	mov	r8, r3
 800d308:	688a      	ldr	r2, [r1, #8]
 800d30a:	690b      	ldr	r3, [r1, #16]
 800d30c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d310:	4293      	cmp	r3, r2
 800d312:	bfb8      	it	lt
 800d314:	4613      	movlt	r3, r2
 800d316:	6033      	str	r3, [r6, #0]
 800d318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d31c:	4607      	mov	r7, r0
 800d31e:	460c      	mov	r4, r1
 800d320:	b10a      	cbz	r2, 800d326 <_printf_common+0x26>
 800d322:	3301      	adds	r3, #1
 800d324:	6033      	str	r3, [r6, #0]
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	0699      	lsls	r1, r3, #26
 800d32a:	bf42      	ittt	mi
 800d32c:	6833      	ldrmi	r3, [r6, #0]
 800d32e:	3302      	addmi	r3, #2
 800d330:	6033      	strmi	r3, [r6, #0]
 800d332:	6825      	ldr	r5, [r4, #0]
 800d334:	f015 0506 	ands.w	r5, r5, #6
 800d338:	d106      	bne.n	800d348 <_printf_common+0x48>
 800d33a:	f104 0a19 	add.w	sl, r4, #25
 800d33e:	68e3      	ldr	r3, [r4, #12]
 800d340:	6832      	ldr	r2, [r6, #0]
 800d342:	1a9b      	subs	r3, r3, r2
 800d344:	42ab      	cmp	r3, r5
 800d346:	dc26      	bgt.n	800d396 <_printf_common+0x96>
 800d348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d34c:	6822      	ldr	r2, [r4, #0]
 800d34e:	3b00      	subs	r3, #0
 800d350:	bf18      	it	ne
 800d352:	2301      	movne	r3, #1
 800d354:	0692      	lsls	r2, r2, #26
 800d356:	d42b      	bmi.n	800d3b0 <_printf_common+0xb0>
 800d358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d35c:	4641      	mov	r1, r8
 800d35e:	4638      	mov	r0, r7
 800d360:	47c8      	blx	r9
 800d362:	3001      	adds	r0, #1
 800d364:	d01e      	beq.n	800d3a4 <_printf_common+0xa4>
 800d366:	6823      	ldr	r3, [r4, #0]
 800d368:	6922      	ldr	r2, [r4, #16]
 800d36a:	f003 0306 	and.w	r3, r3, #6
 800d36e:	2b04      	cmp	r3, #4
 800d370:	bf02      	ittt	eq
 800d372:	68e5      	ldreq	r5, [r4, #12]
 800d374:	6833      	ldreq	r3, [r6, #0]
 800d376:	1aed      	subeq	r5, r5, r3
 800d378:	68a3      	ldr	r3, [r4, #8]
 800d37a:	bf0c      	ite	eq
 800d37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d380:	2500      	movne	r5, #0
 800d382:	4293      	cmp	r3, r2
 800d384:	bfc4      	itt	gt
 800d386:	1a9b      	subgt	r3, r3, r2
 800d388:	18ed      	addgt	r5, r5, r3
 800d38a:	2600      	movs	r6, #0
 800d38c:	341a      	adds	r4, #26
 800d38e:	42b5      	cmp	r5, r6
 800d390:	d11a      	bne.n	800d3c8 <_printf_common+0xc8>
 800d392:	2000      	movs	r0, #0
 800d394:	e008      	b.n	800d3a8 <_printf_common+0xa8>
 800d396:	2301      	movs	r3, #1
 800d398:	4652      	mov	r2, sl
 800d39a:	4641      	mov	r1, r8
 800d39c:	4638      	mov	r0, r7
 800d39e:	47c8      	blx	r9
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d103      	bne.n	800d3ac <_printf_common+0xac>
 800d3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ac:	3501      	adds	r5, #1
 800d3ae:	e7c6      	b.n	800d33e <_printf_common+0x3e>
 800d3b0:	18e1      	adds	r1, r4, r3
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	2030      	movs	r0, #48	@ 0x30
 800d3b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d3ba:	4422      	add	r2, r4
 800d3bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d3c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d3c4:	3302      	adds	r3, #2
 800d3c6:	e7c7      	b.n	800d358 <_printf_common+0x58>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	4622      	mov	r2, r4
 800d3cc:	4641      	mov	r1, r8
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	47c8      	blx	r9
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	d0e6      	beq.n	800d3a4 <_printf_common+0xa4>
 800d3d6:	3601      	adds	r6, #1
 800d3d8:	e7d9      	b.n	800d38e <_printf_common+0x8e>
	...

0800d3dc <_printf_i>:
 800d3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e0:	7e0f      	ldrb	r7, [r1, #24]
 800d3e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3e4:	2f78      	cmp	r7, #120	@ 0x78
 800d3e6:	4691      	mov	r9, r2
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	469a      	mov	sl, r3
 800d3ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3f2:	d807      	bhi.n	800d404 <_printf_i+0x28>
 800d3f4:	2f62      	cmp	r7, #98	@ 0x62
 800d3f6:	d80a      	bhi.n	800d40e <_printf_i+0x32>
 800d3f8:	2f00      	cmp	r7, #0
 800d3fa:	f000 80d1 	beq.w	800d5a0 <_printf_i+0x1c4>
 800d3fe:	2f58      	cmp	r7, #88	@ 0x58
 800d400:	f000 80b8 	beq.w	800d574 <_printf_i+0x198>
 800d404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d40c:	e03a      	b.n	800d484 <_printf_i+0xa8>
 800d40e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d412:	2b15      	cmp	r3, #21
 800d414:	d8f6      	bhi.n	800d404 <_printf_i+0x28>
 800d416:	a101      	add	r1, pc, #4	@ (adr r1, 800d41c <_printf_i+0x40>)
 800d418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d41c:	0800d475 	.word	0x0800d475
 800d420:	0800d489 	.word	0x0800d489
 800d424:	0800d405 	.word	0x0800d405
 800d428:	0800d405 	.word	0x0800d405
 800d42c:	0800d405 	.word	0x0800d405
 800d430:	0800d405 	.word	0x0800d405
 800d434:	0800d489 	.word	0x0800d489
 800d438:	0800d405 	.word	0x0800d405
 800d43c:	0800d405 	.word	0x0800d405
 800d440:	0800d405 	.word	0x0800d405
 800d444:	0800d405 	.word	0x0800d405
 800d448:	0800d587 	.word	0x0800d587
 800d44c:	0800d4b3 	.word	0x0800d4b3
 800d450:	0800d541 	.word	0x0800d541
 800d454:	0800d405 	.word	0x0800d405
 800d458:	0800d405 	.word	0x0800d405
 800d45c:	0800d5a9 	.word	0x0800d5a9
 800d460:	0800d405 	.word	0x0800d405
 800d464:	0800d4b3 	.word	0x0800d4b3
 800d468:	0800d405 	.word	0x0800d405
 800d46c:	0800d405 	.word	0x0800d405
 800d470:	0800d549 	.word	0x0800d549
 800d474:	6833      	ldr	r3, [r6, #0]
 800d476:	1d1a      	adds	r2, r3, #4
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6032      	str	r2, [r6, #0]
 800d47c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d484:	2301      	movs	r3, #1
 800d486:	e09c      	b.n	800d5c2 <_printf_i+0x1e6>
 800d488:	6833      	ldr	r3, [r6, #0]
 800d48a:	6820      	ldr	r0, [r4, #0]
 800d48c:	1d19      	adds	r1, r3, #4
 800d48e:	6031      	str	r1, [r6, #0]
 800d490:	0606      	lsls	r6, r0, #24
 800d492:	d501      	bpl.n	800d498 <_printf_i+0xbc>
 800d494:	681d      	ldr	r5, [r3, #0]
 800d496:	e003      	b.n	800d4a0 <_printf_i+0xc4>
 800d498:	0645      	lsls	r5, r0, #25
 800d49a:	d5fb      	bpl.n	800d494 <_printf_i+0xb8>
 800d49c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d4a0:	2d00      	cmp	r5, #0
 800d4a2:	da03      	bge.n	800d4ac <_printf_i+0xd0>
 800d4a4:	232d      	movs	r3, #45	@ 0x2d
 800d4a6:	426d      	negs	r5, r5
 800d4a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4ac:	4858      	ldr	r0, [pc, #352]	@ (800d610 <_printf_i+0x234>)
 800d4ae:	230a      	movs	r3, #10
 800d4b0:	e011      	b.n	800d4d6 <_printf_i+0xfa>
 800d4b2:	6821      	ldr	r1, [r4, #0]
 800d4b4:	6833      	ldr	r3, [r6, #0]
 800d4b6:	0608      	lsls	r0, r1, #24
 800d4b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d4bc:	d402      	bmi.n	800d4c4 <_printf_i+0xe8>
 800d4be:	0649      	lsls	r1, r1, #25
 800d4c0:	bf48      	it	mi
 800d4c2:	b2ad      	uxthmi	r5, r5
 800d4c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d4c6:	4852      	ldr	r0, [pc, #328]	@ (800d610 <_printf_i+0x234>)
 800d4c8:	6033      	str	r3, [r6, #0]
 800d4ca:	bf14      	ite	ne
 800d4cc:	230a      	movne	r3, #10
 800d4ce:	2308      	moveq	r3, #8
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d4d6:	6866      	ldr	r6, [r4, #4]
 800d4d8:	60a6      	str	r6, [r4, #8]
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	db05      	blt.n	800d4ea <_printf_i+0x10e>
 800d4de:	6821      	ldr	r1, [r4, #0]
 800d4e0:	432e      	orrs	r6, r5
 800d4e2:	f021 0104 	bic.w	r1, r1, #4
 800d4e6:	6021      	str	r1, [r4, #0]
 800d4e8:	d04b      	beq.n	800d582 <_printf_i+0x1a6>
 800d4ea:	4616      	mov	r6, r2
 800d4ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4f0:	fb03 5711 	mls	r7, r3, r1, r5
 800d4f4:	5dc7      	ldrb	r7, [r0, r7]
 800d4f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4fa:	462f      	mov	r7, r5
 800d4fc:	42bb      	cmp	r3, r7
 800d4fe:	460d      	mov	r5, r1
 800d500:	d9f4      	bls.n	800d4ec <_printf_i+0x110>
 800d502:	2b08      	cmp	r3, #8
 800d504:	d10b      	bne.n	800d51e <_printf_i+0x142>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	07df      	lsls	r7, r3, #31
 800d50a:	d508      	bpl.n	800d51e <_printf_i+0x142>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	6861      	ldr	r1, [r4, #4]
 800d510:	4299      	cmp	r1, r3
 800d512:	bfde      	ittt	le
 800d514:	2330      	movle	r3, #48	@ 0x30
 800d516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d51a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d51e:	1b92      	subs	r2, r2, r6
 800d520:	6122      	str	r2, [r4, #16]
 800d522:	f8cd a000 	str.w	sl, [sp]
 800d526:	464b      	mov	r3, r9
 800d528:	aa03      	add	r2, sp, #12
 800d52a:	4621      	mov	r1, r4
 800d52c:	4640      	mov	r0, r8
 800d52e:	f7ff fee7 	bl	800d300 <_printf_common>
 800d532:	3001      	adds	r0, #1
 800d534:	d14a      	bne.n	800d5cc <_printf_i+0x1f0>
 800d536:	f04f 30ff 	mov.w	r0, #4294967295
 800d53a:	b004      	add	sp, #16
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	f043 0320 	orr.w	r3, r3, #32
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	4832      	ldr	r0, [pc, #200]	@ (800d614 <_printf_i+0x238>)
 800d54a:	2778      	movs	r7, #120	@ 0x78
 800d54c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d550:	6823      	ldr	r3, [r4, #0]
 800d552:	6831      	ldr	r1, [r6, #0]
 800d554:	061f      	lsls	r7, r3, #24
 800d556:	f851 5b04 	ldr.w	r5, [r1], #4
 800d55a:	d402      	bmi.n	800d562 <_printf_i+0x186>
 800d55c:	065f      	lsls	r7, r3, #25
 800d55e:	bf48      	it	mi
 800d560:	b2ad      	uxthmi	r5, r5
 800d562:	6031      	str	r1, [r6, #0]
 800d564:	07d9      	lsls	r1, r3, #31
 800d566:	bf44      	itt	mi
 800d568:	f043 0320 	orrmi.w	r3, r3, #32
 800d56c:	6023      	strmi	r3, [r4, #0]
 800d56e:	b11d      	cbz	r5, 800d578 <_printf_i+0x19c>
 800d570:	2310      	movs	r3, #16
 800d572:	e7ad      	b.n	800d4d0 <_printf_i+0xf4>
 800d574:	4826      	ldr	r0, [pc, #152]	@ (800d610 <_printf_i+0x234>)
 800d576:	e7e9      	b.n	800d54c <_printf_i+0x170>
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	f023 0320 	bic.w	r3, r3, #32
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	e7f6      	b.n	800d570 <_printf_i+0x194>
 800d582:	4616      	mov	r6, r2
 800d584:	e7bd      	b.n	800d502 <_printf_i+0x126>
 800d586:	6833      	ldr	r3, [r6, #0]
 800d588:	6825      	ldr	r5, [r4, #0]
 800d58a:	6961      	ldr	r1, [r4, #20]
 800d58c:	1d18      	adds	r0, r3, #4
 800d58e:	6030      	str	r0, [r6, #0]
 800d590:	062e      	lsls	r6, r5, #24
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	d501      	bpl.n	800d59a <_printf_i+0x1be>
 800d596:	6019      	str	r1, [r3, #0]
 800d598:	e002      	b.n	800d5a0 <_printf_i+0x1c4>
 800d59a:	0668      	lsls	r0, r5, #25
 800d59c:	d5fb      	bpl.n	800d596 <_printf_i+0x1ba>
 800d59e:	8019      	strh	r1, [r3, #0]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	6123      	str	r3, [r4, #16]
 800d5a4:	4616      	mov	r6, r2
 800d5a6:	e7bc      	b.n	800d522 <_printf_i+0x146>
 800d5a8:	6833      	ldr	r3, [r6, #0]
 800d5aa:	1d1a      	adds	r2, r3, #4
 800d5ac:	6032      	str	r2, [r6, #0]
 800d5ae:	681e      	ldr	r6, [r3, #0]
 800d5b0:	6862      	ldr	r2, [r4, #4]
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7f2 fe23 	bl	8000200 <memchr>
 800d5ba:	b108      	cbz	r0, 800d5c0 <_printf_i+0x1e4>
 800d5bc:	1b80      	subs	r0, r0, r6
 800d5be:	6060      	str	r0, [r4, #4]
 800d5c0:	6863      	ldr	r3, [r4, #4]
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ca:	e7aa      	b.n	800d522 <_printf_i+0x146>
 800d5cc:	6923      	ldr	r3, [r4, #16]
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	47d0      	blx	sl
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d0ad      	beq.n	800d536 <_printf_i+0x15a>
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	079b      	lsls	r3, r3, #30
 800d5de:	d413      	bmi.n	800d608 <_printf_i+0x22c>
 800d5e0:	68e0      	ldr	r0, [r4, #12]
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	4298      	cmp	r0, r3
 800d5e6:	bfb8      	it	lt
 800d5e8:	4618      	movlt	r0, r3
 800d5ea:	e7a6      	b.n	800d53a <_printf_i+0x15e>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	47d0      	blx	sl
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d09d      	beq.n	800d536 <_printf_i+0x15a>
 800d5fa:	3501      	adds	r5, #1
 800d5fc:	68e3      	ldr	r3, [r4, #12]
 800d5fe:	9903      	ldr	r1, [sp, #12]
 800d600:	1a5b      	subs	r3, r3, r1
 800d602:	42ab      	cmp	r3, r5
 800d604:	dcf2      	bgt.n	800d5ec <_printf_i+0x210>
 800d606:	e7eb      	b.n	800d5e0 <_printf_i+0x204>
 800d608:	2500      	movs	r5, #0
 800d60a:	f104 0619 	add.w	r6, r4, #25
 800d60e:	e7f5      	b.n	800d5fc <_printf_i+0x220>
 800d610:	0800db91 	.word	0x0800db91
 800d614:	0800dba2 	.word	0x0800dba2

0800d618 <memmove>:
 800d618:	4288      	cmp	r0, r1
 800d61a:	b510      	push	{r4, lr}
 800d61c:	eb01 0402 	add.w	r4, r1, r2
 800d620:	d902      	bls.n	800d628 <memmove+0x10>
 800d622:	4284      	cmp	r4, r0
 800d624:	4623      	mov	r3, r4
 800d626:	d807      	bhi.n	800d638 <memmove+0x20>
 800d628:	1e43      	subs	r3, r0, #1
 800d62a:	42a1      	cmp	r1, r4
 800d62c:	d008      	beq.n	800d640 <memmove+0x28>
 800d62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d632:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d636:	e7f8      	b.n	800d62a <memmove+0x12>
 800d638:	4402      	add	r2, r0
 800d63a:	4601      	mov	r1, r0
 800d63c:	428a      	cmp	r2, r1
 800d63e:	d100      	bne.n	800d642 <memmove+0x2a>
 800d640:	bd10      	pop	{r4, pc}
 800d642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64a:	e7f7      	b.n	800d63c <memmove+0x24>

0800d64c <_sbrk_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4d06      	ldr	r5, [pc, #24]	@ (800d668 <_sbrk_r+0x1c>)
 800d650:	2300      	movs	r3, #0
 800d652:	4604      	mov	r4, r0
 800d654:	4608      	mov	r0, r1
 800d656:	602b      	str	r3, [r5, #0]
 800d658:	f7f6 f9c4 	bl	80039e4 <_sbrk>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_sbrk_r+0x1a>
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b103      	cbz	r3, 800d666 <_sbrk_r+0x1a>
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	200042cc 	.word	0x200042cc

0800d66c <_realloc_r>:
 800d66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d670:	4607      	mov	r7, r0
 800d672:	4614      	mov	r4, r2
 800d674:	460d      	mov	r5, r1
 800d676:	b921      	cbnz	r1, 800d682 <_realloc_r+0x16>
 800d678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d67c:	4611      	mov	r1, r2
 800d67e:	f7ff bc5b 	b.w	800cf38 <_malloc_r>
 800d682:	b92a      	cbnz	r2, 800d690 <_realloc_r+0x24>
 800d684:	f7ff fbec 	bl	800ce60 <_free_r>
 800d688:	4625      	mov	r5, r4
 800d68a:	4628      	mov	r0, r5
 800d68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d690:	f000 f81a 	bl	800d6c8 <_malloc_usable_size_r>
 800d694:	4284      	cmp	r4, r0
 800d696:	4606      	mov	r6, r0
 800d698:	d802      	bhi.n	800d6a0 <_realloc_r+0x34>
 800d69a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d69e:	d8f4      	bhi.n	800d68a <_realloc_r+0x1e>
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f7ff fc48 	bl	800cf38 <_malloc_r>
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	b908      	cbnz	r0, 800d6b0 <_realloc_r+0x44>
 800d6ac:	4645      	mov	r5, r8
 800d6ae:	e7ec      	b.n	800d68a <_realloc_r+0x1e>
 800d6b0:	42b4      	cmp	r4, r6
 800d6b2:	4622      	mov	r2, r4
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	bf28      	it	cs
 800d6b8:	4632      	movcs	r2, r6
 800d6ba:	f7ff fbc3 	bl	800ce44 <memcpy>
 800d6be:	4629      	mov	r1, r5
 800d6c0:	4638      	mov	r0, r7
 800d6c2:	f7ff fbcd 	bl	800ce60 <_free_r>
 800d6c6:	e7f1      	b.n	800d6ac <_realloc_r+0x40>

0800d6c8 <_malloc_usable_size_r>:
 800d6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6cc:	1f18      	subs	r0, r3, #4
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	bfbc      	itt	lt
 800d6d2:	580b      	ldrlt	r3, [r1, r0]
 800d6d4:	18c0      	addlt	r0, r0, r3
 800d6d6:	4770      	bx	lr

0800d6d8 <_init>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_fini>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	bf00      	nop
 800d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ea:	bc08      	pop	{r3}
 800d6ec:	469e      	mov	lr, r3
 800d6ee:	4770      	bx	lr
