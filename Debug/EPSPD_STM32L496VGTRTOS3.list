
EPSPD_STM32L496VGTRTOS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2a0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800d450  0800d450  0000e450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d80c  0800d80c  0000f218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d80c  0800d80c  0000e80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d814  0800d814  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d814  0800d814  0000e814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d818  0800d818  0000e818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800d81c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec4  20000218  0800da34  0000f218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  0800da34  000100dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b65c  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a0b  00000000  00000000  0003a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bcc  00000000  00000000  00042600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000308e2  00000000  00000000  000441cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc64  00000000  00000000  00074aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012681b  00000000  00000000  000a0712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c6f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d0c  00000000  00000000  001c6f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001d0c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d438 	.word	0x0800d438

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	0800d438 	.word	0x0800d438

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <EPS_Log_Message>:

void EPS_Log_SetLevel(EPS_LogLevel level) {
    current_log_level = level;
}

void EPS_Log_Message(EPS_LogLevel level, const char *format, ...) {
 8000da8:	b40e      	push	{r1, r2, r3}
 8000daa:	b590      	push	{r4, r7, lr}
 8000dac:	b0cc      	sub	sp, #304	@ 0x130
 8000dae:	af04      	add	r7, sp, #16
 8000db0:	4602      	mov	r2, r0
 8000db2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000db6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dba:	701a      	strb	r2, [r3, #0]
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <EPS_Log_Message+0x10c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000dc4:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d867      	bhi.n	8000e9e <EPS_Log_Message+0xf6>
 8000dce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dd2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d060      	beq.n	8000e9e <EPS_Log_Message+0xf6>

    char buffer[LOG_BUFFER_SIZE];
    int offset = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    uint64_t counter;
    uint32_t subtick;
    GetSyncTimestamp(&counter, &subtick);
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fe1f 	bl	8001a30 <GetSyncTimestamp>

    offset += snprintf(buffer, LOG_BUFFER_SIZE, "%s[%llu.%06lu] ",
 8000df2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000df6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <EPS_Log_Message+0x110>)
 8000dfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e06:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000e0a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000e0e:	6809      	ldr	r1, [r1, #0]
 8000e10:	f107 0018 	add.w	r0, r7, #24
 8000e14:	9102      	str	r1, [sp, #8]
 8000e16:	e9cd 2300 	strd	r2, r3, [sp]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <EPS_Log_Message+0x114>)
 8000e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e22:	f00b fde9 	bl	800c9f8 <sniprintf>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                       log_prefixes[level], counter, (unsigned long)subtick);

    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db33      	blt.n	8000ea2 <EPS_Log_Message+0xfa>
 8000e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e3e:	2bff      	cmp	r3, #255	@ 0xff
 8000e40:	dc2f      	bgt.n	8000ea2 <EPS_Log_Message+0xfa>

    va_list args;
    va_start(args, format);
 8000e42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e4e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, LOG_BUFFER_SIZE - offset, format, args);
 8000e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e54:	f107 0218 	add.w	r2, r7, #24
 8000e58:	18d0      	adds	r0, r2, r3
 8000e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e5e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e62:	4619      	mov	r1, r3
 8000e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e72:	f00b fe25 	bl	800cac0 <vsniprintf>
    va_end(args);

    size_t msg_len = strnlen(buffer, LOG_BUFFER_SIZE);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00b fe57 	bl	800cb32 <strnlen>
 8000e84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, msg_len, HAL_MAX_DELAY);
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0118 	add.w	r1, r7, #24
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <EPS_Log_Message+0x118>)
 8000e98:	f007 fcb0 	bl	80087fc <HAL_UART_Transmit>
 8000e9c:	e002      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000ea2:	bf00      	nop
}
 8000ea4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000eae:	b003      	add	sp, #12
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000018 	.word	0x20000018
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	0800d47c 	.word	0x0800d47c
 8000ec0:	20000814 	.word	0x20000814

08000ec4 <software_delay_start>:
#include "delay.h" // Include the header file for software delay functions
#include "stm32l4xx_hal.h" // Include HAL library for STM32



static inline void software_delay_start(SoftwareDelay_t* timer, uint32_t delay_ms) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    timer->start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <software_delay_start+0x28>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
    timer->delay_ms = delay_ms;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000730 	.word	0x20000730

08000ef0 <software_delay_elapsed>:

static inline uint8_t software_delay_elapsed(SoftwareDelay_t* timer) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    uint32_t elapsed_us = (__HAL_TIM_GET_COUNTER(&htim2) - timer->start_time);
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <software_delay_elapsed+0x3c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	60fb      	str	r3, [r7, #12]
    return (elapsed_us >= (timer->delay_ms * 1000));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	bf2c      	ite	cs
 8000f18:	2301      	movcs	r3, #1
 8000f1a:	2300      	movcc	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000730 	.word	0x20000730

08000f30 <SoftwareDelay>:

void SoftwareDelay(uint32_t delay_ms) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    SoftwareDelay_t timer;
    software_delay_start(&timer, delay_ms);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffc0 	bl	8000ec4 <software_delay_start>
    while (!software_delay_elapsed(&timer));
 8000f44:	bf00      	nop
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffd0 	bl	8000ef0 <software_delay_elapsed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f7      	beq.n	8000f46 <SoftwareDelay+0x16>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <acquire_eeprom_lock>:
    uint16_t lock_value;
    uint32_t timestamp;
} EEPROM_Lock;

bool acquire_eeprom_lock(uint8_t mcu_id)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 8000f6a:	f002 fc8d 	bl	8003888 <HAL_GetTick>
 8000f6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    EEPROM_Lock current_lock;
    EEPROM_Lock new_lock = {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <acquire_eeprom_lock+0x1c>
 8000f76:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8000f7a:	e001      	b.n	8000f80 <acquire_eeprom_lock+0x20>
 8000f7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8000f80:	83bb      	strh	r3, [r7, #28]
        .lock_value = (mcu_id == 1) ? LOCK_MCU1 : LOCK_MCU2,
        .timestamp = HAL_GetTick()
 8000f82:	f002 fc81 	bl	8003888 <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
    EEPROM_Lock new_lock = {
 8000f88:	623b      	str	r3, [r7, #32]
    };

    uint8_t lock_addr[2] = { LOCK_ADDRESS >> 8, LOCK_ADDRESS & 0xFF };
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	833b      	strh	r3, [r7, #24]

    while ((HAL_GetTick() - start_time) < LOCK_TIMEOUT_MS)
 8000f8e:	e051      	b.n	8001034 <acquire_eeprom_lock+0xd4>
    {
        HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, lock_addr, 2, 100);
 8000f90:	f107 0218 	add.w	r2, r7, #24
 8000f94:	2364      	movs	r3, #100	@ 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	21a0      	movs	r1, #160	@ 0xa0
 8000f9c:	482c      	ldr	r0, [pc, #176]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000f9e:	f004 fc8d 	bl	80058bc <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, (uint8_t *)&current_lock, sizeof(current_lock), 100);
 8000fa2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000fa6:	2364      	movs	r3, #100	@ 0x64
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2308      	movs	r3, #8
 8000fac:	21a0      	movs	r1, #160	@ 0xa0
 8000fae:	4828      	ldr	r0, [pc, #160]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000fb0:	f004 fd9c 	bl	8005aec <HAL_I2C_Master_Receive>

        if (current_lock.lock_value == 0 ||
 8000fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <acquire_eeprom_lock+0x6c>
            (HAL_GetTick() - current_lock.timestamp) > LOCK_TIMEOUT_MS)
 8000fba:	f002 fc65 	bl	8003888 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	1ad3      	subs	r3, r2, r3
        if (current_lock.lock_value == 0 ||
 8000fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d930      	bls.n	800102e <acquire_eeprom_lock+0xce>
        {
            uint8_t txbuf[2 + sizeof(EEPROM_Lock)];
            txbuf[0] = lock_addr[0];
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	733b      	strb	r3, [r7, #12]
            txbuf[1] = lock_addr[1];
 8000fd0:	7e7b      	ldrb	r3, [r7, #25]
 8000fd2:	737b      	strb	r3, [r7, #13]
            memcpy(&txbuf[2], &new_lock, sizeof(EEPROM_Lock));
 8000fd4:	f107 011c 	add.w	r1, r7, #28
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	3302      	adds	r3, #2
 8000fde:	2208      	movs	r2, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b fddf 	bl	800cba4 <memcpy>

            HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, txbuf, sizeof(txbuf), 100);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	230a      	movs	r3, #10
 8000ff0:	21a0      	movs	r1, #160	@ 0xa0
 8000ff2:	4817      	ldr	r0, [pc, #92]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000ff4:	f004 fc62 	bl	80058bc <HAL_I2C_Master_Transmit>
            HAL_Delay(WRITE_DELAY_MS);
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f002 fc51 	bl	80038a0 <HAL_Delay>

            HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, lock_addr, 2, 100);
 8000ffe:	f107 0218 	add.w	r2, r7, #24
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	21a0      	movs	r1, #160	@ 0xa0
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 800100c:	f004 fc56 	bl	80058bc <HAL_I2C_Master_Transmit>
            HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, (uint8_t *)&current_lock, sizeof(current_lock), 100);
 8001010:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2308      	movs	r3, #8
 800101a:	21a0      	movs	r1, #160	@ 0xa0
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 800101e:	f004 fd65 	bl	8005aec <HAL_I2C_Master_Receive>

            if (current_lock.lock_value == new_lock.lock_value)
 8001022:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001024:	8bbb      	ldrh	r3, [r7, #28]
 8001026:	429a      	cmp	r2, r3
 8001028:	d101      	bne.n	800102e <acquire_eeprom_lock+0xce>
                return true;
 800102a:	2301      	movs	r3, #1
 800102c:	e00c      	b.n	8001048 <acquire_eeprom_lock+0xe8>
        }
        HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f002 fc36 	bl	80038a0 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < LOCK_TIMEOUT_MS)
 8001034:	f002 fc28 	bl	8003888 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001042:	4293      	cmp	r3, r2
 8001044:	d9a4      	bls.n	8000f90 <acquire_eeprom_lock+0x30>
    }
    return false;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000538 	.word	0x20000538

08001054 <release_eeprom_lock>:

void release_eeprom_lock(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af02      	add	r7, sp, #8
    EEPROM_Lock unlock = { .lock_value = 0, .timestamp = 0 };
 800105a:	2300      	movs	r3, #0
 800105c:	823b      	strh	r3, [r7, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    uint8_t txbuf[2 + sizeof(EEPROM_Lock)];
    txbuf[0] = LOCK_ADDRESS >> 8;
 8001062:	2300      	movs	r3, #0
 8001064:	713b      	strb	r3, [r7, #4]
    txbuf[1] = LOCK_ADDRESS & 0xFF;
 8001066:	2300      	movs	r3, #0
 8001068:	717b      	strb	r3, [r7, #5]
    memcpy(&txbuf[2], &unlock, sizeof(EEPROM_Lock));
 800106a:	f107 0110 	add.w	r1, r7, #16
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	3302      	adds	r3, #2
 8001072:	2208      	movs	r2, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f00b fd95 	bl	800cba4 <memcpy>

    HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, txbuf, sizeof(txbuf), 100);
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	230a      	movs	r3, #10
 8001082:	21a0      	movs	r1, #160	@ 0xa0
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <release_eeprom_lock+0x44>)
 8001086:	f004 fc19 	bl	80058bc <HAL_I2C_Master_Transmit>
    HAL_Delay(WRITE_DELAY_MS);
 800108a:	2005      	movs	r0, #5
 800108c:	f002 fc08 	bl	80038a0 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000538 	.word	0x20000538

0800109c <verify_write_success>:
    {
        release_eeprom_lock();
    }
}

static bool verify_write_success(uint16_t address, uint8_t* data, uint16_t size) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	@ 0x58
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80bb      	strh	r3, [r7, #4]
    uint8_t tx[2] = { address >> 8, address & 0xFF };
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t read_back[64];

    if (size > sizeof(read_back)) return false;
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	2b40      	cmp	r3, #64	@ 0x40
 80010c4:	d901      	bls.n	80010ca <verify_write_success+0x2e>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e028      	b.n	800111c <verify_write_success+0x80>

    if (HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, tx, 2, 100) != HAL_OK)
 80010ca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	21a0      	movs	r1, #160	@ 0xa0
 80010d6:	4813      	ldr	r0, [pc, #76]	@ (8001124 <verify_write_success+0x88>)
 80010d8:	f004 fbf0 	bl	80058bc <HAL_I2C_Master_Transmit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <verify_write_success+0x4a>
        return false;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e01a      	b.n	800111c <verify_write_success+0x80>

    if (HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, read_back, size, 100) != HAL_OK)
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	2164      	movs	r1, #100	@ 0x64
 80010ee:	9100      	str	r1, [sp, #0]
 80010f0:	21a0      	movs	r1, #160	@ 0xa0
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <verify_write_success+0x88>)
 80010f4:	f004 fcfa 	bl	8005aec <HAL_I2C_Master_Receive>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <verify_write_success+0x66>
        return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e00c      	b.n	800111c <verify_write_success+0x80>

    return (memcmp(data, read_back, size) == 0);
 8001102:	88ba      	ldrh	r2, [r7, #4]
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f00b fce6 	bl	800cadc <memcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3750      	adds	r7, #80	@ 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000538 	.word	0x20000538

08001128 <epspd_WriteTelemetry>:
        SoftwareDelay(1);
    }
    return status;
}

HAL_StatusTypeDef epspd_WriteTelemetry(I2C_HandleTypeDef *hi2c, EEPROM_TelemetryWithTimestamp *telemetry) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    if (!acquire_eeprom_lock(MCU_ID)) return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ff14 	bl	8000f60 <acquire_eeprom_lock>
 8001138:	4603      	mov	r3, r0
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <epspd_WriteTelemetry+0x20>
 8001144:	2301      	movs	r3, #1
 8001146:	e0b7      	b.n	80012b8 <epspd_WriteTelemetry+0x190>

    uint8_t buffer[20];
    buffer[0] = EEPROM_ADDR_MCU1_TELEMETRY >> 8;
 8001148:	2301      	movs	r3, #1
 800114a:	723b      	strb	r3, [r7, #8]
    buffer[1] = EEPROM_ADDR_MCU1_TELEMETRY & 0xFF;
 800114c:	2300      	movs	r3, #0
 800114e:	727b      	strb	r3, [r7, #9]
    buffer[2] = telemetry->telemetry.Bus12V >> 8;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b29b      	uxth	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	72bb      	strb	r3, [r7, #10]
    buffer[3] = telemetry->telemetry.Bus12V;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
    buffer[4] = telemetry->telemetry.Bus5V >> 8;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	885b      	ldrh	r3, [r3, #2]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	733b      	strb	r3, [r7, #12]
    buffer[5] = telemetry->telemetry.Bus5V;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	737b      	strb	r3, [r7, #13]
    buffer[6] = telemetry->telemetry.Bus3V3 >> 8;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73bb      	strb	r3, [r7, #14]
    buffer[7] = telemetry->telemetry.Bus3V3;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
    buffer[8] = telemetry->telemetry.subtick_us >> 24;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	0e1b      	lsrs	r3, r3, #24
 8001192:	b2db      	uxtb	r3, r3
 8001194:	743b      	strb	r3, [r7, #16]
    buffer[9] = telemetry->telemetry.subtick_us >> 16;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	b2db      	uxtb	r3, r3
 800119e:	747b      	strb	r3, [r7, #17]
    buffer[10] = telemetry->telemetry.subtick_us >> 8;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	74bb      	strb	r3, [r7, #18]
    buffer[11] = telemetry->telemetry.subtick_us;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	74fb      	strb	r3, [r7, #19]
    buffer[12] = telemetry->counter >> 56;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	0e0a      	lsrs	r2, r1, #24
 80011c2:	2300      	movs	r3, #0
 80011c4:	b2d3      	uxtb	r3, r2
 80011c6:	753b      	strb	r3, [r7, #20]
    buffer[13] = telemetry->counter >> 48;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	0c0a      	lsrs	r2, r1, #16
 80011d8:	2300      	movs	r3, #0
 80011da:	b2d3      	uxtb	r3, r2
 80011dc:	757b      	strb	r3, [r7, #21]
    buffer[14] = telemetry->counter >> 40;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0a0a      	lsrs	r2, r1, #8
 80011ee:	2300      	movs	r3, #0
 80011f0:	b2d3      	uxtb	r3, r2
 80011f2:	75bb      	strb	r3, [r7, #22]
    buffer[15] = telemetry->counter >> 32;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	000a      	movs	r2, r1
 8001204:	2300      	movs	r3, #0
 8001206:	b2d3      	uxtb	r3, r2
 8001208:	75fb      	strb	r3, [r7, #23]
    buffer[16] = telemetry->counter >> 24;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	0e02      	lsrs	r2, r0, #24
 800121a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800121e:	0e0b      	lsrs	r3, r1, #24
 8001220:	b2d3      	uxtb	r3, r2
 8001222:	763b      	strb	r3, [r7, #24]
    buffer[17] = telemetry->counter >> 16;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	0c02      	lsrs	r2, r0, #16
 8001234:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001238:	0c0b      	lsrs	r3, r1, #16
 800123a:	b2d3      	uxtb	r3, r2
 800123c:	767b      	strb	r3, [r7, #25]
    buffer[18] = telemetry->counter >> 8;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	0a02      	lsrs	r2, r0, #8
 800124e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001252:	0a0b      	lsrs	r3, r1, #8
 8001254:	b2d3      	uxtb	r3, r2
 8001256:	76bb      	strb	r3, [r7, #26]
    buffer[19] = telemetry->counter;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800125e:	b2d3      	uxtb	r3, r2
 8001260:	76fb      	strb	r3, [r7, #27]

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, epspd_I2C_ADDR_MEMORY << 1, buffer, 20, 100);
 8001262:	f107 0208 	add.w	r2, r7, #8
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2314      	movs	r3, #20
 800126c:	21a0      	movs	r1, #160	@ 0xa0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f004 fb24 	bl	80058bc <HAL_I2C_Master_Transmit>
 8001274:	4603      	mov	r3, r0
 8001276:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK) {
 8001278:	7ffb      	ldrb	r3, [r7, #31]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <epspd_WriteTelemetry+0x18a>
        SoftwareDelay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fe56 	bl	8000f30 <SoftwareDelay>

        if (!verify_write_success(EEPROM_ADDR_MCU1_TELEMETRY, &buffer[2], 18)) {
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	3302      	adds	r3, #2
 800128a:	2212      	movs	r2, #18
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001292:	f7ff ff03 	bl	800109c <verify_write_success>
 8001296:	4603      	mov	r3, r0
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <epspd_WriteTelemetry+0x18a>
            EPS_Log_Message(EPS_LOG_DEBUG, "EEPROM write verification failed");
 80012a2:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <epspd_WriteTelemetry+0x198>)
 80012a4:	2005      	movs	r0, #5
 80012a6:	f7ff fd7f 	bl	8000da8 <EPS_Log_Message>
            release_eeprom_lock();
 80012aa:	f7ff fed3 	bl	8001054 <release_eeprom_lock>
            Error_Handler();
 80012ae:	f001 fce5 	bl	8002c7c <Error_Handler>
        }
    }

    release_eeprom_lock();
 80012b2:	f7ff fecf 	bl	8001054 <release_eeprom_lock>
    return status;
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800d4ec 	.word	0x0800d4ec

080012c4 <EPS_LogFault>:
} FaultState;

static FaultState fault_states[sizeof(fault_config) / sizeof(FaultConfig)];
static uint8_t fault_log_index = 0;

void EPS_LogFault(I2C_HandleTypeDef *hi2c, const char *desc, uint8_t subsystem_id, uint8_t retry_count) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a2      	sub	sp, #136	@ 0x88
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	4613      	mov	r3, r2
 80012d8:	71bb      	strb	r3, [r7, #6]
    EEPROM_FaultLog log;
    memset(&log, 0, sizeof(log));
 80012da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012de:	2230      	movs	r2, #48	@ 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00b fc0a 	bl	800cafc <memset>
    log.subsystem_id = subsystem_id;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    log.retry_count = retry_count;
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    strncpy(log.description, desc, FAULT_DESC_LEN - 1);
 80012f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012f8:	330e      	adds	r3, #14
 80012fa:	221f      	movs	r2, #31
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	4618      	mov	r0, r3
 8001300:	f00b fc04 	bl	800cb0c <strncpy>
    GetSyncTimestamp(&log.counter, &log.subtick_us);
 8001304:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001308:	f103 0208 	add.w	r2, r3, #8
 800130c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fb8c 	bl	8001a30 <GetSyncTimestamp>

    uint16_t eeprom_addr = FAULT_LOG_START_ADDR + (fault_log_index * FAULT_LOG_SIZE);
 8001318:	4b20      	ldr	r3, [pc, #128]	@ (800139c <EPS_LogFault+0xd8>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	0052      	lsls	r2, r2, #1
 8001320:	4413      	add	r3, r2
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b29b      	uxth	r3, r3
 8001326:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800132a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t buffer[2 + FAULT_LOG_SIZE];
    buffer[0] = eeprom_addr >> 8;
 800132e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	753b      	strb	r3, [r7, #20]
    buffer[1] = eeprom_addr & 0xFF;
 800133a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800133e:	b2db      	uxtb	r3, r3
 8001340:	757b      	strb	r3, [r7, #21]
    memcpy(&buffer[2], &log, FAULT_LOG_SIZE);
 8001342:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	3302      	adds	r3, #2
 800134c:	2230      	movs	r2, #48	@ 0x30
 800134e:	4618      	mov	r0, r3
 8001350:	f00b fc28 	bl	800cba4 <memcpy>

    if (HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDR, buffer, sizeof(buffer), 100) == HAL_OK) {
 8001354:	f107 0214 	add.w	r2, r7, #20
 8001358:	2364      	movs	r3, #100	@ 0x64
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2332      	movs	r3, #50	@ 0x32
 800135e:	21a0      	movs	r1, #160	@ 0xa0
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f004 faab 	bl	80058bc <HAL_I2C_Master_Transmit>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d113      	bne.n	8001394 <EPS_LogFault+0xd0>
        SoftwareDelay(4);
 800136c:	2004      	movs	r0, #4
 800136e:	f7ff fddf 	bl	8000f30 <SoftwareDelay>
        fault_log_index = (fault_log_index + 1) % MAX_FAULT_LOGS;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <EPS_LogFault+0xd8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <EPS_LogFault+0xdc>)
 800137a:	fb83 1302 	smull	r1, r3, r3, r2
 800137e:	10d9      	asrs	r1, r3, #3
 8001380:	17d3      	asrs	r3, r2, #31
 8001382:	1ac9      	subs	r1, r1, r3
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	1ad1      	subs	r1, r2, r3
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	4b02      	ldr	r3, [pc, #8]	@ (800139c <EPS_LogFault+0xd8>)
 8001392:	701a      	strb	r2, [r3, #0]
    }
}
 8001394:	bf00      	nop
 8001396:	3780      	adds	r7, #128	@ 0x80
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000029c 	.word	0x2000029c
 80013a0:	66666667 	.word	0x66666667

080013a4 <Fault_PollAndHandle>:

void Fault_PollAndHandle(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart_log) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    uint32_t now = HAL_GetTick();
 80013ae:	f002 fa6b 	bl	8003888 <HAL_GetTick>
 80013b2:	6538      	str	r0, [r7, #80]	@ 0x50

    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80013ba:	e168      	b.n	800168e <Fault_PollAndHandle+0x2ea>
        GPIO_PinState state = HAL_GPIO_ReadPin(fault_config[i].fault_port, fault_config[i].fault_pin);
 80013bc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80013c0:	49b8      	ldr	r1, [pc, #736]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80013d2:	49b4      	ldr	r1, [pc, #720]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3304      	adds	r3, #4
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f004 f97c 	bl	80056e0 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 80013ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d153      	bne.n	800149e <Fault_PollAndHandle+0xfa>
 80013f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013fa:	4aab      	ldr	r2, [pc, #684]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80013fc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001400:	f083 0301 	eor.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d049      	beq.n	800149e <Fault_PollAndHandle+0xfa>
            // Fault detected
            fault_states[i].is_active = true;
 800140a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800140e:	4aa6      	ldr	r2, [pc, #664]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001410:	2101      	movs	r1, #1
 8001412:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            fault_states[i].retry_count = 0;
 8001416:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800141a:	4aa3      	ldr	r2, [pc, #652]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 8001424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001428:	4a9f      	ldr	r2, [pc, #636]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001430:	605a      	str	r2, [r3, #4]
            EPS_LogFault(hi2c, fault_config[i].description, fault_config[i].subsystem_id, 0);
 8001432:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001436:	499b      	ldr	r1, [pc, #620]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3310      	adds	r3, #16
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800144a:	4896      	ldr	r0, [pc, #600]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4403      	add	r3, r0
 8001456:	3314      	adds	r3, #20
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff31 	bl	80012c4 <EPS_LogFault>

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Detected\n", fault_config[i].description);
 8001462:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001466:	498f      	ldr	r1, [pc, #572]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	3310      	adds	r3, #16
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f107 000c 	add.w	r0, r7, #12
 800147a:	4a8c      	ldr	r2, [pc, #560]	@ (80016ac <Fault_PollAndHandle+0x308>)
 800147c:	2140      	movs	r1, #64	@ 0x40
 800147e:	f00b fabb 	bl	800c9f8 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe feb2 	bl	80001f0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	2364      	movs	r3, #100	@ 0x64
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f007 f9b0 	bl	80087fc <HAL_UART_Transmit>
        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 800149c:	e0f2      	b.n	8001684 <Fault_PollAndHandle+0x2e0>

        } else if (state == GPIO_PIN_SET && fault_states[i].is_active) {
 800149e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d135      	bne.n	8001512 <Fault_PollAndHandle+0x16e>
 80014a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014aa:	4a7f      	ldr	r2, [pc, #508]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80014ac:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02e      	beq.n	8001512 <Fault_PollAndHandle+0x16e>
            if (now - fault_states[i].last_fault_time > 5) {
 80014b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014b8:	4a7b      	ldr	r2, [pc, #492]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	f240 80dd 	bls.w	8001684 <Fault_PollAndHandle+0x2e0>
                fault_states[i].is_active = false;
 80014ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014ce:	4a76      	ldr	r2, [pc, #472]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

                char msg[64];
                snprintf(msg, sizeof(msg), "%s Fault Cleared\n", fault_config[i].description);
 80014d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80014da:	4972      	ldr	r1, [pc, #456]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3310      	adds	r3, #16
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f107 000c 	add.w	r0, r7, #12
 80014ee:	4a70      	ldr	r2, [pc, #448]	@ (80016b0 <Fault_PollAndHandle+0x30c>)
 80014f0:	2140      	movs	r1, #64	@ 0x40
 80014f2:	f00b fa81 	bl	800c9f8 <sniprintf>
                HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fe78 	bl	80001f0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f007 f976 	bl	80087fc <HAL_UART_Transmit>
            if (now - fault_states[i].last_fault_time > 5) {
 8001510:	e0b8      	b.n	8001684 <Fault_PollAndHandle+0x2e0>
            }

        } else if (fault_states[i].is_active && fault_states[i].retry_count < 5 && fault_config[i].en_port) {
 8001512:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001516:	4a64      	ldr	r2, [pc, #400]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001518:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d05b      	beq.n	80015d8 <Fault_PollAndHandle+0x234>
 8001520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001524:	4a60      	ldr	r2, [pc, #384]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d853      	bhi.n	80015d8 <Fault_PollAndHandle+0x234>
 8001530:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001534:	495b      	ldr	r1, [pc, #364]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3308      	adds	r3, #8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d047      	beq.n	80015d8 <Fault_PollAndHandle+0x234>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 8001548:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800154c:	4955      	ldr	r1, [pc, #340]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3308      	adds	r3, #8
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001560:	4950      	ldr	r1, [pc, #320]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	330c      	adds	r3, #12
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	f004 f8cc 	bl	8005710 <HAL_GPIO_WritePin>
            SoftwareDelay(100);
 8001578:	2064      	movs	r0, #100	@ 0x64
 800157a:	f7ff fcd9 	bl	8000f30 <SoftwareDelay>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_SET);
 800157e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001582:	4948      	ldr	r1, [pc, #288]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	3308      	adds	r3, #8
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001596:	4943      	ldr	r1, [pc, #268]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	330c      	adds	r3, #12
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4619      	mov	r1, r3
 80015aa:	f004 f8b1 	bl	8005710 <HAL_GPIO_WritePin>
            fault_states[i].retry_count++;
 80015ae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80015b2:	493d      	ldr	r1, [pc, #244]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015b4:	00d3      	lsls	r3, r2, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	493a      	ldr	r1, [pc, #232]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015c0:	00d3      	lsls	r3, r2, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	4602      	mov	r2, r0
 80015c6:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 80015c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80015cc:	4a36      	ldr	r2, [pc, #216]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	e055      	b.n	8001684 <Fault_PollAndHandle+0x2e0>

        } else if (fault_states[i].is_active && fault_states[i].retry_count >= 5 && fault_config[i].en_port) {
 80015d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80015dc:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015de:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04e      	beq.n	8001684 <Fault_PollAndHandle+0x2e0>
 80015e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80015ea:	4a2f      	ldr	r2, [pc, #188]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d946      	bls.n	8001684 <Fault_PollAndHandle+0x2e0>
 80015f6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80015fa:	492a      	ldr	r1, [pc, #168]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3308      	adds	r3, #8
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03a      	beq.n	8001684 <Fault_PollAndHandle+0x2e0>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 800160e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001612:	4924      	ldr	r1, [pc, #144]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3308      	adds	r3, #8
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001626:	491f      	ldr	r1, [pc, #124]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	330c      	adds	r3, #12
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	f004 f869 	bl	8005710 <HAL_GPIO_WritePin>
            fault_states[i].is_active = false;
 800163e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001642:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001644:	2100      	movs	r1, #0
 8001646:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Persistent: Disabled\n", fault_config[i].description);
 800164a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800164e:	4915      	ldr	r1, [pc, #84]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3310      	adds	r3, #16
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f107 000c 	add.w	r0, r7, #12
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <Fault_PollAndHandle+0x310>)
 8001664:	2140      	movs	r1, #64	@ 0x40
 8001666:	f00b f9c7 	bl	800c9f8 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fdbe 	bl	80001f0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 010c 	add.w	r1, r7, #12
 800167c:	2364      	movs	r3, #100	@ 0x64
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f007 f8bc 	bl	80087fc <HAL_UART_Transmit>
    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 8001684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001688:	3301      	adds	r3, #1
 800168a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800168e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001692:	2b0c      	cmp	r3, #12
 8001694:	f67f ae92 	bls.w	80013bc <Fault_PollAndHandle+0x18>
        }
    }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3758      	adds	r7, #88	@ 0x58
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000001c 	.word	0x2000001c
 80016a8:	20000234 	.word	0x20000234
 80016ac:	0800d564 	.word	0x0800d564
 80016b0:	0800d578 	.word	0x0800d578
 80016b4:	0800d58c 	.word	0x0800d58c

080016b8 <EPS_I2C_CRC8>:
//#define I2C_SLAVE_ADDR_BMS        (0x08 << 1)
#define I2C_TIMEOUT_MS            100
#define MAX_FRAME_SIZE            256
#define CRC_SIZE                  1

uint8_t EPS_I2C_CRC8(const uint8_t *data, uint8_t len) {
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
 80016cc:	e023      	b.n	8001716 <EPS_I2C_CRC8+0x5e>
        crc ^= data[i];
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	4053      	eors	r3, r2
 80016da:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	737b      	strb	r3, [r7, #13]
 80016e0:	e013      	b.n	800170a <EPS_I2C_CRC8+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da08      	bge.n	80016fc <EPS_I2C_CRC8+0x44>
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e002      	b.n	8001702 <EPS_I2C_CRC8+0x4a>
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	3301      	adds	r3, #1
 8001708:	737b      	strb	r3, [r7, #13]
 800170a:	7b7b      	ldrb	r3, [r7, #13]
 800170c:	2b07      	cmp	r3, #7
 800170e:	d9e8      	bls.n	80016e2 <EPS_I2C_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	3301      	adds	r3, #1
 8001714:	73bb      	strb	r3, [r7, #14]
 8001716:	7bba      	ldrb	r2, [r7, #14]
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3d7      	bcc.n	80016ce <EPS_I2C_CRC8+0x16>
        }
    }
    return crc;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <EPS_I2C_SendCommand>:
HAL_StatusTypeDef EPS_I2C_SendCommand(I2C_HandleTypeDef *hi2c,
                                      uint8_t cmd,
                                      uint8_t *tx_data, uint8_t tx_len,
                                      uint8_t *rx_data, uint8_t rx_len,
                                      uint16_t i2c_slave_addr)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b0cb      	sub	sp, #300	@ 0x12c
 8001730:	af02      	add	r7, sp, #8
 8001732:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001736:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800173a:	6020      	str	r0, [r4, #0]
 800173c:	4608      	mov	r0, r1
 800173e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001742:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8001746:	600a      	str	r2, [r1, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800174e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001752:	4602      	mov	r2, r0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800175a:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 800175e:	460a      	mov	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
    uint8_t frame[MAX_FRAME_SIZE];
    uint8_t pos = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    frame[pos++] = cmd;
 8001768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8001772:	4619      	mov	r1, r3
 8001774:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001778:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800177c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001780:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	545a      	strb	r2, [r3, r1]
    frame[pos++] = tx_len;
 8001788:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8001792:	4619      	mov	r1, r3
 8001794:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800179c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80017a0:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	545a      	strb	r2, [r3, r1]

    if (tx_data && tx_len > 0) {
 80017a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d021      	beq.n	80017fa <EPS_I2C_SendCommand+0xce>
 80017b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ba:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01a      	beq.n	80017fa <EPS_I2C_SendCommand+0xce>
        memcpy(&frame[pos], tx_data, tx_len);
 80017c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80017c8:	f107 0214 	add.w	r2, r7, #20
 80017cc:	18d0      	adds	r0, r2, r3
 80017ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017d2:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	f00b f9df 	bl	800cba4 <memcpy>
        pos += tx_len;
 80017e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ea:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80017ee:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    uint8_t *crc_start = &frame[0]; // Include CMD and LEN in CRC
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t crc = EPS_I2C_CRC8(crc_start, pos);
 8001802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001806:	4619      	mov	r1, r3
 8001808:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800180c:	f7ff ff54 	bl	80016b8 <EPS_I2C_CRC8>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    frame[pos++] = crc;
 8001816:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8001820:	4619      	mov	r1, r3
 8001822:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001826:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800182a:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800182e:	545a      	strb	r2, [r3, r1]

    return HAL_I2C_Master_Transmit(hi2c, i2c_slave_addr, frame, pos, I2C_TIMEOUT_MS);
 8001830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001834:	b29b      	uxth	r3, r3
 8001836:	f107 0214 	add.w	r2, r7, #20
 800183a:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800183e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001842:	f5a0 708a 	sub.w	r0, r0, #276	@ 0x114
 8001846:	2464      	movs	r4, #100	@ 0x64
 8001848:	9400      	str	r4, [sp, #0]
 800184a:	6800      	ldr	r0, [r0, #0]
 800184c:	f004 f836 	bl	80058bc <HAL_I2C_Master_Transmit>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <EPS_I2C_SendSyncCounter>:


HAL_StatusTypeDef EPS_I2C_SendSyncCounter(I2C_HandleTypeDef *hi2c,
                                          uint64_t sync_counter,
                                          uint16_t i2c_slave_addr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af04      	add	r7, sp, #16
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t payload[8];
    payload[0] = (sync_counter >> 56) & 0xFF;
 8001868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	0e0a      	lsrs	r2, r1, #24
 8001876:	2300      	movs	r3, #0
 8001878:	b2d3      	uxtb	r3, r2
 800187a:	743b      	strb	r3, [r7, #16]
    payload[1] = (sync_counter >> 48) & 0xFF;
 800187c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	0c0a      	lsrs	r2, r1, #16
 800188a:	2300      	movs	r3, #0
 800188c:	b2d3      	uxtb	r3, r2
 800188e:	747b      	strb	r3, [r7, #17]
    payload[2] = (sync_counter >> 40) & 0xFF;
 8001890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	0a0a      	lsrs	r2, r1, #8
 800189e:	2300      	movs	r3, #0
 80018a0:	b2d3      	uxtb	r3, r2
 80018a2:	74bb      	strb	r3, [r7, #18]
    payload[3] = (sync_counter >> 32) & 0xFF;
 80018a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	000a      	movs	r2, r1
 80018b2:	2300      	movs	r3, #0
 80018b4:	b2d3      	uxtb	r3, r2
 80018b6:	74fb      	strb	r3, [r7, #19]
    payload[4] = (sync_counter >> 24) & 0xFF;
 80018b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	0e02      	lsrs	r2, r0, #24
 80018c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018ca:	0e0b      	lsrs	r3, r1, #24
 80018cc:	b2d3      	uxtb	r3, r2
 80018ce:	753b      	strb	r3, [r7, #20]
    payload[5] = (sync_counter >> 16) & 0xFF;
 80018d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	0c02      	lsrs	r2, r0, #16
 80018de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018e2:	0c0b      	lsrs	r3, r1, #16
 80018e4:	b2d3      	uxtb	r3, r2
 80018e6:	757b      	strb	r3, [r7, #21]
    payload[6] = (sync_counter >> 8)  & 0xFF;
 80018e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	0a02      	lsrs	r2, r0, #8
 80018f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018fa:	0a0b      	lsrs	r3, r1, #8
 80018fc:	b2d3      	uxtb	r3, r2
 80018fe:	75bb      	strb	r3, [r7, #22]
    payload[7] =  sync_counter        & 0xFF;
 8001900:	783b      	ldrb	r3, [r7, #0]
 8001902:	75fb      	strb	r3, [r7, #23]

    return EPS_I2C_SendCommand(hi2c, CMD_SYNC_COUNTER,
 8001904:	f107 0210 	add.w	r2, r7, #16
 8001908:	8c3b      	ldrh	r3, [r7, #32]
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2308      	movs	r3, #8
 8001916:	2101      	movs	r1, #1
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff ff07 	bl	800172c <EPS_I2C_SendCommand>
 800191e:	4603      	mov	r3, r0
                               payload, sizeof(payload),
                               NULL, 0, i2c_slave_addr);
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <SSP_GetRxBuffer>:
// Output:
//   - Returns a pointer to a uint8_t array, the appropriate receive buffer (rx_buffer1 or rx_buffer2)
// Significance:
//   - A helper function that selects the correct receive buffer based on the UART interface,
//     used to manage DMA reception of SSP frames. It’s marked "inline" for faster execution.
static inline uint8_t* SSP_GetRxBuffer(UART_HandleTypeDef *huart) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    // Check if the UART handle matches ssp_uart1; if so, return rx_buffer1, else return rx_buffer2
    return (huart == ssp_uart1) ? rx_buffer1 : rx_buffer2;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <SSP_GetRxBuffer+0x24>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d101      	bne.n	800193e <SSP_GetRxBuffer+0x16>
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <SSP_GetRxBuffer+0x28>)
 800193c:	e000      	b.n	8001940 <SSP_GetRxBuffer+0x18>
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SSP_GetRxBuffer+0x2c>)
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	200002a0 	.word	0x200002a0
 8001950:	200002a8 	.word	0x200002a8
 8001954:	200003a8 	.word	0x200003a8

08001958 <HAL_UART_TxCpltCallback>:
// Output:
//   - None (void), resets the RS485 driver enable pin
// Significance:
//   - Called when a UART DMA transmission completes, resets the RS485 driver enable
//     pin to allow reception, critical for RS485 communication (Reference Manual, Section 36.8).
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces (UART2 or UART3)
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_UART_TxCpltCallback+0x48>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d004      	beq.n	8001974 <HAL_UART_TxCpltCallback+0x1c>
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_UART_TxCpltCallback+0x4c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d111      	bne.n	8001998 <HAL_UART_TxCpltCallback+0x40>
        // Select the correct driver enable pin based on UART
        GPIO_PinState de_pin = (huart->Instance == USART2) ? RS4852_DE_Pin : RS4851_DE_Pin;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_UART_TxCpltCallback+0x50>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_UART_TxCpltCallback+0x2a>
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_UART_TxCpltCallback+0x2c>
 8001982:	2310      	movs	r3, #16
 8001984:	73fb      	strb	r3, [r7, #15]
        // Both pins are on GPIOD
        GPIO_TypeDef *de_port = (huart->Instance == USART2) ? GPIOD : GPIOD;
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_UART_TxCpltCallback+0x54>)
 8001988:	60bb      	str	r3, [r7, #8]
        // Reset the driver enable pin to disable RS485 transmission
        HAL_GPIO_WritePin(de_port, de_pin, GPIO_PIN_RESET);
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	b29b      	uxth	r3, r3
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	68b8      	ldr	r0, [r7, #8]
 8001994:	f003 febc 	bl	8005710 <HAL_GPIO_WritePin>
    }
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200002a0 	.word	0x200002a0
 80019a4:	200002a4 	.word	0x200002a4
 80019a8:	40004400 	.word	0x40004400
 80019ac:	48000c00 	.word	0x48000c00

080019b0 <HAL_UART_ErrorCallback>:
// Output:
//   - None (void), handles UART errors by restarting DMA reception
// Significance:
//   - Handles UART errors (e.g., framing errors) by incrementing an error counter and
//     restarting DMA reception to recover, ensuring robust communication.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_UART_ErrorCallback+0x44>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d004      	beq.n	80019cc <HAL_UART_ErrorCallback+0x1c>
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_UART_ErrorCallback+0x48>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d10e      	bne.n	80019ea <HAL_UART_ErrorCallback+0x3a>
        // Increment the framing error counter
        framing_errors++;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_UART_ErrorCallback+0x4c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_UART_ErrorCallback+0x4c>)
 80019d4:	6013      	str	r3, [r2, #0]

        // Get the correct receive buffer for this UART
        uint8_t *rx_buffer = SSP_GetRxBuffer(huart);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa6 	bl	8001928 <SSP_GetRxBuffer>
 80019dc:	60f8      	str	r0, [r7, #12]
        // Restart DMA reception to recover from the error
        HAL_UART_Receive_DMA(huart, rx_buffer, SSP_MAX_DATA_LEN + SSP_FRAME_OVERHEAD);
 80019de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f006 ff93 	bl	8008910 <HAL_UART_Receive_DMA>
    }
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002a0 	.word	0x200002a0
 80019f8:	200002a4 	.word	0x200002a4
 80019fc:	200004a8 	.word	0x200004a8

08001a00 <GetSyncCounter>:
    __enable_irq();
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset TIM2
}

// Get current sync counter value with race condition protection
uint64_t GetSyncCounter(void) {
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a06:	b672      	cpsid	i
}
 8001a08:	bf00      	nop
    uint64_t val;
    __disable_irq();
    val = sync_counter.sync_counter;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <GetSyncCounter+0x2c>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a14:	b662      	cpsie	i
}
 8001a16:	bf00      	nop
    __enable_irq();
    return val;
 8001a18:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200004b0 	.word	0x200004b0

08001a30 <GetSyncTimestamp>:
uint32_t GetSubtickUs(void) {
    return __HAL_TIM_GET_COUNTER(&htim2); // Current TIM2 count since last pulse
}

// Get composite timestamp with race condition protection
void GetSyncTimestamp(uint64_t *counter, uint32_t *subtick) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3a:	b672      	cpsid	i
}
 8001a3c:	bf00      	nop
    __disable_irq();
    *counter = sync_counter.sync_counter;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <GetSyncTimestamp+0x34>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	e9c1 2300 	strd	r2, r3, [r1]
    *subtick = __HAL_TIM_GET_COUNTER(&htim2);
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <GetSyncTimestamp+0x38>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a54:	b662      	cpsie	i
}
 8001a56:	bf00      	nop
    __enable_irq();
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	200004b0 	.word	0x200004b0
 8001a68:	20000730 	.word	0x20000730

08001a6c <SelectMultiplexerChannel>:
//   - None (void), sets GPIO pins to select the multiplexer channel
// Significance:
//   - Configures the multiplexer (controlled by S0, S1, S2 pins) to select a specific
//     input channel for ADC measurements (e.g., solar array voltages or currents).
static void SelectMultiplexerChannel(uint8_t channel)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
    // Set S0 pin (bit 0 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (channel & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	480f      	ldr	r0, [pc, #60]	@ (8001ac0 <SelectMultiplexerChannel+0x54>)
 8001a84:	f003 fe44 	bl	8005710 <HAL_GPIO_WritePin>
    // Set S1 pin (bit 1 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (channel & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	105b      	asrs	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a9a:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <SelectMultiplexerChannel+0x54>)
 8001a9c:	f003 fe38 	bl	8005710 <HAL_GPIO_WritePin>
    // Set S2 pin (bit 2 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (channel & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	109b      	asrs	r3, r3, #2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <SelectMultiplexerChannel+0x54>)
 8001ab4:	f003 fe2c 	bl	8005710 <HAL_GPIO_WritePin>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <EPSPD_UpdateTelemetryAndParameters>:
//   - None (void), updates TelemetryData and Parameters, saves to EEPROM
// Significance:
//   - Processes raw ADC values to update telemetry (voltages, currents) and saves
//     them to EEPROM via I2C, critical for monitoring power distribution.
void EPSPD_UpdateTelemetryAndParameters(I2C_HandleTypeDef *hi2c, uint16_t *adc_values)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b090      	sub	sp, #64	@ 0x40
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    // Declare variables for sync counter and subtick
    uint64_t counter;
    uint32_t subtick;
    // Get the sync counter and subtick timestamp from the BMS (via sync_counter.h)
    GetSyncTimestamp(&counter, &subtick);
 8001ad2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001ad6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ffa7 	bl	8001a30 <GetSyncTimestamp>
    // Store subtick in telemetry (microseconds)
    TelemetryData.subtick_us = subtick;
 8001ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae4:	4ad2      	ldr	r2, [pc, #840]	@ (8001e30 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001ae6:	6093      	str	r3, [r2, #8]

    // Update 12V bus voltage (mV) from ADC channel 13
    TelemetryData.Bus12V = (uint16_t)(adc_values[13] * VOLTAGE_PER_COUNT);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	331a      	adds	r3, #26
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4bc9      	ldr	r3, [pc, #804]	@ (8001e30 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001b0a:	801a      	strh	r2, [r3, #0]
    // Update 5V bus voltage (mV) from ADC channel 1
    TelemetryData.Bus5V = (uint16_t)(adc_values[1] * VOLTAGE_PER_COUNT);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b26:	ee17 3a90 	vmov	r3, s15
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4bc0      	ldr	r3, [pc, #768]	@ (8001e30 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001b2e:	805a      	strh	r2, [r3, #2]
    // Update 3.3V bus voltage (mV) from ADC channel 10
    TelemetryData.Bus3V3 = (uint16_t)(adc_values[10] * VOLTAGE_PER_COUNT);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3314      	adds	r3, #20
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3e:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4a:	ee17 3a90 	vmov	r3, s15
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	4bb7      	ldr	r3, [pc, #732]	@ (8001e30 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001b52:	809a      	strh	r2, [r3, #4]

    // Select multiplexer channel 0 for solar array 1 current
    SelectMultiplexerChannel(0);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff ff89 	bl	8001a6c <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff f9e8 	bl	8000f30 <SoftwareDelay>

    // Update solar array 1 current (mA) from ADC channel 4
    Parameters[6].Value = (uint16_t)(adc_values[4] * CURRENT_SCALING_FACTOR);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3308      	adds	r3, #8
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcec 	bl	8000544 <__aeabi_i2d>
 8001b6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001e10 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fd51 	bl	8000618 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ff5d 	bl	8000a3c <__aeabi_d2uiz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4bac      	ldr	r3, [pc, #688]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001b88:	835a      	strh	r2, [r3, #26]

    // Select multiplexer channel 1 for solar array 3 voltage
    SelectMultiplexerChannel(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff ff6e 	bl	8001a6c <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff f9cd 	bl	8000f30 <SoftwareDelay>
    // Update solar array 3 voltage (mV) from ADC channel 4
    Parameters[24].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3308      	adds	r3, #8
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fcd1 	bl	8000544 <__aeabi_i2d>
 8001ba2:	a39d      	add	r3, pc, #628	@ (adr r3, 8001e18 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fd36 	bl	8000618 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7fe ff42 	bl	8000a3c <__aeabi_d2uiz>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b9e      	ldr	r3, [pc, #632]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

    // Select multiplexer channel 2 for solar array 2 voltage
    SelectMultiplexerChannel(2);
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7ff ff52 	bl	8001a6c <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff f9b1 	bl	8000f30 <SoftwareDelay>
    // Update solar array 2 voltage (mV) from ADC channel 4
    Parameters[23].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fcb5 	bl	8000544 <__aeabi_i2d>
 8001bda:	a38f      	add	r3, pc, #572	@ (adr r3, 8001e18 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fd1a 	bl	8000618 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7fe ff26 	bl	8000a3c <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b90      	ldr	r3, [pc, #576]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    // Select multiplexer channel 3 for solar array 1 voltage
    SelectMultiplexerChannel(3);
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	f7ff ff36 	bl	8001a6c <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff f995 	bl	8000f30 <SoftwareDelay>
    // Update solar array 1 voltage (mV) from ADC channel 4
    Parameters[22].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3308      	adds	r3, #8
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc99 	bl	8000544 <__aeabi_i2d>
 8001c12:	a381      	add	r3, pc, #516	@ (adr r3, 8001e18 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fcfe 	bl	8000618 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ff0a 	bl	8000a3c <__aeabi_d2uiz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b82      	ldr	r3, [pc, #520]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    // Calculate current for RS 5V rail (mA) from ADC channel 0
    float v_imon = adc_values[0] * VOLTAGE_PER_COUNT;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c46:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[19].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001c4a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c4c:	f7fe fc8c 	bl	8000568 <__aeabi_f2d>
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	4b79      	ldr	r3, [pc, #484]	@ (8001e3c <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001c56:	f7fe fe09 	bl	800086c <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	a36f      	add	r3, pc, #444	@ (adr r3, 8001e20 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fcd6 	bl	8000618 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe fee2 	bl	8000a3c <__aeabi_d2uiz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001c7e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

    // Calculate current for PL 5V rail (mA) from ADC channel 1
    v_imon = adc_values[1] * VOLTAGE_PER_COUNT;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3302      	adds	r3, #2
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[18].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001c9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c9e:	f7fe fc63 	bl	8000568 <__aeabi_f2d>
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b65      	ldr	r3, [pc, #404]	@ (8001e3c <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001ca8:	f7fe fde0 	bl	800086c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	a35a      	add	r3, pc, #360	@ (adr r3, 8001e20 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fcad 	bl	8000618 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe feb9 	bl	8000a3c <__aeabi_d2uiz>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001cd0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    // Calculate current for CCU 5V rail (mA) from ADC channel 2
    v_imon = adc_values[2] * VOLTAGE_PER_COUNT;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce2:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[17].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001cee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cf0:	f7fe fc3a 	bl	8000568 <__aeabi_f2d>
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001cfa:	f7fe fdb7 	bl	800086c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	a346      	add	r3, pc, #280	@ (adr r3, 8001e20 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc84 	bl	8000618 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe fe90 	bl	8000a3c <__aeabi_d2uiz>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    // Calculate current for GPS (mA) from ADC channel 3
    v_imon = adc_values[3] * VOLTAGE_PER_COUNT;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3306      	adds	r3, #6
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[12].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001d40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d42:	f7fe fc11 	bl	8000568 <__aeabi_f2d>
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001d4c:	f7fe fd8e 	bl	800086c <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	a331      	add	r3, pc, #196	@ (adr r3, 8001e20 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fc5b 	bl	8000618 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fe67 	bl	8000a3c <__aeabi_d2uiz>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001d74:	865a      	strh	r2, [r3, #50]	@ 0x32

    // Update solar array 2 current (mA) from ADC channel 5
    Parameters[7].Value = (uint16_t)(adc_values[5] * CURRENT_SCALING_FACTOR);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	330a      	adds	r3, #10
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbe1 	bl	8000544 <__aeabi_i2d>
 8001d82:	a323      	add	r3, pc, #140	@ (adr r3, 8001e10 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fc46 	bl	8000618 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe fe52 	bl	8000a3c <__aeabi_d2uiz>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001d9e:	83da      	strh	r2, [r3, #30]

    // Update solar array 3 current (mA) from ADC channel 6
    Parameters[8].Value = (uint16_t)(adc_values[6] * CURRENT_SCALING_FACTOR);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	330c      	adds	r3, #12
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbcc 	bl	8000544 <__aeabi_i2d>
 8001dac:	a318      	add	r3, pc, #96	@ (adr r3, 8001e10 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fc31 	bl	8000618 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fe3d 	bl	8000a3c <__aeabi_d2uiz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001dc8:	845a      	strh	r2, [r3, #34]	@ 0x22

    // Update XB subsystem current (mA) from ADC channel 7
    Parameters[9].Value = (uint16_t)(adc_values[7] * CURRENT_PER_COUNT);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	330e      	adds	r3, #14
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbb7 	bl	8000544 <__aeabi_i2d>
 8001dd6:	a314      	add	r3, pc, #80	@ (adr r3, 8001e28 <EPSPD_UpdateTelemetryAndParameters+0x360>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fc1c 	bl	8000618 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fe28 	bl	8000a3c <__aeabi_d2uiz>
 8001dec:	4603      	mov	r3, r0
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    // Update XB 12V current (mA) from ADC channel 7
    Parameters[21].Value = (uint16_t)((adc_values[7] * VOLTAGE_PER_COUNT / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	330e      	adds	r3, #14
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001e34 <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0a:	e019      	b.n	8001e40 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001e0c:	f3af 8000 	nop.w
 8001e10:	f38c5437 	.word	0xf38c5437
 8001e14:	3fc4a137 	.word	0x3fc4a137
 8001e18:	4d163348 	.word	0x4d163348
 8001e1c:	40228767 	.word	0x40228767
 8001e20:	c94fe0ff 	.word	0xc94fe0ff
 8001e24:	40a9aaa5 	.word	0x40a9aaa5
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40201d00 	.word	0x40201d00
 8001e30:	200004c0 	.word	0x200004c0
 8001e34:	3f4e4000 	.word	0x3f4e4000
 8001e38:	20000154 	.word	0x20000154
 8001e3c:	408f4000 	.word	0x408f4000
 8001e40:	ee17 0a90 	vmov	r0, s15
 8001e44:	f7fe fb90 	bl	8000568 <__aeabi_f2d>
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4ba4      	ldr	r3, [pc, #656]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001e4e:	f7fe fd0d 	bl	800086c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	a39d      	add	r3, pc, #628	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbda 	bl	8000618 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fde6 	bl	8000a3c <__aeabi_d2uiz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b9b      	ldr	r3, [pc, #620]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001e76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    // Calculate current for ADCS 5V rail (mA) from ADC channel 8
    v_imon = adc_values[8] * VOLTAGE_PER_COUNT;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80020e8 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e90:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[16].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001e94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e96:	f7fe fb67 	bl	8000568 <__aeabi_f2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b90      	ldr	r3, [pc, #576]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001ea0:	f7fe fce4 	bl	800086c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	a388      	add	r3, pc, #544	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe fbb1 	bl	8000618 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fdbd 	bl	8000a3c <__aeabi_d2uiz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b87      	ldr	r3, [pc, #540]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001ec8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Update CCU subsystem current (mA) from ADC channel 9
    Parameters[10].Value = (uint16_t)(adc_values[9] * CURRENT_PER_COUNT);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3312      	adds	r3, #18
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb36 	bl	8000544 <__aeabi_i2d>
 8001ed8:	a37f      	add	r3, pc, #508	@ (adr r3, 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fb9b 	bl	8000618 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fda7 	bl	8000a3c <__aeabi_d2uiz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    // Calculate current for 3.3V bus (mA) from ADC channel 10
    v_imon = adc_values[10] * VOLTAGE_PER_COUNT;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	3314      	adds	r3, #20
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f04:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80020e8 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[5].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001f10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f12:	f7fe fb29 	bl	8000568 <__aeabi_f2d>
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b71      	ldr	r3, [pc, #452]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001f1c:	f7fe fca6 	bl	800086c <__aeabi_ddiv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	a369      	add	r3, pc, #420	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fb73 	bl	8000618 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fd7f 	bl	8000a3c <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b68      	ldr	r3, [pc, #416]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001f44:	82da      	strh	r2, [r3, #22]

    // Update ADCS subsystem current (mA) from ADC channel 11
    Parameters[11].Value = (uint16_t)(adc_values[11] * CURRENT_PER_COUNT);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	3316      	adds	r3, #22
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe faf9 	bl	8000544 <__aeabi_i2d>
 8001f52:	a361      	add	r3, pc, #388	@ (adr r3, 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb5e 	bl	8000618 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fd6a 	bl	8000a3c <__aeabi_d2uiz>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b5d      	ldr	r3, [pc, #372]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Update payload current (mA) from ADC channel 12
    Parameters[13].Value = (uint16_t)(adc_values[12] * CURRENT_PER_COUNT);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	3318      	adds	r3, #24
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fae4 	bl	8000544 <__aeabi_i2d>
 8001f7c:	a356      	add	r3, pc, #344	@ (adr r3, 80020d8 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb49 	bl	8000618 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fd55 	bl	8000a3c <__aeabi_d2uiz>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001f98:	86da      	strh	r2, [r3, #54]	@ 0x36

    // Calculate current for ADCS 12V rail (mA) from ADC channel 13
    v_imon = adc_values[13] * VOLTAGE_PER_COUNT;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	331a      	adds	r3, #26
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80020e8 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[20].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001fb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001fb6:	f7fe fad7 	bl	8000568 <__aeabi_f2d>
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b48      	ldr	r3, [pc, #288]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001fc0:	f7fe fc54 	bl	800086c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	a340      	add	r3, pc, #256	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fb21 	bl	8000618 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7fe fd2d 	bl	8000a3c <__aeabi_d2uiz>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    // Calculate current for UHF subsystem (mA) from ADC channel 14
    v_imon = adc_values[14] * VOLTAGE_PER_COUNT;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	331c      	adds	r3, #28
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80020e8 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002002:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[14].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002006:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002008:	f7fe faae 	bl	8000568 <__aeabi_f2d>
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002012:	f7fe fc2b 	bl	800086c <__aeabi_ddiv>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	a32c      	add	r3, pc, #176	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe faf8 	bl	8000618 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fd04 	bl	8000a3c <__aeabi_d2uiz>
 8002034:	4603      	mov	r3, r0
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 800203a:	875a      	strh	r2, [r3, #58]	@ 0x3a

    // Calculate current for OBC subsystem (mA) from ADC channel 15
    v_imon = adc_values[15] * VOLTAGE_PER_COUNT;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	331e      	adds	r3, #30
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80020e8 <EPSPD_UpdateTelemetryAndParameters+0x620>
 800204e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002052:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[15].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002056:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002058:	f7fe fa86 	bl	8000568 <__aeabi_f2d>
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002062:	f7fe fc03 	bl	800086c <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	a318      	add	r3, pc, #96	@ (adr r3, 80020d0 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fad0 	bl	8000618 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fcdc 	bl	8000a3c <__aeabi_d2uiz>
 8002084:	4603      	mov	r3, r0
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 800208a:	87da      	strh	r2, [r3, #62]	@ 0x3e

    // Copy bus voltages to parameter array for consistency
    Parameters[0].Value = TelemetryData.Bus12V;
 800208c:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <EPSPD_UpdateTelemetryAndParameters+0x624>)
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8002092:	805a      	strh	r2, [r3, #2]
    Parameters[1].Value = TelemetryData.Bus5V;
 8002094:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <EPSPD_UpdateTelemetryAndParameters+0x624>)
 8002096:	885a      	ldrh	r2, [r3, #2]
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 800209a:	80da      	strh	r2, [r3, #6]
    Parameters[2].Value = TelemetryData.Bus3V3;
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <EPSPD_UpdateTelemetryAndParameters+0x624>)
 800209e:	889a      	ldrh	r2, [r3, #4]
 80020a0:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80020a2:	815a      	strh	r2, [r3, #10]

    // Prepare EEPROM data structure with telemetry and timestamp
    EEPROM_TelemetryWithTimestamp eeprom_data;
    eeprom_data.telemetry = TelemetryData;
 80020a4:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <EPSPD_UpdateTelemetryAndParameters+0x624>)
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    eeprom_data.counter = counter;
 80020b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    eeprom_data.subtick_us = subtick;
 80020b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ba:	623b      	str	r3, [r7, #32]
    // Save telemetry to EEPROM via I2C
    epspd_WriteTelemetry(hi2c, &eeprom_data);
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff f830 	bl	8001128 <epspd_WriteTelemetry>
}
 80020c8:	bf00      	nop
 80020ca:	3740      	adds	r7, #64	@ 0x40
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	c94fe0ff 	.word	0xc94fe0ff
 80020d4:	40a9aaa5 	.word	0x40a9aaa5
 80020d8:	00000000 	.word	0x00000000
 80020dc:	40201d00 	.word	0x40201d00
 80020e0:	408f4000 	.word	0x408f4000
 80020e4:	20000154 	.word	0x20000154
 80020e8:	3f4e4000 	.word	0x3f4e4000
 80020ec:	200004c0 	.word	0x200004c0

080020f0 <main>:
void StartTask02(void *argument);
void StartTask03(void *argument);
void StartTask04(void *argument);

int main(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  HAL_Init();
 80020f4:	f001 fb9b 	bl	800382e <HAL_Init>
  SystemClock_Config();
 80020f8:	f000 f8fc 	bl	80022f4 <SystemClock_Config>
  MX_GPIO_Init();
 80020fc:	f000 fc82 	bl	8002a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002100:	f000 fc3a 	bl	8002978 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002104:	f000 fbd4 	bl	80028b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002108:	f000 fc04 	bl	8002914 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800210c:	f000 fba0 	bl	8002850 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002110:	f000 f936 	bl	8002380 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002114:	f000 f9aa 	bl	800246c <MX_I2C2_Init>
  MX_SPI1_Init();
 8002118:	f000 f9e8 	bl	80024ec <MX_SPI1_Init>
  MX_SPI3_Init();
 800211c:	f000 fa20 	bl	8002560 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002120:	f000 fa58 	bl	80025d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002124:	f000 faaa 	bl	800267c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002128:	f000 faf6 	bl	8002718 <MX_TIM3_Init>
  MX_TIM4_Init();
 800212c:	f000 fb42 	bl	80027b4 <MX_TIM4_Init>

  osKernelInitialize();
 8002130:	f007 fee4 	bl	8009efc <osKernelInitialize>

  NormalTaskHandle = osThreadNew(StartDefaultTask, NULL, &NormalTask_attributes);
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <main+0x8c>)
 8002136:	2100      	movs	r1, #0
 8002138:	4811      	ldr	r0, [pc, #68]	@ (8002180 <main+0x90>)
 800213a:	f007 ff29 	bl	8009f90 <osThreadNew>
 800213e:	4603      	mov	r3, r0
 8002140:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <main+0x94>)
 8002142:	6013      	str	r3, [r2, #0]
  FaultTask02Handle = osThreadNew(StartTask02, NULL, &FaultTask02_attributes);
 8002144:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <main+0x98>)
 8002146:	2100      	movs	r1, #0
 8002148:	4810      	ldr	r0, [pc, #64]	@ (800218c <main+0x9c>)
 800214a:	f007 ff21 	bl	8009f90 <osThreadNew>
 800214e:	4603      	mov	r3, r0
 8002150:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <main+0xa0>)
 8002152:	6013      	str	r3, [r2, #0]
  SSPmasterTask03Handle = osThreadNew(StartTask03, NULL, &SSPmasterTask03_attributes);
 8002154:	4a0f      	ldr	r2, [pc, #60]	@ (8002194 <main+0xa4>)
 8002156:	2100      	movs	r1, #0
 8002158:	480f      	ldr	r0, [pc, #60]	@ (8002198 <main+0xa8>)
 800215a:	f007 ff19 	bl	8009f90 <osThreadNew>
 800215e:	4603      	mov	r3, r0
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <main+0xac>)
 8002162:	6013      	str	r3, [r2, #0]
  SyncTask04Handle = osThreadNew(StartTask04, NULL, &SyncTask04_attributes);
 8002164:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <main+0xb0>)
 8002166:	2100      	movs	r1, #0
 8002168:	480e      	ldr	r0, [pc, #56]	@ (80021a4 <main+0xb4>)
 800216a:	f007 ff11 	bl	8009f90 <osThreadNew>
 800216e:	4603      	mov	r3, r0
 8002170:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <main+0xb8>)
 8002172:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8002174:	f007 fee6 	bl	8009f44 <osKernelStart>

  while(1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <main+0x88>
 800217c:	0800d700 	.word	0x0800d700
 8002180:	080021ad 	.word	0x080021ad
 8002184:	20000ad0 	.word	0x20000ad0
 8002188:	0800d724 	.word	0x0800d724
 800218c:	08002251 	.word	0x08002251
 8002190:	20000ad4 	.word	0x20000ad4
 8002194:	0800d748 	.word	0x0800d748
 8002198:	08002281 	.word	0x08002281
 800219c:	20000ad8 	.word	0x20000ad8
 80021a0:	0800d76c 	.word	0x0800d76c
 80021a4:	080022a1 	.word	0x080022a1
 80021a8:	20000adc 	.word	0x20000adc

080021ac <StartDefaultTask>:
  }
}


void StartDefaultTask(void *argument)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	@ 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    for (;;) {
        uint16_t adc_values[16] = {0};
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2220      	movs	r2, #32
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f00a fc9d 	bl	800cafc <memset>
        uint32_t last_save_time = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_ready = 0;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <StartDefaultTask+0x88>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
        EPS_Log_Message(EPS_LOG_INFO, "Starting ADC conversion via DMA for telemetry update");
 80021cc:	491a      	ldr	r1, [pc, #104]	@ (8002238 <StartDefaultTask+0x8c>)
 80021ce:	2003      	movs	r0, #3
 80021d0:	f7fe fdea 	bl	8000da8 <EPS_Log_Message>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 16);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2210      	movs	r2, #16
 80021da:	4619      	mov	r1, r3
 80021dc:	4817      	ldr	r0, [pc, #92]	@ (800223c <StartDefaultTask+0x90>)
 80021de:	f001 febf 	bl	8003f60 <HAL_ADC_Start_DMA>
        while (!adc_ready) {
 80021e2:	e003      	b.n	80021ec <StartDefaultTask+0x40>
            EPS_Log_Message(EPS_LOG_WARNING, "Waiting for ADC DMA complete flag...");
 80021e4:	4916      	ldr	r1, [pc, #88]	@ (8002240 <StartDefaultTask+0x94>)
 80021e6:	2002      	movs	r0, #2
 80021e8:	f7fe fdde 	bl	8000da8 <EPS_Log_Message>
        while (!adc_ready) {
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <StartDefaultTask+0x88>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f6      	beq.n	80021e4 <StartDefaultTask+0x38>
        }
        EPSPD_UpdateTelemetryAndParameters(&hi2c2, adc_values);
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	4619      	mov	r1, r3
 80021fc:	4811      	ldr	r0, [pc, #68]	@ (8002244 <StartDefaultTask+0x98>)
 80021fe:	f7ff fc63 	bl	8001ac8 <EPSPD_UpdateTelemetryAndParameters>
        EPS_Log_Message(EPS_LOG_INFO, "Telemetry updated from ADC values");
 8002202:	4911      	ldr	r1, [pc, #68]	@ (8002248 <StartDefaultTask+0x9c>)
 8002204:	2003      	movs	r0, #3
 8002206:	f7fe fdcf 	bl	8000da8 <EPS_Log_Message>

        if (HAL_GetTick() - last_save_time >= EEPROM_SAVE_INTERVAL) {
 800220a:	f001 fb3d 	bl	8003888 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002218:	4293      	cmp	r3, r2
 800221a:	d906      	bls.n	800222a <StartDefaultTask+0x7e>
            last_save_time = HAL_GetTick();
 800221c:	f001 fb34 	bl	8003888 <HAL_GetTick>
 8002220:	62f8      	str	r0, [r7, #44]	@ 0x2c
            EPS_Log_Message(EPS_LOG_INFO, "Saving telemetry to EEPROM");
 8002222:	490a      	ldr	r1, [pc, #40]	@ (800224c <StartDefaultTask+0xa0>)
 8002224:	2003      	movs	r0, #3
 8002226:	f7fe fdbf 	bl	8000da8 <EPS_Log_Message>
        }
        osDelay(1000);
 800222a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800222e:	f007 ff41 	bl	800a0b4 <osDelay>
    for (;;) {
 8002232:	e7bf      	b.n	80021b4 <StartDefaultTask+0x8>
 8002234:	200004cc 	.word	0x200004cc
 8002238:	0800d5e0 	.word	0x0800d5e0
 800223c:	200004d0 	.word	0x200004d0
 8002240:	0800d618 	.word	0x0800d618
 8002244:	20000538 	.word	0x20000538
 8002248:	0800d640 	.word	0x0800d640
 800224c:	0800d664 	.word	0x0800d664

08002250 <StartTask02>:
    }
}

void StartTask02(void *argument)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 8002258:	4906      	ldr	r1, [pc, #24]	@ (8002274 <StartTask02+0x24>)
 800225a:	2004      	movs	r0, #4
 800225c:	f7fe fda4 	bl	8000da8 <EPS_Log_Message>
        Fault_PollAndHandle(&hi2c2, &huart1);
 8002260:	4905      	ldr	r1, [pc, #20]	@ (8002278 <StartTask02+0x28>)
 8002262:	4806      	ldr	r0, [pc, #24]	@ (800227c <StartTask02+0x2c>)
 8002264:	f7ff f89e 	bl	80013a4 <Fault_PollAndHandle>
        osDelay(100);
 8002268:	2064      	movs	r0, #100	@ 0x64
 800226a:	f007 ff23 	bl	800a0b4 <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 800226e:	bf00      	nop
 8002270:	e7f2      	b.n	8002258 <StartTask02+0x8>
 8002272:	bf00      	nop
 8002274:	0800d680 	.word	0x0800d680
 8002278:	20000814 	.word	0x20000814
 800227c:	20000538 	.word	0x20000538

08002280 <StartTask03>:
    }
}

void StartTask03(void *argument)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 8002288:	4904      	ldr	r1, [pc, #16]	@ (800229c <StartTask03+0x1c>)
 800228a:	2004      	movs	r0, #4
 800228c:	f7fe fd8c 	bl	8000da8 <EPS_Log_Message>
        osDelay(10000); // Poll every 10 seconds
 8002290:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002294:	f007 ff0e 	bl	800a0b4 <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 8002298:	bf00      	nop
 800229a:	e7f5      	b.n	8002288 <StartTask03+0x8>
 800229c:	0800d6a8 	.word	0x0800d6a8

080022a0 <StartTask04>:
    }
}

void StartTask04(void *argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
    for (;;) {
        if (sync_pulse_triggered) {
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <StartTask04+0x48>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <StartTask04+0x40>
            sync_pulse_triggered = false;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <StartTask04+0x48>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]

            uint64_t counter = GetSyncCounter();
 80022b8:	f7ff fba2 	bl	8001a00 <GetSyncCounter>
 80022bc:	e9c7 0104 	strd	r0, r1, [r7, #16]
            HAL_StatusTypeDef status = EPS_I2C_SendSyncCounter(&hi2c2, counter, I2C_SLAVE_ADDR_BMS);
 80022c0:	2360      	movs	r3, #96	@ 0x60
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022c8:	4808      	ldr	r0, [pc, #32]	@ (80022ec <StartTask04+0x4c>)
 80022ca:	f7ff fac7 	bl	800185c <EPS_I2C_SendSyncCounter>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]

            if (status != HAL_OK) {
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <StartTask04+0x40>
                EPS_Log_Message(EPS_LOG_ERROR, "Failed to send sync counter");
 80022d8:	4905      	ldr	r1, [pc, #20]	@ (80022f0 <StartTask04+0x50>)
 80022da:	2001      	movs	r0, #1
 80022dc:	f7fe fd64 	bl	8000da8 <EPS_Log_Message>
            }
        }

        osDelay(5);
 80022e0:	2005      	movs	r0, #5
 80022e2:	f007 fee7 	bl	800a0b4 <osDelay>
        if (sync_pulse_triggered) {
 80022e6:	e7df      	b.n	80022a8 <StartTask04+0x8>
 80022e8:	20000acc 	.word	0x20000acc
 80022ec:	20000538 	.word	0x20000538
 80022f0:	0800d6cc 	.word	0x0800d6cc

080022f4 <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b096      	sub	sp, #88	@ 0x58
 80022f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	2244      	movs	r2, #68	@ 0x44
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f00a fbfa 	bl	800cafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002308:	463b      	mov	r3, r7
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002316:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800231a:	f004 f829 	bl	8006370 <HAL_PWREx_ControlVoltageScaling>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002324:	f000 fcaa 	bl	8002c7c <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002328:	2302      	movs	r3, #2
 800232a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002330:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002332:	2340      	movs	r3, #64	@ 0x40
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002336:	2300      	movs	r3, #0
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4618      	mov	r0, r3
 8002340:	f004 f86c 	bl	800641c <HAL_RCC_OscConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800234a:	f000 fc97 	bl	8002c7c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	230f      	movs	r3, #15
 8002350:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002352:	2301      	movs	r3, #1
 8002354:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002362:	463b      	mov	r3, r7
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fc72 	bl	8006c50 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002372:	f000 fc83 	bl	8002c7c <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3758      	adds	r7, #88	@ 0x58
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 80023a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <MX_ADC1_Init+0xe4>)
 80023a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ba:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023c0:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023c6:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023cc:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80023d2:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023d8:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80023fa:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <MX_ADC1_Init+0xe0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8002402:	4817      	ldr	r0, [pc, #92]	@ (8002460 <MX_ADC1_Init+0xe0>)
 8002404:	f001 fc58 	bl	8003cb8 <HAL_ADC_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800240e:	f000 fc35 	bl	8002c7c <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  if(HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	4810      	ldr	r0, [pc, #64]	@ (8002460 <MX_ADC1_Init+0xe0>)
 800241e:	f002 fbc5 	bl	8004bac <HAL_ADCEx_MultiModeConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002428:	f000 fc28 	bl	8002c7c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 800242c:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <MX_ADC1_Init+0xe8>)
 800242e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002430:	2306      	movs	r3, #6
 8002432:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002438:	237f      	movs	r3, #127	@ 0x7f
 800243a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800243c:	2304      	movs	r3, #4
 800243e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	@ (8002460 <MX_ADC1_Init+0xe0>)
 800244a:	f001 fe63 	bl	8004114 <HAL_ADC_ConfigChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002454:	f000 fc12 	bl	8002c7c <Error_Handler>
  }
}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	@ 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200004d0 	.word	0x200004d0
 8002464:	50040000 	.word	0x50040000
 8002468:	04300002 	.word	0x04300002

0800246c <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <MX_I2C2_Init+0x74>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <MX_I2C2_Init+0x78>)
 8002474:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8002476:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_I2C2_Init+0x74>)
 8002478:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <MX_I2C2_Init+0x7c>)
 800247a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800247c:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_I2C2_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <MX_I2C2_Init+0x74>)
 8002484:	2201      	movs	r2, #1
 8002486:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <MX_I2C2_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <MX_I2C2_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <MX_I2C2_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800249a:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <MX_I2C2_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <MX_I2C2_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
  if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024a6:	480e      	ldr	r0, [pc, #56]	@ (80024e0 <MX_I2C2_Init+0x74>)
 80024a8:	f003 f96d 	bl	8005786 <HAL_I2C_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024b2:	f000 fbe3 	bl	8002c7c <Error_Handler>
  }

  if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024b6:	2100      	movs	r1, #0
 80024b8:	4809      	ldr	r0, [pc, #36]	@ (80024e0 <MX_I2C2_Init+0x74>)
 80024ba:	f003 feb3 	bl	8006224 <HAL_I2CEx_ConfigAnalogFilter>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024c4:	f000 fbda 	bl	8002c7c <Error_Handler>
  }

  if(HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024c8:	2100      	movs	r1, #0
 80024ca:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <MX_I2C2_Init+0x74>)
 80024cc:	f003 fef5 	bl	80062ba <HAL_I2CEx_ConfigDigitalFilter>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80024d6:	f000 fbd1 	bl	8002c7c <Error_Handler>
  }
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000538 	.word	0x20000538
 80024e4:	40005800 	.word	0x40005800
 80024e8:	00503d58 	.word	0x00503d58

080024ec <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <MX_SPI1_Init+0x6c>)
 80024f2:	4a1a      	ldr	r2, [pc, #104]	@ (800255c <MX_SPI1_Init+0x70>)
 80024f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <MX_SPI1_Init+0x6c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <MX_SPI1_Init+0x6c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002504:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002508:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <MX_SPI1_Init+0x6c>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800251c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <MX_SPI1_Init+0x6c>)
 800252c:	2200      	movs	r2, #0
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002532:	2207      	movs	r2, #7
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <MX_SPI1_Init+0x6c>)
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi1) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <MX_SPI1_Init+0x6c>)
 8002544:	f005 faa4 	bl	8007a90 <HAL_SPI_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800254e:	f000 fb95 	bl	8002c7c <Error_Handler>
  }
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000061c 	.word	0x2000061c
 800255c:	40013000 	.word	0x40013000

08002560 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  hspi3.Instance = SPI3;
 8002564:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <MX_SPI3_Init+0x6c>)
 8002566:	4a1a      	ldr	r2, [pc, #104]	@ (80025d0 <MX_SPI3_Init+0x70>)
 8002568:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <MX_SPI3_Init+0x6c>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <MX_SPI3_Init+0x6c>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <MX_SPI3_Init+0x6c>)
 8002578:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800257c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800257e:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <MX_SPI3_Init+0x6c>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <MX_SPI3_Init+0x6c>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <MX_SPI3_Init+0x6c>)
 800258c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002590:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <MX_SPI3_Init+0x6c>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <MX_SPI3_Init+0x6c>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <MX_SPI3_Init+0x6c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80025a4:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <MX_SPI3_Init+0x6c>)
 80025a6:	2207      	movs	r2, #7
 80025a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <MX_SPI3_Init+0x6c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <MX_SPI3_Init+0x6c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi3) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	@ (80025cc <MX_SPI3_Init+0x6c>)
 80025b8:	f005 fa6a 	bl	8007a90 <HAL_SPI_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 80025c2:	f000 fb5b 	bl	8002c7c <Error_Handler>
  }
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000680 	.word	0x20000680
 80025d0:	40003c00 	.word	0x40003c00

080025d4 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <MX_TIM1_Init+0xa0>)
 80025f4:	4a20      	ldr	r2, [pc, #128]	@ (8002678 <MX_TIM1_Init+0xa4>)
 80025f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <MX_TIM1_Init+0xa0>)
 80025fa:	224f      	movs	r2, #79	@ 0x4f
 80025fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <MX_TIM1_Init+0xa0>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002604:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <MX_TIM1_Init+0xa0>)
 8002606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800260a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <MX_TIM1_Init+0xa0>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002612:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <MX_TIM1_Init+0xa0>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <MX_TIM1_Init+0xa0>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800261e:	4815      	ldr	r0, [pc, #84]	@ (8002674 <MX_TIM1_Init+0xa0>)
 8002620:	f005 fbf9 	bl	8007e16 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800262a:	f000 fb27 	bl	8002c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002632:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	4619      	mov	r1, r3
 800263a:	480e      	ldr	r0, [pc, #56]	@ (8002674 <MX_TIM1_Init+0xa0>)
 800263c:	f005 fdb9 	bl	80081b2 <HAL_TIM_ConfigClockSource>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002646:	f000 fb19 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <MX_TIM1_Init+0xa0>)
 800265c:	f005 ffda 	bl	8008614 <HAL_TIMEx_MasterConfigSynchronization>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002666:	f000 fb09 	bl	8002c7c <Error_Handler>
  }
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200006e4 	.word	0x200006e4
 8002678:	40012c00 	.word	0x40012c00

0800267c <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <MX_TIM2_Init+0x98>)
 800269c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026a4:	224f      	movs	r2, #79	@ 0x4f
 80026a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b6:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026c2:	4814      	ldr	r0, [pc, #80]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026c4:	f005 fba7 	bl	8007e16 <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026ce:	f000 fad5 	bl	8002c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d6:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026e0:	f005 fd67 	bl	80081b2 <HAL_TIM_ConfigClockSource>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026ea:	f000 fac7 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <MX_TIM2_Init+0x98>)
 80026fc:	f005 ff8a 	bl	8008614 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002706:	f000 fab9 	bl	8002c7c <Error_Handler>
  }
}
 800270a:	bf00      	nop
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000730 	.word	0x20000730

08002718 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <MX_TIM3_Init+0x94>)
 8002738:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <MX_TIM3_Init+0x98>)
 800273a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <MX_TIM3_Init+0x94>)
 800273e:	224f      	movs	r2, #79	@ 0x4f
 8002740:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <MX_TIM3_Init+0x94>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002748:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <MX_TIM3_Init+0x94>)
 800274a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800274e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <MX_TIM3_Init+0x94>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <MX_TIM3_Init+0x94>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800275c:	4813      	ldr	r0, [pc, #76]	@ (80027ac <MX_TIM3_Init+0x94>)
 800275e:	f005 fb5a 	bl	8007e16 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002768:	f000 fa88 	bl	8002c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002770:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4619      	mov	r1, r3
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <MX_TIM3_Init+0x94>)
 800277a:	f005 fd1a 	bl	80081b2 <HAL_TIM_ConfigClockSource>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002784:	f000 fa7a 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	@ (80027ac <MX_TIM3_Init+0x94>)
 8002796:	f005 ff3d 	bl	8008614 <HAL_TIMEx_MasterConfigSynchronization>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80027a0:	f000 fa6c 	bl	8002c7c <Error_Handler>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000077c 	.word	0x2000077c
 80027b0:	40000400 	.word	0x40000400

080027b4 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027d4:	4a1d      	ldr	r2, [pc, #116]	@ (800284c <MX_TIM4_Init+0x98>)
 80027d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027da:	224f      	movs	r2, #79	@ 0x4f
 80027dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027de:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ec:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027f8:	4813      	ldr	r0, [pc, #76]	@ (8002848 <MX_TIM4_Init+0x94>)
 80027fa:	f005 fb0c 	bl	8007e16 <HAL_TIM_Base_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002804:	f000 fa3a 	bl	8002c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280c:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4619      	mov	r1, r3
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <MX_TIM4_Init+0x94>)
 8002816:	f005 fccc 	bl	80081b2 <HAL_TIM_ConfigClockSource>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002820:	f000 fa2c 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4805      	ldr	r0, [pc, #20]	@ (8002848 <MX_TIM4_Init+0x94>)
 8002832:	f005 feef 	bl	8008614 <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800283c:	f000 fa1e 	bl	8002c7c <Error_Handler>
  }
}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200007c8 	.word	0x200007c8
 800284c:	40000800 	.word	0x40000800

08002850 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002856:	4a15      	ldr	r2, [pc, #84]	@ (80028ac <MX_USART1_UART_Init+0x5c>)
 8002858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800285c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_UART_Init(&huart1) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002894:	f005 ff64 	bl	8008760 <HAL_UART_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800289e:	f000 f9ed 	bl	8002c7c <Error_Handler>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000814 	.word	0x20000814
 80028ac:	40013800 	.word	0x40013800

080028b0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80028b4:	4b15      	ldr	r3, [pc, #84]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028b6:	4a16      	ldr	r2, [pc, #88]	@ (8002910 <MX_USART2_UART_Init+0x60>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ba:	4b14      	ldr	r3, [pc, #80]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ec:	4b07      	ldr	r3, [pc, #28]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80028f2:	2300      	movs	r3, #0
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	4804      	ldr	r0, [pc, #16]	@ (800290c <MX_USART2_UART_Init+0x5c>)
 80028fa:	f007 fa49 	bl	8009d90 <HAL_RS485Ex_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002904:	f000 f9ba 	bl	8002c7c <Error_Handler>
  }
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000089c 	.word	0x2000089c
 8002910:	40004400 	.word	0x40004400

08002914 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 800291a:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <MX_USART3_UART_Init+0x60>)
 800291c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 8002920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002932:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294a:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002956:	2300      	movs	r3, #0
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	4804      	ldr	r0, [pc, #16]	@ (8002970 <MX_USART3_UART_Init+0x5c>)
 800295e:	f007 fa17 	bl	8009d90 <HAL_RS485Ex_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002968:	f000 f988 	bl	8002c7c <Error_Handler>
  }
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000924 	.word	0x20000924
 8002974:	40004800 	.word	0x40004800

08002978 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800297e:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <MX_DMA_Init+0x88>)
 8002980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002982:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <MX_DMA_Init+0x88>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6493      	str	r3, [r2, #72]	@ 0x48
 800298a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <MX_DMA_Init+0x88>)
 800298c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2105      	movs	r1, #5
 800299a:	200c      	movs	r0, #12
 800299c:	f002 fa6e 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80029a0:	200c      	movs	r0, #12
 80029a2:	f002 fa87 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2105      	movs	r1, #5
 80029aa:	200d      	movs	r0, #13
 80029ac:	f002 fa66 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80029b0:	200d      	movs	r0, #13
 80029b2:	f002 fa7f 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2105      	movs	r1, #5
 80029ba:	200e      	movs	r0, #14
 80029bc:	f002 fa5e 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029c0:	200e      	movs	r0, #14
 80029c2:	f002 fa77 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2105      	movs	r1, #5
 80029ca:	200f      	movs	r0, #15
 80029cc:	f002 fa56 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80029d0:	200f      	movs	r0, #15
 80029d2:	f002 fa6f 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2105      	movs	r1, #5
 80029da:	2010      	movs	r0, #16
 80029dc:	f002 fa4e 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80029e0:	2010      	movs	r0, #16
 80029e2:	f002 fa67 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2105      	movs	r1, #5
 80029ea:	2011      	movs	r0, #17
 80029ec:	f002 fa46 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80029f0:	2011      	movs	r0, #17
 80029f2:	f002 fa5f 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	@ 0x30
 8002a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a1a:	4b89      	ldr	r3, [pc, #548]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	4a88      	ldr	r2, [pc, #544]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a26:	4b86      	ldr	r3, [pc, #536]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a32:	4b83      	ldr	r3, [pc, #524]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	4a82      	ldr	r2, [pc, #520]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3e:	4b80      	ldr	r3, [pc, #512]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a56:	4b7a      	ldr	r3, [pc, #488]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	4b77      	ldr	r3, [pc, #476]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	4a76      	ldr	r2, [pc, #472]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6e:	4b74      	ldr	r3, [pc, #464]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b71      	ldr	r3, [pc, #452]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4a70      	ldr	r2, [pc, #448]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4b6e      	ldr	r3, [pc, #440]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	4b6b      	ldr	r3, [pc, #428]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4a6a      	ldr	r2, [pc, #424]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4b68      	ldr	r3, [pc, #416]	@ (8002c40 <MX_GPIO_Init+0x23c>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOE, RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f240 511c 	movw	r1, #1308	@ 0x51c
 8002ab0:	4864      	ldr	r0, [pc, #400]	@ (8002c44 <MX_GPIO_Init+0x240>)
 8002ab2:	f002 fe2d 	bl	8005710 <HAL_GPIO_WritePin>
                          |CCU5V_EN_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002abc:	4862      	ldr	r0, [pc, #392]	@ (8002c48 <MX_GPIO_Init+0x244>)
 8002abe:	f002 fe27 	bl	8005710 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, PL_EN_Pin|UHF_EN_Pin, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8002ac8:	4860      	ldr	r0, [pc, #384]	@ (8002c4c <MX_GPIO_Init+0x248>)
 8002aca:	f002 fe21 	bl	8005710 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin, GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002ad4:	485e      	ldr	r0, [pc, #376]	@ (8002c50 <MX_GPIO_Init+0x24c>)
 8002ad6:	f002 fe1b 	bl	8005710 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ADCS_EN_GPIO_Port, ADCS_EN_Pin, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae4:	f002 fe14 	bl	8005710 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2108      	movs	r1, #8
 8002aec:	4859      	ldr	r0, [pc, #356]	@ (8002c54 <MX_GPIO_Init+0x250>)
 8002aee:	f002 fe0f 	bl	8005710 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002af2:	f240 531c 	movw	r3, #1308	@ 0x51c
 8002af6:	61fb      	str	r3, [r7, #28]
                          |CCU5V_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	484e      	ldr	r0, [pc, #312]	@ (8002c44 <MX_GPIO_Init+0x240>)
 8002b0c:	f002 fc56 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin;
 8002b10:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b16:	2301      	movs	r3, #1
 8002b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4847      	ldr	r0, [pc, #284]	@ (8002c48 <MX_GPIO_Init+0x244>)
 8002b2a:	f002 fc47 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_FLT_Pin|XB12V_FLT_Pin|CCU5V_FLT_Pin|PL5V_FLT_Pin
 8002b2e:	f640 2383 	movw	r3, #2691	@ 0xa83
 8002b32:	61fb      	str	r3, [r7, #28]
                          |RS5V_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	4840      	ldr	r0, [pc, #256]	@ (8002c44 <MX_GPIO_Init+0x240>)
 8002b44:	f002 fc3a 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS3V3_FLT_Pin|CCU_FAULT_Pin|PL_FLT_Pin|ADCS_FAULT_Pin
 8002b48:	f244 3305 	movw	r3, #17157	@ 0x4305
 8002b4c:	61fb      	str	r3, [r7, #28]
                          |OBC_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	483b      	ldr	r0, [pc, #236]	@ (8002c4c <MX_GPIO_Init+0x248>)
 8002b5e:	f002 fc2d 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PL_EN_Pin|UHF_EN_Pin;
 8002b62:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8002b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4834      	ldr	r0, [pc, #208]	@ (8002c4c <MX_GPIO_Init+0x248>)
 8002b7c:	f002 fc1e 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin;
 8002b80:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b86:	2301      	movs	r3, #1
 8002b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4619      	mov	r1, r3
 8002b98:	482d      	ldr	r0, [pc, #180]	@ (8002c50 <MX_GPIO_Init+0x24c>)
 8002b9a:	f002 fc0f 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCS_EN_Pin;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADCS_EN_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bba:	f002 fbff 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SYNC_PULSE_Pin;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SYNC_PULSE_GPIO_Port, &GPIO_InitStruct);
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	481e      	ldr	r0, [pc, #120]	@ (8002c4c <MX_GPIO_Init+0x248>)
 8002bd4:	f002 fbf2 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = UHF_FLT_Pin|GPS_FLT_Pin|ADCS12V_FLT_Pin|ADCS5V_FLT_Pin;
 8002bd8:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8002bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4619      	mov	r1, r3
 8002bec:	4816      	ldr	r0, [pc, #88]	@ (8002c48 <MX_GPIO_Init+0x244>)
 8002bee:	f002 fbe5 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS_EN_Pin;
 8002bf2:	2340      	movs	r3, #64	@ 0x40
 8002bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4810      	ldr	r0, [pc, #64]	@ (8002c48 <MX_GPIO_Init+0x244>)
 8002c08:	f002 fbd8 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BOOT0_Pin;
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4619      	mov	r1, r3
 8002c22:	480c      	ldr	r0, [pc, #48]	@ (8002c54 <MX_GPIO_Init+0x250>)
 8002c24:	f002 fbca 	bl	80053bc <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2105      	movs	r1, #5
 8002c2c:	2007      	movs	r0, #7
 8002c2e:	f002 f925 	bl	8004e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c32:	2007      	movs	r0, #7
 8002c34:	f002 f93e 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	@ 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	48001000 	.word	0x48001000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48000c00 	.word	0x48000c00
 8002c50:	48000800 	.word	0x48000800
 8002c54:	48001c00 	.word	0x48001c00

08002c58 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002c6a:	f000 fdf9 	bl	8003860 <HAL_IncTick>
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40001000 	.word	0x40001000

08002c7c <Error_Handler>:

void Error_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
  __disable_irq();
  while(1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <Error_Handler+0x8>

08002c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <HAL_MspInit+0x4c>)
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	4a10      	ldr	r2, [pc, #64]	@ (8002cd4 <HAL_MspInit+0x4c>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <HAL_MspInit+0x4c>)
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_MspInit+0x4c>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd4 <HAL_MspInit+0x4c>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb2:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <HAL_MspInit+0x4c>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	210f      	movs	r1, #15
 8002cc2:	f06f 0001 	mvn.w	r0, #1
 8002cc6:	f002 f8d9 	bl	8004e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b0ae      	sub	sp, #184	@ 0xb8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf0:	f107 0318 	add.w	r3, r7, #24
 8002cf4:	228c      	movs	r2, #140	@ 0x8c
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f009 feff 	bl	800cafc <memset>
  if(hadc->Instance==ADC1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a42      	ldr	r2, [pc, #264]	@ (8002e0c <HAL_ADC_MspInit+0x134>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d17d      	bne.n	8002e04 <HAL_ADC_MspInit+0x12c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002d1e:	2308      	movs	r3, #8
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002d22:	2302      	movs	r3, #2
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d26:	2302      	movs	r3, #2
 8002d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002d2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f9df 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002d44:	f7ff ff9a 	bl	8002c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d48:	4b31      	ldr	r3, [pc, #196]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4c:	4a30      	ldr	r2, [pc, #192]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d54:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d64:	4a2a      	ldr	r2, [pc, #168]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7c:	4a24      	ldr	r2, [pc, #144]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d90:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d94:	4a1e      	ldr	r2, [pc, #120]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <HAL_ADC_MspInit+0x138>)
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = RS5V_I_Pin|PS5V_I_Pin|ADCS5V_1_Pin|GPS_I_Pin
 8002da8:	233f      	movs	r3, #63	@ 0x3f
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |PL_I_Pin|ADCS12V_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4814      	ldr	r0, [pc, #80]	@ (8002e14 <HAL_ADC_MspInit+0x13c>)
 8002dc2:	f002 fafb 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M_OUT_Pin|SA2_I_Pin|SA3_I_Pin|XB12V_I_Pin
 8002dc6:	23ff      	movs	r3, #255	@ 0xff
 8002dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |CCU5V_I_Pin|CCU_I_Pin|RS3V3_I_Pin|ADCS_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de2:	f002 faeb 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF_I_Pin|OBC_I_Pin;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <HAL_ADC_MspInit+0x140>)
 8002e00:	f002 fadc 	bl	80053bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e04:	bf00      	nop
 8002e06:	37b8      	adds	r7, #184	@ 0xb8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	50040000 	.word	0x50040000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	48000800 	.word	0x48000800
 8002e18:	48000400 	.word	0x48000400

08002e1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0ac      	sub	sp, #176	@ 0xb0
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	228c      	movs	r2, #140	@ 0x8c
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f009 fe5d 	bl	800cafc <memset>
  if(hi2c->Instance==I2C2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a4b      	ldr	r2, [pc, #300]	@ (8002f74 <HAL_I2C_MspInit+0x158>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	f040 808e 	bne.w	8002f6a <HAL_I2C_MspInit+0x14e>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 f94e 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e66:	f7ff ff09 	bl	8002c7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6a:	4b43      	ldr	r3, [pc, #268]	@ (8002f78 <HAL_I2C_MspInit+0x15c>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	4a42      	ldr	r2, [pc, #264]	@ (8002f78 <HAL_I2C_MspInit+0x15c>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e76:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <HAL_I2C_MspInit+0x15c>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002e82:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8a:	2312      	movs	r3, #18
 8002e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4834      	ldr	r0, [pc, #208]	@ (8002f7c <HAL_I2C_MspInit+0x160>)
 8002eaa:	f002 fa87 	bl	80053bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002eae:	4b32      	ldr	r3, [pc, #200]	@ (8002f78 <HAL_I2C_MspInit+0x15c>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a31      	ldr	r2, [pc, #196]	@ (8002f78 <HAL_I2C_MspInit+0x15c>)
 8002eb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eba:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <HAL_I2C_MspInit+0x15c>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f84 <HAL_I2C_MspInit+0x168>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ece:	2203      	movs	r2, #3
 8002ed0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	4b29      	ldr	r3, [pc, #164]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ede:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ee0:	2280      	movs	r2, #128	@ 0x80
 8002ee2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002ef0:	4b23      	ldr	r3, [pc, #140]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002efc:	4820      	ldr	r0, [pc, #128]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002efe:	f001 ffe7 	bl	8004ed0 <HAL_DMA_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8002f08:	f7ff feb8 	bl	8002c7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002f10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f12:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <HAL_I2C_MspInit+0x164>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f8c <HAL_I2C_MspInit+0x170>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f20:	2203      	movs	r2, #3
 8002f22:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f24:	4b18      	ldr	r3, [pc, #96]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f26:	2210      	movs	r2, #16
 8002f28:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f30:	4b15      	ldr	r3, [pc, #84]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f32:	2280      	movs	r2, #128	@ 0x80
 8002f34:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f36:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002f4e:	480e      	ldr	r0, [pc, #56]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f50:	f001 ffbe 	bl	8004ed0 <HAL_DMA_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 8002f5a:	f7ff fe8f 	bl	8002c7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a09      	ldr	r2, [pc, #36]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f62:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f64:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <HAL_I2C_MspInit+0x16c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002f6a:	bf00      	nop
 8002f6c:	37b0      	adds	r7, #176	@ 0xb0
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40005800 	.word	0x40005800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	2000058c 	.word	0x2000058c
 8002f84:	40020058 	.word	0x40020058
 8002f88:	200005d4 	.word	0x200005d4
 8002f8c:	40020044 	.word	0x40020044

08002f90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	@ 0x30
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a42      	ldr	r2, [pc, #264]	@ (80030b8 <HAL_SPI_MspInit+0x128>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d129      	bne.n	8003006 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fb2:	4b42      	ldr	r3, [pc, #264]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb6:	4a41      	ldr	r2, [pc, #260]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8002fb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fca:	4b3c      	ldr	r3, [pc, #240]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	4a3b      	ldr	r2, [pc, #236]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8002fd0:	f043 0310 	orr.w	r3, r3, #16
 8002fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fd6:	4b39      	ldr	r3, [pc, #228]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SS_Pin|SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002fe2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ff4:	2305      	movs	r3, #5
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4830      	ldr	r0, [pc, #192]	@ (80030c0 <HAL_SPI_MspInit+0x130>)
 8003000:	f002 f9dc 	bl	80053bc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003004:	e053      	b.n	80030ae <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2e      	ldr	r2, [pc, #184]	@ (80030c4 <HAL_SPI_MspInit+0x134>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d14e      	bne.n	80030ae <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8003016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301a:	6593      	str	r3, [r2, #88]	@ 0x58
 800301c:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003028:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 800302a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302c:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003034:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8003036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003040:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8003042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_SPI_MspInit+0x12c>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SS_Pin;
 8003058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800306a:	2306      	movs	r3, #6
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003078:	f002 f9a0 	bl	80053bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SP13_SCK_Pin|SPI3_MISO_Pin|SP13_MOSI_Pin;
 800307c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800308e:	2306      	movs	r3, #6
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	4619      	mov	r1, r3
 8003098:	480b      	ldr	r0, [pc, #44]	@ (80030c8 <HAL_SPI_MspInit+0x138>)
 800309a:	f002 f98f 	bl	80053bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2105      	movs	r1, #5
 80030a2:	2033      	movs	r0, #51	@ 0x33
 80030a4:	f001 feea 	bl	8004e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80030a8:	2033      	movs	r0, #51	@ 0x33
 80030aa:	f001 ff03 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3730      	adds	r7, #48	@ 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40013000 	.word	0x40013000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	48001000 	.word	0x48001000
 80030c4:	40003c00 	.word	0x40003c00
 80030c8:	48000800 	.word	0x48000800

080030cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a25      	ldr	r2, [pc, #148]	@ (8003170 <HAL_TIM_Base_MspInit+0xa4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10c      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030de:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	4a24      	ldr	r2, [pc, #144]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 80030e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ea:	4b22      	ldr	r3, [pc, #136]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030f6:	e034      	b.n	8003162 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003100:	d10c      	bne.n	800311c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003102:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
 800310e:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
}
 800311a:	e022      	b.n	8003162 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <HAL_TIM_Base_MspInit+0xac>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10c      	bne.n	8003140 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003126:	4b13      	ldr	r3, [pc, #76]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	4a12      	ldr	r2, [pc, #72]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6593      	str	r3, [r2, #88]	@ 0x58
 8003132:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	e010      	b.n	8003162 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0d      	ldr	r2, [pc, #52]	@ (800317c <HAL_TIM_Base_MspInit+0xb0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10b      	bne.n	8003162 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_TIM_Base_MspInit+0xa8>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0b2      	sub	sp, #200	@ 0xc8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800319c:	228c      	movs	r2, #140	@ 0x8c
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f009 fcab 	bl	800cafc <memset>
  if(huart->Instance==USART1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a72      	ldr	r2, [pc, #456]	@ (8003374 <HAL_UART_MspInit+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d145      	bne.n	800323c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031b0:	2301      	movs	r3, #1
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031b4:	2300      	movs	r3, #0
 80031b6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 ff9d 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031c8:	f7ff fd58 	bl	8002c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 80031ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d0:	4a69      	ldr	r2, [pc, #420]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 80031d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d8:	4b67      	ldr	r3, [pc, #412]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	4b64      	ldr	r3, [pc, #400]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 80031e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e8:	4a63      	ldr	r2, [pc, #396]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f0:	4b61      	ldr	r3, [pc, #388]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80031fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003216:	2307      	movs	r3, #7
 8003218:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003226:	f002 f8c9 	bl	80053bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2105      	movs	r1, #5
 800322e:	2025      	movs	r0, #37	@ 0x25
 8003230:	f001 fe24 	bl	8004e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003234:	2025      	movs	r0, #37	@ 0x25
 8003236:	f001 fe3d 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800323a:	e169      	b.n	8003510 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4e      	ldr	r2, [pc, #312]	@ (800337c <HAL_UART_MspInit+0x1fc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f040 80a6 	bne.w	8003394 <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003248:	2302      	movs	r3, #2
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800324c:	2300      	movs	r3, #0
 800324e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003254:	4618      	mov	r0, r3
 8003256:	f003 ff51 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003260:	f7ff fd0c 	bl	8002c7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003264:	4b44      	ldr	r3, [pc, #272]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	4a43      	ldr	r2, [pc, #268]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003270:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800327c:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003280:	4a3d      	ldr	r2, [pc, #244]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003288:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_UART_MspInit+0x1f8>)
 800328a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RS4851_DE_Pin|RS4851_TX_Pin|RS4851_RX_Pin;
 8003294:	2370      	movs	r3, #112	@ 0x70
 8003296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032ac:	2307      	movs	r3, #7
 80032ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4831      	ldr	r0, [pc, #196]	@ (8003380 <HAL_UART_MspInit+0x200>)
 80032ba:	f002 f87f 	bl	80053bc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032c0:	4a31      	ldr	r2, [pc, #196]	@ (8003388 <HAL_UART_MspInit+0x208>)
 80032c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80032c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032c6:	2202      	movs	r2, #2
 80032c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032cc:	2210      	movs	r2, #16
 80032ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032d8:	2280      	movs	r2, #128	@ 0x80
 80032da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032dc:	4b29      	ldr	r3, [pc, #164]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e2:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032e8:	4b26      	ldr	r3, [pc, #152]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ee:	4b25      	ldr	r3, [pc, #148]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032f4:	4823      	ldr	r0, [pc, #140]	@ (8003384 <HAL_UART_MspInit+0x204>)
 80032f6:	f001 fdeb 	bl	8004ed0 <HAL_DMA_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8003300:	f7ff fcbc 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_UART_MspInit+0x204>)
 8003308:	671a      	str	r2, [r3, #112]	@ 0x70
 800330a:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <HAL_UART_MspInit+0x204>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003310:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_UART_MspInit+0x210>)
 8003314:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003316:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003318:	2202      	movs	r2, #2
 800331a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_UART_MspInit+0x20c>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003322:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003328:	4b18      	ldr	r3, [pc, #96]	@ (800338c <HAL_UART_MspInit+0x20c>)
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800332e:	4b17      	ldr	r3, [pc, #92]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003334:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003336:	2200      	movs	r2, #0
 8003338:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_UART_MspInit+0x20c>)
 800333c:	2200      	movs	r2, #0
 800333e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003342:	2200      	movs	r2, #0
 8003344:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003346:	4811      	ldr	r0, [pc, #68]	@ (800338c <HAL_UART_MspInit+0x20c>)
 8003348:	f001 fdc2 	bl	8004ed0 <HAL_DMA_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8003352:	f7ff fc93 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <HAL_UART_MspInit+0x20c>)
 800335a:	675a      	str	r2, [r3, #116]	@ 0x74
 800335c:	4a0b      	ldr	r2, [pc, #44]	@ (800338c <HAL_UART_MspInit+0x20c>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2105      	movs	r1, #5
 8003366:	2026      	movs	r0, #38	@ 0x26
 8003368:	f001 fd88 	bl	8004e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800336c:	2026      	movs	r0, #38	@ 0x26
 800336e:	f001 fda1 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
}
 8003372:	e0cd      	b.n	8003510 <HAL_UART_MspInit+0x390>
 8003374:	40013800 	.word	0x40013800
 8003378:	40021000 	.word	0x40021000
 800337c:	40004400 	.word	0x40004400
 8003380:	48000c00 	.word	0x48000c00
 8003384:	200009ac 	.word	0x200009ac
 8003388:	40020080 	.word	0x40020080
 800338c:	200009f4 	.word	0x200009f4
 8003390:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5f      	ldr	r2, [pc, #380]	@ (8003518 <HAL_UART_MspInit+0x398>)
 800339a:	4293      	cmp	r3, r2
 800339c:	f040 80b8 	bne.w	8003510 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80033a0:	2304      	movs	r3, #4
 80033a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80033a4:	2300      	movs	r3, #0
 80033a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 fea5 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_UART_MspInit+0x23c>
      Error_Handler();
 80033b8:	f7ff fc60 	bl	8002c7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033bc:	4b57      	ldr	r3, [pc, #348]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	4a56      	ldr	r2, [pc, #344]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c8:	4b54      	ldr	r3, [pc, #336]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d4:	4b51      	ldr	r3, [pc, #324]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d8:	4a50      	ldr	r2, [pc, #320]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033e0:	4b4e      	ldr	r3, [pc, #312]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ec:	4b4b      	ldr	r3, [pc, #300]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033f2:	f043 0308 	orr.w	r3, r3, #8
 80033f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f8:	4b48      	ldr	r3, [pc, #288]	@ (800351c <HAL_UART_MspInit+0x39c>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS4852_TX_Pin|RS4852_RX_Pin;
 8003404:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003418:	2303      	movs	r3, #3
 800341a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800341e:	2307      	movs	r3, #7
 8003420:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003428:	4619      	mov	r1, r3
 800342a:	483d      	ldr	r0, [pc, #244]	@ (8003520 <HAL_UART_MspInit+0x3a0>)
 800342c:	f001 ffc6 	bl	80053bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8003430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800344a:	2307      	movs	r3, #7
 800344c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003454:	4619      	mov	r1, r3
 8003456:	4833      	ldr	r0, [pc, #204]	@ (8003524 <HAL_UART_MspInit+0x3a4>)
 8003458:	f001 ffb0 	bl	80053bc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800345c:	4b32      	ldr	r3, [pc, #200]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 800345e:	4a33      	ldr	r2, [pc, #204]	@ (800352c <HAL_UART_MspInit+0x3ac>)
 8003460:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8003462:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 8003464:	2202      	movs	r2, #2
 8003466:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003468:	4b2f      	ldr	r3, [pc, #188]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 800346a:	2210      	movs	r2, #16
 800346c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346e:	4b2e      	ldr	r3, [pc, #184]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003474:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 8003476:	2280      	movs	r2, #128	@ 0x80
 8003478:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800348c:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003492:	4825      	ldr	r0, [pc, #148]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 8003494:	f001 fd1c 	bl	8004ed0 <HAL_DMA_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_UART_MspInit+0x322>
      Error_Handler();
 800349e:	f7ff fbed 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a20      	ldr	r2, [pc, #128]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 80034a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80034a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003528 <HAL_UART_MspInit+0x3a8>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80034ae:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034b0:	4a20      	ldr	r2, [pc, #128]	@ (8003534 <HAL_UART_MspInit+0x3b4>)
 80034b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80034b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034b6:	2202      	movs	r2, #2
 80034b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034cc:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d2:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80034d8:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034de:	4b14      	ldr	r3, [pc, #80]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80034e4:	4812      	ldr	r0, [pc, #72]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034e6:	f001 fcf3 	bl	8004ed0 <HAL_DMA_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0x374>
      Error_Handler();
 80034f0:	f7ff fbc4 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80034fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <HAL_UART_MspInit+0x3b0>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2105      	movs	r1, #5
 8003504:	2027      	movs	r0, #39	@ 0x27
 8003506:	f001 fcb9 	bl	8004e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800350a:	2027      	movs	r0, #39	@ 0x27
 800350c:	f001 fcd2 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
}
 8003510:	bf00      	nop
 8003512:	37c8      	adds	r7, #200	@ 0xc8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40004800 	.word	0x40004800
 800351c:	40021000 	.word	0x40021000
 8003520:	48000400 	.word	0x48000400
 8003524:	48000c00 	.word	0x48000c00
 8003528:	20000a3c 	.word	0x20000a3c
 800352c:	4002001c 	.word	0x4002001c
 8003530:	20000a84 	.word	0x20000a84
 8003534:	40020030 	.word	0x40020030

08003538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	@ 0x38
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_InitTick+0xe0>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4a33      	ldr	r2, [pc, #204]	@ (8003618 <HAL_InitTick+0xe0>)
 800354c:	f043 0310 	orr.w	r3, r3, #16
 8003550:	6593      	str	r3, [r2, #88]	@ 0x58
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_InitTick+0xe0>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800355e:	f107 0210 	add.w	r2, r7, #16
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f003 fd35 	bl	8006fd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003578:	f003 fd02 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 800357c:	6378      	str	r0, [r7, #52]	@ 0x34
 800357e:	e004      	b.n	800358a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003580:	f003 fcfe 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 8003584:	4603      	mov	r3, r0
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	4a23      	ldr	r2, [pc, #140]	@ (800361c <HAL_InitTick+0xe4>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	3b01      	subs	r3, #1
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003598:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <HAL_InitTick+0xe8>)
 800359a:	4a22      	ldr	r2, [pc, #136]	@ (8003624 <HAL_InitTick+0xec>)
 800359c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800359e:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <HAL_InitTick+0xe8>)
 80035a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_InitTick+0xe8>)
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003620 <HAL_InitTick+0xe8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_InitTick+0xe8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_InitTick+0xe8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035be:	4818      	ldr	r0, [pc, #96]	@ (8003620 <HAL_InitTick+0xe8>)
 80035c0:	f004 fc29 	bl	8007e16 <HAL_TIM_Base_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80035ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11b      	bne.n	800360a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80035d2:	4813      	ldr	r0, [pc, #76]	@ (8003620 <HAL_InitTick+0xe8>)
 80035d4:	f004 fc76 	bl	8007ec4 <HAL_TIM_Base_Start_IT>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80035de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d111      	bne.n	800360a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035e6:	2036      	movs	r0, #54	@ 0x36
 80035e8:	f001 fc64 	bl	8004eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	d808      	bhi.n	8003604 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80035f2:	2200      	movs	r2, #0
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	2036      	movs	r0, #54	@ 0x36
 80035f8:	f001 fc40 	bl	8004e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <HAL_InitTick+0xf0>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e002      	b.n	800360a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800360a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800360e:	4618      	mov	r0, r3
 8003610:	3738      	adds	r7, #56	@ 0x38
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	431bde83 	.word	0x431bde83
 8003620:	20000ae0 	.word	0x20000ae0
 8003624:	40001000 	.word	0x40001000
 8003628:	200001bc 	.word	0x200001bc

0800362c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <NMI_Handler+0x4>

08003634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <HardFault_Handler+0x4>

0800363c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <MemManage_Handler+0x4>

08003644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <BusFault_Handler+0x4>

0800364c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <UsageFault_Handler+0x4>

08003654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SYNC_PULSE_Pin);
 8003666:	2002      	movs	r0, #2
 8003668:	f002 f86a 	bl	8005740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}

08003670 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003674:	4802      	ldr	r0, [pc, #8]	@ (8003680 <DMA1_Channel2_IRQHandler+0x10>)
 8003676:	f001 fdc2 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000a3c 	.word	0x20000a3c

08003684 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003688:	4802      	ldr	r0, [pc, #8]	@ (8003694 <DMA1_Channel3_IRQHandler+0x10>)
 800368a:	f001 fdb8 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000a84 	.word	0x20000a84

08003698 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <DMA1_Channel4_IRQHandler+0x10>)
 800369e:	f001 fdae 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200005d4 	.word	0x200005d4

080036ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80036b0:	4802      	ldr	r0, [pc, #8]	@ (80036bc <DMA1_Channel5_IRQHandler+0x10>)
 80036b2:	f001 fda4 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000058c 	.word	0x2000058c

080036c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036c4:	4802      	ldr	r0, [pc, #8]	@ (80036d0 <DMA1_Channel6_IRQHandler+0x10>)
 80036c6:	f001 fd9a 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200009f4 	.word	0x200009f4

080036d4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036d8:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <DMA1_Channel7_IRQHandler+0x10>)
 80036da:	f001 fd90 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200009ac 	.word	0x200009ac

080036e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036ec:	4802      	ldr	r0, [pc, #8]	@ (80036f8 <USART1_IRQHandler+0x10>)
 80036ee:	f005 f95b 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000814 	.word	0x20000814

080036fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003700:	4802      	ldr	r0, [pc, #8]	@ (800370c <USART2_IRQHandler+0x10>)
 8003702:	f005 f951 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000089c 	.word	0x2000089c

08003710 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003714:	4802      	ldr	r0, [pc, #8]	@ (8003720 <USART3_IRQHandler+0x10>)
 8003716:	f005 f947 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000924 	.word	0x20000924

08003724 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003728:	4802      	ldr	r0, [pc, #8]	@ (8003734 <SPI3_IRQHandler+0x10>)
 800372a:	f004 fa55 	bl	8007bd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000680 	.word	0x20000680

08003738 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800373c:	4802      	ldr	r0, [pc, #8]	@ (8003748 <TIM6_DAC_IRQHandler+0x10>)
 800373e:	f004 fc31 	bl	8007fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000ae0 	.word	0x20000ae0

0800374c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003754:	4a14      	ldr	r2, [pc, #80]	@ (80037a8 <_sbrk+0x5c>)
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <_sbrk+0x60>)
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003768:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <_sbrk+0x64>)
 800376a:	4a12      	ldr	r2, [pc, #72]	@ (80037b4 <_sbrk+0x68>)
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376e:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <_sbrk+0x64>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	429a      	cmp	r2, r3
 800377a:	d207      	bcs.n	800378c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800377c:	f009 f9e6 	bl	800cb4c <__errno>
 8003780:	4603      	mov	r3, r0
 8003782:	220c      	movs	r2, #12
 8003784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	e009      	b.n	80037a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800378c:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <_sbrk+0x64>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003792:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	4a05      	ldr	r2, [pc, #20]	@ (80037b0 <_sbrk+0x64>)
 800379c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20040000 	.word	0x20040000
 80037ac:	00000400 	.word	0x00000400
 80037b0:	20000b2c 	.word	0x20000b2c
 80037b4:	200040e0 	.word	0x200040e0

080037b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <SystemInit+0x20>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	4a05      	ldr	r2, [pc, #20]	@ (80037d8 <SystemInit+0x20>)
 80037c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037e0:	f7ff ffea 	bl	80037b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037e4:	480c      	ldr	r0, [pc, #48]	@ (8003818 <LoopForever+0x6>)
  ldr r1, =_edata
 80037e6:	490d      	ldr	r1, [pc, #52]	@ (800381c <LoopForever+0xa>)
  ldr r2, =_sidata
 80037e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <LoopForever+0xe>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ec:	e002      	b.n	80037f4 <LoopCopyDataInit>

080037ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037f2:	3304      	adds	r3, #4

080037f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f8:	d3f9      	bcc.n	80037ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003828 <LoopForever+0x16>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003800:	e001      	b.n	8003806 <LoopFillZerobss>

08003802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003804:	3204      	adds	r2, #4

08003806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003808:	d3fb      	bcc.n	8003802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800380a:	f009 f9a5 	bl	800cb58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800380e:	f7fe fc6f 	bl	80020f0 <main>

08003812 <LoopForever>:

LoopForever:
    b LoopForever
 8003812:	e7fe      	b.n	8003812 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003814:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800381c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003820:	0800d81c 	.word	0x0800d81c
  ldr r2, =_sbss
 8003824:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003828:	200040dc 	.word	0x200040dc

0800382c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800382c:	e7fe      	b.n	800382c <ADC1_2_IRQHandler>

0800382e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003838:	2003      	movs	r0, #3
 800383a:	f001 fb14 	bl	8004e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800383e:	200f      	movs	r0, #15
 8003840:	f7ff fe7a 	bl	8003538 <HAL_InitTick>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	71fb      	strb	r3, [r7, #7]
 800384e:	e001      	b.n	8003854 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003850:	f7ff fa1a 	bl	8002c88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003854:	79fb      	ldrb	r3, [r7, #7]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_IncTick+0x20>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <HAL_IncTick+0x24>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <HAL_IncTick+0x24>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	200001c0 	.word	0x200001c0
 8003884:	20000b30 	.word	0x20000b30

08003888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return uwTick;
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_GetTick+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000b30 	.word	0x20000b30

080038a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7ff ffee 	bl	8003888 <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d005      	beq.n	80038c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038ba:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <HAL_Delay+0x44>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038c6:	bf00      	nop
 80038c8:	f7ff ffde 	bl	8003888 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d8f7      	bhi.n	80038c8 <HAL_Delay+0x28>
  {
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200001c0 	.word	0x200001c0

080038e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3360      	adds	r3, #96	@ 0x60
 8003962:	461a      	mov	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <LL_ADC_SetOffset+0x44>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	03fff000 	.word	0x03fff000

08003998 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3360      	adds	r3, #96	@ 0x60
 80039a6:	461a      	mov	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3360      	adds	r3, #96	@ 0x60
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	615a      	str	r2, [r3, #20]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3330      	adds	r3, #48	@ 0x30
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	4413      	add	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	211f      	movs	r1, #31
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0e9b      	lsrs	r3, r3, #26
 8003a7e:	f003 011f 	and.w	r1, r3, #31
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b087      	sub	sp, #28
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3314      	adds	r3, #20
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	0e5b      	lsrs	r3, r3, #25
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	0d1b      	lsrs	r3, r3, #20
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	2107      	movs	r1, #7
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	0d1b      	lsrs	r3, r3, #20
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0318 	and.w	r3, r3, #24
 8003b16:	4908      	ldr	r1, [pc, #32]	@ (8003b38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b18:	40d9      	lsrs	r1, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	400b      	ands	r3, r1
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	0007ffff 	.word	0x0007ffff

08003b3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 031f 	and.w	r3, r3, #31
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6093      	str	r3, [r2, #8]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b90:	d101      	bne.n	8003b96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003bb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003be0:	d101      	bne.n	8003be6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <LL_ADC_IsEnabled+0x18>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <LL_ADC_IsEnabled+0x1a>
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c52:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d101      	bne.n	8003c82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d101      	bne.n	8003ca8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b089      	sub	sp, #36	@ 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e133      	b.n	8003f3a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fe fff9 	bl	8002cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff3f 	bl	8003b7c <LL_ADC_IsDeepPowerDownEnabled>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff25 	bl	8003b58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff5a 	bl	8003bcc <LL_ADC_IsInternalRegulatorEnabled>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff3e 	bl	8003ba4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d28:	4b86      	ldr	r3, [pc, #536]	@ (8003f44 <HAL_ADC_Init+0x28c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	4a86      	ldr	r2, [pc, #536]	@ (8003f48 <HAL_ADC_Init+0x290>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d3c:	e002      	b.n	8003d44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f9      	bne.n	8003d3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff3c 	bl	8003bcc <LL_ADC_IsInternalRegulatorEnabled>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f043 0210 	orr.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff75 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8003d80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 80cc 	bne.w	8003f28 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 80c8 	bne.w	8003f28 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003da0:	f043 0202 	orr.w	r2, r3, #2
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff35 	bl	8003c1c <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d115      	bne.n	8003de4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db8:	4864      	ldr	r0, [pc, #400]	@ (8003f4c <HAL_ADC_Init+0x294>)
 8003dba:	f7ff ff2f 	bl	8003c1c <LL_ADC_IsEnabled>
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4863      	ldr	r0, [pc, #396]	@ (8003f50 <HAL_ADC_Init+0x298>)
 8003dc2:	f7ff ff2b 	bl	8003c1c <LL_ADC_IsEnabled>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	431c      	orrs	r4, r3
 8003dca:	4862      	ldr	r0, [pc, #392]	@ (8003f54 <HAL_ADC_Init+0x29c>)
 8003dcc:	f7ff ff26 	bl	8003c1c <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4323      	orrs	r3, r4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	485e      	ldr	r0, [pc, #376]	@ (8003f58 <HAL_ADC_Init+0x2a0>)
 8003de0:	f7ff fd82 	bl	80038e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7e5b      	ldrb	r3, [r3, #25]
 8003de8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003df4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d106      	bne.n	8003e20 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	3b01      	subs	r3, #1
 8003e18:	045b      	lsls	r3, r3, #17
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	4b46      	ldr	r3, [pc, #280]	@ (8003f5c <HAL_ADC_Init+0x2a4>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff1b 	bl	8003c90 <LL_ADC_INJ_IsConversionOngoing>
 8003e5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d140      	bne.n	8003ee4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d13d      	bne.n	8003ee4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7e1b      	ldrb	r3, [r3, #24]
 8003e70:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e72:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e8a:	f023 0306 	bic.w	r3, r3, #6
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d118      	bne.n	8003ed4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	e007      	b.n	8003ee4 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10c      	bne.n	8003f06 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	f023 010f 	bic.w	r1, r3, #15
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f04:	e007      	b.n	8003f16 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 020f 	bic.w	r2, r2, #15
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	f043 0201 	orr.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f26:	e007      	b.n	8003f38 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	@ 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd90      	pop	{r4, r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200001b8 	.word	0x200001b8
 8003f48:	053e2d63 	.word	0x053e2d63
 8003f4c:	50040000 	.word	0x50040000
 8003f50:	50040100 	.word	0x50040100
 8003f54:	50040200 	.word	0x50040200
 8003f58:	50040300 	.word	0x50040300
 8003f5c:	fff0c007 	.word	0xfff0c007

08003f60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f6c:	4853      	ldr	r0, [pc, #332]	@ (80040bc <HAL_ADC_Start_DMA+0x15c>)
 8003f6e:	f7ff fde5 	bl	8003b3c <LL_ADC_GetMultimode>
 8003f72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fe76 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f040 8093 	bne.w	80040ac <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_Start_DMA+0x34>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e08e      	b.n	80040b2 <HAL_ADC_Start_DMA+0x152>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a47      	ldr	r2, [pc, #284]	@ (80040c0 <HAL_ADC_Start_DMA+0x160>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d008      	beq.n	8003fb8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d002      	beq.n	8003fb8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b09      	cmp	r3, #9
 8003fb6:	d172      	bne.n	800409e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fcb7 	bl	800492c <ADC_Enable>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d165      	bne.n	8004094 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a38      	ldr	r2, [pc, #224]	@ (80040c4 <HAL_ADC_Start_DMA+0x164>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d002      	beq.n	8003fec <HAL_ADC_Start_DMA+0x8c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	e000      	b.n	8003fee <HAL_ADC_Start_DMA+0x8e>
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_ADC_Start_DMA+0x168>)
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d002      	beq.n	8003ffc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	f023 0206 	bic.w	r2, r3, #6
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004020:	e002      	b.n	8004028 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	4a27      	ldr	r2, [pc, #156]	@ (80040cc <HAL_ADC_Start_DMA+0x16c>)
 800402e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	4a26      	ldr	r2, [pc, #152]	@ (80040d0 <HAL_ADC_Start_DMA+0x170>)
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	4a25      	ldr	r2, [pc, #148]	@ (80040d4 <HAL_ADC_Start_DMA+0x174>)
 800403e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	221c      	movs	r2, #28
 8004046:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0210 	orr.w	r2, r2, #16
 800405e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3340      	adds	r3, #64	@ 0x40
 800407a:	4619      	mov	r1, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f000 ffde 	bl	8005040 <HAL_DMA_Start_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fdd8 	bl	8003c42 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004092:	e00d      	b.n	80040b0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 800409c:	e008      	b.n	80040b0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80040aa:	e001      	b.n	80040b0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
 80040ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	50040300 	.word	0x50040300
 80040c0:	50040200 	.word	0x50040200
 80040c4:	50040100 	.word	0x50040100
 80040c8:	50040000 	.word	0x50040000
 80040cc:	08004a39 	.word	0x08004a39
 80040d0:	08004b11 	.word	0x08004b11
 80040d4:	08004b2d 	.word	0x08004b2d

080040d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0b6      	sub	sp, #216	@ 0xd8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x22>
 8004132:	2302      	movs	r3, #2
 8004134:	e3e3      	b.n	80048fe <HAL_ADC_ConfigChannel+0x7ea>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fd91 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 83c4 	bne.w	80048d8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d824      	bhi.n	80041aa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	3b02      	subs	r3, #2
 8004166:	2b03      	cmp	r3, #3
 8004168:	d81b      	bhi.n	80041a2 <HAL_ADC_ConfigChannel+0x8e>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_ADC_ConfigChannel+0x5c>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004181 	.word	0x08004181
 8004174:	08004189 	.word	0x08004189
 8004178:	08004191 	.word	0x08004191
 800417c:	08004199 	.word	0x08004199
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004180:	230c      	movs	r3, #12
 8004182:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004186:	e010      	b.n	80041aa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004188:	2312      	movs	r3, #18
 800418a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800418e:	e00c      	b.n	80041aa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004190:	2318      	movs	r3, #24
 8004192:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004196:	e008      	b.n	80041aa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800419c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041a0:	e003      	b.n	80041aa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80041a2:	2306      	movs	r3, #6
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041a8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80041b8:	f7ff fc45 	bl	8003a46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fd52 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 80041c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fd5e 	bl	8003c90 <LL_ADC_INJ_IsConversionOngoing>
 80041d4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 81bf 	bne.w	8004560 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 81ba 	bne.w	8004560 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041f4:	d10f      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	4619      	mov	r1, r3
 8004202:	f7ff fc4c 	bl	8003a9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fbf3 	bl	80039fa <LL_ADC_SetSamplingTimeCommonConfig>
 8004214:	e00e      	b.n	8004234 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	461a      	mov	r2, r3
 8004224:	f7ff fc3b 	bl	8003a9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fbe3 	bl	80039fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	08db      	lsrs	r3, r3, #3
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d00a      	beq.n	800426c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004266:	f7ff fb73 	bl	8003950 <LL_ADC_SetOffset>
 800426a:	e179      	b.n	8004560 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fb90 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x184>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fb85 	bl	8003998 <LL_ADC_GetOffsetChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	f003 021f 	and.w	r2, r3, #31
 8004296:	e01e      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x1c2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fb7a 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80042c6:	2320      	movs	r3, #32
 80042c8:	e004      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80042ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x1da>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	0e9b      	lsrs	r3, r3, #26
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	e018      	b.n	8004320 <HAL_ADC_ConfigChannel+0x20c>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800430a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004312:	2320      	movs	r3, #32
 8004314:	e004      	b.n	8004320 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004316:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004320:	429a      	cmp	r2, r3
 8004322:	d106      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fb49 	bl	80039c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fb2d 	bl	8003998 <LL_ADC_GetOffsetChannel>
 800433e:	4603      	mov	r3, r0
 8004340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_ADC_ConfigChannel+0x24a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fb22 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004354:	4603      	mov	r3, r0
 8004356:	0e9b      	lsrs	r3, r3, #26
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	e01e      	b.n	800439c <HAL_ADC_ConfigChannel+0x288>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fb17 	bl	8003998 <LL_ADC_GetOffsetChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800437c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800438c:	2320      	movs	r3, #32
 800438e:	e004      	b.n	800439a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x2a0>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	e018      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x2d2>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80043c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80043d8:	2320      	movs	r3, #32
 80043da:	e004      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80043dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d106      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	2101      	movs	r1, #1
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fae6 	bl	80039c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff faca 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004404:	4603      	mov	r3, r0
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x310>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2102      	movs	r1, #2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fabf 	bl	8003998 <LL_ADC_GetOffsetChannel>
 800441a:	4603      	mov	r3, r0
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	f003 021f 	and.w	r2, r3, #31
 8004422:	e01e      	b.n	8004462 <HAL_ADC_ConfigChannel+0x34e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fab4 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800444a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004452:	2320      	movs	r3, #32
 8004454:	e004      	b.n	8004460 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_ADC_ConfigChannel+0x366>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	0e9b      	lsrs	r3, r3, #26
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	e014      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x390>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800448e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004496:	2320      	movs	r3, #32
 8004498:	e004      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800449a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d106      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2102      	movs	r1, #2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fa87 	bl	80039c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2103      	movs	r1, #3
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fa6b 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x3ce>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2103      	movs	r1, #3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fa60 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80044d8:	4603      	mov	r3, r0
 80044da:	0e9b      	lsrs	r3, r3, #26
 80044dc:	f003 021f 	and.w	r2, r3, #31
 80044e0:	e017      	b.n	8004512 <HAL_ADC_ConfigChannel+0x3fe>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2103      	movs	r1, #3
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fa55 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80044ee:	4603      	mov	r3, r0
 80044f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80044fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80044fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004504:	2320      	movs	r3, #32
 8004506:	e003      	b.n	8004510 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451a:	2b00      	cmp	r3, #0
 800451c:	d105      	bne.n	800452a <HAL_ADC_ConfigChannel+0x416>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0e9b      	lsrs	r3, r3, #26
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	e011      	b.n	800454e <HAL_ADC_ConfigChannel+0x43a>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004538:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800453a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800453c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004542:	2320      	movs	r3, #32
 8004544:	e003      	b.n	800454e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004546:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800454e:	429a      	cmp	r2, r3
 8004550:	d106      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	2103      	movs	r1, #3
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fa32 	bl	80039c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fb59 	bl	8003c1c <LL_ADC_IsEnabled>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 813f 	bne.w	80047f0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f7ff fab8 	bl	8003af4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a8e      	ldr	r2, [pc, #568]	@ (80047c4 <HAL_ADC_ConfigChannel+0x6b0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f040 8130 	bne.w	80047f0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x4a4>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	3301      	adds	r3, #1
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e019      	b.n	80045ec <HAL_ADC_ConfigChannel+0x4d8>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80045ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80045d0:	2320      	movs	r3, #32
 80045d2:	e003      	b.n	80045dc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80045d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	3301      	adds	r3, #1
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2b09      	cmp	r3, #9
 80045e4:	bf94      	ite	ls
 80045e6:	2301      	movls	r3, #1
 80045e8:	2300      	movhi	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d079      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_ADC_ConfigChannel+0x4f8>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	069b      	lsls	r3, r3, #26
 8004606:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800460a:	e015      	b.n	8004638 <HAL_ADC_ConfigChannel+0x524>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800461e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004624:	2320      	movs	r3, #32
 8004626:	e003      	b.n	8004630 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	069b      	lsls	r3, r3, #26
 8004634:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x544>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	3301      	adds	r3, #1
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	e017      	b.n	8004688 <HAL_ADC_ConfigChannel+0x574>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004668:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800466a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e003      	b.n	800467c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3301      	adds	r3, #1
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	ea42 0103 	orr.w	r1, r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x59a>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	3301      	adds	r3, #1
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	051b      	lsls	r3, r3, #20
 80046ac:	e018      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x5cc>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80046c6:	2320      	movs	r3, #32
 80046c8:	e003      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e0:	430b      	orrs	r3, r1
 80046e2:	e080      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x5ec>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0e9b      	lsrs	r3, r3, #26
 80046f6:	3301      	adds	r3, #1
 80046f8:	069b      	lsls	r3, r3, #26
 80046fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046fe:	e015      	b.n	800472c <HAL_ADC_ConfigChannel+0x618>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004718:	2320      	movs	r3, #32
 800471a:	e003      	b.n	8004724 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3301      	adds	r3, #1
 8004726:	069b      	lsls	r3, r3, #26
 8004728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_ADC_ConfigChannel+0x638>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	3301      	adds	r3, #1
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	e017      	b.n	800477c <HAL_ADC_ConfigChannel+0x668>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	61bb      	str	r3, [r7, #24]
  return result;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	ea42 0103 	orr.w	r1, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x694>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	3301      	adds	r3, #1
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4613      	mov	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4413      	add	r3, r2
 800479e:	3b1e      	subs	r3, #30
 80047a0:	051b      	lsls	r3, r3, #20
 80047a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	e01d      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x6d0>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  return result;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e005      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x6bc>
 80047c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	f003 021f 	and.w	r2, r3, #31
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	3b1e      	subs	r3, #30
 80047de:	051b      	lsls	r3, r3, #20
 80047e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7ff f957 	bl	8003a9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b44      	ldr	r3, [pc, #272]	@ (8004908 <HAL_ADC_ConfigChannel+0x7f4>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d07a      	beq.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047fc:	4843      	ldr	r0, [pc, #268]	@ (800490c <HAL_ADC_ConfigChannel+0x7f8>)
 80047fe:	f7ff f899 	bl	8003934 <LL_ADC_GetCommonPathInternalCh>
 8004802:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a41      	ldr	r2, [pc, #260]	@ (8004910 <HAL_ADC_ConfigChannel+0x7fc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d12c      	bne.n	800486a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d126      	bne.n	800486a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3c      	ldr	r2, [pc, #240]	@ (8004914 <HAL_ADC_ConfigChannel+0x800>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_ADC_ConfigChannel+0x71c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3b      	ldr	r2, [pc, #236]	@ (8004918 <HAL_ADC_ConfigChannel+0x804>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d15d      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004834:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004838:	4619      	mov	r1, r3
 800483a:	4834      	ldr	r0, [pc, #208]	@ (800490c <HAL_ADC_ConfigChannel+0x7f8>)
 800483c:	f7ff f867 	bl	800390e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004840:	4b36      	ldr	r3, [pc, #216]	@ (800491c <HAL_ADC_ConfigChannel+0x808>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	4a36      	ldr	r2, [pc, #216]	@ (8004920 <HAL_ADC_ConfigChannel+0x80c>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800485a:	e002      	b.n	8004862 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3b01      	subs	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f9      	bne.n	800485c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004868:	e040      	b.n	80048ec <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2d      	ldr	r2, [pc, #180]	@ (8004924 <HAL_ADC_ConfigChannel+0x810>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d118      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d112      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	@ (8004914 <HAL_ADC_ConfigChannel+0x800>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_ADC_ConfigChannel+0x780>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a22      	ldr	r2, [pc, #136]	@ (8004918 <HAL_ADC_ConfigChannel+0x804>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d12d      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004898:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489c:	4619      	mov	r1, r3
 800489e:	481b      	ldr	r0, [pc, #108]	@ (800490c <HAL_ADC_ConfigChannel+0x7f8>)
 80048a0:	f7ff f835 	bl	800390e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048a4:	e024      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004928 <HAL_ADC_ConfigChannel+0x814>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d120      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11a      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a14      	ldr	r2, [pc, #80]	@ (8004914 <HAL_ADC_ConfigChannel+0x800>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d115      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ce:	4619      	mov	r1, r3
 80048d0:	480e      	ldr	r0, [pc, #56]	@ (800490c <HAL_ADC_ConfigChannel+0x7f8>)
 80048d2:	f7ff f81c 	bl	800390e <LL_ADC_SetCommonPathInternalCh>
 80048d6:	e00c      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048ea:	e002      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ec:	bf00      	nop
 80048ee:	e000      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80048fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80048fe:	4618      	mov	r0, r3
 8004900:	37d8      	adds	r7, #216	@ 0xd8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	80080000 	.word	0x80080000
 800490c:	50040300 	.word	0x50040300
 8004910:	c7520000 	.word	0xc7520000
 8004914:	50040000 	.word	0x50040000
 8004918:	50040200 	.word	0x50040200
 800491c:	200001b8 	.word	0x200001b8
 8004920:	053e2d63 	.word	0x053e2d63
 8004924:	cb840000 	.word	0xcb840000
 8004928:	80000001 	.word	0x80000001

0800492c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff f96d 	bl	8003c1c <LL_ADC_IsEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d169      	bne.n	8004a1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <ADC_Enable+0xfc>)
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495a:	f043 0210 	orr.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e055      	b.n	8004a1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f93c 	bl	8003bf4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800497c:	482b      	ldr	r0, [pc, #172]	@ (8004a2c <ADC_Enable+0x100>)
 800497e:	f7fe ffd9 	bl	8003934 <LL_ADC_GetCommonPathInternalCh>
 8004982:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800498c:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <ADC_Enable+0x104>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	4a28      	ldr	r2, [pc, #160]	@ (8004a34 <ADC_Enable+0x108>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049a6:	e002      	b.n	80049ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f9      	bne.n	80049a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049b4:	f7fe ff68 	bl	8003888 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ba:	e028      	b.n	8004a0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff f92b 	bl	8003c1c <LL_ADC_IsEnabled>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff f90f 	bl	8003bf4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049d6:	f7fe ff57 	bl	8003888 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d914      	bls.n	8004a0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d00d      	beq.n	8004a0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d1cf      	bne.n	80049bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	8000003f 	.word	0x8000003f
 8004a2c:	50040300 	.word	0x50040300
 8004a30:	200001b8 	.word	0x200001b8
 8004a34:	053e2d63 	.word	0x053e2d63

08004a38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d14b      	bne.n	8004aea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d021      	beq.n	8004ab0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe ffd5 	bl	8003a20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d032      	beq.n	8004ae2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d12b      	bne.n	8004ae2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11f      	bne.n	8004ae2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aae:	e018      	b.n	8004ae2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d111      	bne.n	8004ae2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff faf8 	bl	80040d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ae8:	e00e      	b.n	8004b08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff fb02 	bl	8004100 <HAL_ADC_ErrorCallback>
}
 8004afc:	e004      	b.n	8004b08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff fae4 	bl	80040ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff fad4 	bl	8004100 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <LL_ADC_IsEnabled>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <LL_ADC_IsEnabled+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <LL_ADC_IsEnabled+0x1a>
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d101      	bne.n	8004b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b0a1      	sub	sp, #132	@ 0x84
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e093      	b.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a47      	ldr	r2, [pc, #284]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d102      	bne.n	8004bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004be4:	4b46      	ldr	r3, [pc, #280]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e001      	b.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e072      	b.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff ffb9 	bl	8004b86 <LL_ADC_REG_IsConversionOngoing>
 8004c14:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ffb3 	bl	8004b86 <LL_ADC_REG_IsConversionOngoing>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d154      	bne.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d151      	bne.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c2c:	4b35      	ldr	r3, [pc, #212]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004c2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02c      	beq.n	8004c92 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c4a:	035b      	lsls	r3, r3, #13
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c54:	4829      	ldr	r0, [pc, #164]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004c56:	f7ff ff83 	bl	8004b60 <LL_ADC_IsEnabled>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4828      	ldr	r0, [pc, #160]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004c5e:	f7ff ff7f 	bl	8004b60 <LL_ADC_IsEnabled>
 8004c62:	4603      	mov	r3, r0
 8004c64:	431c      	orrs	r4, r3
 8004c66:	4828      	ldr	r0, [pc, #160]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004c68:	f7ff ff7a 	bl	8004b60 <LL_ADC_IsEnabled>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4323      	orrs	r3, r4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d137      	bne.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c7c:	f023 030f 	bic.w	r3, r3, #15
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6811      	ldr	r1, [r2, #0]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	6892      	ldr	r2, [r2, #8]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c8e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c90:	e028      	b.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c9e:	4817      	ldr	r0, [pc, #92]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ca0:	f7ff ff5e 	bl	8004b60 <LL_ADC_IsEnabled>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	4816      	ldr	r0, [pc, #88]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ca8:	f7ff ff5a 	bl	8004b60 <LL_ADC_IsEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	431c      	orrs	r4, r3
 8004cb0:	4815      	ldr	r0, [pc, #84]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004cb2:	f7ff ff55 	bl	8004b60 <LL_ADC_IsEnabled>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4323      	orrs	r3, r4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d112      	bne.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cc6:	f023 030f 	bic.w	r3, r3, #15
 8004cca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ccc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cce:	e009      	b.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004cee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3784      	adds	r7, #132	@ 0x84
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd90      	pop	{r4, r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	50040000 	.word	0x50040000
 8004d00:	50040100 	.word	0x50040100
 8004d04:	50040300 	.word	0x50040300
 8004d08:	50040200 	.word	0x50040200

08004d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <__NVIC_SetPriorityGrouping+0x44>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d3e:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <__NVIC_SetPriorityGrouping+0x44>)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	60d3      	str	r3, [r2, #12]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000ed00 	.word	0xe000ed00

08004d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d58:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <__NVIC_GetPriorityGrouping+0x18>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 0307 	and.w	r3, r3, #7
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	db0b      	blt.n	8004d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	f003 021f 	and.w	r2, r3, #31
 8004d88:	4907      	ldr	r1, [pc, #28]	@ (8004da8 <__NVIC_EnableIRQ+0x38>)
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2001      	movs	r0, #1
 8004d92:	fa00 f202 	lsl.w	r2, r0, r2
 8004d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	e000e100 	.word	0xe000e100

08004dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	db0a      	blt.n	8004dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	490c      	ldr	r1, [pc, #48]	@ (8004df8 <__NVIC_SetPriority+0x4c>)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	0112      	lsls	r2, r2, #4
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	440b      	add	r3, r1
 8004dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dd4:	e00a      	b.n	8004dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4908      	ldr	r1, [pc, #32]	@ (8004dfc <__NVIC_SetPriority+0x50>)
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	3b04      	subs	r3, #4
 8004de4:	0112      	lsls	r2, r2, #4
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	440b      	add	r3, r1
 8004dea:	761a      	strb	r2, [r3, #24]
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000e100 	.word	0xe000e100
 8004dfc:	e000ed00 	.word	0xe000ed00

08004e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b089      	sub	sp, #36	@ 0x24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f1c3 0307 	rsb	r3, r3, #7
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	bf28      	it	cs
 8004e1e:	2304      	movcs	r3, #4
 8004e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2b06      	cmp	r3, #6
 8004e28:	d902      	bls.n	8004e30 <NVIC_EncodePriority+0x30>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3b03      	subs	r3, #3
 8004e2e:	e000      	b.n	8004e32 <NVIC_EncodePriority+0x32>
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43da      	mvns	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	401a      	ands	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e48:	f04f 31ff 	mov.w	r1, #4294967295
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	43d9      	mvns	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e58:	4313      	orrs	r3, r2
         );
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3724      	adds	r7, #36	@ 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff4c 	bl	8004d0c <__NVIC_SetPriorityGrouping>
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e8e:	f7ff ff61 	bl	8004d54 <__NVIC_GetPriorityGrouping>
 8004e92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	f7ff ffb1 	bl	8004e00 <NVIC_EncodePriority>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ff80 	bl	8004dac <__NVIC_SetPriority>
}
 8004eac:	bf00      	nop
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff ff54 	bl	8004d70 <__NVIC_EnableIRQ>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e098      	b.n	8005014 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8005020 <HAL_DMA_Init+0x150>)
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d80f      	bhi.n	8004f0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8005024 <HAL_DMA_Init+0x154>)
 8004ef6:	4413      	add	r3, r2
 8004ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8005028 <HAL_DMA_Init+0x158>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	009a      	lsls	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a48      	ldr	r2, [pc, #288]	@ (800502c <HAL_DMA_Init+0x15c>)
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f0c:	e00e      	b.n	8004f2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b46      	ldr	r3, [pc, #280]	@ (8005030 <HAL_DMA_Init+0x160>)
 8004f16:	4413      	add	r3, r2
 8004f18:	4a43      	ldr	r2, [pc, #268]	@ (8005028 <HAL_DMA_Init+0x158>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	009a      	lsls	r2, r3, #2
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a42      	ldr	r2, [pc, #264]	@ (8005034 <HAL_DMA_Init+0x164>)
 8004f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f86:	d039      	beq.n	8004ffc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	4a27      	ldr	r2, [pc, #156]	@ (800502c <HAL_DMA_Init+0x15c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d11a      	bne.n	8004fc8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f92:	4b29      	ldr	r3, [pc, #164]	@ (8005038 <HAL_DMA_Init+0x168>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9a:	f003 031c 	and.w	r3, r3, #28
 8004f9e:	210f      	movs	r1, #15
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	4924      	ldr	r1, [pc, #144]	@ (8005038 <HAL_DMA_Init+0x168>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fac:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_DMA_Init+0x168>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f003 031c 	and.w	r3, r3, #28
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	491d      	ldr	r1, [pc, #116]	@ (8005038 <HAL_DMA_Init+0x168>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
 8004fc6:	e019      	b.n	8004ffc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800503c <HAL_DMA_Init+0x16c>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd0:	f003 031c 	and.w	r3, r3, #28
 8004fd4:	210f      	movs	r1, #15
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	4917      	ldr	r1, [pc, #92]	@ (800503c <HAL_DMA_Init+0x16c>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fe2:	4b16      	ldr	r3, [pc, #88]	@ (800503c <HAL_DMA_Init+0x16c>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	f003 031c 	and.w	r3, r3, #28
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	4911      	ldr	r1, [pc, #68]	@ (800503c <HAL_DMA_Init+0x16c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40020407 	.word	0x40020407
 8005024:	bffdfff8 	.word	0xbffdfff8
 8005028:	cccccccd 	.word	0xcccccccd
 800502c:	40020000 	.word	0x40020000
 8005030:	bffdfbf8 	.word	0xbffdfbf8
 8005034:	40020400 	.word	0x40020400
 8005038:	400200a8 	.word	0x400200a8
 800503c:	400204a8 	.word	0x400204a8

08005040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Start_IT+0x20>
 800505c:	2302      	movs	r3, #2
 800505e:	e04b      	b.n	80050f8 <HAL_DMA_Start_IT+0xb8>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d13a      	bne.n	80050ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f95f 	bl	800535c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 020e 	orr.w	r2, r2, #14
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e00f      	b.n	80050d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 020a 	orr.w	r2, r2, #10
 80050d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e005      	b.n	80050f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
 80050f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d008      	beq.n	800512a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2204      	movs	r2, #4
 800511c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e022      	b.n	8005170 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 020e 	bic.w	r2, r2, #14
 8005138:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f003 021c 	and.w	r2, r3, #28
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	2101      	movs	r1, #1
 8005158:	fa01 f202 	lsl.w	r2, r1, r2
 800515c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d005      	beq.n	80051a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2204      	movs	r2, #4
 8005198:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e029      	b.n	80051f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 020e 	bic.w	r2, r2, #14
 80051ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c4:	f003 021c 	and.w	r2, r3, #28
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f202 	lsl.w	r2, r1, r2
 80051d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
    }
  }
  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	f003 031c 	and.w	r3, r3, #28
 800521e:	2204      	movs	r2, #4
 8005220:	409a      	lsls	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d026      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7a>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d021      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0204 	bic.w	r2, r2, #4
 8005250:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	f003 021c 	and.w	r2, r3, #28
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2104      	movs	r1, #4
 8005260:	fa01 f202 	lsl.w	r2, r1, r2
 8005264:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	2b00      	cmp	r3, #0
 800526c:	d071      	beq.n	8005352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005276:	e06c      	b.n	8005352 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527c:	f003 031c 	and.w	r3, r3, #28
 8005280:	2202      	movs	r2, #2
 8005282:	409a      	lsls	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02e      	beq.n	80052ea <HAL_DMA_IRQHandler+0xec>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d029      	beq.n	80052ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 020a 	bic.w	r2, r2, #10
 80052b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c0:	f003 021c 	and.w	r2, r3, #28
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	2102      	movs	r1, #2
 80052ca:	fa01 f202 	lsl.w	r2, r1, r2
 80052ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d038      	beq.n	8005352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052e8:	e033      	b.n	8005352 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	f003 031c 	and.w	r3, r3, #28
 80052f2:	2208      	movs	r2, #8
 80052f4:	409a      	lsls	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02a      	beq.n	8005354 <HAL_DMA_IRQHandler+0x156>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d025      	beq.n	8005354 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 020e 	bic.w	r2, r2, #14
 8005316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531c:	f003 021c 	and.w	r2, r3, #28
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f202 	lsl.w	r2, r1, r2
 800532a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005352:	bf00      	nop
 8005354:	bf00      	nop
}
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536e:	f003 021c 	and.w	r2, r3, #28
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	2101      	movs	r1, #1
 8005378:	fa01 f202 	lsl.w	r2, r1, r2
 800537c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b10      	cmp	r3, #16
 800538c:	d108      	bne.n	80053a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800539e:	e007      	b.n	80053b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ca:	e166      	b.n	800569a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2101      	movs	r1, #1
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8158 	beq.w	8005694 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d005      	beq.n	80053fc <HAL_GPIO_Init+0x40>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d130      	bne.n	800545e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4013      	ands	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005432:	2201      	movs	r2, #1
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0201 	and.w	r2, r3, #1
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b03      	cmp	r3, #3
 8005468:	d017      	beq.n	800549a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	2203      	movs	r2, #3
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d123      	bne.n	80054ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	08da      	lsrs	r2, r3, #3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3208      	adds	r2, #8
 80054ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	220f      	movs	r2, #15
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4013      	ands	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	08da      	lsrs	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3208      	adds	r2, #8
 80054e8:	6939      	ldr	r1, [r7, #16]
 80054ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2203      	movs	r2, #3
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4013      	ands	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0203 	and.w	r2, r3, #3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80b2 	beq.w	8005694 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005530:	4b61      	ldr	r3, [pc, #388]	@ (80056b8 <HAL_GPIO_Init+0x2fc>)
 8005532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005534:	4a60      	ldr	r2, [pc, #384]	@ (80056b8 <HAL_GPIO_Init+0x2fc>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6613      	str	r3, [r2, #96]	@ 0x60
 800553c:	4b5e      	ldr	r3, [pc, #376]	@ (80056b8 <HAL_GPIO_Init+0x2fc>)
 800553e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005548:	4a5c      	ldr	r2, [pc, #368]	@ (80056bc <HAL_GPIO_Init+0x300>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	089b      	lsrs	r3, r3, #2
 800554e:	3302      	adds	r3, #2
 8005550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	220f      	movs	r2, #15
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4013      	ands	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005572:	d02b      	beq.n	80055cc <HAL_GPIO_Init+0x210>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a52      	ldr	r2, [pc, #328]	@ (80056c0 <HAL_GPIO_Init+0x304>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d025      	beq.n	80055c8 <HAL_GPIO_Init+0x20c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a51      	ldr	r2, [pc, #324]	@ (80056c4 <HAL_GPIO_Init+0x308>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d01f      	beq.n	80055c4 <HAL_GPIO_Init+0x208>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a50      	ldr	r2, [pc, #320]	@ (80056c8 <HAL_GPIO_Init+0x30c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d019      	beq.n	80055c0 <HAL_GPIO_Init+0x204>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a4f      	ldr	r2, [pc, #316]	@ (80056cc <HAL_GPIO_Init+0x310>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_GPIO_Init+0x200>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a4e      	ldr	r2, [pc, #312]	@ (80056d0 <HAL_GPIO_Init+0x314>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00d      	beq.n	80055b8 <HAL_GPIO_Init+0x1fc>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a4d      	ldr	r2, [pc, #308]	@ (80056d4 <HAL_GPIO_Init+0x318>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <HAL_GPIO_Init+0x1f8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a4c      	ldr	r2, [pc, #304]	@ (80056d8 <HAL_GPIO_Init+0x31c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_GPIO_Init+0x1f4>
 80055ac:	2307      	movs	r3, #7
 80055ae:	e00e      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055b0:	2308      	movs	r3, #8
 80055b2:	e00c      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055b4:	2306      	movs	r3, #6
 80055b6:	e00a      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055b8:	2305      	movs	r3, #5
 80055ba:	e008      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055bc:	2304      	movs	r3, #4
 80055be:	e006      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055c0:	2303      	movs	r3, #3
 80055c2:	e004      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e002      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_GPIO_Init+0x212>
 80055cc:	2300      	movs	r3, #0
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	f002 0203 	and.w	r2, r2, #3
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	4093      	lsls	r3, r2
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055de:	4937      	ldr	r1, [pc, #220]	@ (80056bc <HAL_GPIO_Init+0x300>)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055ec:	4b3b      	ldr	r3, [pc, #236]	@ (80056dc <HAL_GPIO_Init+0x320>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005610:	4a32      	ldr	r2, [pc, #200]	@ (80056dc <HAL_GPIO_Init+0x320>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005616:	4b31      	ldr	r3, [pc, #196]	@ (80056dc <HAL_GPIO_Init+0x320>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	43db      	mvns	r3, r3
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800563a:	4a28      	ldr	r2, [pc, #160]	@ (80056dc <HAL_GPIO_Init+0x320>)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005640:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <HAL_GPIO_Init+0x320>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005664:	4a1d      	ldr	r2, [pc, #116]	@ (80056dc <HAL_GPIO_Init+0x320>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <HAL_GPIO_Init+0x320>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800568e:	4a13      	ldr	r2, [pc, #76]	@ (80056dc <HAL_GPIO_Init+0x320>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3301      	adds	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f47f ae91 	bne.w	80053cc <HAL_GPIO_Init+0x10>
  }
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40010000 	.word	0x40010000
 80056c0:	48000400 	.word	0x48000400
 80056c4:	48000800 	.word	0x48000800
 80056c8:	48000c00 	.word	0x48000c00
 80056cc:	48001000 	.word	0x48001000
 80056d0:	48001400 	.word	0x48001400
 80056d4:	48001800 	.word	0x48001800
 80056d8:	48001c00 	.word	0x48001c00
 80056dc:	40010400 	.word	0x40010400

080056e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	887b      	ldrh	r3, [r7, #2]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e001      	b.n	8005702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	807b      	strh	r3, [r7, #2]
 800571c:	4613      	mov	r3, r2
 800571e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005720:	787b      	ldrb	r3, [r7, #1]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005726:	887a      	ldrh	r2, [r7, #2]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800572c:	e002      	b.n	8005734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800574a:	4b08      	ldr	r3, [pc, #32]	@ (800576c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005756:	4a05      	ldr	r2, [pc, #20]	@ (800576c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f806 	bl	8005770 <HAL_GPIO_EXTI_Callback>
  }
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40010400 	.word	0x40010400

08005770 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e08d      	b.n	80058b4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fd fb35 	bl	8002e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2224      	movs	r2, #36	@ 0x24
 80057b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80057d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	e006      	b.n	800580e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800580c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d108      	bne.n	8005828 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	e007      	b.n	8005838 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005836:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800584a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800585a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69d9      	ldr	r1, [r3, #28]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	461a      	mov	r2, r3
 80058c8:	460b      	mov	r3, r1
 80058ca:	817b      	strh	r3, [r7, #10]
 80058cc:	4613      	mov	r3, r2
 80058ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b20      	cmp	r3, #32
 80058da:	f040 80fd 	bne.w	8005ad8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_I2C_Master_Transmit+0x30>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e0f6      	b.n	8005ada <HAL_I2C_Master_Transmit+0x21e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058f4:	f7fd ffc8 	bl	8003888 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2319      	movs	r3, #25
 8005900:	2201      	movs	r2, #1
 8005902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fa0a 	bl	8005d20 <I2C_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0e1      	b.n	8005ada <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2221      	movs	r2, #33	@ 0x21
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2210      	movs	r2, #16
 8005922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	893a      	ldrh	r2, [r7, #8]
 8005936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	2bff      	cmp	r3, #255	@ 0xff
 8005946:	d906      	bls.n	8005956 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22ff      	movs	r2, #255	@ 0xff
 800594c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800594e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e007      	b.n	8005966 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005960:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005964:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	2b00      	cmp	r3, #0
 800596c:	d024      	beq.n	80059b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	8979      	ldrh	r1, [r7, #10]
 80059aa:	4b4e      	ldr	r3, [pc, #312]	@ (8005ae4 <HAL_I2C_Master_Transmit+0x228>)
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fc05 	bl	80061c0 <I2C_TransferConfig>
 80059b6:	e066      	b.n	8005a86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	8979      	ldrh	r1, [r7, #10]
 80059c0:	4b48      	ldr	r3, [pc, #288]	@ (8005ae4 <HAL_I2C_Master_Transmit+0x228>)
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fbfa 	bl	80061c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059cc:	e05b      	b.n	8005a86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f9fd 	bl	8005dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e07b      	b.n	8005ada <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d034      	beq.n	8005a86 <HAL_I2C_Master_Transmit+0x1ca>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d130      	bne.n	8005a86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2180      	movs	r1, #128	@ 0x80
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f976 	bl	8005d20 <I2C_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e04d      	b.n	8005ada <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2bff      	cmp	r3, #255	@ 0xff
 8005a46:	d90e      	bls.n	8005a66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	22ff      	movs	r2, #255	@ 0xff
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	8979      	ldrh	r1, [r7, #10]
 8005a56:	2300      	movs	r3, #0
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fbae 	bl	80061c0 <I2C_TransferConfig>
 8005a64:	e00f      	b.n	8005a86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	8979      	ldrh	r1, [r7, #10]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fb9d 	bl	80061c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d19e      	bne.n	80059ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	6a39      	ldr	r1, [r7, #32]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f9e3 	bl	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e01a      	b.n	8005ada <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae8 <HAL_I2C_Master_Transmit+0x22c>)
 8005ab8:	400b      	ands	r3, r1
 8005aba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e000      	b.n	8005ada <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ad8:	2302      	movs	r3, #2
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	80002000 	.word	0x80002000
 8005ae8:	fe00e800 	.word	0xfe00e800

08005aec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	461a      	mov	r2, r3
 8005af8:	460b      	mov	r3, r1
 8005afa:	817b      	strh	r3, [r7, #10]
 8005afc:	4613      	mov	r3, r2
 8005afe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	f040 80db 	bne.w	8005cc4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_I2C_Master_Receive+0x30>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e0d4      	b.n	8005cc6 <HAL_I2C_Master_Receive+0x1da>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b24:	f7fd feb0 	bl	8003888 <HAL_GetTick>
 8005b28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	2319      	movs	r3, #25
 8005b30:	2201      	movs	r2, #1
 8005b32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f8f2 	bl	8005d20 <I2C_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0bf      	b.n	8005cc6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2222      	movs	r2, #34	@ 0x22
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2210      	movs	r2, #16
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	893a      	ldrh	r2, [r7, #8]
 8005b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2bff      	cmp	r3, #255	@ 0xff
 8005b76:	d90e      	bls.n	8005b96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	8979      	ldrh	r1, [r7, #10]
 8005b86:	4b52      	ldr	r3, [pc, #328]	@ (8005cd0 <HAL_I2C_Master_Receive+0x1e4>)
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fb16 	bl	80061c0 <I2C_TransferConfig>
 8005b94:	e06d      	b.n	8005c72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	8979      	ldrh	r1, [r7, #10]
 8005ba8:	4b49      	ldr	r3, [pc, #292]	@ (8005cd0 <HAL_I2C_Master_Receive+0x1e4>)
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fb05 	bl	80061c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005bb6:	e05c      	b.n	8005c72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	6a39      	ldr	r1, [r7, #32]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f993 	bl	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e07c      	b.n	8005cc6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d034      	beq.n	8005c72 <HAL_I2C_Master_Receive+0x186>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d130      	bne.n	8005c72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2200      	movs	r2, #0
 8005c18:	2180      	movs	r1, #128	@ 0x80
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f880 	bl	8005d20 <I2C_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e04d      	b.n	8005cc6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2bff      	cmp	r3, #255	@ 0xff
 8005c32:	d90e      	bls.n	8005c52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	22ff      	movs	r2, #255	@ 0xff
 8005c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	8979      	ldrh	r1, [r7, #10]
 8005c42:	2300      	movs	r3, #0
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fab8 	bl	80061c0 <I2C_TransferConfig>
 8005c50:	e00f      	b.n	8005c72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 faa7 	bl	80061c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d19d      	bne.n	8005bb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	6a39      	ldr	r1, [r7, #32]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f8ed 	bl	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e01a      	b.n	8005cc6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2220      	movs	r2, #32
 8005c96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <HAL_I2C_Master_Receive+0x1e8>)
 8005ca4:	400b      	ands	r3, r1
 8005ca6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	80002400 	.word	0x80002400
 8005cd4:	fe00e800 	.word	0xfe00e800

08005cd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d103      	bne.n	8005cf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d007      	beq.n	8005d14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	619a      	str	r2, [r3, #24]
  }
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d30:	e03b      	b.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f962 	bl	8006000 <I2C_IsErrorOccurred>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e041      	b.n	8005dca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d02d      	beq.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fd fd9b 	bl	8003888 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d122      	bne.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d113      	bne.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00f      	b.n	8005dca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d0b4      	beq.n	8005d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dde:	e033      	b.n	8005e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f90b 	bl	8006000 <I2C_IsErrorOccurred>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e031      	b.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d025      	beq.n	8005e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfc:	f7fd fd44 	bl	8003888 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d11a      	bne.n	8005e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d013      	beq.n	8005e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e007      	b.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d1c4      	bne.n	8005de0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e6c:	e02f      	b.n	8005ece <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f8c4 	bl	8006000 <I2C_IsErrorOccurred>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e02d      	b.n	8005ede <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fd fd01 	bl	8003888 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11a      	bne.n	8005ece <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d013      	beq.n	8005ece <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f043 0220 	orr.w	r2, r3, #32
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e007      	b.n	8005ede <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d1c8      	bne.n	8005e6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005ef8:	e071      	b.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f87e 	bl	8006000 <I2C_IsErrorOccurred>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d13b      	bne.n	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d138      	bne.n	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d105      	bne.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d121      	bne.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2204      	movs	r2, #4
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005f6c:	400b      	ands	r3, r1
 8005f6e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
 8005f8c:	e002      	b.n	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005f94:	f7fd fc78 	bl	8003888 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d302      	bcc.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d119      	bne.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d116      	bne.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d00f      	beq.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d002      	beq.n	8005ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d083      	beq.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	fe00e800 	.word	0xfe00e800

08006000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	@ 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d068      	beq.n	80060fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2210      	movs	r2, #16
 8006032:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006034:	e049      	b.n	80060ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d045      	beq.n	80060ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fd fc23 	bl	8003888 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <I2C_IsErrorOccurred+0x54>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d13a      	bne.n	80060ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800605e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006066:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006076:	d121      	bne.n	80060bc <I2C_IsErrorOccurred+0xbc>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800607e:	d01d      	beq.n	80060bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	2b20      	cmp	r3, #32
 8006084:	d01a      	beq.n	80060bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006094:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006096:	f7fd fbf7 	bl	8003888 <HAL_GetTick>
 800609a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800609c:	e00e      	b.n	80060bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800609e:	f7fd fbf3 	bl	8003888 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b19      	cmp	r3, #25
 80060aa:	d907      	bls.n	80060bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	f043 0320 	orr.w	r3, r3, #32
 80060b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80060ba:	e006      	b.n	80060ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d1e9      	bne.n	800609e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d003      	beq.n	80060e0 <I2C_IsErrorOccurred+0xe0>
 80060d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0aa      	beq.n	8006036 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2220      	movs	r2, #32
 80060ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	f043 0308 	orr.w	r3, r3, #8
 8006138:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006142:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	f043 0302 	orr.w	r3, r3, #2
 800615a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800616c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01c      	beq.n	80061ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff fdaf 	bl	8005cd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <I2C_IsErrorOccurred+0x1bc>)
 8006186:	400b      	ands	r3, r1
 8006188:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80061ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3728      	adds	r7, #40	@ 0x28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	fe00e800 	.word	0xfe00e800

080061c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	817b      	strh	r3, [r7, #10]
 80061ce:	4613      	mov	r3, r2
 80061d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061d2:	897b      	ldrh	r3, [r7, #10]
 80061d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061d8:	7a7b      	ldrb	r3, [r7, #9]
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	0d5b      	lsrs	r3, r3, #21
 80061fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80061fe:	4b08      	ldr	r3, [pc, #32]	@ (8006220 <I2C_TransferConfig+0x60>)
 8006200:	430b      	orrs	r3, r1
 8006202:	43db      	mvns	r3, r3
 8006204:	ea02 0103 	and.w	r1, r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	03ff63ff 	.word	0x03ff63ff

08006224 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b20      	cmp	r3, #32
 8006238:	d138      	bne.n	80062ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006244:	2302      	movs	r3, #2
 8006246:	e032      	b.n	80062ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	@ 0x24
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006276:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062ac:	2302      	movs	r3, #2
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d139      	bne.n	8006344 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062da:	2302      	movs	r3, #2
 80062dc:	e033      	b.n	8006346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2224      	movs	r2, #36	@ 0x24
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800630c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	e000      	b.n	8006346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <HAL_PWREx_GetVoltageRange+0x18>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006360:	4618      	mov	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40007000 	.word	0x40007000

08006370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637e:	d130      	bne.n	80063e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006380:	4b23      	ldr	r3, [pc, #140]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638c:	d038      	beq.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800638e:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006396:	4a1e      	ldr	r2, [pc, #120]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800639c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800639e:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2232      	movs	r2, #50	@ 0x32
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0c9b      	lsrs	r3, r3, #18
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b4:	e002      	b.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063bc:	4b14      	ldr	r3, [pc, #80]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c8:	d102      	bne.n	80063d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f2      	bne.n	80063b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063dc:	d110      	bne.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e00f      	b.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ee:	d007      	beq.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063f0:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063f8:	4a05      	ldr	r2, [pc, #20]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40007000 	.word	0x40007000
 8006414:	200001b8 	.word	0x200001b8
 8006418:	431bde83 	.word	0x431bde83

0800641c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f000 bc08 	b.w	8006c40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006430:	4b96      	ldr	r3, [pc, #600]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 030c 	and.w	r3, r3, #12
 8006438:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800643a:	4b94      	ldr	r3, [pc, #592]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80e4 	beq.w	800661a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <HAL_RCC_OscConfig+0x4c>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	f040 808b 	bne.w	8006576 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b01      	cmp	r3, #1
 8006464:	f040 8087 	bne.w	8006576 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006468:	4b88      	ldr	r3, [pc, #544]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RCC_OscConfig+0x64>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e3df      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	4b81      	ldr	r3, [pc, #516]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <HAL_RCC_OscConfig+0x7e>
 8006490:	4b7e      	ldr	r3, [pc, #504]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006498:	e005      	b.n	80064a6 <HAL_RCC_OscConfig+0x8a>
 800649a:	4b7c      	ldr	r3, [pc, #496]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800649c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d223      	bcs.n	80064f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fdc4 	bl	800703c <RCC_SetFlashLatencyFromMSIRange>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e3c0      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064be:	4b73      	ldr	r3, [pc, #460]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a72      	ldr	r2, [pc, #456]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064c4:	f043 0308 	orr.w	r3, r3, #8
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4b70      	ldr	r3, [pc, #448]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	496d      	ldr	r1, [pc, #436]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064dc:	4b6b      	ldr	r3, [pc, #428]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	4968      	ldr	r1, [pc, #416]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	604b      	str	r3, [r1, #4]
 80064f0:	e025      	b.n	800653e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f2:	4b66      	ldr	r3, [pc, #408]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a65      	ldr	r2, [pc, #404]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064f8:	f043 0308 	orr.w	r3, r3, #8
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	4b63      	ldr	r3, [pc, #396]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	4960      	ldr	r1, [pc, #384]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800650c:	4313      	orrs	r3, r2
 800650e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006510:	4b5e      	ldr	r3, [pc, #376]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	495b      	ldr	r1, [pc, #364]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fd84 	bl	800703c <RCC_SetFlashLatencyFromMSIRange>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e380      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800653e:	f000 fc87 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8006542:	4602      	mov	r2, r0
 8006544:	4b51      	ldr	r3, [pc, #324]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	4950      	ldr	r1, [pc, #320]	@ (8006690 <HAL_RCC_OscConfig+0x274>)
 8006550:	5ccb      	ldrb	r3, [r1, r3]
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	4a4e      	ldr	r2, [pc, #312]	@ (8006694 <HAL_RCC_OscConfig+0x278>)
 800655c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800655e:	4b4e      	ldr	r3, [pc, #312]	@ (8006698 <HAL_RCC_OscConfig+0x27c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7fc ffe8 	bl	8003538 <HAL_InitTick>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d052      	beq.n	8006618 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	e364      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d032      	beq.n	80065e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800657e:	4b43      	ldr	r3, [pc, #268]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a42      	ldr	r2, [pc, #264]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800658a:	f7fd f97d 	bl	8003888 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006592:	f7fd f979 	bl	8003888 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e34d      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065a4:	4b39      	ldr	r3, [pc, #228]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065b0:	4b36      	ldr	r3, [pc, #216]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065b6:	f043 0308 	orr.w	r3, r3, #8
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b33      	ldr	r3, [pc, #204]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	4930      	ldr	r1, [pc, #192]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065ce:	4b2f      	ldr	r3, [pc, #188]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	492b      	ldr	r1, [pc, #172]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	604b      	str	r3, [r1, #4]
 80065e2:	e01a      	b.n	800661a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065e4:	4b29      	ldr	r3, [pc, #164]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a28      	ldr	r2, [pc, #160]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065f0:	f7fd f94a 	bl	8003888 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065f8:	f7fd f946 	bl	8003888 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e31a      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800660a:	4b20      	ldr	r3, [pc, #128]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x1dc>
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d073      	beq.n	800670e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d005      	beq.n	8006638 <HAL_RCC_OscConfig+0x21c>
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d10e      	bne.n	8006650 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d10b      	bne.n	8006650 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006638:	4b14      	ldr	r3, [pc, #80]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d063      	beq.n	800670c <HAL_RCC_OscConfig+0x2f0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d15f      	bne.n	800670c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e2f7      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006658:	d106      	bne.n	8006668 <HAL_RCC_OscConfig+0x24c>
 800665a:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a0b      	ldr	r2, [pc, #44]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e025      	b.n	80066b4 <HAL_RCC_OscConfig+0x298>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006670:	d114      	bne.n	800669c <HAL_RCC_OscConfig+0x280>
 8006672:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a05      	ldr	r2, [pc, #20]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4b03      	ldr	r3, [pc, #12]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a02      	ldr	r2, [pc, #8]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e013      	b.n	80066b4 <HAL_RCC_OscConfig+0x298>
 800668c:	40021000 	.word	0x40021000
 8006690:	0800d790 	.word	0x0800d790
 8006694:	200001b8 	.word	0x200001b8
 8006698:	200001bc 	.word	0x200001bc
 800669c:	4ba0      	ldr	r3, [pc, #640]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a9f      	ldr	r2, [pc, #636]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4b9d      	ldr	r3, [pc, #628]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a9c      	ldr	r2, [pc, #624]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fd f8e4 	bl	8003888 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c4:	f7fd f8e0 	bl	8003888 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b64      	cmp	r3, #100	@ 0x64
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e2b4      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d6:	4b92      	ldr	r3, [pc, #584]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0x2a8>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fd f8d0 	bl	8003888 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fd f8cc 	bl	8003888 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	@ 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e2a0      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066fe:	4b88      	ldr	r3, [pc, #544]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x2d0>
 800670a:	e000      	b.n	800670e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d060      	beq.n	80067dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b04      	cmp	r3, #4
 800671e:	d005      	beq.n	800672c <HAL_RCC_OscConfig+0x310>
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d119      	bne.n	800675a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d116      	bne.n	800675a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672c:	4b7c      	ldr	r3, [pc, #496]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_OscConfig+0x328>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e27d      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006744:	4b76      	ldr	r3, [pc, #472]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	4973      	ldr	r1, [pc, #460]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006758:	e040      	b.n	80067dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d023      	beq.n	80067aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006762:	4b6f      	ldr	r3, [pc, #444]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6e      	ldr	r2, [pc, #440]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800676c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fd f88b 	bl	8003888 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006776:	f7fd f887 	bl	8003888 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e25b      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006788:	4b65      	ldr	r3, [pc, #404]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006794:	4b62      	ldr	r3, [pc, #392]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	495f      	ldr	r1, [pc, #380]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	604b      	str	r3, [r1, #4]
 80067a8:	e018      	b.n	80067dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fd f867 	bl	8003888 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067be:	f7fd f863 	bl	8003888 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e237      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067d0:	4b53      	ldr	r3, [pc, #332]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f0      	bne.n	80067be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d03c      	beq.n	8006862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01c      	beq.n	800682a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fd f842 	bl	8003888 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006808:	f7fd f83e 	bl	8003888 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e212      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800681a:	4b41      	ldr	r3, [pc, #260]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800681c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0ef      	beq.n	8006808 <HAL_RCC_OscConfig+0x3ec>
 8006828:	e01b      	b.n	8006862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800682a:	4b3d      	ldr	r3, [pc, #244]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	4a3b      	ldr	r2, [pc, #236]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683a:	f7fd f825 	bl	8003888 <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006842:	f7fd f821 	bl	8003888 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e1f5      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006854:	4b32      	ldr	r3, [pc, #200]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1ef      	bne.n	8006842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80a6 	beq.w	80069bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006870:	2300      	movs	r3, #0
 8006872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006874:	4b2a      	ldr	r3, [pc, #168]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10d      	bne.n	800689c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006884:	4a26      	ldr	r2, [pc, #152]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800688a:	6593      	str	r3, [r2, #88]	@ 0x58
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800689c:	4b21      	ldr	r3, [pc, #132]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d118      	bne.n	80068da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 80068ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068b4:	f7fc ffe8 	bl	8003888 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068bc:	f7fc ffe4 	bl	8003888 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e1b8      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ce:	4b15      	ldr	r3, [pc, #84]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d108      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4d8>
 80068e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068f2:	e029      	b.n	8006948 <HAL_RCC_OscConfig+0x52c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d115      	bne.n	8006928 <HAL_RCC_OscConfig+0x50c>
 80068fc:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006902:	4a07      	ldr	r2, [pc, #28]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006904:	f043 0304 	orr.w	r3, r3, #4
 8006908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	4a03      	ldr	r2, [pc, #12]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800691c:	e014      	b.n	8006948 <HAL_RCC_OscConfig+0x52c>
 800691e:	bf00      	nop
 8006920:	40021000 	.word	0x40021000
 8006924:	40007000 	.word	0x40007000
 8006928:	4b9d      	ldr	r3, [pc, #628]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692e:	4a9c      	ldr	r2, [pc, #624]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006938:	4b99      	ldr	r3, [pc, #612]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	4a98      	ldr	r2, [pc, #608]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006940:	f023 0304 	bic.w	r3, r3, #4
 8006944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d016      	beq.n	800697e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fc ff9a 	bl	8003888 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006956:	e00a      	b.n	800696e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fc ff96 	bl	8003888 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e168      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800696e:	4b8c      	ldr	r3, [pc, #560]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ed      	beq.n	8006958 <HAL_RCC_OscConfig+0x53c>
 800697c:	e015      	b.n	80069aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697e:	f7fc ff83 	bl	8003888 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fc ff7f 	bl	8003888 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e151      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800699c:	4b80      	ldr	r3, [pc, #512]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ed      	bne.n	8006986 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069aa:	7ffb      	ldrb	r3, [r7, #31]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d105      	bne.n	80069bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b0:	4b7b      	ldr	r3, [pc, #492]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 80069b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b4:	4a7a      	ldr	r2, [pc, #488]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 80069b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d03c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01c      	beq.n	8006a0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069d0:	4b73      	ldr	r3, [pc, #460]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 80069d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069d6:	4a72      	ldr	r2, [pc, #456]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fc ff52 	bl	8003888 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069e8:	f7fc ff4e 	bl	8003888 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e122      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069fa:	4b69      	ldr	r3, [pc, #420]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 80069fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ef      	beq.n	80069e8 <HAL_RCC_OscConfig+0x5cc>
 8006a08:	e01b      	b.n	8006a42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a0a:	4b65      	ldr	r3, [pc, #404]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a10:	4a63      	ldr	r2, [pc, #396]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fc ff35 	bl	8003888 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a22:	f7fc ff31 	bl	8003888 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e105      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a34:	4b5a      	ldr	r3, [pc, #360]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ef      	bne.n	8006a22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80f9 	beq.w	8006c3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	f040 80cf 	bne.w	8006bf4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a56:	4b52      	ldr	r3, [pc, #328]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0203 	and.w	r2, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d12c      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	3b01      	subs	r3, #1
 8006a76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d123      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d11b      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d113      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d109      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	3b01      	subs	r3, #1
 8006abe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d071      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b0c      	cmp	r3, #12
 8006ac8:	d068      	beq.n	8006b9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006aca:	4b35      	ldr	r3, [pc, #212]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ad6:	4b32      	ldr	r3, [pc, #200]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0ac      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2d      	ldr	r2, [pc, #180]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006aec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006af0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006af2:	f7fc fec9 	bl	8003888 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006afa:	f7fc fec5 	bl	8003888 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e099      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b0c:	4b24      	ldr	r3, [pc, #144]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f0      	bne.n	8006afa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b18:	4b21      	ldr	r3, [pc, #132]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	4b21      	ldr	r3, [pc, #132]	@ (8006ba4 <HAL_RCC_OscConfig+0x788>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b28:	3a01      	subs	r2, #1
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	4311      	orrs	r1, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b32:	0212      	lsls	r2, r2, #8
 8006b34:	4311      	orrs	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b3a:	0852      	lsrs	r2, r2, #1
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	0552      	lsls	r2, r2, #21
 8006b40:	4311      	orrs	r1, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b46:	0852      	lsrs	r2, r2, #1
 8006b48:	3a01      	subs	r2, #1
 8006b4a:	0652      	lsls	r2, r2, #25
 8006b4c:	4311      	orrs	r1, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b52:	06d2      	lsls	r2, r2, #27
 8006b54:	430a      	orrs	r2, r1
 8006b56:	4912      	ldr	r1, [pc, #72]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0f      	ldr	r2, [pc, #60]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b68:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b74:	f7fc fe88 	bl	8003888 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b7c:	f7fc fe84 	bl	8003888 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e058      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b9a:	e050      	b.n	8006c3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e04f      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
 8006ba0:	40021000 	.word	0x40021000
 8006ba4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba8:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d144      	bne.n	8006c3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bb4:	4b24      	ldr	r3, [pc, #144]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bc0:	4b21      	ldr	r3, [pc, #132]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bcc:	f7fc fe5c 	bl	8003888 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd4:	f7fc fe58 	bl	8003888 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e02c      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be6:	4b18      	ldr	r3, [pc, #96]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x7b8>
 8006bf2:	e024      	b.n	8006c3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b0c      	cmp	r3, #12
 8006bf8:	d01f      	beq.n	8006c3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfa:	4b13      	ldr	r3, [pc, #76]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a12      	ldr	r2, [pc, #72]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006c00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fc fe3f 	bl	8003888 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c0e:	f7fc fe3b 	bl	8003888 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e00f      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c20:	4b09      	ldr	r3, [pc, #36]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f0      	bne.n	8006c0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	4905      	ldr	r1, [pc, #20]	@ (8006c48 <HAL_RCC_OscConfig+0x82c>)
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <HAL_RCC_OscConfig+0x830>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	60cb      	str	r3, [r1, #12]
 8006c38:	e001      	b.n	8006c3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	feeefffc 	.word	0xfeeefffc

08006c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e0e7      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c64:	4b75      	ldr	r3, [pc, #468]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d910      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c72:	4b72      	ldr	r3, [pc, #456]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f023 0207 	bic.w	r2, r3, #7
 8006c7a:	4970      	ldr	r1, [pc, #448]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b6e      	ldr	r3, [pc, #440]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0cf      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d010      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	4b66      	ldr	r3, [pc, #408]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d908      	bls.n	8006cc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cb0:	4b63      	ldr	r3, [pc, #396]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4960      	ldr	r1, [pc, #384]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d04c      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d107      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d121      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e0a6      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d107      	bne.n	8006cfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cee:	4b54      	ldr	r3, [pc, #336]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d115      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e09a      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d06:	4b4e      	ldr	r3, [pc, #312]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e08e      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d16:	4b4a      	ldr	r3, [pc, #296]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e086      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d26:	4b46      	ldr	r3, [pc, #280]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 0203 	bic.w	r2, r3, #3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4943      	ldr	r1, [pc, #268]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d38:	f7fc fda6 	bl	8003888 <HAL_GetTick>
 8006d3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3e:	e00a      	b.n	8006d56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d40:	f7fc fda2 	bl	8003888 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e06e      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d56:	4b3a      	ldr	r3, [pc, #232]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 020c 	and.w	r2, r3, #12
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d1eb      	bne.n	8006d40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	4b31      	ldr	r3, [pc, #196]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d208      	bcs.n	8006d96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d84:	4b2e      	ldr	r3, [pc, #184]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	492b      	ldr	r1, [pc, #172]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d96:	4b29      	ldr	r3, [pc, #164]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d210      	bcs.n	8006dc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da4:	4b25      	ldr	r3, [pc, #148]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f023 0207 	bic.w	r2, r3, #7
 8006dac:	4923      	ldr	r1, [pc, #140]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db4:	4b21      	ldr	r3, [pc, #132]	@ (8006e3c <HAL_RCC_ClockConfig+0x1ec>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d001      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e036      	b.n	8006e34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4918      	ldr	r1, [pc, #96]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006df0:	4b13      	ldr	r3, [pc, #76]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	4910      	ldr	r1, [pc, #64]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e04:	f000 f824 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f0>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	091b      	lsrs	r3, r3, #4
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	490b      	ldr	r1, [pc, #44]	@ (8006e44 <HAL_RCC_ClockConfig+0x1f4>)
 8006e16:	5ccb      	ldrb	r3, [r1, r3]
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	4a09      	ldr	r2, [pc, #36]	@ (8006e48 <HAL_RCC_ClockConfig+0x1f8>)
 8006e22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e24:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <HAL_RCC_ClockConfig+0x1fc>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fc fb85 	bl	8003538 <HAL_InitTick>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e32:	7afb      	ldrb	r3, [r7, #11]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40022000 	.word	0x40022000
 8006e40:	40021000 	.word	0x40021000
 8006e44:	0800d790 	.word	0x0800d790
 8006e48:	200001b8 	.word	0x200001b8
 8006e4c:	200001bc 	.word	0x200001bc

08006e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b089      	sub	sp, #36	@ 0x24
 8006e54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e68:	4b3b      	ldr	r3, [pc, #236]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_GetSysClockFreq+0x34>
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b0c      	cmp	r3, #12
 8006e7c:	d121      	bne.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d11e      	bne.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e84:	4b34      	ldr	r3, [pc, #208]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e90:	4b31      	ldr	r3, [pc, #196]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	e005      	b.n	8006eac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006eac:	4a2b      	ldr	r2, [pc, #172]	@ (8006f5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d102      	bne.n	8006ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ec8:	4b25      	ldr	r3, [pc, #148]	@ (8006f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e004      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ed4:	4b23      	ldr	r3, [pc, #140]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ed6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b0c      	cmp	r3, #12
 8006edc:	d134      	bne.n	8006f48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ede:	4b1e      	ldr	r3, [pc, #120]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d003      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0xac>
 8006ef4:	e005      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ef8:	617b      	str	r3, [r7, #20]
      break;
 8006efa:	e005      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006efc:	4b19      	ldr	r3, [pc, #100]	@ (8006f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8006efe:	617b      	str	r3, [r7, #20]
      break;
 8006f00:	e002      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	617b      	str	r3, [r7, #20]
      break;
 8006f06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f08:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	3301      	adds	r3, #1
 8006f14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f16:	4b10      	ldr	r3, [pc, #64]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	fb03 f202 	mul.w	r2, r3, r2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	0e5b      	lsrs	r3, r3, #25
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	3301      	adds	r3, #1
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f48:	69bb      	ldr	r3, [r7, #24]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3724      	adds	r7, #36	@ 0x24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	0800d7a8 	.word	0x0800d7a8
 8006f60:	00f42400 	.word	0x00f42400
 8006f64:	007a1200 	.word	0x007a1200

08006f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f6c:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	200001b8 	.word	0x200001b8

08006f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f84:	f7ff fff0 	bl	8006f68 <HAL_RCC_GetHCLKFreq>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	4904      	ldr	r1, [pc, #16]	@ (8006fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f96:	5ccb      	ldrb	r3, [r1, r3]
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	0800d7a0 	.word	0x0800d7a0

08006fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fb0:	f7ff ffda 	bl	8006f68 <HAL_RCC_GetHCLKFreq>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	0adb      	lsrs	r3, r3, #11
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	4904      	ldr	r1, [pc, #16]	@ (8006fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fc2:	5ccb      	ldrb	r3, [r1, r3]
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	0800d7a0 	.word	0x0800d7a0

08006fd8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	220f      	movs	r2, #15
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006fe8:	4b12      	ldr	r3, [pc, #72]	@ (8007034 <HAL_RCC_GetClockConfig+0x5c>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0203 	and.w	r2, r3, #3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <HAL_RCC_GetClockConfig+0x5c>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007000:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <HAL_RCC_GetClockConfig+0x5c>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800700c:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <HAL_RCC_GetClockConfig+0x5c>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	08db      	lsrs	r3, r3, #3
 8007012:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800701a:	4b07      	ldr	r3, [pc, #28]	@ (8007038 <HAL_RCC_GetClockConfig+0x60>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0207 	and.w	r2, r3, #7
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	601a      	str	r2, [r3, #0]
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40021000 	.word	0x40021000
 8007038:	40022000 	.word	0x40022000

0800703c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007048:	4b2a      	ldr	r3, [pc, #168]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800704a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007054:	f7ff f97e 	bl	8006354 <HAL_PWREx_GetVoltageRange>
 8007058:	6178      	str	r0, [r7, #20]
 800705a:	e014      	b.n	8007086 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800705c:	4b25      	ldr	r3, [pc, #148]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800705e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007060:	4a24      	ldr	r2, [pc, #144]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007066:	6593      	str	r3, [r2, #88]	@ 0x58
 8007068:	4b22      	ldr	r3, [pc, #136]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800706a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800706c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007074:	f7ff f96e 	bl	8006354 <HAL_PWREx_GetVoltageRange>
 8007078:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800707a:	4b1e      	ldr	r3, [pc, #120]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800707c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707e:	4a1d      	ldr	r2, [pc, #116]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007084:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708c:	d10b      	bne.n	80070a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b80      	cmp	r3, #128	@ 0x80
 8007092:	d919      	bls.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2ba0      	cmp	r3, #160	@ 0xa0
 8007098:	d902      	bls.n	80070a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800709a:	2302      	movs	r3, #2
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e013      	b.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070a0:	2301      	movs	r3, #1
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	e010      	b.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b80      	cmp	r3, #128	@ 0x80
 80070aa:	d902      	bls.n	80070b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80070ac:	2303      	movs	r3, #3
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	e00a      	b.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b80      	cmp	r3, #128	@ 0x80
 80070b6:	d102      	bne.n	80070be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070b8:	2302      	movs	r3, #2
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	e004      	b.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b70      	cmp	r3, #112	@ 0x70
 80070c2:	d101      	bne.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070c4:	2301      	movs	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80070c8:	4b0b      	ldr	r3, [pc, #44]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 0207 	bic.w	r2, r3, #7
 80070d0:	4909      	ldr	r1, [pc, #36]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80070d8:	4b07      	ldr	r3, [pc, #28]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d001      	beq.n	80070ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40021000 	.word	0x40021000
 80070f8:	40022000 	.word	0x40022000

080070fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007104:	2300      	movs	r3, #0
 8007106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007108:	2300      	movs	r3, #0
 800710a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007114:	2b00      	cmp	r3, #0
 8007116:	d041      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800711c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007120:	d02a      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007122:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007126:	d824      	bhi.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007128:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800712c:	d008      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800712e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007132:	d81e      	bhi.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800713c:	d010      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800713e:	e018      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007140:	4b86      	ldr	r3, [pc, #536]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	4a85      	ldr	r2, [pc, #532]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800714c:	e015      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	2100      	movs	r1, #0
 8007154:	4618      	mov	r0, r3
 8007156:	f000 facd 	bl	80076f4 <RCCEx_PLLSAI1_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800715e:	e00c      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3320      	adds	r3, #32
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fbb6 	bl	80078d8 <RCCEx_PLLSAI2_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007170:	e003      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	74fb      	strb	r3, [r7, #19]
      break;
 8007176:	e000      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717a:	7cfb      	ldrb	r3, [r7, #19]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007180:	4b76      	ldr	r3, [pc, #472]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007186:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800718e:	4973      	ldr	r1, [pc, #460]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007190:	4313      	orrs	r3, r2
 8007192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007196:	e001      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	7cfb      	ldrb	r3, [r7, #19]
 800719a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d041      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071b0:	d02a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80071b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071b6:	d824      	bhi.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071bc:	d008      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c2:	d81e      	bhi.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80071c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071cc:	d010      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071ce:	e018      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80071d0:	4b62      	ldr	r3, [pc, #392]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4a61      	ldr	r2, [pc, #388]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071dc:	e015      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fa85 	bl	80076f4 <RCCEx_PLLSAI1_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071ee:	e00c      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3320      	adds	r3, #32
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fb6e 	bl	80078d8 <RCCEx_PLLSAI2_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007200:	e003      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	74fb      	strb	r3, [r7, #19]
      break;
 8007206:	e000      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800720a:	7cfb      	ldrb	r3, [r7, #19]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10b      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007210:	4b52      	ldr	r3, [pc, #328]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007216:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800721e:	494f      	ldr	r1, [pc, #316]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007226:	e001      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	7cfb      	ldrb	r3, [r7, #19]
 800722a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80a0 	beq.w	800737a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723a:	2300      	movs	r3, #0
 800723c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800723e:	4b47      	ldr	r3, [pc, #284]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007254:	4b41      	ldr	r3, [pc, #260]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007258:	4a40      	ldr	r2, [pc, #256]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800725a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800725e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007260:	4b3e      	ldr	r3, [pc, #248]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800726c:	2301      	movs	r3, #1
 800726e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007270:	4b3b      	ldr	r3, [pc, #236]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a3a      	ldr	r2, [pc, #232]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800727a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800727c:	f7fc fb04 	bl	8003888 <HAL_GetTick>
 8007280:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007282:	e009      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007284:	f7fc fb00 	bl	8003888 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d902      	bls.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	74fb      	strb	r3, [r7, #19]
        break;
 8007296:	e005      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007298:	4b31      	ldr	r3, [pc, #196]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ef      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80072a4:	7cfb      	ldrb	r3, [r7, #19]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d15c      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072aa:	4b2c      	ldr	r3, [pc, #176]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01f      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d019      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072c8:	4b24      	ldr	r3, [pc, #144]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072d4:	4b21      	ldr	r3, [pc, #132]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072da:	4a20      	ldr	r2, [pc, #128]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072e4:	4b1d      	ldr	r3, [pc, #116]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ea:	4a1c      	ldr	r2, [pc, #112]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072f4:	4a19      	ldr	r2, [pc, #100]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d016      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007306:	f7fc fabf 	bl	8003888 <HAL_GetTick>
 800730a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730c:	e00b      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730e:	f7fc fabb 	bl	8003888 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731c:	4293      	cmp	r3, r2
 800731e:	d902      	bls.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	74fb      	strb	r3, [r7, #19]
            break;
 8007324:	e006      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007326:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0ec      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007334:	7cfb      	ldrb	r3, [r7, #19]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10c      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800733a:	4b08      	ldr	r3, [pc, #32]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734a:	4904      	ldr	r1, [pc, #16]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007352:	e009      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007354:	7cfb      	ldrb	r3, [r7, #19]
 8007356:	74bb      	strb	r3, [r7, #18]
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800735a:	bf00      	nop
 800735c:	40021000 	.word	0x40021000
 8007360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007364:	7cfb      	ldrb	r3, [r7, #19]
 8007366:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007368:	7c7b      	ldrb	r3, [r7, #17]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d105      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800736e:	4ba6      	ldr	r3, [pc, #664]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007372:	4aa5      	ldr	r2, [pc, #660]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007378:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007386:	4ba0      	ldr	r3, [pc, #640]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738c:	f023 0203 	bic.w	r2, r3, #3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007394:	499c      	ldr	r1, [pc, #624]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073a8:	4b97      	ldr	r3, [pc, #604]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ae:	f023 020c 	bic.w	r2, r3, #12
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b6:	4994      	ldr	r1, [pc, #592]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d8:	498b      	ldr	r1, [pc, #556]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073ec:	4b86      	ldr	r3, [pc, #536]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fa:	4983      	ldr	r1, [pc, #524]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800740e:	4b7e      	ldr	r3, [pc, #504]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007414:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741c:	497a      	ldr	r1, [pc, #488]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007430:	4b75      	ldr	r3, [pc, #468]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007436:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800743e:	4972      	ldr	r1, [pc, #456]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007452:	4b6d      	ldr	r3, [pc, #436]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007458:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007460:	4969      	ldr	r1, [pc, #420]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007474:	4b64      	ldr	r3, [pc, #400]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007482:	4961      	ldr	r1, [pc, #388]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007496:	4b5c      	ldr	r3, [pc, #368]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a4:	4958      	ldr	r1, [pc, #352]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074b8:	4b53      	ldr	r3, [pc, #332]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c6:	4950      	ldr	r1, [pc, #320]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074da:	4b4b      	ldr	r3, [pc, #300]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e8:	4947      	ldr	r1, [pc, #284]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074fc:	4b42      	ldr	r3, [pc, #264]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007502:	f023 0203 	bic.w	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750a:	493f      	ldr	r1, [pc, #252]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d028      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800751e:	4b3a      	ldr	r3, [pc, #232]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007524:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752c:	4936      	ldr	r1, [pc, #216]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800753c:	d106      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800753e:	4b32      	ldr	r3, [pc, #200]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	4a31      	ldr	r2, [pc, #196]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007548:	60d3      	str	r3, [r2, #12]
 800754a:	e011      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007554:	d10c      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f8c9 	bl	80076f4 <RCCEx_PLLSAI1_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007566:	7cfb      	ldrb	r3, [r7, #19]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800756c:	7cfb      	ldrb	r3, [r7, #19]
 800756e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d028      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800757c:	4b22      	ldr	r3, [pc, #136]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007582:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800758a:	491f      	ldr	r1, [pc, #124]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800759a:	d106      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800759c:	4b1a      	ldr	r3, [pc, #104]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a6:	60d3      	str	r3, [r2, #12]
 80075a8:	e011      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075b2:	d10c      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3304      	adds	r3, #4
 80075b8:	2101      	movs	r1, #1
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f89a 	bl	80076f4 <RCCEx_PLLSAI1_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075c4:	7cfb      	ldrb	r3, [r7, #19]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80075ca:	7cfb      	ldrb	r3, [r7, #19]
 80075cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d02a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075da:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075e8:	4907      	ldr	r1, [pc, #28]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f8:	d108      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075fa:	4b03      	ldr	r3, [pc, #12]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	4a02      	ldr	r2, [pc, #8]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007600:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007604:	60d3      	str	r3, [r2, #12]
 8007606:	e013      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007608:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007614:	d10c      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	2101      	movs	r1, #1
 800761c:	4618      	mov	r0, r3
 800761e:	f000 f869 	bl	80076f4 <RCCEx_PLLSAI1_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007626:	7cfb      	ldrb	r3, [r7, #19]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800762c:	7cfb      	ldrb	r3, [r7, #19]
 800762e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02f      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800763c:	4b2c      	ldr	r3, [pc, #176]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007642:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800764a:	4929      	ldr	r1, [pc, #164]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800765a:	d10d      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	2102      	movs	r1, #2
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f846 	bl	80076f4 <RCCEx_PLLSAI1_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800766c:	7cfb      	ldrb	r3, [r7, #19]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d014      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007672:	7cfb      	ldrb	r3, [r7, #19]
 8007674:	74bb      	strb	r3, [r7, #18]
 8007676:	e011      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800767c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007680:	d10c      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3320      	adds	r3, #32
 8007686:	2102      	movs	r1, #2
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f925 	bl	80078d8 <RCCEx_PLLSAI2_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007692:	7cfb      	ldrb	r3, [r7, #19]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007698:	7cfb      	ldrb	r3, [r7, #19]
 800769a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076a8:	4b11      	ldr	r3, [pc, #68]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b8:	490d      	ldr	r1, [pc, #52]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076cc:	4b08      	ldr	r3, [pc, #32]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076dc:	4904      	ldr	r1, [pc, #16]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80076e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000

080076f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007702:	4b74      	ldr	r3, [pc, #464]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d018      	beq.n	8007740 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800770e:	4b71      	ldr	r3, [pc, #452]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0203 	and.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d10d      	bne.n	800773a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
       ||
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007726:	4b6b      	ldr	r3, [pc, #428]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
       ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d047      	beq.n	80077ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	e044      	b.n	80077ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d018      	beq.n	800777a <RCCEx_PLLSAI1_Config+0x86>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d825      	bhi.n	8007798 <RCCEx_PLLSAI1_Config+0xa4>
 800774c:	2b01      	cmp	r3, #1
 800774e:	d002      	beq.n	8007756 <RCCEx_PLLSAI1_Config+0x62>
 8007750:	2b02      	cmp	r3, #2
 8007752:	d009      	beq.n	8007768 <RCCEx_PLLSAI1_Config+0x74>
 8007754:	e020      	b.n	8007798 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007756:	4b5f      	ldr	r3, [pc, #380]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d11d      	bne.n	800779e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007766:	e01a      	b.n	800779e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007768:	4b5a      	ldr	r3, [pc, #360]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007770:	2b00      	cmp	r3, #0
 8007772:	d116      	bne.n	80077a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007778:	e013      	b.n	80077a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800777a:	4b56      	ldr	r3, [pc, #344]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10f      	bne.n	80077a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007786:	4b53      	ldr	r3, [pc, #332]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007796:	e006      	b.n	80077a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e004      	b.n	80077a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800779e:	bf00      	nop
 80077a0:	e002      	b.n	80077a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10d      	bne.n	80077ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077ae:	4b49      	ldr	r3, [pc, #292]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	3b01      	subs	r3, #1
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	430b      	orrs	r3, r1
 80077c4:	4943      	ldr	r1, [pc, #268]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d17c      	bne.n	80078ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80077d0:	4b40      	ldr	r3, [pc, #256]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a3f      	ldr	r2, [pc, #252]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077dc:	f7fc f854 	bl	8003888 <HAL_GetTick>
 80077e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077e2:	e009      	b.n	80077f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077e4:	f7fc f850 	bl	8003888 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d902      	bls.n	80077f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
        break;
 80077f6:	e005      	b.n	8007804 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077f8:	4b36      	ldr	r3, [pc, #216]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ef      	bne.n	80077e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d15f      	bne.n	80078ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d110      	bne.n	8007832 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007810:	4b30      	ldr	r3, [pc, #192]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007818:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6892      	ldr	r2, [r2, #8]
 8007820:	0211      	lsls	r1, r2, #8
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68d2      	ldr	r2, [r2, #12]
 8007826:	06d2      	lsls	r2, r2, #27
 8007828:	430a      	orrs	r2, r1
 800782a:	492a      	ldr	r1, [pc, #168]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800782c:	4313      	orrs	r3, r2
 800782e:	610b      	str	r3, [r1, #16]
 8007830:	e027      	b.n	8007882 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d112      	bne.n	800785e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007838:	4b26      	ldr	r3, [pc, #152]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007840:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6892      	ldr	r2, [r2, #8]
 8007848:	0211      	lsls	r1, r2, #8
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6912      	ldr	r2, [r2, #16]
 800784e:	0852      	lsrs	r2, r2, #1
 8007850:	3a01      	subs	r2, #1
 8007852:	0552      	lsls	r2, r2, #21
 8007854:	430a      	orrs	r2, r1
 8007856:	491f      	ldr	r1, [pc, #124]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007858:	4313      	orrs	r3, r2
 800785a:	610b      	str	r3, [r1, #16]
 800785c:	e011      	b.n	8007882 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800785e:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007866:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6892      	ldr	r2, [r2, #8]
 800786e:	0211      	lsls	r1, r2, #8
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6952      	ldr	r2, [r2, #20]
 8007874:	0852      	lsrs	r2, r2, #1
 8007876:	3a01      	subs	r2, #1
 8007878:	0652      	lsls	r2, r2, #25
 800787a:	430a      	orrs	r2, r1
 800787c:	4915      	ldr	r1, [pc, #84]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007882:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a13      	ldr	r2, [pc, #76]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007888:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800788c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788e:	f7fb fffb 	bl	8003888 <HAL_GetTick>
 8007892:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007894:	e009      	b.n	80078aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007896:	f7fb fff7 	bl	8003888 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d902      	bls.n	80078aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	73fb      	strb	r3, [r7, #15]
          break;
 80078a8:	e005      	b.n	80078b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078aa:	4b0a      	ldr	r3, [pc, #40]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0ef      	beq.n	8007896 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	4903      	ldr	r1, [pc, #12]	@ (80078d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000

080078d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80078e6:	4b69      	ldr	r3, [pc, #420]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d018      	beq.n	8007924 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80078f2:	4b66      	ldr	r3, [pc, #408]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0203 	and.w	r2, r3, #3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d10d      	bne.n	800791e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
       ||
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800790a:	4b60      	ldr	r3, [pc, #384]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	091b      	lsrs	r3, r3, #4
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
       ||
 800791a:	429a      	cmp	r2, r3
 800791c:	d047      	beq.n	80079ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	e044      	b.n	80079ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d018      	beq.n	800795e <RCCEx_PLLSAI2_Config+0x86>
 800792c:	2b03      	cmp	r3, #3
 800792e:	d825      	bhi.n	800797c <RCCEx_PLLSAI2_Config+0xa4>
 8007930:	2b01      	cmp	r3, #1
 8007932:	d002      	beq.n	800793a <RCCEx_PLLSAI2_Config+0x62>
 8007934:	2b02      	cmp	r3, #2
 8007936:	d009      	beq.n	800794c <RCCEx_PLLSAI2_Config+0x74>
 8007938:	e020      	b.n	800797c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800793a:	4b54      	ldr	r3, [pc, #336]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d11d      	bne.n	8007982 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800794a:	e01a      	b.n	8007982 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800794c:	4b4f      	ldr	r3, [pc, #316]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007954:	2b00      	cmp	r3, #0
 8007956:	d116      	bne.n	8007986 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800795c:	e013      	b.n	8007986 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800795e:	4b4b      	ldr	r3, [pc, #300]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10f      	bne.n	800798a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800796a:	4b48      	ldr	r3, [pc, #288]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800797a:	e006      	b.n	800798a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
      break;
 8007980:	e004      	b.n	800798c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800798a:	bf00      	nop
    }

    if(status == HAL_OK)
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10d      	bne.n	80079ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007992:	4b3e      	ldr	r3, [pc, #248]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	430b      	orrs	r3, r1
 80079a8:	4938      	ldr	r1, [pc, #224]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d166      	bne.n	8007a82 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80079b4:	4b35      	ldr	r3, [pc, #212]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a34      	ldr	r2, [pc, #208]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80079ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c0:	f7fb ff62 	bl	8003888 <HAL_GetTick>
 80079c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079c6:	e009      	b.n	80079dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079c8:	f7fb ff5e 	bl	8003888 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d902      	bls.n	80079dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
        break;
 80079da:	e005      	b.n	80079e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079dc:	4b2b      	ldr	r3, [pc, #172]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ef      	bne.n	80079c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d149      	bne.n	8007a82 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d110      	bne.n	8007a16 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80079f4:	4b25      	ldr	r3, [pc, #148]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80079fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6892      	ldr	r2, [r2, #8]
 8007a04:	0211      	lsls	r1, r2, #8
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68d2      	ldr	r2, [r2, #12]
 8007a0a:	06d2      	lsls	r2, r2, #27
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	491f      	ldr	r1, [pc, #124]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	614b      	str	r3, [r1, #20]
 8007a14:	e011      	b.n	8007a3a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a16:	4b1d      	ldr	r3, [pc, #116]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007a1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6892      	ldr	r2, [r2, #8]
 8007a26:	0211      	lsls	r1, r2, #8
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6912      	ldr	r2, [r2, #16]
 8007a2c:	0852      	lsrs	r2, r2, #1
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	0652      	lsls	r2, r2, #25
 8007a32:	430a      	orrs	r2, r1
 8007a34:	4915      	ldr	r1, [pc, #84]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007a3a:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a13      	ldr	r2, [pc, #76]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a46:	f7fb ff1f 	bl	8003888 <HAL_GetTick>
 8007a4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a4c:	e009      	b.n	8007a62 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a4e:	f7fb ff1b 	bl	8003888 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d902      	bls.n	8007a62 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a60:	e005      	b.n	8007a6e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a62:	4b0a      	ldr	r3, [pc, #40]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0ef      	beq.n	8007a4e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007a74:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	4903      	ldr	r1, [pc, #12]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40021000 	.word	0x40021000

08007a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e095      	b.n	8007bce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d108      	bne.n	8007abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ab2:	d009      	beq.n	8007ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	61da      	str	r2, [r3, #28]
 8007aba:	e005      	b.n	8007ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fb fa54 	bl	8002f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007afe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b08:	d902      	bls.n	8007b10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	e002      	b.n	8007b16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b1e:	d007      	beq.n	8007b30 <HAL_SPI_Init+0xa0>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b28:	d002      	beq.n	8007b30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b72:	ea42 0103 	orr.w	r1, r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	0c1b      	lsrs	r3, r3, #16
 8007b8c:	f003 0204 	and.w	r2, r3, #4
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007bac:	ea42 0103 	orr.w	r1, r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	099b      	lsrs	r3, r3, #6
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10f      	bne.n	8007c1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	099b      	lsrs	r3, r3, #6
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d004      	beq.n	8007c1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
    return;
 8007c1a:	e0d7      	b.n	8007dcc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_SPI_IRQHandler+0x66>
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	09db      	lsrs	r3, r3, #7
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	4798      	blx	r3
    return;
 8007c3c:	e0c6      	b.n	8007dcc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10c      	bne.n	8007c64 <HAL_SPI_IRQHandler+0x8c>
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	099b      	lsrs	r3, r3, #6
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 80b4 	beq.w	8007dcc <HAL_SPI_IRQHandler+0x1f4>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 80ad 	beq.w	8007dcc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	099b      	lsrs	r3, r3, #6
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d023      	beq.n	8007cc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d011      	beq.n	8007cae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c8e:	f043 0204 	orr.w	r2, r3, #4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	e00b      	b.n	8007cc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cae:	2300      	movs	r3, #0
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	693b      	ldr	r3, [r7, #16]
        return;
 8007cc4:	e082      	b.n	8007dcc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d014      	beq.n	8007cfc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd6:	f043 0201 	orr.w	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	0a1b      	lsrs	r3, r3, #8
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00c      	beq.n	8007d22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0c:	f043 0208 	orr.w	r2, r3, #8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	60bb      	str	r3, [r7, #8]
 8007d20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04f      	beq.n	8007dca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <HAL_SPI_IRQHandler+0x17e>
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d034      	beq.n	8007dc0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0203 	bic.w	r2, r2, #3
 8007d64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <HAL_SPI_IRQHandler+0x1fc>)
 8007d74:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd f9fe 	bl	800517c <HAL_DMA_Abort_IT>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d016      	beq.n	8007dc8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd4 <HAL_SPI_IRQHandler+0x1fc>)
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fd f9e8 	bl	800517c <HAL_DMA_Abort_IT>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007dbe:	e003      	b.n	8007dc8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f809 	bl	8007dd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007dc6:	e000      	b.n	8007dca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007dc8:	bf00      	nop
    return;
 8007dca:	bf00      	nop
  }
}
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08007ded 	.word	0x08007ded

08007dd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff ffe5 	bl	8007dd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e049      	b.n	8007ebc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d106      	bne.n	8007e42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fb f945 	bl	80030cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f000 fa9d 	bl	8008394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d001      	beq.n	8007edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e04f      	b.n	8007f7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a23      	ldr	r2, [pc, #140]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d01d      	beq.n	8007f3a <HAL_TIM_Base_Start_IT+0x76>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f06:	d018      	beq.n	8007f3a <HAL_TIM_Base_Start_IT+0x76>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d013      	beq.n	8007f3a <HAL_TIM_Base_Start_IT+0x76>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a1e      	ldr	r2, [pc, #120]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00e      	beq.n	8007f3a <HAL_TIM_Base_Start_IT+0x76>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a1c      	ldr	r2, [pc, #112]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d009      	beq.n	8007f3a <HAL_TIM_Base_Start_IT+0x76>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d004      	beq.n	8007f3a <HAL_TIM_Base_Start_IT+0x76>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a19      	ldr	r2, [pc, #100]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d115      	bne.n	8007f66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	4b17      	ldr	r3, [pc, #92]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b06      	cmp	r3, #6
 8007f4a:	d015      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0xb4>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f52:	d011      	beq.n	8007f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f64:	e008      	b.n	8007f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	e000      	b.n	8007f7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	40013400 	.word	0x40013400
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	00010007 	.word	0x00010007

08007fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d020      	beq.n	8008008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01b      	beq.n	8008008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0202 	mvn.w	r2, #2
 8007fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9b2 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9a4 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9b5 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0204 	mvn.w	r2, #4
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f98c 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 8008040:	e005      	b.n	800804e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f97e 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f98f 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d020      	beq.n	80080a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01b      	beq.n	80080a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0208 	mvn.w	r2, #8
 8008070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2204      	movs	r2, #4
 8008076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f003 0303 	and.w	r3, r3, #3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f966 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 800808c:	e005      	b.n	800809a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f958 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f969 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d020      	beq.n	80080ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d01b      	beq.n	80080ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f06f 0210 	mvn.w	r2, #16
 80080bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2208      	movs	r2, #8
 80080c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f940 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 80080d8:	e005      	b.n	80080e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f932 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f943 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00c      	beq.n	8008110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f06f 0201 	mvn.w	r2, #1
 8008108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7fa fda4 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d104      	bne.n	8008124 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fafd 	bl	8008738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800815a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 faf5 	bl	800874c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00c      	beq.n	8008186 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800817e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8fd 	bl	8008380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f06f 0220 	mvn.w	r2, #32
 80081a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fabd 	bl	8008724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_ConfigClockSource+0x1c>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e0b6      	b.n	800833c <HAL_TIM_ConfigClockSource+0x18a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800820a:	d03e      	beq.n	800828a <HAL_TIM_ConfigClockSource+0xd8>
 800820c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008210:	f200 8087 	bhi.w	8008322 <HAL_TIM_ConfigClockSource+0x170>
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008218:	f000 8086 	beq.w	8008328 <HAL_TIM_ConfigClockSource+0x176>
 800821c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008220:	d87f      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 8008222:	2b70      	cmp	r3, #112	@ 0x70
 8008224:	d01a      	beq.n	800825c <HAL_TIM_ConfigClockSource+0xaa>
 8008226:	2b70      	cmp	r3, #112	@ 0x70
 8008228:	d87b      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 800822a:	2b60      	cmp	r3, #96	@ 0x60
 800822c:	d050      	beq.n	80082d0 <HAL_TIM_ConfigClockSource+0x11e>
 800822e:	2b60      	cmp	r3, #96	@ 0x60
 8008230:	d877      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 8008232:	2b50      	cmp	r3, #80	@ 0x50
 8008234:	d03c      	beq.n	80082b0 <HAL_TIM_ConfigClockSource+0xfe>
 8008236:	2b50      	cmp	r3, #80	@ 0x50
 8008238:	d873      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 800823a:	2b40      	cmp	r3, #64	@ 0x40
 800823c:	d058      	beq.n	80082f0 <HAL_TIM_ConfigClockSource+0x13e>
 800823e:	2b40      	cmp	r3, #64	@ 0x40
 8008240:	d86f      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 8008242:	2b30      	cmp	r3, #48	@ 0x30
 8008244:	d064      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x15e>
 8008246:	2b30      	cmp	r3, #48	@ 0x30
 8008248:	d86b      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 800824a:	2b20      	cmp	r3, #32
 800824c:	d060      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x15e>
 800824e:	2b20      	cmp	r3, #32
 8008250:	d867      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d05c      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x15e>
 8008256:	2b10      	cmp	r3, #16
 8008258:	d05a      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x15e>
 800825a:	e062      	b.n	8008322 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	f000 f9b2 	bl	80085d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800827e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	609a      	str	r2, [r3, #8]
      break;
 8008288:	e04f      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800829a:	f000 f99b 	bl	80085d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082ac:	609a      	str	r2, [r3, #8]
      break;
 80082ae:	e03c      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082bc:	461a      	mov	r2, r3
 80082be:	f000 f90f 	bl	80084e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2150      	movs	r1, #80	@ 0x50
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f968 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 80082ce:	e02c      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082dc:	461a      	mov	r2, r3
 80082de:	f000 f92e 	bl	800853e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2160      	movs	r1, #96	@ 0x60
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f958 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 80082ee:	e01c      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082fc:	461a      	mov	r2, r3
 80082fe:	f000 f8ef 	bl	80084e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2140      	movs	r1, #64	@ 0x40
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f948 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 800830e:	e00c      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f000 f93f 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8008320:	e003      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
      break;
 8008326:	e000      	b.n	800832a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008328:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a46      	ldr	r2, [pc, #280]	@ (80084c0 <TIM_Base_SetConfig+0x12c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d013      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b2:	d00f      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a43      	ldr	r2, [pc, #268]	@ (80084c4 <TIM_Base_SetConfig+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a42      	ldr	r2, [pc, #264]	@ (80084c8 <TIM_Base_SetConfig+0x134>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d007      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a41      	ldr	r2, [pc, #260]	@ (80084cc <TIM_Base_SetConfig+0x138>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a40      	ldr	r2, [pc, #256]	@ (80084d0 <TIM_Base_SetConfig+0x13c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d108      	bne.n	80083e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a35      	ldr	r2, [pc, #212]	@ (80084c0 <TIM_Base_SetConfig+0x12c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a32      	ldr	r2, [pc, #200]	@ (80084c4 <TIM_Base_SetConfig+0x130>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a31      	ldr	r2, [pc, #196]	@ (80084c8 <TIM_Base_SetConfig+0x134>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a30      	ldr	r2, [pc, #192]	@ (80084cc <TIM_Base_SetConfig+0x138>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a2f      	ldr	r2, [pc, #188]	@ (80084d0 <TIM_Base_SetConfig+0x13c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2e      	ldr	r2, [pc, #184]	@ (80084d4 <TIM_Base_SetConfig+0x140>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a2d      	ldr	r2, [pc, #180]	@ (80084d8 <TIM_Base_SetConfig+0x144>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2c      	ldr	r2, [pc, #176]	@ (80084dc <TIM_Base_SetConfig+0x148>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a16      	ldr	r2, [pc, #88]	@ (80084c0 <TIM_Base_SetConfig+0x12c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <TIM_Base_SetConfig+0x13c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a17      	ldr	r2, [pc, #92]	@ (80084d4 <TIM_Base_SetConfig+0x140>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a16      	ldr	r2, [pc, #88]	@ (80084d8 <TIM_Base_SetConfig+0x144>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a15      	ldr	r2, [pc, #84]	@ (80084dc <TIM_Base_SetConfig+0x148>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d103      	bne.n	8008494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f023 0201 	bic.w	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	611a      	str	r2, [r3, #16]
  }
}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40000400 	.word	0x40000400
 80084c8:	40000800 	.word	0x40000800
 80084cc:	40000c00 	.word	0x40000c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0201 	bic.w	r2, r3, #1
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800850a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 030a 	bic.w	r3, r3, #10
 800851c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	f023 0210 	bic.w	r2, r3, #16
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	031b      	lsls	r3, r3, #12
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800857a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f043 0307 	orr.w	r3, r3, #7
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	021a      	lsls	r2, r3, #8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	609a      	str	r2, [r3, #8]
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008628:	2302      	movs	r3, #2
 800862a:	e068      	b.n	80086fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a2e      	ldr	r2, [pc, #184]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a2d      	ldr	r2, [pc, #180]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d108      	bne.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008666:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008678:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1e      	ldr	r2, [pc, #120]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01d      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869e:	d018      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a18      	ldr	r2, [pc, #96]	@ (800871c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a13      	ldr	r2, [pc, #76]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a14      	ldr	r2, [pc, #80]	@ (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d10c      	bne.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40013400 	.word	0x40013400
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800
 800871c:	40000c00 	.word	0x40000c00
 8008720:	40014000 	.word	0x40014000

08008724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e040      	b.n	80087f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fa fcfc 	bl	8003180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2224      	movs	r2, #36	@ 0x24
 800878c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fedc 	bl	8009564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc21 	bl	8008ff4 <UART_SetConfig>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e01b      	b.n	80087f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 ff5b 	bl	80096a8 <UART_CheckIdleState>
 80087f2:	4603      	mov	r3, r0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	@ 0x28
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008810:	2b20      	cmp	r3, #32
 8008812:	d177      	bne.n	8008904 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_UART_Transmit+0x24>
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e070      	b.n	8008906 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2221      	movs	r2, #33	@ 0x21
 8008830:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008832:	f7fb f829 	bl	8003888 <HAL_GetTick>
 8008836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	88fa      	ldrh	r2, [r7, #6]
 800883c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008850:	d108      	bne.n	8008864 <HAL_UART_Transmit+0x68>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	e003      	b.n	800886c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008868:	2300      	movs	r3, #0
 800886a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800886c:	e02f      	b.n	80088ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	@ 0x80
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 ffbd 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e03b      	b.n	8008906 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	881a      	ldrh	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a0:	b292      	uxth	r2, r2
 80088a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	3302      	adds	r3, #2
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	e007      	b.n	80088bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	781a      	ldrb	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3301      	adds	r3, #1
 80088ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1c9      	bne.n	800886e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2200      	movs	r2, #0
 80088e2:	2140      	movs	r1, #64	@ 0x40
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 ff87 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e005      	b.n	8008906 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	e000      	b.n	8008906 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3720      	adds	r7, #32
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	@ 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008924:	2b20      	cmp	r3, #32
 8008926:	d137      	bne.n	8008998 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <HAL_UART_Receive_DMA+0x24>
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e030      	b.n	800899a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a18      	ldr	r2, [pc, #96]	@ (80089a4 <HAL_UART_Receive_DMA+0x94>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01f      	beq.n	8008988 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	623b      	str	r3, [r7, #32]
 8008976:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	69f9      	ldr	r1, [r7, #28]
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	61bb      	str	r3, [r7, #24]
   return(result);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008988:	88fb      	ldrh	r3, [r7, #6]
 800898a:	461a      	mov	r2, r3
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 ffa0 	bl	80098d4 <UART_Start_Receive_DMA>
 8008994:	4603      	mov	r3, r0
 8008996:	e000      	b.n	800899a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	3728      	adds	r7, #40	@ 0x28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	40008000 	.word	0x40008000

080089a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0ba      	sub	sp, #232	@ 0xe8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80089d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80089d6:	4013      	ands	r3, r2
 80089d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80089dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d115      	bne.n	8008a10 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00f      	beq.n	8008a10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f4:	f003 0320 	and.w	r3, r3, #32
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 82ca 	beq.w	8008f9a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
      }
      return;
 8008a0e:	e2c4      	b.n	8008f9a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 8117 	beq.w	8008c48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a2a:	4b85      	ldr	r3, [pc, #532]	@ (8008c40 <HAL_UART_IRQHandler+0x298>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 810a 	beq.w	8008c48 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d011      	beq.n	8008a64 <HAL_UART_IRQHandler+0xbc>
 8008a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2201      	movs	r2, #1
 8008a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a5a:	f043 0201 	orr.w	r2, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d011      	beq.n	8008a94 <HAL_UART_IRQHandler+0xec>
 8008a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2202      	movs	r2, #2
 8008a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a8a:	f043 0204 	orr.w	r2, r3, #4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d011      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x11c>
 8008aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2204      	movs	r2, #4
 8008ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aba:	f043 0202 	orr.w	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d017      	beq.n	8008b00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d105      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2208      	movs	r2, #8
 8008aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af6:	f043 0208 	orr.w	r2, r3, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d012      	beq.n	8008b32 <HAL_UART_IRQHandler+0x18a>
 8008b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00c      	beq.n	8008b32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8230 	beq.w	8008f9e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00d      	beq.n	8008b66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d007      	beq.n	8008b66 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b40      	cmp	r3, #64	@ 0x40
 8008b7c:	d005      	beq.n	8008b8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d04f      	beq.n	8008c2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 ff68 	bl	8009a60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b9a:	2b40      	cmp	r3, #64	@ 0x40
 8008b9c:	d141      	bne.n	8008c22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008bca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1d9      	bne.n	8008b9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d013      	beq.n	8008c1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf6:	4a13      	ldr	r2, [pc, #76]	@ (8008c44 <HAL_UART_IRQHandler+0x29c>)
 8008bf8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fc fabc 	bl	800517c <HAL_DMA_Abort_IT>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d017      	beq.n	8008c3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	e00f      	b.n	8008c3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7f8 fec8 	bl	80019b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	e00b      	b.n	8008c3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7f8 fec4 	bl	80019b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c28:	e007      	b.n	8008c3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7f8 fec0 	bl	80019b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008c38:	e1b1      	b.n	8008f9e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3a:	bf00      	nop
    return;
 8008c3c:	e1af      	b.n	8008f9e <HAL_UART_IRQHandler+0x5f6>
 8008c3e:	bf00      	nop
 8008c40:	04000120 	.word	0x04000120
 8008c44:	08009d11 	.word	0x08009d11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	f040 816a 	bne.w	8008f26 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c56:	f003 0310 	and.w	r3, r3, #16
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8163 	beq.w	8008f26 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 815c 	beq.w	8008f26 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2210      	movs	r2, #16
 8008c74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c80:	2b40      	cmp	r3, #64	@ 0x40
 8008c82:	f040 80d4 	bne.w	8008e2e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 80ad 	beq.w	8008df6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	f080 80a5 	bcs.w	8008df6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 8086 	bne.w	8008dd4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1da      	bne.n	8008cc8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d24:	f023 0301 	bic.w	r3, r3, #1
 8008d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e1      	bne.n	8008d12 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e3      	bne.n	8008d4e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da4:	f023 0310 	bic.w	r3, r3, #16
 8008da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008db8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e4      	bne.n	8008d94 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fc f996 	bl	8005100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8f4 	bl	8008fdc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008df4:	e0d5      	b.n	8008fa2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008dfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e00:	429a      	cmp	r2, r3
 8008e02:	f040 80ce 	bne.w	8008fa2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	f040 80c5 	bne.w	8008fa2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8d8 	bl	8008fdc <HAL_UARTEx_RxEventCallback>
      return;
 8008e2c:	e0b9      	b.n	8008fa2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80ab 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80a6 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e4      	bne.n	8008e5a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3308      	adds	r3, #8
 8008e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	f023 0301 	bic.w	r3, r3, #1
 8008ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008eb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8008eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e3      	bne.n	8008e90 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f023 0310 	bic.w	r3, r3, #16
 8008ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	69b9      	ldr	r1, [r7, #24]
 8008f04:	69fa      	ldr	r2, [r7, #28]
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e4      	bne.n	8008edc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2202      	movs	r2, #2
 8008f16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f85c 	bl	8008fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f24:	e03f      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00e      	beq.n	8008f50 <HAL_UART_IRQHandler+0x5a8>
 8008f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 ff88 	bl	8009e5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f4e:	e02d      	b.n	8008fac <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00e      	beq.n	8008f7a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d008      	beq.n	8008f7a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01c      	beq.n	8008faa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
    }
    return;
 8008f78:	e017      	b.n	8008faa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d012      	beq.n	8008fac <HAL_UART_IRQHandler+0x604>
 8008f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00c      	beq.n	8008fac <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fed2 	bl	8009d3c <UART_EndTransmit_IT>
    return;
 8008f98:	e008      	b.n	8008fac <HAL_UART_IRQHandler+0x604>
      return;
 8008f9a:	bf00      	nop
 8008f9c:	e006      	b.n	8008fac <HAL_UART_IRQHandler+0x604>
    return;
 8008f9e:	bf00      	nop
 8008fa0:	e004      	b.n	8008fac <HAL_UART_IRQHandler+0x604>
      return;
 8008fa2:	bf00      	nop
 8008fa4:	e002      	b.n	8008fac <HAL_UART_IRQHandler+0x604>
      return;
 8008fa6:	bf00      	nop
 8008fa8:	e000      	b.n	8008fac <HAL_UART_IRQHandler+0x604>
    return;
 8008faa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008fac:	37e8      	adds	r7, #232	@ 0xe8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop

08008fb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ff8:	b08a      	sub	sp, #40	@ 0x28
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	431a      	orrs	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	431a      	orrs	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	4313      	orrs	r3, r2
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4ba4      	ldr	r3, [pc, #656]	@ (80092b4 <UART_SetConfig+0x2c0>)
 8009024:	4013      	ands	r3, r2
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800902c:	430b      	orrs	r3, r1
 800902e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a99      	ldr	r2, [pc, #612]	@ (80092b8 <UART_SetConfig+0x2c4>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800905c:	4313      	orrs	r3, r2
 800905e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009070:	430a      	orrs	r2, r1
 8009072:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a90      	ldr	r2, [pc, #576]	@ (80092bc <UART_SetConfig+0x2c8>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d126      	bne.n	80090cc <UART_SetConfig+0xd8>
 800907e:	4b90      	ldr	r3, [pc, #576]	@ (80092c0 <UART_SetConfig+0x2cc>)
 8009080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	2b03      	cmp	r3, #3
 800908a:	d81b      	bhi.n	80090c4 <UART_SetConfig+0xd0>
 800908c:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <UART_SetConfig+0xa0>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090b5 	.word	0x080090b5
 800909c:	080090ad 	.word	0x080090ad
 80090a0:	080090bd 	.word	0x080090bd
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090aa:	e116      	b.n	80092da <UART_SetConfig+0x2e6>
 80090ac:	2302      	movs	r3, #2
 80090ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090b2:	e112      	b.n	80092da <UART_SetConfig+0x2e6>
 80090b4:	2304      	movs	r3, #4
 80090b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090ba:	e10e      	b.n	80092da <UART_SetConfig+0x2e6>
 80090bc:	2308      	movs	r3, #8
 80090be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090c2:	e10a      	b.n	80092da <UART_SetConfig+0x2e6>
 80090c4:	2310      	movs	r3, #16
 80090c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090ca:	e106      	b.n	80092da <UART_SetConfig+0x2e6>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a7c      	ldr	r2, [pc, #496]	@ (80092c4 <UART_SetConfig+0x2d0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d138      	bne.n	8009148 <UART_SetConfig+0x154>
 80090d6:	4b7a      	ldr	r3, [pc, #488]	@ (80092c0 <UART_SetConfig+0x2cc>)
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090dc:	f003 030c 	and.w	r3, r3, #12
 80090e0:	2b0c      	cmp	r3, #12
 80090e2:	d82d      	bhi.n	8009140 <UART_SetConfig+0x14c>
 80090e4:	a201      	add	r2, pc, #4	@ (adr r2, 80090ec <UART_SetConfig+0xf8>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009121 	.word	0x08009121
 80090f0:	08009141 	.word	0x08009141
 80090f4:	08009141 	.word	0x08009141
 80090f8:	08009141 	.word	0x08009141
 80090fc:	08009131 	.word	0x08009131
 8009100:	08009141 	.word	0x08009141
 8009104:	08009141 	.word	0x08009141
 8009108:	08009141 	.word	0x08009141
 800910c:	08009129 	.word	0x08009129
 8009110:	08009141 	.word	0x08009141
 8009114:	08009141 	.word	0x08009141
 8009118:	08009141 	.word	0x08009141
 800911c:	08009139 	.word	0x08009139
 8009120:	2300      	movs	r3, #0
 8009122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009126:	e0d8      	b.n	80092da <UART_SetConfig+0x2e6>
 8009128:	2302      	movs	r3, #2
 800912a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800912e:	e0d4      	b.n	80092da <UART_SetConfig+0x2e6>
 8009130:	2304      	movs	r3, #4
 8009132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009136:	e0d0      	b.n	80092da <UART_SetConfig+0x2e6>
 8009138:	2308      	movs	r3, #8
 800913a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800913e:	e0cc      	b.n	80092da <UART_SetConfig+0x2e6>
 8009140:	2310      	movs	r3, #16
 8009142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009146:	e0c8      	b.n	80092da <UART_SetConfig+0x2e6>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a5e      	ldr	r2, [pc, #376]	@ (80092c8 <UART_SetConfig+0x2d4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d125      	bne.n	800919e <UART_SetConfig+0x1aa>
 8009152:	4b5b      	ldr	r3, [pc, #364]	@ (80092c0 <UART_SetConfig+0x2cc>)
 8009154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800915c:	2b30      	cmp	r3, #48	@ 0x30
 800915e:	d016      	beq.n	800918e <UART_SetConfig+0x19a>
 8009160:	2b30      	cmp	r3, #48	@ 0x30
 8009162:	d818      	bhi.n	8009196 <UART_SetConfig+0x1a2>
 8009164:	2b20      	cmp	r3, #32
 8009166:	d00a      	beq.n	800917e <UART_SetConfig+0x18a>
 8009168:	2b20      	cmp	r3, #32
 800916a:	d814      	bhi.n	8009196 <UART_SetConfig+0x1a2>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <UART_SetConfig+0x182>
 8009170:	2b10      	cmp	r3, #16
 8009172:	d008      	beq.n	8009186 <UART_SetConfig+0x192>
 8009174:	e00f      	b.n	8009196 <UART_SetConfig+0x1a2>
 8009176:	2300      	movs	r3, #0
 8009178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800917c:	e0ad      	b.n	80092da <UART_SetConfig+0x2e6>
 800917e:	2302      	movs	r3, #2
 8009180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009184:	e0a9      	b.n	80092da <UART_SetConfig+0x2e6>
 8009186:	2304      	movs	r3, #4
 8009188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800918c:	e0a5      	b.n	80092da <UART_SetConfig+0x2e6>
 800918e:	2308      	movs	r3, #8
 8009190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009194:	e0a1      	b.n	80092da <UART_SetConfig+0x2e6>
 8009196:	2310      	movs	r3, #16
 8009198:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800919c:	e09d      	b.n	80092da <UART_SetConfig+0x2e6>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a4a      	ldr	r2, [pc, #296]	@ (80092cc <UART_SetConfig+0x2d8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d125      	bne.n	80091f4 <UART_SetConfig+0x200>
 80091a8:	4b45      	ldr	r3, [pc, #276]	@ (80092c0 <UART_SetConfig+0x2cc>)
 80091aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80091b4:	d016      	beq.n	80091e4 <UART_SetConfig+0x1f0>
 80091b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80091b8:	d818      	bhi.n	80091ec <UART_SetConfig+0x1f8>
 80091ba:	2b80      	cmp	r3, #128	@ 0x80
 80091bc:	d00a      	beq.n	80091d4 <UART_SetConfig+0x1e0>
 80091be:	2b80      	cmp	r3, #128	@ 0x80
 80091c0:	d814      	bhi.n	80091ec <UART_SetConfig+0x1f8>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <UART_SetConfig+0x1d8>
 80091c6:	2b40      	cmp	r3, #64	@ 0x40
 80091c8:	d008      	beq.n	80091dc <UART_SetConfig+0x1e8>
 80091ca:	e00f      	b.n	80091ec <UART_SetConfig+0x1f8>
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091d2:	e082      	b.n	80092da <UART_SetConfig+0x2e6>
 80091d4:	2302      	movs	r3, #2
 80091d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091da:	e07e      	b.n	80092da <UART_SetConfig+0x2e6>
 80091dc:	2304      	movs	r3, #4
 80091de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091e2:	e07a      	b.n	80092da <UART_SetConfig+0x2e6>
 80091e4:	2308      	movs	r3, #8
 80091e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091ea:	e076      	b.n	80092da <UART_SetConfig+0x2e6>
 80091ec:	2310      	movs	r3, #16
 80091ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091f2:	e072      	b.n	80092da <UART_SetConfig+0x2e6>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a35      	ldr	r2, [pc, #212]	@ (80092d0 <UART_SetConfig+0x2dc>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d12a      	bne.n	8009254 <UART_SetConfig+0x260>
 80091fe:	4b30      	ldr	r3, [pc, #192]	@ (80092c0 <UART_SetConfig+0x2cc>)
 8009200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800920c:	d01a      	beq.n	8009244 <UART_SetConfig+0x250>
 800920e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009212:	d81b      	bhi.n	800924c <UART_SetConfig+0x258>
 8009214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009218:	d00c      	beq.n	8009234 <UART_SetConfig+0x240>
 800921a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800921e:	d815      	bhi.n	800924c <UART_SetConfig+0x258>
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <UART_SetConfig+0x238>
 8009224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009228:	d008      	beq.n	800923c <UART_SetConfig+0x248>
 800922a:	e00f      	b.n	800924c <UART_SetConfig+0x258>
 800922c:	2300      	movs	r3, #0
 800922e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009232:	e052      	b.n	80092da <UART_SetConfig+0x2e6>
 8009234:	2302      	movs	r3, #2
 8009236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800923a:	e04e      	b.n	80092da <UART_SetConfig+0x2e6>
 800923c:	2304      	movs	r3, #4
 800923e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009242:	e04a      	b.n	80092da <UART_SetConfig+0x2e6>
 8009244:	2308      	movs	r3, #8
 8009246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800924a:	e046      	b.n	80092da <UART_SetConfig+0x2e6>
 800924c:	2310      	movs	r3, #16
 800924e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009252:	e042      	b.n	80092da <UART_SetConfig+0x2e6>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a17      	ldr	r2, [pc, #92]	@ (80092b8 <UART_SetConfig+0x2c4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d13a      	bne.n	80092d4 <UART_SetConfig+0x2e0>
 800925e:	4b18      	ldr	r3, [pc, #96]	@ (80092c0 <UART_SetConfig+0x2cc>)
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800926c:	d01a      	beq.n	80092a4 <UART_SetConfig+0x2b0>
 800926e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009272:	d81b      	bhi.n	80092ac <UART_SetConfig+0x2b8>
 8009274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009278:	d00c      	beq.n	8009294 <UART_SetConfig+0x2a0>
 800927a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800927e:	d815      	bhi.n	80092ac <UART_SetConfig+0x2b8>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <UART_SetConfig+0x298>
 8009284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009288:	d008      	beq.n	800929c <UART_SetConfig+0x2a8>
 800928a:	e00f      	b.n	80092ac <UART_SetConfig+0x2b8>
 800928c:	2300      	movs	r3, #0
 800928e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009292:	e022      	b.n	80092da <UART_SetConfig+0x2e6>
 8009294:	2302      	movs	r3, #2
 8009296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800929a:	e01e      	b.n	80092da <UART_SetConfig+0x2e6>
 800929c:	2304      	movs	r3, #4
 800929e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092a2:	e01a      	b.n	80092da <UART_SetConfig+0x2e6>
 80092a4:	2308      	movs	r3, #8
 80092a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092aa:	e016      	b.n	80092da <UART_SetConfig+0x2e6>
 80092ac:	2310      	movs	r3, #16
 80092ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092b2:	e012      	b.n	80092da <UART_SetConfig+0x2e6>
 80092b4:	efff69f3 	.word	0xefff69f3
 80092b8:	40008000 	.word	0x40008000
 80092bc:	40013800 	.word	0x40013800
 80092c0:	40021000 	.word	0x40021000
 80092c4:	40004400 	.word	0x40004400
 80092c8:	40004800 	.word	0x40004800
 80092cc:	40004c00 	.word	0x40004c00
 80092d0:	40005000 	.word	0x40005000
 80092d4:	2310      	movs	r3, #16
 80092d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a9f      	ldr	r2, [pc, #636]	@ (800955c <UART_SetConfig+0x568>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d17a      	bne.n	80093da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	d824      	bhi.n	8009336 <UART_SetConfig+0x342>
 80092ec:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <UART_SetConfig+0x300>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009319 	.word	0x08009319
 80092f8:	08009337 	.word	0x08009337
 80092fc:	08009321 	.word	0x08009321
 8009300:	08009337 	.word	0x08009337
 8009304:	08009327 	.word	0x08009327
 8009308:	08009337 	.word	0x08009337
 800930c:	08009337 	.word	0x08009337
 8009310:	08009337 	.word	0x08009337
 8009314:	0800932f 	.word	0x0800932f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009318:	f7fd fe32 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 800931c:	61f8      	str	r0, [r7, #28]
        break;
 800931e:	e010      	b.n	8009342 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009320:	4b8f      	ldr	r3, [pc, #572]	@ (8009560 <UART_SetConfig+0x56c>)
 8009322:	61fb      	str	r3, [r7, #28]
        break;
 8009324:	e00d      	b.n	8009342 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009326:	f7fd fd93 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 800932a:	61f8      	str	r0, [r7, #28]
        break;
 800932c:	e009      	b.n	8009342 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800932e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009332:	61fb      	str	r3, [r7, #28]
        break;
 8009334:	e005      	b.n	8009342 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 80fb 	beq.w	8009540 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	4613      	mov	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4413      	add	r3, r2
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	429a      	cmp	r2, r3
 8009358:	d305      	bcc.n	8009366 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	429a      	cmp	r2, r3
 8009364:	d903      	bls.n	800936e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800936c:	e0e8      	b.n	8009540 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2200      	movs	r2, #0
 8009372:	461c      	mov	r4, r3
 8009374:	4615      	mov	r5, r2
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	022b      	lsls	r3, r5, #8
 8009380:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009384:	0222      	lsls	r2, r4, #8
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	6849      	ldr	r1, [r1, #4]
 800938a:	0849      	lsrs	r1, r1, #1
 800938c:	2000      	movs	r0, #0
 800938e:	4688      	mov	r8, r1
 8009390:	4681      	mov	r9, r0
 8009392:	eb12 0a08 	adds.w	sl, r2, r8
 8009396:	eb43 0b09 	adc.w	fp, r3, r9
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	603b      	str	r3, [r7, #0]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a8:	4650      	mov	r0, sl
 80093aa:	4659      	mov	r1, fp
 80093ac:	f7f7 fb66 	bl	8000a7c <__aeabi_uldivmod>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4613      	mov	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093be:	d308      	bcc.n	80093d2 <UART_SetConfig+0x3de>
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093c6:	d204      	bcs.n	80093d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	60da      	str	r2, [r3, #12]
 80093d0:	e0b6      	b.n	8009540 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80093d8:	e0b2      	b.n	8009540 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e2:	d15e      	bne.n	80094a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80093e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d828      	bhi.n	800943e <UART_SetConfig+0x44a>
 80093ec:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <UART_SetConfig+0x400>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	08009419 	.word	0x08009419
 80093f8:	08009421 	.word	0x08009421
 80093fc:	08009429 	.word	0x08009429
 8009400:	0800943f 	.word	0x0800943f
 8009404:	0800942f 	.word	0x0800942f
 8009408:	0800943f 	.word	0x0800943f
 800940c:	0800943f 	.word	0x0800943f
 8009410:	0800943f 	.word	0x0800943f
 8009414:	08009437 	.word	0x08009437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009418:	f7fd fdb2 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 800941c:	61f8      	str	r0, [r7, #28]
        break;
 800941e:	e014      	b.n	800944a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009420:	f7fd fdc4 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 8009424:	61f8      	str	r0, [r7, #28]
        break;
 8009426:	e010      	b.n	800944a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009428:	4b4d      	ldr	r3, [pc, #308]	@ (8009560 <UART_SetConfig+0x56c>)
 800942a:	61fb      	str	r3, [r7, #28]
        break;
 800942c:	e00d      	b.n	800944a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800942e:	f7fd fd0f 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8009432:	61f8      	str	r0, [r7, #28]
        break;
 8009434:	e009      	b.n	800944a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943a:	61fb      	str	r3, [r7, #28]
        break;
 800943c:	e005      	b.n	800944a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d077      	beq.n	8009540 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	005a      	lsls	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	441a      	add	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	fbb2 f3f3 	udiv	r3, r2, r3
 8009464:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b0f      	cmp	r3, #15
 800946a:	d916      	bls.n	800949a <UART_SetConfig+0x4a6>
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009472:	d212      	bcs.n	800949a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f023 030f 	bic.w	r3, r3, #15
 800947c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	b29b      	uxth	r3, r3
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	b29a      	uxth	r2, r3
 800948a:	8afb      	ldrh	r3, [r7, #22]
 800948c:	4313      	orrs	r3, r2
 800948e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	8afa      	ldrh	r2, [r7, #22]
 8009496:	60da      	str	r2, [r3, #12]
 8009498:	e052      	b.n	8009540 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80094a0:	e04e      	b.n	8009540 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	d827      	bhi.n	80094fa <UART_SetConfig+0x506>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <UART_SetConfig+0x4bc>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	080094dd 	.word	0x080094dd
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	080094fb 	.word	0x080094fb
 80094c0:	080094eb 	.word	0x080094eb
 80094c4:	080094fb 	.word	0x080094fb
 80094c8:	080094fb 	.word	0x080094fb
 80094cc:	080094fb 	.word	0x080094fb
 80094d0:	080094f3 	.word	0x080094f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094d4:	f7fd fd54 	bl	8006f80 <HAL_RCC_GetPCLK1Freq>
 80094d8:	61f8      	str	r0, [r7, #28]
        break;
 80094da:	e014      	b.n	8009506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094dc:	f7fd fd66 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 80094e0:	61f8      	str	r0, [r7, #28]
        break;
 80094e2:	e010      	b.n	8009506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009560 <UART_SetConfig+0x56c>)
 80094e6:	61fb      	str	r3, [r7, #28]
        break;
 80094e8:	e00d      	b.n	8009506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ea:	f7fd fcb1 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 80094ee:	61f8      	str	r0, [r7, #28]
        break;
 80094f0:	e009      	b.n	8009506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094f6:	61fb      	str	r3, [r7, #28]
        break;
 80094f8:	e005      	b.n	8009506 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009504:	bf00      	nop
    }

    if (pclk != 0U)
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d019      	beq.n	8009540 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	085a      	lsrs	r2, r3, #1
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	441a      	add	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	fbb2 f3f3 	udiv	r3, r2, r3
 800951e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	2b0f      	cmp	r3, #15
 8009524:	d909      	bls.n	800953a <UART_SetConfig+0x546>
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800952c:	d205      	bcs.n	800953a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60da      	str	r2, [r3, #12]
 8009538:	e002      	b.n	8009540 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800954c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009550:	4618      	mov	r0, r3
 8009552:	3728      	adds	r7, #40	@ 0x28
 8009554:	46bd      	mov	sp, r7
 8009556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800955a:	bf00      	nop
 800955c:	40008000 	.word	0x40008000
 8009560:	00f42400 	.word	0x00f42400

08009564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00a      	beq.n	80095d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00a      	beq.n	8009616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01a      	beq.n	800967a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009662:	d10a      	bne.n	800967a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	605a      	str	r2, [r3, #4]
  }
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b098      	sub	sp, #96	@ 0x60
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096b8:	f7fa f8e6 	bl	8003888 <HAL_GetTick>
 80096bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d12e      	bne.n	800972a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d4:	2200      	movs	r2, #0
 80096d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f88c 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d021      	beq.n	800972a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009704:	647b      	str	r3, [r7, #68]	@ 0x44
 8009706:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800970a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2220      	movs	r2, #32
 800971c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e062      	b.n	80097f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b04      	cmp	r3, #4
 8009736:	d149      	bne.n	80097cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009738:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009740:	2200      	movs	r2, #0
 8009742:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f856 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d03c      	beq.n	80097cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	623b      	str	r3, [r7, #32]
   return(result);
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009770:	633b      	str	r3, [r7, #48]	@ 0x30
 8009772:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800977e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e6      	bne.n	8009752 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3308      	adds	r3, #8
 800978a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	60fb      	str	r3, [r7, #12]
   return(result);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0301 	bic.w	r3, r3, #1
 800979a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a4:	61fa      	str	r2, [r7, #28]
 80097a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	69b9      	ldr	r1, [r7, #24]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	e841 2300 	strex	r3, r2, [r1]
 80097b0:	617b      	str	r3, [r7, #20]
   return(result);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e5      	bne.n	8009784 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e011      	b.n	80097f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3758      	adds	r7, #88	@ 0x58
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	4613      	mov	r3, r2
 8009806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009808:	e04f      	b.n	80098aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009810:	d04b      	beq.n	80098aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009812:	f7fa f839 	bl	8003888 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	429a      	cmp	r2, r3
 8009820:	d302      	bcc.n	8009828 <UART_WaitOnFlagUntilTimeout+0x30>
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e04e      	b.n	80098ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	d037      	beq.n	80098aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b80      	cmp	r3, #128	@ 0x80
 800983e:	d034      	beq.n	80098aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b40      	cmp	r3, #64	@ 0x40
 8009844:	d031      	beq.n	80098aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b08      	cmp	r3, #8
 8009852:	d110      	bne.n	8009876 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2208      	movs	r2, #8
 800985a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f8ff 	bl	8009a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2208      	movs	r2, #8
 8009866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e029      	b.n	80098ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009884:	d111      	bne.n	80098aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800988e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f8e5 	bl	8009a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2220      	movs	r2, #32
 800989a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e00f      	b.n	80098ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4013      	ands	r3, r2
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	bf0c      	ite	eq
 80098ba:	2301      	moveq	r3, #1
 80098bc:	2300      	movne	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d0a0      	beq.n	800980a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b096      	sub	sp, #88	@ 0x58
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	88fa      	ldrh	r2, [r7, #6]
 80098ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2222      	movs	r2, #34	@ 0x22
 80098fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009904:	2b00      	cmp	r3, #0
 8009906:	d028      	beq.n	800995a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800990c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a08 <UART_Start_Receive_DMA+0x134>)
 800990e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009914:	4a3d      	ldr	r2, [pc, #244]	@ (8009a0c <UART_Start_Receive_DMA+0x138>)
 8009916:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800991c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a10 <UART_Start_Receive_DMA+0x13c>)
 800991e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009924:	2200      	movs	r2, #0
 8009926:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3324      	adds	r3, #36	@ 0x24
 8009932:	4619      	mov	r1, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009938:	461a      	mov	r2, r3
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	f7fb fb80 	bl	8005040 <HAL_DMA_Start_IT>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d009      	beq.n	800995a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2210      	movs	r2, #16
 800994a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e051      	b.n	80099fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d018      	beq.n	8009994 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009976:	657b      	str	r3, [r7, #84]	@ 0x54
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009982:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009986:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800998e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e6      	bne.n	8009962 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	f043 0301 	orr.w	r3, r3, #1
 80099aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3308      	adds	r3, #8
 80099b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80099b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099bc:	e841 2300 	strex	r3, r2, [r1]
 80099c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80099c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e5      	bne.n	8009994 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3308      	adds	r3, #8
 80099ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	613b      	str	r3, [r7, #16]
   return(result);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3308      	adds	r3, #8
 80099e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099e8:	623a      	str	r2, [r7, #32]
 80099ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	69f9      	ldr	r1, [r7, #28]
 80099ee:	6a3a      	ldr	r2, [r7, #32]
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e5      	bne.n	80099c8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3758      	adds	r7, #88	@ 0x58
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	08009b29 	.word	0x08009b29
 8009a0c:	08009c55 	.word	0x08009c55
 8009a10:	08009c93 	.word	0x08009c93

08009a14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b089      	sub	sp, #36	@ 0x24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6979      	ldr	r1, [r7, #20]
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	613b      	str	r3, [r7, #16]
   return(result);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e6      	bne.n	8009a1c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009a54:	bf00      	nop
 8009a56:	3724      	adds	r7, #36	@ 0x24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b095      	sub	sp, #84	@ 0x54
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e6      	bne.n	8009a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e5      	bne.n	8009a9a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d118      	bne.n	8009b08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f023 0310 	bic.w	r3, r3, #16
 8009aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6979      	ldr	r1, [r7, #20]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	613b      	str	r3, [r7, #16]
   return(result);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e6      	bne.n	8009ad6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009b1c:	bf00      	nop
 8009b1e:	3754      	adds	r7, #84	@ 0x54
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b09c      	sub	sp, #112	@ 0x70
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d171      	bne.n	8009c28 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e6      	bne.n	8009b4c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e5      	bne.n	8009b7e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e5      	bne.n	8009bb2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be8:	2220      	movs	r2, #32
 8009bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d118      	bne.n	8009c28 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	e853 3f00 	ldrex	r3, [r3]
 8009c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0310 	bic.w	r3, r3, #16
 8009c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c14:	61fb      	str	r3, [r7, #28]
 8009c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	69b9      	ldr	r1, [r7, #24]
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	617b      	str	r3, [r7, #20]
   return(result);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e6      	bne.n	8009bf6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d107      	bne.n	8009c46 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c40:	f7ff f9cc 	bl	8008fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c44:	e002      	b.n	8009c4c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c48:	f7ff f9b4 	bl	8008fb4 <HAL_UART_RxCpltCallback>
}
 8009c4c:	bf00      	nop
 8009c4e:	3770      	adds	r7, #112	@ 0x70
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d109      	bne.n	8009c84 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009c76:	085b      	lsrs	r3, r3, #1
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff f9ad 	bl	8008fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c82:	e002      	b.n	8009c8a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff f99f 	bl	8008fc8 <HAL_UART_RxHalfCpltCallback>
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b086      	sub	sp, #24
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ca4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb8:	2b80      	cmp	r3, #128	@ 0x80
 8009cba:	d109      	bne.n	8009cd0 <UART_DMAError+0x3e>
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2b21      	cmp	r3, #33	@ 0x21
 8009cc0:	d106      	bne.n	8009cd0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009cca:	6978      	ldr	r0, [r7, #20]
 8009ccc:	f7ff fea2 	bl	8009a14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cda:	2b40      	cmp	r3, #64	@ 0x40
 8009cdc:	d109      	bne.n	8009cf2 <UART_DMAError+0x60>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b22      	cmp	r3, #34	@ 0x22
 8009ce2:	d106      	bne.n	8009cf2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009cec:	6978      	ldr	r0, [r7, #20]
 8009cee:	f7ff feb7 	bl	8009a60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cf8:	f043 0210 	orr.w	r2, r3, #16
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f7f7 fe54 	bl	80019b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d08:	bf00      	nop
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7f7 fe3e 	bl	80019b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d34:	bf00      	nop
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	61bb      	str	r3, [r7, #24]
 8009d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6979      	ldr	r1, [r7, #20]
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e6      	bne.n	8009d44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7f7 fde8 	bl	8001958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d88:	bf00      	nop
 8009d8a:	3720      	adds	r7, #32
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e056      	b.n	8009e56 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7f9 f9e1 	bl	8003180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2224      	movs	r2, #36	@ 0x24
 8009dc2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 0201 	bic.w	r2, r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff fbc1 	bl	8009564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f7ff f906 	bl	8008ff4 <UART_SetConfig>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e031      	b.n	8009e56 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e00:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	055b      	lsls	r3, r3, #21
 8009e1a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	041b      	lsls	r3, r3, #16
 8009e20:	697a      	ldr	r2, [r7, #20]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009e30:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	6979      	ldr	r1, [r7, #20]
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fc2a 	bl	80096a8 <UART_CheckIdleState>
 8009e54:	4603      	mov	r3, r0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <__NVIC_SetPriority>:
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6039      	str	r1, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	db0a      	blt.n	8009e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	490c      	ldr	r1, [pc, #48]	@ (8009ec0 <__NVIC_SetPriority+0x4c>)
 8009e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e92:	0112      	lsls	r2, r2, #4
 8009e94:	b2d2      	uxtb	r2, r2
 8009e96:	440b      	add	r3, r1
 8009e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009e9c:	e00a      	b.n	8009eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	4908      	ldr	r1, [pc, #32]	@ (8009ec4 <__NVIC_SetPriority+0x50>)
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	3b04      	subs	r3, #4
 8009eac:	0112      	lsls	r2, r2, #4
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	761a      	strb	r2, [r3, #24]
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	e000e100 	.word	0xe000e100
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ecc:	4b05      	ldr	r3, [pc, #20]	@ (8009ee4 <SysTick_Handler+0x1c>)
 8009ece:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ed0:	f001 fd18 	bl	800b904 <xTaskGetSchedulerState>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d001      	beq.n	8009ede <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009eda:	f002 fb0d 	bl	800c4f8 <xPortSysTickHandler>
  }
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	e000e010 	.word	0xe000e010

08009ee8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009eec:	2100      	movs	r1, #0
 8009eee:	f06f 0004 	mvn.w	r0, #4
 8009ef2:	f7ff ffbf 	bl	8009e74 <__NVIC_SetPriority>
#endif
}
 8009ef6:	bf00      	nop
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f02:	f3ef 8305 	mrs	r3, IPSR
 8009f06:	603b      	str	r3, [r7, #0]
  return(result);
 8009f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f0e:	f06f 0305 	mvn.w	r3, #5
 8009f12:	607b      	str	r3, [r7, #4]
 8009f14:	e00c      	b.n	8009f30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f16:	4b0a      	ldr	r3, [pc, #40]	@ (8009f40 <osKernelInitialize+0x44>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f1e:	4b08      	ldr	r3, [pc, #32]	@ (8009f40 <osKernelInitialize+0x44>)
 8009f20:	2201      	movs	r2, #1
 8009f22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	607b      	str	r3, [r7, #4]
 8009f28:	e002      	b.n	8009f30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f30:	687b      	ldr	r3, [r7, #4]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	20000b34 	.word	0x20000b34

08009f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f4a:	f3ef 8305 	mrs	r3, IPSR
 8009f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8009f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009f56:	f06f 0305 	mvn.w	r3, #5
 8009f5a:	607b      	str	r3, [r7, #4]
 8009f5c:	e010      	b.n	8009f80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f8c <osKernelStart+0x48>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d109      	bne.n	8009f7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009f66:	f7ff ffbf 	bl	8009ee8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009f6a:	4b08      	ldr	r3, [pc, #32]	@ (8009f8c <osKernelStart+0x48>)
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009f70:	f001 f87a 	bl	800b068 <vTaskStartScheduler>
      stat = osOK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	607b      	str	r3, [r7, #4]
 8009f78:	e002      	b.n	8009f80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f80:	687b      	ldr	r3, [r7, #4]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000b34 	.word	0x20000b34

08009f90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	@ 0x38
 8009f94:	af04      	add	r7, sp, #16
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fa0:	f3ef 8305 	mrs	r3, IPSR
 8009fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8009fa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d17e      	bne.n	800a0aa <osThreadNew+0x11a>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d07b      	beq.n	800a0aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009fb2:	2380      	movs	r3, #128	@ 0x80
 8009fb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009fb6:	2318      	movs	r3, #24
 8009fb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d045      	beq.n	800a056 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <osThreadNew+0x48>
        name = attr->name;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d008      	beq.n	8009ffe <osThreadNew+0x6e>
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	2b38      	cmp	r3, #56	@ 0x38
 8009ff0:	d805      	bhi.n	8009ffe <osThreadNew+0x6e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <osThreadNew+0x72>
        return (NULL);
 8009ffe:	2300      	movs	r3, #0
 800a000:	e054      	b.n	800a0ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	089b      	lsrs	r3, r3, #2
 800a010:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00e      	beq.n	800a038 <osThreadNew+0xa8>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	2b5b      	cmp	r3, #91	@ 0x5b
 800a020:	d90a      	bls.n	800a038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a026:	2b00      	cmp	r3, #0
 800a028:	d006      	beq.n	800a038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <osThreadNew+0xa8>
        mem = 1;
 800a032:	2301      	movs	r3, #1
 800a034:	61bb      	str	r3, [r7, #24]
 800a036:	e010      	b.n	800a05a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10c      	bne.n	800a05a <osThreadNew+0xca>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <osThreadNew+0xca>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d104      	bne.n	800a05a <osThreadNew+0xca>
          mem = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	61bb      	str	r3, [r7, #24]
 800a054:	e001      	b.n	800a05a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d110      	bne.n	800a082 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a068:	9202      	str	r2, [sp, #8]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fe1a 	bl	800acb0 <xTaskCreateStatic>
 800a07c:	4603      	mov	r3, r0
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	e013      	b.n	800a0aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d110      	bne.n	800a0aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	f107 0310 	add.w	r3, r7, #16
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 fe68 	bl	800ad70 <xTaskCreate>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d001      	beq.n	800a0aa <osThreadNew+0x11a>
            hTask = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0aa:	693b      	ldr	r3, [r7, #16]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3728      	adds	r7, #40	@ 0x28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0bc:	f3ef 8305 	mrs	r3, IPSR
 800a0c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <osDelay+0x1c>
    stat = osErrorISR;
 800a0c8:	f06f 0305 	mvn.w	r3, #5
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e007      	b.n	800a0e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 ff8e 	bl	800affc <vTaskDelay>
    }
  }

  return (stat);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4a07      	ldr	r2, [pc, #28]	@ (800a118 <vApplicationGetIdleTaskMemory+0x2c>)
 800a0fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	4a06      	ldr	r2, [pc, #24]	@ (800a11c <vApplicationGetIdleTaskMemory+0x30>)
 800a102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2280      	movs	r2, #128	@ 0x80
 800a108:	601a      	str	r2, [r3, #0]
}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000b38 	.word	0x20000b38
 800a11c:	20000b94 	.word	0x20000b94

0800a120 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4a07      	ldr	r2, [pc, #28]	@ (800a14c <vApplicationGetTimerTaskMemory+0x2c>)
 800a130:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4a06      	ldr	r2, [pc, #24]	@ (800a150 <vApplicationGetTimerTaskMemory+0x30>)
 800a136:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a13e:	601a      	str	r2, [r3, #0]
}
 800a140:	bf00      	nop
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	20000d94 	.word	0x20000d94
 800a150:	20000df0 	.word	0x20000df0

0800a154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f103 0208 	add.w	r2, r3, #8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f04f 32ff 	mov.w	r2, #4294967295
 800a16c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f103 0208 	add.w	r2, r3, #8
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f103 0208 	add.w	r2, r3, #8
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1a2:	bf00      	nop
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	601a      	str	r2, [r3, #0]
}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d103      	bne.n	800a216 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e00c      	b.n	800a230 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3308      	adds	r3, #8
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e002      	b.n	800a224 <vListInsert+0x2e>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d2f6      	bcs.n	800a21e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6892      	ldr	r2, [r2, #8]
 800a27e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	6852      	ldr	r2, [r2, #4]
 800a288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	d103      	bne.n	800a29c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	1e5a      	subs	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	e7fd      	b.n	800a2e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2e8:	f002 f876 	bl	800c3d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	441a      	add	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a318:	3b01      	subs	r3, #1
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a31e:	fb01 f303 	mul.w	r3, r1, r3
 800a322:	441a      	add	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	22ff      	movs	r2, #255	@ 0xff
 800a32c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	22ff      	movs	r2, #255	@ 0xff
 800a334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d114      	bne.n	800a368 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01a      	beq.n	800a37c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3310      	adds	r3, #16
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f91a 	bl	800b584 <xTaskRemoveFromEventList>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d012      	beq.n	800a37c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a356:	4b0d      	ldr	r3, [pc, #52]	@ (800a38c <xQueueGenericReset+0xd0>)
 800a358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	e009      	b.n	800a37c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3310      	adds	r3, #16
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fef1 	bl	800a154 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3324      	adds	r3, #36	@ 0x24
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff feec 	bl	800a154 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a37c:	f002 f85e 	bl	800c43c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a380:	2301      	movs	r3, #1
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	e000ed04 	.word	0xe000ed04

0800a390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08e      	sub	sp, #56	@ 0x38
 800a394:	af02      	add	r7, sp, #8
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10b      	bne.n	800a3bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	e7fd      	b.n	800a3b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <xQueueGenericCreateStatic+0x56>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <xQueueGenericCreateStatic+0x5a>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e000      	b.n	800a3ec <xQueueGenericCreateStatic+0x5c>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	623b      	str	r3, [r7, #32]
}
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	e7fd      	b.n	800a404 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d102      	bne.n	800a414 <xQueueGenericCreateStatic+0x84>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <xQueueGenericCreateStatic+0x88>
 800a414:	2301      	movs	r3, #1
 800a416:	e000      	b.n	800a41a <xQueueGenericCreateStatic+0x8a>
 800a418:	2300      	movs	r3, #0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	61fb      	str	r3, [r7, #28]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a436:	2350      	movs	r3, #80	@ 0x50
 800a438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2b50      	cmp	r3, #80	@ 0x50
 800a43e:	d00b      	beq.n	800a458 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	61bb      	str	r3, [r7, #24]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a458:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00d      	beq.n	800a480 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a46c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4613      	mov	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 f805 	bl	800a48a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a482:	4618      	mov	r0, r3
 800a484:	3730      	adds	r7, #48	@ 0x30
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e002      	b.n	800a4ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	69b8      	ldr	r0, [r7, #24]
 800a4bc:	f7ff fefe 	bl	800a2bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08e      	sub	sp, #56	@ 0x38
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10b      	bne.n	800a504 <xQueueGenericSend+0x34>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	e7fd      	b.n	800a500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d103      	bne.n	800a512 <xQueueGenericSend+0x42>
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <xQueueGenericSend+0x46>
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <xQueueGenericSend+0x48>
 800a516:	2300      	movs	r3, #0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <xQueueGenericSend+0x64>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	e7fd      	b.n	800a530 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d103      	bne.n	800a542 <xQueueGenericSend+0x72>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <xQueueGenericSend+0x76>
 800a542:	2301      	movs	r3, #1
 800a544:	e000      	b.n	800a548 <xQueueGenericSend+0x78>
 800a546:	2300      	movs	r3, #0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10b      	bne.n	800a564 <xQueueGenericSend+0x94>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	623b      	str	r3, [r7, #32]
}
 800a55e:	bf00      	nop
 800a560:	bf00      	nop
 800a562:	e7fd      	b.n	800a560 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a564:	f001 f9ce 	bl	800b904 <xTaskGetSchedulerState>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <xQueueGenericSend+0xa4>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <xQueueGenericSend+0xa8>
 800a574:	2301      	movs	r3, #1
 800a576:	e000      	b.n	800a57a <xQueueGenericSend+0xaa>
 800a578:	2300      	movs	r3, #0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <xQueueGenericSend+0xc6>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	61fb      	str	r3, [r7, #28]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a596:	f001 ff1f 	bl	800c3d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d302      	bcc.n	800a5ac <xQueueGenericSend+0xdc>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d129      	bne.n	800a600 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	68b9      	ldr	r1, [r7, #8]
 800a5b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5b2:	f000 fa0f 	bl	800a9d4 <prvCopyDataToQueue>
 800a5b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d010      	beq.n	800a5e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	3324      	adds	r3, #36	@ 0x24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 ffdd 	bl	800b584 <xTaskRemoveFromEventList>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d013      	beq.n	800a5f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5d0:	4b3f      	ldr	r3, [pc, #252]	@ (800a6d0 <xQueueGenericSend+0x200>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	e00a      	b.n	800a5f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d007      	beq.n	800a5f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5e8:	4b39      	ldr	r3, [pc, #228]	@ (800a6d0 <xQueueGenericSend+0x200>)
 800a5ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5f8:	f001 ff20 	bl	800c43c <vPortExitCritical>
				return pdPASS;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e063      	b.n	800a6c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d103      	bne.n	800a60e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a606:	f001 ff19 	bl	800c43c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e05c      	b.n	800a6c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a610:	2b00      	cmp	r3, #0
 800a612:	d106      	bne.n	800a622 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a614:	f107 0314 	add.w	r3, r7, #20
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 f817 	bl	800b64c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a61e:	2301      	movs	r3, #1
 800a620:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a622:	f001 ff0b 	bl	800c43c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a626:	f000 fd87 	bl	800b138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a62a:	f001 fed5 	bl	800c3d8 <vPortEnterCritical>
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a634:	b25b      	sxtb	r3, r3
 800a636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63a:	d103      	bne.n	800a644 <xQueueGenericSend+0x174>
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a64a:	b25b      	sxtb	r3, r3
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d103      	bne.n	800a65a <xQueueGenericSend+0x18a>
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a65a:	f001 feef 	bl	800c43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a65e:	1d3a      	adds	r2, r7, #4
 800a660:	f107 0314 	add.w	r3, r7, #20
 800a664:	4611      	mov	r1, r2
 800a666:	4618      	mov	r0, r3
 800a668:	f001 f806 	bl	800b678 <xTaskCheckForTimeOut>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d124      	bne.n	800a6bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a672:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a674:	f000 faa6 	bl	800abc4 <prvIsQueueFull>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d018      	beq.n	800a6b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	3310      	adds	r3, #16
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	4611      	mov	r1, r2
 800a686:	4618      	mov	r0, r3
 800a688:	f000 ff2a 	bl	800b4e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a68c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a68e:	f000 fa31 	bl	800aaf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a692:	f000 fd5f 	bl	800b154 <xTaskResumeAll>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f47f af7c 	bne.w	800a596 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a69e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d0 <xQueueGenericSend+0x200>)
 800a6a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	e772      	b.n	800a596 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6b2:	f000 fa1f 	bl	800aaf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6b6:	f000 fd4d 	bl	800b154 <xTaskResumeAll>
 800a6ba:	e76c      	b.n	800a596 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6be:	f000 fa19 	bl	800aaf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6c2:	f000 fd47 	bl	800b154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3738      	adds	r7, #56	@ 0x38
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b090      	sub	sp, #64	@ 0x40
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10b      	bne.n	800a704 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6fe:	bf00      	nop
 800a700:	bf00      	nop
 800a702:	e7fd      	b.n	800a700 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d103      	bne.n	800a712 <xQueueGenericSendFromISR+0x3e>
 800a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <xQueueGenericSendFromISR+0x42>
 800a712:	2301      	movs	r3, #1
 800a714:	e000      	b.n	800a718 <xQueueGenericSendFromISR+0x44>
 800a716:	2300      	movs	r3, #0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10b      	bne.n	800a734 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a72e:	bf00      	nop
 800a730:	bf00      	nop
 800a732:	e7fd      	b.n	800a730 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b02      	cmp	r3, #2
 800a738:	d103      	bne.n	800a742 <xQueueGenericSendFromISR+0x6e>
 800a73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d101      	bne.n	800a746 <xQueueGenericSendFromISR+0x72>
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <xQueueGenericSendFromISR+0x74>
 800a746:	2300      	movs	r3, #0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10b      	bne.n	800a764 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	623b      	str	r3, [r7, #32]
}
 800a75e:	bf00      	nop
 800a760:	bf00      	nop
 800a762:	e7fd      	b.n	800a760 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a764:	f001 ff18 	bl	800c598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a768:	f3ef 8211 	mrs	r2, BASEPRI
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	61fa      	str	r2, [r7, #28]
 800a77e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a780:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a782:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <xQueueGenericSendFromISR+0xc2>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b02      	cmp	r3, #2
 800a794:	d12f      	bne.n	800a7f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a79c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a7ac:	f000 f912 	bl	800a9d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b8:	d112      	bne.n	800a7e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d016      	beq.n	800a7f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c4:	3324      	adds	r3, #36	@ 0x24
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fedc 	bl	800b584 <xTaskRemoveFromEventList>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00e      	beq.n	800a7f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e007      	b.n	800a7f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	b25a      	sxtb	r2, r3
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a7f4:	e001      	b.n	800a7fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a804:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3740      	adds	r7, #64	@ 0x40
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08c      	sub	sp, #48	@ 0x30
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a81c:	2300      	movs	r3, #0
 800a81e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <xQueueReceive+0x32>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	623b      	str	r3, [r7, #32]
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d103      	bne.n	800a850 <xQueueReceive+0x40>
 800a848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <xQueueReceive+0x44>
 800a850:	2301      	movs	r3, #1
 800a852:	e000      	b.n	800a856 <xQueueReceive+0x46>
 800a854:	2300      	movs	r3, #0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <xQueueReceive+0x62>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	61fb      	str	r3, [r7, #28]
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	e7fd      	b.n	800a86e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a872:	f001 f847 	bl	800b904 <xTaskGetSchedulerState>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <xQueueReceive+0x72>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <xQueueReceive+0x76>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <xQueueReceive+0x78>
 800a886:	2300      	movs	r3, #0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10b      	bne.n	800a8a4 <xQueueReceive+0x94>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	61bb      	str	r3, [r7, #24]
}
 800a89e:	bf00      	nop
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8a4:	f001 fd98 	bl	800c3d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01f      	beq.n	800a8f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8b4:	68b9      	ldr	r1, [r7, #8]
 800a8b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8b8:	f000 f8f6 	bl	800aaa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00f      	beq.n	800a8ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ce:	3310      	adds	r3, #16
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fe57 	bl	800b584 <xTaskRemoveFromEventList>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8dc:	4b3c      	ldr	r3, [pc, #240]	@ (800a9d0 <xQueueReceive+0x1c0>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8ec:	f001 fda6 	bl	800c43c <vPortExitCritical>
				return pdPASS;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e069      	b.n	800a9c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d103      	bne.n	800a902 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8fa:	f001 fd9f 	bl	800c43c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8fe:	2300      	movs	r3, #0
 800a900:	e062      	b.n	800a9c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a908:	f107 0310 	add.w	r3, r7, #16
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fe9d 	bl	800b64c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a912:	2301      	movs	r3, #1
 800a914:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a916:	f001 fd91 	bl	800c43c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a91a:	f000 fc0d 	bl	800b138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a91e:	f001 fd5b 	bl	800c3d8 <vPortEnterCritical>
 800a922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a928:	b25b      	sxtb	r3, r3
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92e:	d103      	bne.n	800a938 <xQueueReceive+0x128>
 800a930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d103      	bne.n	800a94e <xQueueReceive+0x13e>
 800a946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a94e:	f001 fd75 	bl	800c43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a952:	1d3a      	adds	r2, r7, #4
 800a954:	f107 0310 	add.w	r3, r7, #16
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 fe8c 	bl	800b678 <xTaskCheckForTimeOut>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d123      	bne.n	800a9ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a968:	f000 f916 	bl	800ab98 <prvIsQueueEmpty>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d017      	beq.n	800a9a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a974:	3324      	adds	r3, #36	@ 0x24
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 fdb0 	bl	800b4e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a982:	f000 f8b7 	bl	800aaf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a986:	f000 fbe5 	bl	800b154 <xTaskResumeAll>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d189      	bne.n	800a8a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a990:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d0 <xQueueReceive+0x1c0>)
 800a992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	e780      	b.n	800a8a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9a4:	f000 f8a6 	bl	800aaf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9a8:	f000 fbd4 	bl	800b154 <xTaskResumeAll>
 800a9ac:	e77a      	b.n	800a8a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a9ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9b0:	f000 f8a0 	bl	800aaf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9b4:	f000 fbce 	bl	800b154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9ba:	f000 f8ed 	bl	800ab98 <prvIsQueueEmpty>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f43f af6f 	beq.w	800a8a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3730      	adds	r7, #48	@ 0x30
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	e000ed04 	.word	0xe000ed04

0800a9d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10d      	bne.n	800aa0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d14d      	bne.n	800aa96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 ff9e 	bl	800b940 <xTaskPriorityDisinherit>
 800aa04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	609a      	str	r2, [r3, #8]
 800aa0c:	e043      	b.n	800aa96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d119      	bne.n	800aa48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6858      	ldr	r0, [r3, #4]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	f002 f8c0 	bl	800cba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2c:	441a      	add	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d32b      	bcc.n	800aa96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	605a      	str	r2, [r3, #4]
 800aa46:	e026      	b.n	800aa96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	68d8      	ldr	r0, [r3, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa50:	461a      	mov	r2, r3
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	f002 f8a6 	bl	800cba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa60:	425b      	negs	r3, r3
 800aa62:	441a      	add	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d207      	bcs.n	800aa84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7c:	425b      	negs	r3, r3
 800aa7e:	441a      	add	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d105      	bne.n	800aa96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aa9e:	697b      	ldr	r3, [r7, #20]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d018      	beq.n	800aaec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac2:	441a      	add	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68da      	ldr	r2, [r3, #12]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d303      	bcc.n	800aadc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68d9      	ldr	r1, [r3, #12]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae4:	461a      	mov	r2, r3
 800aae6:	6838      	ldr	r0, [r7, #0]
 800aae8:	f002 f85c 	bl	800cba4 <memcpy>
	}
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aafc:	f001 fc6c 	bl	800c3d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab08:	e011      	b.n	800ab2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d012      	beq.n	800ab38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	3324      	adds	r3, #36	@ 0x24
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fd34 	bl	800b584 <xTaskRemoveFromEventList>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab22:	f000 fe0d 	bl	800b740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dce9      	bgt.n	800ab0a <prvUnlockQueue+0x16>
 800ab36:	e000      	b.n	800ab3a <prvUnlockQueue+0x46>
					break;
 800ab38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	22ff      	movs	r2, #255	@ 0xff
 800ab3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ab42:	f001 fc7b 	bl	800c43c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab46:	f001 fc47 	bl	800c3d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab52:	e011      	b.n	800ab78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d012      	beq.n	800ab82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3310      	adds	r3, #16
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 fd0f 	bl	800b584 <xTaskRemoveFromEventList>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab6c:	f000 fde8 	bl	800b740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dce9      	bgt.n	800ab54 <prvUnlockQueue+0x60>
 800ab80:	e000      	b.n	800ab84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	22ff      	movs	r2, #255	@ 0xff
 800ab88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ab8c:	f001 fc56 	bl	800c43c <vPortExitCritical>
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aba0:	f001 fc1a 	bl	800c3d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d102      	bne.n	800abb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abac:	2301      	movs	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	e001      	b.n	800abb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abb6:	f001 fc41 	bl	800c43c <vPortExitCritical>

	return xReturn;
 800abba:	68fb      	ldr	r3, [r7, #12]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abcc:	f001 fc04 	bl	800c3d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd8:	429a      	cmp	r2, r3
 800abda:	d102      	bne.n	800abe2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abdc:	2301      	movs	r3, #1
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	e001      	b.n	800abe6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abe6:	f001 fc29 	bl	800c43c <vPortExitCritical>

	return xReturn;
 800abea:	68fb      	ldr	r3, [r7, #12]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e014      	b.n	800ac2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac04:	4a0f      	ldr	r2, [pc, #60]	@ (800ac44 <vQueueAddToRegistry+0x50>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10b      	bne.n	800ac28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac10:	490c      	ldr	r1, [pc, #48]	@ (800ac44 <vQueueAddToRegistry+0x50>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	@ (800ac44 <vQueueAddToRegistry+0x50>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	4413      	add	r3, r2
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac26:	e006      	b.n	800ac36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b07      	cmp	r3, #7
 800ac32:	d9e7      	bls.n	800ac04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	200011f0 	.word	0x200011f0

0800ac48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac58:	f001 fbbe 	bl	800c3d8 <vPortEnterCritical>
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac62:	b25b      	sxtb	r3, r3
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d103      	bne.n	800ac72 <vQueueWaitForMessageRestricted+0x2a>
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac78:	b25b      	sxtb	r3, r3
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d103      	bne.n	800ac88 <vQueueWaitForMessageRestricted+0x40>
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac88:	f001 fbd8 	bl	800c43c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	3324      	adds	r3, #36	@ 0x24
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	68b9      	ldr	r1, [r7, #8]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fc45 	bl	800b52c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aca2:	6978      	ldr	r0, [r7, #20]
 800aca4:	f7ff ff26 	bl	800aaf4 <prvUnlockQueue>
	}
 800aca8:	bf00      	nop
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08e      	sub	sp, #56	@ 0x38
 800acb4:	af04      	add	r7, sp, #16
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10b      	bne.n	800acdc <xTaskCreateStatic+0x2c>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	623b      	str	r3, [r7, #32]
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	e7fd      	b.n	800acd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10b      	bne.n	800acfa <xTaskCreateStatic+0x4a>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	61fb      	str	r3, [r7, #28]
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	e7fd      	b.n	800acf6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acfa:	235c      	movs	r3, #92	@ 0x5c
 800acfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad02:	d00b      	beq.n	800ad1c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	61bb      	str	r3, [r7, #24]
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01e      	beq.n	800ad62 <xTaskCreateStatic+0xb2>
 800ad24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d01b      	beq.n	800ad62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad42:	9302      	str	r3, [sp, #8]
 800ad44:	f107 0314 	add.w	r3, r7, #20
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f850 	bl	800adfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad5c:	f000 f8de 	bl	800af1c <prvAddNewTaskToReadyList>
 800ad60:	e001      	b.n	800ad66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad66:	697b      	ldr	r3, [r7, #20]
	}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3728      	adds	r7, #40	@ 0x28
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08c      	sub	sp, #48	@ 0x30
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	603b      	str	r3, [r7, #0]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 fc49 	bl	800c61c <pvPortMalloc>
 800ad8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00e      	beq.n	800adb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad92:	205c      	movs	r0, #92	@ 0x5c
 800ad94:	f001 fc42 	bl	800c61c <pvPortMalloc>
 800ad98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	631a      	str	r2, [r3, #48]	@ 0x30
 800ada6:	e005      	b.n	800adb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ada8:	6978      	ldr	r0, [r7, #20]
 800adaa:	f001 fd05 	bl	800c7b8 <vPortFree>
 800adae:	e001      	b.n	800adb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d017      	beq.n	800adea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adc2:	88fa      	ldrh	r2, [r7, #6]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9303      	str	r3, [sp, #12]
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f80e 	bl	800adfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adde:	69f8      	ldr	r0, [r7, #28]
 800ade0:	f000 f89c 	bl	800af1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ade4:	2301      	movs	r3, #1
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	e002      	b.n	800adf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adea:	f04f 33ff 	mov.w	r3, #4294967295
 800adee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adf0:	69bb      	ldr	r3, [r7, #24]
	}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b088      	sub	sp, #32
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
 800ae06:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	461a      	mov	r2, r3
 800ae12:	21a5      	movs	r1, #165	@ 0xa5
 800ae14:	f001 fe72 	bl	800cafc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae22:	3b01      	subs	r3, #1
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	f003 0307 	and.w	r3, r3, #7
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00b      	beq.n	800ae54 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	617b      	str	r3, [r7, #20]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d01f      	beq.n	800ae9a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61fb      	str	r3, [r7, #28]
 800ae5e:	e012      	b.n	800ae86 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	4413      	add	r3, r2
 800ae66:	7819      	ldrb	r1, [r3, #0]
 800ae68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	3334      	adds	r3, #52	@ 0x34
 800ae70:	460a      	mov	r2, r1
 800ae72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d006      	beq.n	800ae8e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	3301      	adds	r3, #1
 800ae84:	61fb      	str	r3, [r7, #28]
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	2b0f      	cmp	r3, #15
 800ae8a:	d9e9      	bls.n	800ae60 <prvInitialiseNewTask+0x66>
 800ae8c:	e000      	b.n	800ae90 <prvInitialiseNewTask+0x96>
			{
				break;
 800ae8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae98:	e003      	b.n	800aea2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea4:	2b37      	cmp	r3, #55	@ 0x37
 800aea6:	d901      	bls.n	800aeac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aea8:	2337      	movs	r3, #55	@ 0x37
 800aeaa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeb6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec0:	3304      	adds	r3, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff f966 	bl	800a194 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	3318      	adds	r3, #24
 800aecc:	4618      	mov	r0, r3
 800aece:	f7ff f961 	bl	800a194 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeea:	2200      	movs	r2, #0
 800aeec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	68f9      	ldr	r1, [r7, #12]
 800aefa:	69b8      	ldr	r0, [r7, #24]
 800aefc:	f001 f93e 	bl	800c17c <pxPortInitialiseStack>
 800af00:	4602      	mov	r2, r0
 800af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af12:	bf00      	nop
 800af14:	3720      	adds	r7, #32
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af24:	f001 fa58 	bl	800c3d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af28:	4b2d      	ldr	r3, [pc, #180]	@ (800afe0 <prvAddNewTaskToReadyList+0xc4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3301      	adds	r3, #1
 800af2e:	4a2c      	ldr	r2, [pc, #176]	@ (800afe0 <prvAddNewTaskToReadyList+0xc4>)
 800af30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af32:	4b2c      	ldr	r3, [pc, #176]	@ (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af3a:	4a2a      	ldr	r2, [pc, #168]	@ (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af40:	4b27      	ldr	r3, [pc, #156]	@ (800afe0 <prvAddNewTaskToReadyList+0xc4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d110      	bne.n	800af6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af48:	f000 fc1e 	bl	800b788 <prvInitialiseTaskLists>
 800af4c:	e00d      	b.n	800af6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af4e:	4b26      	ldr	r3, [pc, #152]	@ (800afe8 <prvAddNewTaskToReadyList+0xcc>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d109      	bne.n	800af6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af56:	4b23      	ldr	r3, [pc, #140]	@ (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af60:	429a      	cmp	r2, r3
 800af62:	d802      	bhi.n	800af6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af64:	4a1f      	ldr	r2, [pc, #124]	@ (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af6a:	4b20      	ldr	r3, [pc, #128]	@ (800afec <prvAddNewTaskToReadyList+0xd0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3301      	adds	r3, #1
 800af70:	4a1e      	ldr	r2, [pc, #120]	@ (800afec <prvAddNewTaskToReadyList+0xd0>)
 800af72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af74:	4b1d      	ldr	r3, [pc, #116]	@ (800afec <prvAddNewTaskToReadyList+0xd0>)
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af80:	4b1b      	ldr	r3, [pc, #108]	@ (800aff0 <prvAddNewTaskToReadyList+0xd4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d903      	bls.n	800af90 <prvAddNewTaskToReadyList+0x74>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8c:	4a18      	ldr	r2, [pc, #96]	@ (800aff0 <prvAddNewTaskToReadyList+0xd4>)
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4a15      	ldr	r2, [pc, #84]	@ (800aff4 <prvAddNewTaskToReadyList+0xd8>)
 800af9e:	441a      	add	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3304      	adds	r3, #4
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f7ff f901 	bl	800a1ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afac:	f001 fa46 	bl	800c43c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afb0:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <prvAddNewTaskToReadyList+0xcc>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00e      	beq.n	800afd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afb8:	4b0a      	ldr	r3, [pc, #40]	@ (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d207      	bcs.n	800afd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afc6:	4b0c      	ldr	r3, [pc, #48]	@ (800aff8 <prvAddNewTaskToReadyList+0xdc>)
 800afc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20001704 	.word	0x20001704
 800afe4:	20001230 	.word	0x20001230
 800afe8:	20001710 	.word	0x20001710
 800afec:	20001720 	.word	0x20001720
 800aff0:	2000170c 	.word	0x2000170c
 800aff4:	20001234 	.word	0x20001234
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b004:	2300      	movs	r3, #0
 800b006:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d018      	beq.n	800b040 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b00e:	4b14      	ldr	r3, [pc, #80]	@ (800b060 <vTaskDelay+0x64>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00b      	beq.n	800b02e <vTaskDelay+0x32>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	60bb      	str	r3, [r7, #8]
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	e7fd      	b.n	800b02a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b02e:	f000 f883 	bl	800b138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b032:	2100      	movs	r1, #0
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fcf3 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b03a:	f000 f88b 	bl	800b154 <xTaskResumeAll>
 800b03e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d107      	bne.n	800b056 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b046:	4b07      	ldr	r3, [pc, #28]	@ (800b064 <vTaskDelay+0x68>)
 800b048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b056:	bf00      	nop
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	2000172c 	.word	0x2000172c
 800b064:	e000ed04 	.word	0xe000ed04

0800b068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	@ 0x28
 800b06c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b072:	2300      	movs	r3, #0
 800b074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b076:	463a      	mov	r2, r7
 800b078:	1d39      	adds	r1, r7, #4
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff f834 	bl	800a0ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	9202      	str	r2, [sp, #8]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	2300      	movs	r3, #0
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	2300      	movs	r3, #0
 800b094:	460a      	mov	r2, r1
 800b096:	4922      	ldr	r1, [pc, #136]	@ (800b120 <vTaskStartScheduler+0xb8>)
 800b098:	4822      	ldr	r0, [pc, #136]	@ (800b124 <vTaskStartScheduler+0xbc>)
 800b09a:	f7ff fe09 	bl	800acb0 <xTaskCreateStatic>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4a21      	ldr	r2, [pc, #132]	@ (800b128 <vTaskStartScheduler+0xc0>)
 800b0a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0a4:	4b20      	ldr	r3, [pc, #128]	@ (800b128 <vTaskStartScheduler+0xc0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e001      	b.n	800b0b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d102      	bne.n	800b0c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0bc:	f000 fd04 	bl	800bac8 <xTimerCreateTimerTask>
 800b0c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d116      	bne.n	800b0f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	613b      	str	r3, [r7, #16]
}
 800b0da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0dc:	4b13      	ldr	r3, [pc, #76]	@ (800b12c <vTaskStartScheduler+0xc4>)
 800b0de:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0e4:	4b12      	ldr	r3, [pc, #72]	@ (800b130 <vTaskStartScheduler+0xc8>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0ea:	4b12      	ldr	r3, [pc, #72]	@ (800b134 <vTaskStartScheduler+0xcc>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0f0:	f001 f8ce 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0f4:	e00f      	b.n	800b116 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d10b      	bne.n	800b116 <vTaskStartScheduler+0xae>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	60fb      	str	r3, [r7, #12]
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	e7fd      	b.n	800b112 <vTaskStartScheduler+0xaa>
}
 800b116:	bf00      	nop
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	0800d6e8 	.word	0x0800d6e8
 800b124:	0800b759 	.word	0x0800b759
 800b128:	20001728 	.word	0x20001728
 800b12c:	20001724 	.word	0x20001724
 800b130:	20001710 	.word	0x20001710
 800b134:	20001708 	.word	0x20001708

0800b138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b13c:	4b04      	ldr	r3, [pc, #16]	@ (800b150 <vTaskSuspendAll+0x18>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	4a03      	ldr	r2, [pc, #12]	@ (800b150 <vTaskSuspendAll+0x18>)
 800b144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b146:	bf00      	nop
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	2000172c 	.word	0x2000172c

0800b154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b15e:	2300      	movs	r3, #0
 800b160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b162:	4b42      	ldr	r3, [pc, #264]	@ (800b26c <xTaskResumeAll+0x118>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <xTaskResumeAll+0x2e>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	603b      	str	r3, [r7, #0]
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	e7fd      	b.n	800b17e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b182:	f001 f929 	bl	800c3d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b186:	4b39      	ldr	r3, [pc, #228]	@ (800b26c <xTaskResumeAll+0x118>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	4a37      	ldr	r2, [pc, #220]	@ (800b26c <xTaskResumeAll+0x118>)
 800b18e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b190:	4b36      	ldr	r3, [pc, #216]	@ (800b26c <xTaskResumeAll+0x118>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d162      	bne.n	800b25e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b198:	4b35      	ldr	r3, [pc, #212]	@ (800b270 <xTaskResumeAll+0x11c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05e      	beq.n	800b25e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1a0:	e02f      	b.n	800b202 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a2:	4b34      	ldr	r3, [pc, #208]	@ (800b274 <xTaskResumeAll+0x120>)
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3318      	adds	r3, #24
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff f85a 	bl	800a268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff f855 	bl	800a268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b278 <xTaskResumeAll+0x124>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <xTaskResumeAll+0x7e>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b278 <xTaskResumeAll+0x124>)
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4a27      	ldr	r2, [pc, #156]	@ (800b27c <xTaskResumeAll+0x128>)
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fe ffe0 	bl	800a1ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f2:	4b23      	ldr	r3, [pc, #140]	@ (800b280 <xTaskResumeAll+0x12c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d302      	bcc.n	800b202 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b1fc:	4b21      	ldr	r3, [pc, #132]	@ (800b284 <xTaskResumeAll+0x130>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b202:	4b1c      	ldr	r3, [pc, #112]	@ (800b274 <xTaskResumeAll+0x120>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1cb      	bne.n	800b1a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b210:	f000 fb58 	bl	800b8c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b214:	4b1c      	ldr	r3, [pc, #112]	@ (800b288 <xTaskResumeAll+0x134>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b220:	f000 f846 	bl	800b2b0 <xTaskIncrementTick>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b22a:	4b16      	ldr	r3, [pc, #88]	@ (800b284 <xTaskResumeAll+0x130>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3b01      	subs	r3, #1
 800b234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1f1      	bne.n	800b220 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b23c:	4b12      	ldr	r3, [pc, #72]	@ (800b288 <xTaskResumeAll+0x134>)
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b242:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <xTaskResumeAll+0x130>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d009      	beq.n	800b25e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b24e:	4b0f      	ldr	r3, [pc, #60]	@ (800b28c <xTaskResumeAll+0x138>)
 800b250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b25e:	f001 f8ed 	bl	800c43c <vPortExitCritical>

	return xAlreadyYielded;
 800b262:	68bb      	ldr	r3, [r7, #8]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	2000172c 	.word	0x2000172c
 800b270:	20001704 	.word	0x20001704
 800b274:	200016c4 	.word	0x200016c4
 800b278:	2000170c 	.word	0x2000170c
 800b27c:	20001234 	.word	0x20001234
 800b280:	20001230 	.word	0x20001230
 800b284:	20001718 	.word	0x20001718
 800b288:	20001714 	.word	0x20001714
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b296:	4b05      	ldr	r3, [pc, #20]	@ (800b2ac <xTaskGetTickCount+0x1c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b29c:	687b      	ldr	r3, [r7, #4]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	20001708 	.word	0x20001708

0800b2b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b3f8 <xTaskIncrementTick+0x148>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f040 8090 	bne.w	800b3e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2c4:	4b4d      	ldr	r3, [pc, #308]	@ (800b3fc <xTaskIncrementTick+0x14c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2cc:	4a4b      	ldr	r2, [pc, #300]	@ (800b3fc <xTaskIncrementTick+0x14c>)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d121      	bne.n	800b31c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2d8:	4b49      	ldr	r3, [pc, #292]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00b      	beq.n	800b2fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	603b      	str	r3, [r7, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	bf00      	nop
 800b2f8:	e7fd      	b.n	800b2f6 <xTaskIncrementTick+0x46>
 800b2fa:	4b41      	ldr	r3, [pc, #260]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	4b40      	ldr	r3, [pc, #256]	@ (800b404 <xTaskIncrementTick+0x154>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a3e      	ldr	r2, [pc, #248]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4a3e      	ldr	r2, [pc, #248]	@ (800b404 <xTaskIncrementTick+0x154>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	4b3e      	ldr	r3, [pc, #248]	@ (800b408 <xTaskIncrementTick+0x158>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3301      	adds	r3, #1
 800b314:	4a3c      	ldr	r2, [pc, #240]	@ (800b408 <xTaskIncrementTick+0x158>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	f000 fad4 	bl	800b8c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b31c:	4b3b      	ldr	r3, [pc, #236]	@ (800b40c <xTaskIncrementTick+0x15c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	429a      	cmp	r2, r3
 800b324:	d349      	bcc.n	800b3ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b326:	4b36      	ldr	r3, [pc, #216]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b330:	4b36      	ldr	r3, [pc, #216]	@ (800b40c <xTaskIncrementTick+0x15c>)
 800b332:	f04f 32ff 	mov.w	r2, #4294967295
 800b336:	601a      	str	r2, [r3, #0]
					break;
 800b338:	e03f      	b.n	800b3ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b33a:	4b31      	ldr	r3, [pc, #196]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d203      	bcs.n	800b35a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b352:	4a2e      	ldr	r2, [pc, #184]	@ (800b40c <xTaskIncrementTick+0x15c>)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b358:	e02f      	b.n	800b3ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe ff82 	bl	800a268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	3318      	adds	r3, #24
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe ff79 	bl	800a268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	4b25      	ldr	r3, [pc, #148]	@ (800b410 <xTaskIncrementTick+0x160>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d903      	bls.n	800b38a <xTaskIncrementTick+0xda>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b386:	4a22      	ldr	r2, [pc, #136]	@ (800b410 <xTaskIncrementTick+0x160>)
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a1f      	ldr	r2, [pc, #124]	@ (800b414 <xTaskIncrementTick+0x164>)
 800b398:	441a      	add	r2, r3
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fe ff04 	bl	800a1ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b418 <xTaskIncrementTick+0x168>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d3b8      	bcc.n	800b326 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3b8:	e7b5      	b.n	800b326 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3ba:	4b17      	ldr	r3, [pc, #92]	@ (800b418 <xTaskIncrementTick+0x168>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c0:	4914      	ldr	r1, [pc, #80]	@ (800b414 <xTaskIncrementTick+0x164>)
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d901      	bls.n	800b3d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3d6:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <xTaskIncrementTick+0x16c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d007      	beq.n	800b3ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	e004      	b.n	800b3ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b420 <xTaskIncrementTick+0x170>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	4a0d      	ldr	r2, [pc, #52]	@ (800b420 <xTaskIncrementTick+0x170>)
 800b3ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b3ee:	697b      	ldr	r3, [r7, #20]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	2000172c 	.word	0x2000172c
 800b3fc:	20001708 	.word	0x20001708
 800b400:	200016bc 	.word	0x200016bc
 800b404:	200016c0 	.word	0x200016c0
 800b408:	2000171c 	.word	0x2000171c
 800b40c:	20001724 	.word	0x20001724
 800b410:	2000170c 	.word	0x2000170c
 800b414:	20001234 	.word	0x20001234
 800b418:	20001230 	.word	0x20001230
 800b41c:	20001718 	.word	0x20001718
 800b420:	20001714 	.word	0x20001714

0800b424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b42a:	4b28      	ldr	r3, [pc, #160]	@ (800b4cc <vTaskSwitchContext+0xa8>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b432:	4b27      	ldr	r3, [pc, #156]	@ (800b4d0 <vTaskSwitchContext+0xac>)
 800b434:	2201      	movs	r2, #1
 800b436:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b438:	e042      	b.n	800b4c0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b43a:	4b25      	ldr	r3, [pc, #148]	@ (800b4d0 <vTaskSwitchContext+0xac>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b440:	4b24      	ldr	r3, [pc, #144]	@ (800b4d4 <vTaskSwitchContext+0xb0>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	e011      	b.n	800b46c <vTaskSwitchContext+0x48>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <vTaskSwitchContext+0x42>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <vTaskSwitchContext+0x3e>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3b01      	subs	r3, #1
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	491a      	ldr	r1, [pc, #104]	@ (800b4d8 <vTaskSwitchContext+0xb4>)
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4613      	mov	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d0e3      	beq.n	800b448 <vTaskSwitchContext+0x24>
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4613      	mov	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4a13      	ldr	r2, [pc, #76]	@ (800b4d8 <vTaskSwitchContext+0xb4>)
 800b48c:	4413      	add	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d104      	bne.n	800b4b0 <vTaskSwitchContext+0x8c>
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	605a      	str	r2, [r3, #4]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	4a09      	ldr	r2, [pc, #36]	@ (800b4dc <vTaskSwitchContext+0xb8>)
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	4a06      	ldr	r2, [pc, #24]	@ (800b4d4 <vTaskSwitchContext+0xb0>)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6013      	str	r3, [r2, #0]
}
 800b4c0:	bf00      	nop
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	2000172c 	.word	0x2000172c
 800b4d0:	20001718 	.word	0x20001718
 800b4d4:	2000170c 	.word	0x2000170c
 800b4d8:	20001234 	.word	0x20001234
 800b4dc:	20001230 	.word	0x20001230

0800b4e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10b      	bne.n	800b508 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	60fb      	str	r3, [r7, #12]
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	e7fd      	b.n	800b504 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b508:	4b07      	ldr	r3, [pc, #28]	@ (800b528 <vTaskPlaceOnEventList+0x48>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3318      	adds	r3, #24
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7fe fe70 	bl	800a1f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b516:	2101      	movs	r1, #1
 800b518:	6838      	ldr	r0, [r7, #0]
 800b51a:	f000 fa81 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20001230 	.word	0x20001230

0800b52c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10b      	bne.n	800b556 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	617b      	str	r3, [r7, #20]
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	e7fd      	b.n	800b552 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b556:	4b0a      	ldr	r3, [pc, #40]	@ (800b580 <vTaskPlaceOnEventListRestricted+0x54>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3318      	adds	r3, #24
 800b55c:	4619      	mov	r1, r3
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7fe fe25 	bl	800a1ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b56a:	f04f 33ff 	mov.w	r3, #4294967295
 800b56e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	68b8      	ldr	r0, [r7, #8]
 800b574:	f000 fa54 	bl	800ba20 <prvAddCurrentTaskToDelayedList>
	}
 800b578:	bf00      	nop
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20001230 	.word	0x20001230

0800b584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10b      	bne.n	800b5b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	60fb      	str	r3, [r7, #12]
}
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	e7fd      	b.n	800b5ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	3318      	adds	r3, #24
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe fe56 	bl	800a268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b634 <xTaskRemoveFromEventList+0xb0>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11d      	bne.n	800b600 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fe4d 	bl	800a268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5d2:	4b19      	ldr	r3, [pc, #100]	@ (800b638 <xTaskRemoveFromEventList+0xb4>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d903      	bls.n	800b5e2 <xTaskRemoveFromEventList+0x5e>
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5de:	4a16      	ldr	r2, [pc, #88]	@ (800b638 <xTaskRemoveFromEventList+0xb4>)
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4a13      	ldr	r2, [pc, #76]	@ (800b63c <xTaskRemoveFromEventList+0xb8>)
 800b5f0:	441a      	add	r2, r3
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7fe fdd8 	bl	800a1ae <vListInsertEnd>
 800b5fe:	e005      	b.n	800b60c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	3318      	adds	r3, #24
 800b604:	4619      	mov	r1, r3
 800b606:	480e      	ldr	r0, [pc, #56]	@ (800b640 <xTaskRemoveFromEventList+0xbc>)
 800b608:	f7fe fdd1 	bl	800a1ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b610:	4b0c      	ldr	r3, [pc, #48]	@ (800b644 <xTaskRemoveFromEventList+0xc0>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b616:	429a      	cmp	r2, r3
 800b618:	d905      	bls.n	800b626 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b61a:	2301      	movs	r3, #1
 800b61c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b61e:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <xTaskRemoveFromEventList+0xc4>)
 800b620:	2201      	movs	r2, #1
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	e001      	b.n	800b62a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b62a:	697b      	ldr	r3, [r7, #20]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	2000172c 	.word	0x2000172c
 800b638:	2000170c 	.word	0x2000170c
 800b63c:	20001234 	.word	0x20001234
 800b640:	200016c4 	.word	0x200016c4
 800b644:	20001230 	.word	0x20001230
 800b648:	20001718 	.word	0x20001718

0800b64c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b654:	4b06      	ldr	r3, [pc, #24]	@ (800b670 <vTaskInternalSetTimeOutState+0x24>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b65c:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <vTaskInternalSetTimeOutState+0x28>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	605a      	str	r2, [r3, #4]
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	2000171c 	.word	0x2000171c
 800b674:	20001708 	.word	0x20001708

0800b678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10b      	bne.n	800b6a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	613b      	str	r3, [r7, #16]
}
 800b69a:	bf00      	nop
 800b69c:	bf00      	nop
 800b69e:	e7fd      	b.n	800b69c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10b      	bne.n	800b6be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60fb      	str	r3, [r7, #12]
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	e7fd      	b.n	800b6ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6be:	f000 fe8b 	bl	800c3d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b738 <xTaskCheckForTimeOut+0xc0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d102      	bne.n	800b6e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	61fb      	str	r3, [r7, #28]
 800b6e0:	e023      	b.n	800b72a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b15      	ldr	r3, [pc, #84]	@ (800b73c <xTaskCheckForTimeOut+0xc4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d007      	beq.n	800b6fe <xTaskCheckForTimeOut+0x86>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	61fb      	str	r3, [r7, #28]
 800b6fc:	e015      	b.n	800b72a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	429a      	cmp	r2, r3
 800b706:	d20b      	bcs.n	800b720 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff99 	bl	800b64c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	e004      	b.n	800b72a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b72a:	f000 fe87 	bl	800c43c <vPortExitCritical>

	return xReturn;
 800b72e:	69fb      	ldr	r3, [r7, #28]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3720      	adds	r7, #32
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20001708 	.word	0x20001708
 800b73c:	2000171c 	.word	0x2000171c

0800b740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b744:	4b03      	ldr	r3, [pc, #12]	@ (800b754 <vTaskMissedYield+0x14>)
 800b746:	2201      	movs	r2, #1
 800b748:	601a      	str	r2, [r3, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	20001718 	.word	0x20001718

0800b758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b760:	f000 f852 	bl	800b808 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b764:	4b06      	ldr	r3, [pc, #24]	@ (800b780 <prvIdleTask+0x28>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d9f9      	bls.n	800b760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b76c:	4b05      	ldr	r3, [pc, #20]	@ (800b784 <prvIdleTask+0x2c>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b77c:	e7f0      	b.n	800b760 <prvIdleTask+0x8>
 800b77e:	bf00      	nop
 800b780:	20001234 	.word	0x20001234
 800b784:	e000ed04 	.word	0xe000ed04

0800b788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b78e:	2300      	movs	r3, #0
 800b790:	607b      	str	r3, [r7, #4]
 800b792:	e00c      	b.n	800b7ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	4613      	mov	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4a12      	ldr	r2, [pc, #72]	@ (800b7e8 <prvInitialiseTaskLists+0x60>)
 800b7a0:	4413      	add	r3, r2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fcd6 	bl	800a154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	607b      	str	r3, [r7, #4]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b37      	cmp	r3, #55	@ 0x37
 800b7b2:	d9ef      	bls.n	800b794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7b4:	480d      	ldr	r0, [pc, #52]	@ (800b7ec <prvInitialiseTaskLists+0x64>)
 800b7b6:	f7fe fccd 	bl	800a154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7ba:	480d      	ldr	r0, [pc, #52]	@ (800b7f0 <prvInitialiseTaskLists+0x68>)
 800b7bc:	f7fe fcca 	bl	800a154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7c0:	480c      	ldr	r0, [pc, #48]	@ (800b7f4 <prvInitialiseTaskLists+0x6c>)
 800b7c2:	f7fe fcc7 	bl	800a154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7c6:	480c      	ldr	r0, [pc, #48]	@ (800b7f8 <prvInitialiseTaskLists+0x70>)
 800b7c8:	f7fe fcc4 	bl	800a154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7cc:	480b      	ldr	r0, [pc, #44]	@ (800b7fc <prvInitialiseTaskLists+0x74>)
 800b7ce:	f7fe fcc1 	bl	800a154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <prvInitialiseTaskLists+0x78>)
 800b7d4:	4a05      	ldr	r2, [pc, #20]	@ (800b7ec <prvInitialiseTaskLists+0x64>)
 800b7d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b804 <prvInitialiseTaskLists+0x7c>)
 800b7da:	4a05      	ldr	r2, [pc, #20]	@ (800b7f0 <prvInitialiseTaskLists+0x68>)
 800b7dc:	601a      	str	r2, [r3, #0]
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20001234 	.word	0x20001234
 800b7ec:	20001694 	.word	0x20001694
 800b7f0:	200016a8 	.word	0x200016a8
 800b7f4:	200016c4 	.word	0x200016c4
 800b7f8:	200016d8 	.word	0x200016d8
 800b7fc:	200016f0 	.word	0x200016f0
 800b800:	200016bc 	.word	0x200016bc
 800b804:	200016c0 	.word	0x200016c0

0800b808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b80e:	e019      	b.n	800b844 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b810:	f000 fde2 	bl	800c3d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b814:	4b10      	ldr	r3, [pc, #64]	@ (800b858 <prvCheckTasksWaitingTermination+0x50>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3304      	adds	r3, #4
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe fd21 	bl	800a268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b826:	4b0d      	ldr	r3, [pc, #52]	@ (800b85c <prvCheckTasksWaitingTermination+0x54>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	4a0b      	ldr	r2, [pc, #44]	@ (800b85c <prvCheckTasksWaitingTermination+0x54>)
 800b82e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b830:	4b0b      	ldr	r3, [pc, #44]	@ (800b860 <prvCheckTasksWaitingTermination+0x58>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3b01      	subs	r3, #1
 800b836:	4a0a      	ldr	r2, [pc, #40]	@ (800b860 <prvCheckTasksWaitingTermination+0x58>)
 800b838:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b83a:	f000 fdff 	bl	800c43c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f810 	bl	800b864 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b844:	4b06      	ldr	r3, [pc, #24]	@ (800b860 <prvCheckTasksWaitingTermination+0x58>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1e1      	bne.n	800b810 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b84c:	bf00      	nop
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	200016d8 	.word	0x200016d8
 800b85c:	20001704 	.word	0x20001704
 800b860:	200016ec 	.word	0x200016ec

0800b864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b872:	2b00      	cmp	r3, #0
 800b874:	d108      	bne.n	800b888 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 ff9c 	bl	800c7b8 <vPortFree>
				vPortFree( pxTCB );
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 ff99 	bl	800c7b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b886:	e019      	b.n	800b8bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d103      	bne.n	800b89a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 ff90 	bl	800c7b8 <vPortFree>
	}
 800b898:	e010      	b.n	800b8bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d00b      	beq.n	800b8bc <prvDeleteTCB+0x58>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	60fb      	str	r3, [r7, #12]
}
 800b8b6:	bf00      	nop
 800b8b8:	bf00      	nop
 800b8ba:	e7fd      	b.n	800b8b8 <prvDeleteTCB+0x54>
	}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <prvResetNextTaskUnblockTime+0x38>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b900 <prvResetNextTaskUnblockTime+0x3c>)
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8dc:	e008      	b.n	800b8f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8de:	4b07      	ldr	r3, [pc, #28]	@ (800b8fc <prvResetNextTaskUnblockTime+0x38>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	4a04      	ldr	r2, [pc, #16]	@ (800b900 <prvResetNextTaskUnblockTime+0x3c>)
 800b8ee:	6013      	str	r3, [r2, #0]
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	200016bc 	.word	0x200016bc
 800b900:	20001724 	.word	0x20001724

0800b904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b90a:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <xTaskGetSchedulerState+0x34>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b912:	2301      	movs	r3, #1
 800b914:	607b      	str	r3, [r7, #4]
 800b916:	e008      	b.n	800b92a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b918:	4b08      	ldr	r3, [pc, #32]	@ (800b93c <xTaskGetSchedulerState+0x38>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b920:	2302      	movs	r3, #2
 800b922:	607b      	str	r3, [r7, #4]
 800b924:	e001      	b.n	800b92a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b926:	2300      	movs	r3, #0
 800b928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b92a:	687b      	ldr	r3, [r7, #4]
	}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	20001710 	.word	0x20001710
 800b93c:	2000172c 	.word	0x2000172c

0800b940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b94c:	2300      	movs	r3, #0
 800b94e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d058      	beq.n	800ba08 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b956:	4b2f      	ldr	r3, [pc, #188]	@ (800ba14 <xTaskPriorityDisinherit+0xd4>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d00b      	beq.n	800b978 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	60fb      	str	r3, [r7, #12]
}
 800b972:	bf00      	nop
 800b974:	bf00      	nop
 800b976:	e7fd      	b.n	800b974 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10b      	bne.n	800b998 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	60bb      	str	r3, [r7, #8]
}
 800b992:	bf00      	nop
 800b994:	bf00      	nop
 800b996:	e7fd      	b.n	800b994 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b99c:	1e5a      	subs	r2, r3, #1
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d02c      	beq.n	800ba08 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d128      	bne.n	800ba08 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fc54 	bl	800a268 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800ba18 <xTaskPriorityDisinherit+0xd8>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d903      	bls.n	800b9e8 <xTaskPriorityDisinherit+0xa8>
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e4:	4a0c      	ldr	r2, [pc, #48]	@ (800ba18 <xTaskPriorityDisinherit+0xd8>)
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4a09      	ldr	r2, [pc, #36]	@ (800ba1c <xTaskPriorityDisinherit+0xdc>)
 800b9f6:	441a      	add	r2, r3
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	f7fe fbd5 	bl	800a1ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba08:	697b      	ldr	r3, [r7, #20]
	}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20001230 	.word	0x20001230
 800ba18:	2000170c 	.word	0x2000170c
 800ba1c:	20001234 	.word	0x20001234

0800ba20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba2a:	4b21      	ldr	r3, [pc, #132]	@ (800bab0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba30:	4b20      	ldr	r3, [pc, #128]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fc16 	bl	800a268 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d10a      	bne.n	800ba5a <prvAddCurrentTaskToDelayedList+0x3a>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d007      	beq.n	800ba5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4619      	mov	r1, r3
 800ba52:	4819      	ldr	r0, [pc, #100]	@ (800bab8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba54:	f7fe fbab 	bl	800a1ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba58:	e026      	b.n	800baa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4413      	add	r3, r2
 800ba60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba62:	4b14      	ldr	r3, [pc, #80]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d209      	bcs.n	800ba86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba72:	4b12      	ldr	r3, [pc, #72]	@ (800babc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	4b0f      	ldr	r3, [pc, #60]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fe fbb9 	bl	800a1f6 <vListInsert>
}
 800ba84:	e010      	b.n	800baa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba86:	4b0e      	ldr	r3, [pc, #56]	@ (800bac0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bab4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fbaf 	bl	800a1f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba98:	4b0a      	ldr	r3, [pc, #40]	@ (800bac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d202      	bcs.n	800baa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800baa2:	4a08      	ldr	r2, [pc, #32]	@ (800bac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6013      	str	r3, [r2, #0]
}
 800baa8:	bf00      	nop
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20001708 	.word	0x20001708
 800bab4:	20001230 	.word	0x20001230
 800bab8:	200016f0 	.word	0x200016f0
 800babc:	200016c0 	.word	0x200016c0
 800bac0:	200016bc 	.word	0x200016bc
 800bac4:	20001724 	.word	0x20001724

0800bac8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	@ 0x28
 800bacc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bace:	2300      	movs	r3, #0
 800bad0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bad2:	f000 fb13 	bl	800c0fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bad6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <xTimerCreateTimerTask+0x84>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d021      	beq.n	800bb22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bae6:	1d3a      	adds	r2, r7, #4
 800bae8:	f107 0108 	add.w	r1, r7, #8
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe fb15 	bl	800a120 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	9202      	str	r2, [sp, #8]
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	2302      	movs	r3, #2
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	460a      	mov	r2, r1
 800bb08:	4911      	ldr	r1, [pc, #68]	@ (800bb50 <xTimerCreateTimerTask+0x88>)
 800bb0a:	4812      	ldr	r0, [pc, #72]	@ (800bb54 <xTimerCreateTimerTask+0x8c>)
 800bb0c:	f7ff f8d0 	bl	800acb0 <xTaskCreateStatic>
 800bb10:	4603      	mov	r3, r0
 800bb12:	4a11      	ldr	r2, [pc, #68]	@ (800bb58 <xTimerCreateTimerTask+0x90>)
 800bb14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb16:	4b10      	ldr	r3, [pc, #64]	@ (800bb58 <xTimerCreateTimerTask+0x90>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	613b      	str	r3, [r7, #16]
}
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	e7fd      	b.n	800bb3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb40:	697b      	ldr	r3, [r7, #20]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20001760 	.word	0x20001760
 800bb50:	0800d6f0 	.word	0x0800d6f0
 800bb54:	0800bc95 	.word	0x0800bc95
 800bb58:	20001764 	.word	0x20001764

0800bb5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	@ 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10b      	bne.n	800bb8c <xTimerGenericCommand+0x30>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	623b      	str	r3, [r7, #32]
}
 800bb86:	bf00      	nop
 800bb88:	bf00      	nop
 800bb8a:	e7fd      	b.n	800bb88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb8c:	4b19      	ldr	r3, [pc, #100]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d02a      	beq.n	800bbea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	dc18      	bgt.n	800bbd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bba6:	f7ff fead 	bl	800b904 <xTaskGetSchedulerState>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d109      	bne.n	800bbc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbb0:	4b10      	ldr	r3, [pc, #64]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	f107 0110 	add.w	r1, r7, #16
 800bbb8:	2300      	movs	r3, #0
 800bbba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbbc:	f7fe fc88 	bl	800a4d0 <xQueueGenericSend>
 800bbc0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbc2:	e012      	b.n	800bbea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	f107 0110 	add.w	r1, r7, #16
 800bbcc:	2300      	movs	r3, #0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f7fe fc7e 	bl	800a4d0 <xQueueGenericSend>
 800bbd4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbd6:	e008      	b.n	800bbea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbd8:	4b06      	ldr	r3, [pc, #24]	@ (800bbf4 <xTimerGenericCommand+0x98>)
 800bbda:	6818      	ldr	r0, [r3, #0]
 800bbdc:	f107 0110 	add.w	r1, r7, #16
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	f7fe fd76 	bl	800a6d4 <xQueueGenericSendFromISR>
 800bbe8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3728      	adds	r7, #40	@ 0x28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20001760 	.word	0x20001760

0800bbf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc02:	4b23      	ldr	r3, [pc, #140]	@ (800bc90 <prvProcessExpiredTimer+0x98>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fe fb29 	bl	800a268 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc1c:	f003 0304 	and.w	r3, r3, #4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d023      	beq.n	800bc6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	699a      	ldr	r2, [r3, #24]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	18d1      	adds	r1, r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	6978      	ldr	r0, [r7, #20]
 800bc32:	f000 f8d5 	bl	800bde0 <prvInsertTimerInActiveList>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d020      	beq.n	800bc7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	2300      	movs	r3, #0
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	2100      	movs	r1, #0
 800bc46:	6978      	ldr	r0, [r7, #20]
 800bc48:	f7ff ff88 	bl	800bb5c <xTimerGenericCommand>
 800bc4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d114      	bne.n	800bc7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	60fb      	str	r3, [r7, #12]
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	e7fd      	b.n	800bc68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc72:	f023 0301 	bic.w	r3, r3, #1
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	4798      	blx	r3
}
 800bc86:	bf00      	nop
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20001758 	.word	0x20001758

0800bc94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 f859 	bl	800bd58 <prvGetNextExpireTime>
 800bca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f805 	bl	800bcbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcb2:	f000 f8d7 	bl	800be64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb6:	bf00      	nop
 800bcb8:	e7f0      	b.n	800bc9c <prvTimerTask+0x8>
	...

0800bcbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcc6:	f7ff fa37 	bl	800b138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcca:	f107 0308 	add.w	r3, r7, #8
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 f866 	bl	800bda0 <prvSampleTimeNow>
 800bcd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d130      	bne.n	800bd3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <prvProcessTimerOrBlockTask+0x3c>
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d806      	bhi.n	800bcf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcea:	f7ff fa33 	bl	800b154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcee:	68f9      	ldr	r1, [r7, #12]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff ff81 	bl	800bbf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcf6:	e024      	b.n	800bd42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d008      	beq.n	800bd10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcfe:	4b13      	ldr	r3, [pc, #76]	@ (800bd4c <prvProcessTimerOrBlockTask+0x90>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <prvProcessTimerOrBlockTask+0x50>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e000      	b.n	800bd0e <prvProcessTimerOrBlockTask+0x52>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd10:	4b0f      	ldr	r3, [pc, #60]	@ (800bd50 <prvProcessTimerOrBlockTask+0x94>)
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	f7fe ff93 	bl	800ac48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd22:	f7ff fa17 	bl	800b154 <xTaskResumeAll>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd2c:	4b09      	ldr	r3, [pc, #36]	@ (800bd54 <prvProcessTimerOrBlockTask+0x98>)
 800bd2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	f3bf 8f6f 	isb	sy
}
 800bd3c:	e001      	b.n	800bd42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd3e:	f7ff fa09 	bl	800b154 <xTaskResumeAll>
}
 800bd42:	bf00      	nop
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	2000175c 	.word	0x2000175c
 800bd50:	20001760 	.word	0x20001760
 800bd54:	e000ed04 	.word	0xe000ed04

0800bd58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd60:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <prvGetNextExpireTime+0x44>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <prvGetNextExpireTime+0x16>
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	e000      	b.n	800bd70 <prvGetNextExpireTime+0x18>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d105      	bne.n	800bd88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd7c:	4b07      	ldr	r3, [pc, #28]	@ (800bd9c <prvGetNextExpireTime+0x44>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60fb      	str	r3, [r7, #12]
 800bd86:	e001      	b.n	800bd8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	20001758 	.word	0x20001758

0800bda0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bda8:	f7ff fa72 	bl	800b290 <xTaskGetTickCount>
 800bdac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <prvSampleTimeNow+0x3c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d205      	bcs.n	800bdc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdb8:	f000 f93a 	bl	800c030 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdca:	4a04      	ldr	r2, [pc, #16]	@ (800bddc <prvSampleTimeNow+0x3c>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20001768 	.word	0x20001768

0800bde0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	429a      	cmp	r2, r3
 800be04:	d812      	bhi.n	800be2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	429a      	cmp	r2, r3
 800be12:	d302      	bcc.n	800be1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	e01b      	b.n	800be52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be1a:	4b10      	ldr	r3, [pc, #64]	@ (800be5c <prvInsertTimerInActiveList+0x7c>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3304      	adds	r3, #4
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7fe f9e6 	bl	800a1f6 <vListInsert>
 800be2a:	e012      	b.n	800be52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d206      	bcs.n	800be42 <prvInsertTimerInActiveList+0x62>
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d302      	bcc.n	800be42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e007      	b.n	800be52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be42:	4b07      	ldr	r3, [pc, #28]	@ (800be60 <prvInsertTimerInActiveList+0x80>)
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3304      	adds	r3, #4
 800be4a:	4619      	mov	r1, r3
 800be4c:	4610      	mov	r0, r2
 800be4e:	f7fe f9d2 	bl	800a1f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be52:	697b      	ldr	r3, [r7, #20]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	2000175c 	.word	0x2000175c
 800be60:	20001758 	.word	0x20001758

0800be64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08e      	sub	sp, #56	@ 0x38
 800be68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be6a:	e0ce      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da19      	bge.n	800bea6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be72:	1d3b      	adds	r3, r7, #4
 800be74:	3304      	adds	r3, #4
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10b      	bne.n	800be96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	61fb      	str	r3, [r7, #28]
}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	e7fd      	b.n	800be92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be9c:	6850      	ldr	r0, [r2, #4]
 800be9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bea0:	6892      	ldr	r2, [r2, #8]
 800bea2:	4611      	mov	r1, r2
 800bea4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f2c0 80ae 	blt.w	800c00a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bebc:	3304      	adds	r3, #4
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fe f9d2 	bl	800a268 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bec4:	463b      	mov	r3, r7
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff ff6a 	bl	800bda0 <prvSampleTimeNow>
 800becc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b09      	cmp	r3, #9
 800bed2:	f200 8097 	bhi.w	800c004 <prvProcessReceivedCommands+0x1a0>
 800bed6:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <prvProcessReceivedCommands+0x78>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bf05 	.word	0x0800bf05
 800bee0:	0800bf05 	.word	0x0800bf05
 800bee4:	0800bf05 	.word	0x0800bf05
 800bee8:	0800bf7b 	.word	0x0800bf7b
 800beec:	0800bf8f 	.word	0x0800bf8f
 800bef0:	0800bfdb 	.word	0x0800bfdb
 800bef4:	0800bf05 	.word	0x0800bf05
 800bef8:	0800bf05 	.word	0x0800bf05
 800befc:	0800bf7b 	.word	0x0800bf7b
 800bf00:	0800bf8f 	.word	0x0800bf8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf0a:	f043 0301 	orr.w	r3, r3, #1
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	18d1      	adds	r1, r2, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf24:	f7ff ff5c 	bl	800bde0 <prvInsertTimerInActiveList>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d06c      	beq.n	800c008 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d061      	beq.n	800c008 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	441a      	add	r2, r3
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	2300      	movs	r3, #0
 800bf52:	2100      	movs	r1, #0
 800bf54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf56:	f7ff fe01 	bl	800bb5c <xTimerGenericCommand>
 800bf5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d152      	bne.n	800c008 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	61bb      	str	r3, [r7, #24]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf8c:	e03d      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf94:	f043 0301 	orr.w	r3, r3, #1
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	617b      	str	r3, [r7, #20]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	18d1      	adds	r1, r2, r3
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfd4:	f7ff ff04 	bl	800bde0 <prvInsertTimerInActiveList>
					break;
 800bfd8:	e017      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d103      	bne.n	800bff0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bfe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfea:	f000 fbe5 	bl	800c7b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfee:	e00c      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bff6:	f023 0301 	bic.w	r3, r3, #1
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c002:	e002      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c004:	bf00      	nop
 800c006:	e000      	b.n	800c00a <prvProcessReceivedCommands+0x1a6>
					break;
 800c008:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c00a:	4b08      	ldr	r3, [pc, #32]	@ (800c02c <prvProcessReceivedCommands+0x1c8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	1d39      	adds	r1, r7, #4
 800c010:	2200      	movs	r2, #0
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe fbfc 	bl	800a810 <xQueueReceive>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f47f af26 	bne.w	800be6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	3730      	adds	r7, #48	@ 0x30
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20001760 	.word	0x20001760

0800c030 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c036:	e049      	b.n	800c0cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c038:	4b2e      	ldr	r3, [pc, #184]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c042:	4b2c      	ldr	r3, [pc, #176]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3304      	adds	r3, #4
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe f909 	bl	800a268 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02f      	beq.n	800c0cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d90e      	bls.n	800c09c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c08a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3304      	adds	r3, #4
 800c092:	4619      	mov	r1, r3
 800c094:	4610      	mov	r0, r2
 800c096:	f7fe f8ae 	bl	800a1f6 <vListInsert>
 800c09a:	e017      	b.n	800c0cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c09c:	2300      	movs	r3, #0
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff fd58 	bl	800bb5c <xTimerGenericCommand>
 800c0ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10b      	bne.n	800c0cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	603b      	str	r3, [r7, #0]
}
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
 800c0ca:	e7fd      	b.n	800c0c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0cc:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1b0      	bne.n	800c038 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0d6:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	@ (800c0f8 <prvSwitchTimerLists+0xc8>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a04      	ldr	r2, [pc, #16]	@ (800c0f4 <prvSwitchTimerLists+0xc4>)
 800c0e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0e4:	4a04      	ldr	r2, [pc, #16]	@ (800c0f8 <prvSwitchTimerLists+0xc8>)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6013      	str	r3, [r2, #0]
}
 800c0ea:	bf00      	nop
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20001758 	.word	0x20001758
 800c0f8:	2000175c 	.word	0x2000175c

0800c0fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c102:	f000 f969 	bl	800c3d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c106:	4b15      	ldr	r3, [pc, #84]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d120      	bne.n	800c150 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c10e:	4814      	ldr	r0, [pc, #80]	@ (800c160 <prvCheckForValidListAndQueue+0x64>)
 800c110:	f7fe f820 	bl	800a154 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c114:	4813      	ldr	r0, [pc, #76]	@ (800c164 <prvCheckForValidListAndQueue+0x68>)
 800c116:	f7fe f81d 	bl	800a154 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c11a:	4b13      	ldr	r3, [pc, #76]	@ (800c168 <prvCheckForValidListAndQueue+0x6c>)
 800c11c:	4a10      	ldr	r2, [pc, #64]	@ (800c160 <prvCheckForValidListAndQueue+0x64>)
 800c11e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c120:	4b12      	ldr	r3, [pc, #72]	@ (800c16c <prvCheckForValidListAndQueue+0x70>)
 800c122:	4a10      	ldr	r2, [pc, #64]	@ (800c164 <prvCheckForValidListAndQueue+0x68>)
 800c124:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c126:	2300      	movs	r3, #0
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	4b11      	ldr	r3, [pc, #68]	@ (800c170 <prvCheckForValidListAndQueue+0x74>)
 800c12c:	4a11      	ldr	r2, [pc, #68]	@ (800c174 <prvCheckForValidListAndQueue+0x78>)
 800c12e:	2110      	movs	r1, #16
 800c130:	200a      	movs	r0, #10
 800c132:	f7fe f92d 	bl	800a390 <xQueueGenericCreateStatic>
 800c136:	4603      	mov	r3, r0
 800c138:	4a08      	ldr	r2, [pc, #32]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c13a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c13c:	4b07      	ldr	r3, [pc, #28]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c144:	4b05      	ldr	r3, [pc, #20]	@ (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	490b      	ldr	r1, [pc, #44]	@ (800c178 <prvCheckForValidListAndQueue+0x7c>)
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fd52 	bl	800abf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c150:	f000 f974 	bl	800c43c <vPortExitCritical>
}
 800c154:	bf00      	nop
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20001760 	.word	0x20001760
 800c160:	20001730 	.word	0x20001730
 800c164:	20001744 	.word	0x20001744
 800c168:	20001758 	.word	0x20001758
 800c16c:	2000175c 	.word	0x2000175c
 800c170:	2000180c 	.word	0x2000180c
 800c174:	2000176c 	.word	0x2000176c
 800c178:	0800d6f8 	.word	0x0800d6f8

0800c17c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3b04      	subs	r3, #4
 800c18c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3b04      	subs	r3, #4
 800c19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f023 0201 	bic.w	r2, r3, #1
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3b04      	subs	r3, #4
 800c1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1ac:	4a0c      	ldr	r2, [pc, #48]	@ (800c1e0 <pxPortInitialiseStack+0x64>)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3b14      	subs	r3, #20
 800c1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3b04      	subs	r3, #4
 800c1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f06f 0202 	mvn.w	r2, #2
 800c1ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3b20      	subs	r3, #32
 800c1d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	0800c1e5 	.word	0x0800c1e5

0800c1e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1ee:	4b13      	ldr	r3, [pc, #76]	@ (800c23c <prvTaskExitError+0x58>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d00b      	beq.n	800c210 <prvTaskExitError+0x2c>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	60fb      	str	r3, [r7, #12]
}
 800c20a:	bf00      	nop
 800c20c:	bf00      	nop
 800c20e:	e7fd      	b.n	800c20c <prvTaskExitError+0x28>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60bb      	str	r3, [r7, #8]
}
 800c222:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c224:	bf00      	nop
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d0fc      	beq.n	800c226 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	200001c4 	.word	0x200001c4

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	@ (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	20001230 	.word	0x20001230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	@ (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b47      	ldr	r3, [pc, #284]	@ (800c3b4 <xPortStartScheduler+0x124>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a47      	ldr	r2, [pc, #284]	@ (800c3b8 <xPortStartScheduler+0x128>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10b      	bne.n	800c2b8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	60fb      	str	r3, [r7, #12]
}
 800c2b2:	bf00      	nop
 800c2b4:	bf00      	nop
 800c2b6:	e7fd      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3b4 <xPortStartScheduler+0x124>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a3f      	ldr	r2, [pc, #252]	@ (800c3bc <xPortStartScheduler+0x12c>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d10b      	bne.n	800c2da <xPortStartScheduler+0x4a>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	613b      	str	r3, [r7, #16]
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	e7fd      	b.n	800c2d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2da:	4b39      	ldr	r3, [pc, #228]	@ (800c3c0 <xPortStartScheduler+0x130>)
 800c2dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	22ff      	movs	r2, #255	@ 0xff
 800c2ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	4b31      	ldr	r3, [pc, #196]	@ (800c3c4 <xPortStartScheduler+0x134>)
 800c300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c302:	4b31      	ldr	r3, [pc, #196]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c304:	2207      	movs	r2, #7
 800c306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c308:	e009      	b.n	800c31e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c30a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3b01      	subs	r3, #1
 800c310:	4a2d      	ldr	r2, [pc, #180]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31e:	78fb      	ldrb	r3, [r7, #3]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b80      	cmp	r3, #128	@ 0x80
 800c328:	d0ef      	beq.n	800c30a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c32a:	4b27      	ldr	r3, [pc, #156]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f1c3 0307 	rsb	r3, r3, #7
 800c332:	2b04      	cmp	r3, #4
 800c334:	d00b      	beq.n	800c34e <xPortStartScheduler+0xbe>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	60bb      	str	r3, [r7, #8]
}
 800c348:	bf00      	nop
 800c34a:	bf00      	nop
 800c34c:	e7fd      	b.n	800c34a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c34e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	021b      	lsls	r3, r3, #8
 800c354:	4a1c      	ldr	r2, [pc, #112]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c358:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c360:	4a19      	ldr	r2, [pc, #100]	@ (800c3c8 <xPortStartScheduler+0x138>)
 800c362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	b2da      	uxtb	r2, r3
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c36c:	4b17      	ldr	r3, [pc, #92]	@ (800c3cc <xPortStartScheduler+0x13c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a16      	ldr	r2, [pc, #88]	@ (800c3cc <xPortStartScheduler+0x13c>)
 800c372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c378:	4b14      	ldr	r3, [pc, #80]	@ (800c3cc <xPortStartScheduler+0x13c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a13      	ldr	r2, [pc, #76]	@ (800c3cc <xPortStartScheduler+0x13c>)
 800c37e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c384:	f000 f8da 	bl	800c53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c388:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <xPortStartScheduler+0x140>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c38e:	f000 f8f9 	bl	800c584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c392:	4b10      	ldr	r3, [pc, #64]	@ (800c3d4 <xPortStartScheduler+0x144>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a0f      	ldr	r2, [pc, #60]	@ (800c3d4 <xPortStartScheduler+0x144>)
 800c398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c39c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c39e:	f7ff ff63 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3a2:	f7ff f83f 	bl	800b424 <vTaskSwitchContext>
	prvTaskExitError();
 800c3a6:	f7ff ff1d 	bl	800c1e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	e000ed00 	.word	0xe000ed00
 800c3b8:	410fc271 	.word	0x410fc271
 800c3bc:	410fc270 	.word	0x410fc270
 800c3c0:	e000e400 	.word	0xe000e400
 800c3c4:	2000185c 	.word	0x2000185c
 800c3c8:	20001860 	.word	0x20001860
 800c3cc:	e000ed20 	.word	0xe000ed20
 800c3d0:	200001c4 	.word	0x200001c4
 800c3d4:	e000ef34 	.word	0xe000ef34

0800c3d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	607b      	str	r3, [r7, #4]
}
 800c3f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3f2:	4b10      	ldr	r3, [pc, #64]	@ (800c434 <vPortEnterCritical+0x5c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	4a0e      	ldr	r2, [pc, #56]	@ (800c434 <vPortEnterCritical+0x5c>)
 800c3fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c434 <vPortEnterCritical+0x5c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d110      	bne.n	800c426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c404:	4b0c      	ldr	r3, [pc, #48]	@ (800c438 <vPortEnterCritical+0x60>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00b      	beq.n	800c426 <vPortEnterCritical+0x4e>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	603b      	str	r3, [r7, #0]
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	e7fd      	b.n	800c422 <vPortEnterCritical+0x4a>
	}
}
 800c426:	bf00      	nop
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	200001c4 	.word	0x200001c4
 800c438:	e000ed04 	.word	0xe000ed04

0800c43c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c442:	4b12      	ldr	r3, [pc, #72]	@ (800c48c <vPortExitCritical+0x50>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10b      	bne.n	800c462 <vPortExitCritical+0x26>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	607b      	str	r3, [r7, #4]
}
 800c45c:	bf00      	nop
 800c45e:	bf00      	nop
 800c460:	e7fd      	b.n	800c45e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c462:	4b0a      	ldr	r3, [pc, #40]	@ (800c48c <vPortExitCritical+0x50>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3b01      	subs	r3, #1
 800c468:	4a08      	ldr	r2, [pc, #32]	@ (800c48c <vPortExitCritical+0x50>)
 800c46a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c46c:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <vPortExitCritical+0x50>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d105      	bne.n	800c480 <vPortExitCritical+0x44>
 800c474:	2300      	movs	r3, #0
 800c476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f383 8811 	msr	BASEPRI, r3
}
 800c47e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	200001c4 	.word	0x200001c4

0800c490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c490:	f3ef 8009 	mrs	r0, PSP
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4b15      	ldr	r3, [pc, #84]	@ (800c4f0 <pxCurrentTCBConst>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	f01e 0f10 	tst.w	lr, #16
 800c4a0:	bf08      	it	eq
 800c4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	6010      	str	r0, [r2, #0]
 800c4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4b4:	f380 8811 	msr	BASEPRI, r0
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f7fe ffb0 	bl	800b424 <vTaskSwitchContext>
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f380 8811 	msr	BASEPRI, r0
 800c4cc:	bc09      	pop	{r0, r3}
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	6808      	ldr	r0, [r1, #0]
 800c4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d6:	f01e 0f10 	tst.w	lr, #16
 800c4da:	bf08      	it	eq
 800c4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4e0:	f380 8809 	msr	PSP, r0
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <pxCurrentTCBConst>:
 800c4f0:	20001230 	.word	0x20001230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop

0800c4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c512:	f7fe fecd 	bl	800b2b0 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c51c:	4b06      	ldr	r3, [pc, #24]	@ (800c538 <xPortSysTickHandler+0x40>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c540:	4b0b      	ldr	r3, [pc, #44]	@ (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c546:	4b0b      	ldr	r3, [pc, #44]	@ (800c574 <vPortSetupTimerInterrupt+0x38>)
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c54c:	4b0a      	ldr	r3, [pc, #40]	@ (800c578 <vPortSetupTimerInterrupt+0x3c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0a      	ldr	r2, [pc, #40]	@ (800c57c <vPortSetupTimerInterrupt+0x40>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	099b      	lsrs	r3, r3, #6
 800c558:	4a09      	ldr	r2, [pc, #36]	@ (800c580 <vPortSetupTimerInterrupt+0x44>)
 800c55a:	3b01      	subs	r3, #1
 800c55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c55e:	4b04      	ldr	r3, [pc, #16]	@ (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	e000e010 	.word	0xe000e010
 800c574:	e000e018 	.word	0xe000e018
 800c578:	200001b8 	.word	0x200001b8
 800c57c:	10624dd3 	.word	0x10624dd3
 800c580:	e000e014 	.word	0xe000e014

0800c584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c594 <vPortEnableVFP+0x10>
 800c588:	6801      	ldr	r1, [r0, #0]
 800c58a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c58e:	6001      	str	r1, [r0, #0]
 800c590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c592:	bf00      	nop
 800c594:	e000ed88 	.word	0xe000ed88

0800c598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c59e:	f3ef 8305 	mrs	r3, IPSR
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b0f      	cmp	r3, #15
 800c5a8:	d915      	bls.n	800c5d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5aa:	4a18      	ldr	r2, [pc, #96]	@ (800c60c <vPortValidateInterruptPriority+0x74>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5b4:	4b16      	ldr	r3, [pc, #88]	@ (800c610 <vPortValidateInterruptPriority+0x78>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	7afa      	ldrb	r2, [r7, #11]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d20b      	bcs.n	800c5d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	e7fd      	b.n	800c5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c614 <vPortValidateInterruptPriority+0x7c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c5de:	4b0e      	ldr	r3, [pc, #56]	@ (800c618 <vPortValidateInterruptPriority+0x80>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d90b      	bls.n	800c5fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	603b      	str	r3, [r7, #0]
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <vPortValidateInterruptPriority+0x62>
	}
 800c5fe:	bf00      	nop
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	e000e3f0 	.word	0xe000e3f0
 800c610:	2000185c 	.word	0x2000185c
 800c614:	e000ed0c 	.word	0xe000ed0c
 800c618:	20001860 	.word	0x20001860

0800c61c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b08a      	sub	sp, #40	@ 0x28
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c624:	2300      	movs	r3, #0
 800c626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c628:	f7fe fd86 	bl	800b138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c62c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7a0 <pvPortMalloc+0x184>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c634:	f000 f924 	bl	800c880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c638:	4b5a      	ldr	r3, [pc, #360]	@ (800c7a4 <pvPortMalloc+0x188>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4013      	ands	r3, r2
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 8095 	bne.w	800c770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01e      	beq.n	800c68a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c64c:	2208      	movs	r2, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4413      	add	r3, r2
 800c652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f003 0307 	and.w	r3, r3, #7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d015      	beq.n	800c68a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f023 0307 	bic.w	r3, r3, #7
 800c664:	3308      	adds	r3, #8
 800c666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f003 0307 	and.w	r3, r3, #7
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00b      	beq.n	800c68a <pvPortMalloc+0x6e>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	617b      	str	r3, [r7, #20]
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop
 800c688:	e7fd      	b.n	800c686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d06f      	beq.n	800c770 <pvPortMalloc+0x154>
 800c690:	4b45      	ldr	r3, [pc, #276]	@ (800c7a8 <pvPortMalloc+0x18c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	429a      	cmp	r2, r3
 800c698:	d86a      	bhi.n	800c770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c69a:	4b44      	ldr	r3, [pc, #272]	@ (800c7ac <pvPortMalloc+0x190>)
 800c69c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c69e:	4b43      	ldr	r3, [pc, #268]	@ (800c7ac <pvPortMalloc+0x190>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6a4:	e004      	b.n	800c6b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d903      	bls.n	800c6c2 <pvPortMalloc+0xa6>
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1f1      	bne.n	800c6a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6c2:	4b37      	ldr	r3, [pc, #220]	@ (800c7a0 <pvPortMalloc+0x184>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d051      	beq.n	800c770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	4413      	add	r3, r2
 800c6d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	1ad2      	subs	r2, r2, r3
 800c6e6:	2308      	movs	r3, #8
 800c6e8:	005b      	lsls	r3, r3, #1
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d920      	bls.n	800c730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	f003 0307 	and.w	r3, r3, #7
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <pvPortMalloc+0xfc>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	613b      	str	r3, [r7, #16]
}
 800c712:	bf00      	nop
 800c714:	bf00      	nop
 800c716:	e7fd      	b.n	800c714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c72a:	69b8      	ldr	r0, [r7, #24]
 800c72c:	f000 f90a 	bl	800c944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c730:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a8 <pvPortMalloc+0x18c>)
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7a8 <pvPortMalloc+0x18c>)
 800c73c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c73e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7a8 <pvPortMalloc+0x18c>)
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	4b1b      	ldr	r3, [pc, #108]	@ (800c7b0 <pvPortMalloc+0x194>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	429a      	cmp	r2, r3
 800c748:	d203      	bcs.n	800c752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c74a:	4b17      	ldr	r3, [pc, #92]	@ (800c7a8 <pvPortMalloc+0x18c>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a18      	ldr	r2, [pc, #96]	@ (800c7b0 <pvPortMalloc+0x194>)
 800c750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	4b13      	ldr	r3, [pc, #76]	@ (800c7a4 <pvPortMalloc+0x188>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	431a      	orrs	r2, r3
 800c75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c766:	4b13      	ldr	r3, [pc, #76]	@ (800c7b4 <pvPortMalloc+0x198>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3301      	adds	r3, #1
 800c76c:	4a11      	ldr	r2, [pc, #68]	@ (800c7b4 <pvPortMalloc+0x198>)
 800c76e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c770:	f7fe fcf0 	bl	800b154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	f003 0307 	and.w	r3, r3, #7
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00b      	beq.n	800c796 <pvPortMalloc+0x17a>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	60fb      	str	r3, [r7, #12]
}
 800c790:	bf00      	nop
 800c792:	bf00      	nop
 800c794:	e7fd      	b.n	800c792 <pvPortMalloc+0x176>
	return pvReturn;
 800c796:	69fb      	ldr	r3, [r7, #28]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3728      	adds	r7, #40	@ 0x28
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	20003f7c 	.word	0x20003f7c
 800c7a4:	20003f90 	.word	0x20003f90
 800c7a8:	20003f80 	.word	0x20003f80
 800c7ac:	20003f74 	.word	0x20003f74
 800c7b0:	20003f84 	.word	0x20003f84
 800c7b4:	20003f88 	.word	0x20003f88

0800c7b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d04f      	beq.n	800c86a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7ca:	2308      	movs	r3, #8
 800c7cc:	425b      	negs	r3, r3
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	4b25      	ldr	r3, [pc, #148]	@ (800c874 <vPortFree+0xbc>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10b      	bne.n	800c7fe <vPortFree+0x46>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	60fb      	str	r3, [r7, #12]
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	e7fd      	b.n	800c7fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <vPortFree+0x66>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	60bb      	str	r3, [r7, #8]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	685a      	ldr	r2, [r3, #4]
 800c822:	4b14      	ldr	r3, [pc, #80]	@ (800c874 <vPortFree+0xbc>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4013      	ands	r3, r2
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d01e      	beq.n	800c86a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d11a      	bne.n	800c86a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	4b0e      	ldr	r3, [pc, #56]	@ (800c874 <vPortFree+0xbc>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	43db      	mvns	r3, r3
 800c83e:	401a      	ands	r2, r3
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c844:	f7fe fc78 	bl	800b138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <vPortFree+0xc0>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4413      	add	r3, r2
 800c852:	4a09      	ldr	r2, [pc, #36]	@ (800c878 <vPortFree+0xc0>)
 800c854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c856:	6938      	ldr	r0, [r7, #16]
 800c858:	f000 f874 	bl	800c944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c85c:	4b07      	ldr	r3, [pc, #28]	@ (800c87c <vPortFree+0xc4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3301      	adds	r3, #1
 800c862:	4a06      	ldr	r2, [pc, #24]	@ (800c87c <vPortFree+0xc4>)
 800c864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c866:	f7fe fc75 	bl	800b154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c86a:	bf00      	nop
 800c86c:	3718      	adds	r7, #24
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	20003f90 	.word	0x20003f90
 800c878:	20003f80 	.word	0x20003f80
 800c87c:	20003f8c 	.word	0x20003f8c

0800c880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c886:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c88a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c88c:	4b27      	ldr	r3, [pc, #156]	@ (800c92c <prvHeapInit+0xac>)
 800c88e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00c      	beq.n	800c8b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3307      	adds	r3, #7
 800c89e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 0307 	bic.w	r3, r3, #7
 800c8a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	4a1f      	ldr	r2, [pc, #124]	@ (800c92c <prvHeapInit+0xac>)
 800c8b0:	4413      	add	r3, r2
 800c8b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c930 <prvHeapInit+0xb0>)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8be:	4b1c      	ldr	r3, [pc, #112]	@ (800c930 <prvHeapInit+0xb0>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8cc:	2208      	movs	r2, #8
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	1a9b      	subs	r3, r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f023 0307 	bic.w	r3, r3, #7
 800c8da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	4a15      	ldr	r2, [pc, #84]	@ (800c934 <prvHeapInit+0xb4>)
 800c8e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8e2:	4b14      	ldr	r3, [pc, #80]	@ (800c934 <prvHeapInit+0xb4>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ea:	4b12      	ldr	r3, [pc, #72]	@ (800c934 <prvHeapInit+0xb4>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	1ad2      	subs	r2, r2, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c900:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <prvHeapInit+0xb4>)
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	4a0a      	ldr	r2, [pc, #40]	@ (800c938 <prvHeapInit+0xb8>)
 800c90e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	4a09      	ldr	r2, [pc, #36]	@ (800c93c <prvHeapInit+0xbc>)
 800c916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c918:	4b09      	ldr	r3, [pc, #36]	@ (800c940 <prvHeapInit+0xc0>)
 800c91a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c91e:	601a      	str	r2, [r3, #0]
}
 800c920:	bf00      	nop
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	20001864 	.word	0x20001864
 800c930:	20003f74 	.word	0x20003f74
 800c934:	20003f7c 	.word	0x20003f7c
 800c938:	20003f84 	.word	0x20003f84
 800c93c:	20003f80 	.word	0x20003f80
 800c940:	20003f90 	.word	0x20003f90

0800c944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c94c:	4b28      	ldr	r3, [pc, #160]	@ (800c9f0 <prvInsertBlockIntoFreeList+0xac>)
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	e002      	b.n	800c958 <prvInsertBlockIntoFreeList+0x14>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d8f7      	bhi.n	800c952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	4413      	add	r3, r2
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	429a      	cmp	r2, r3
 800c972:	d108      	bne.n	800c986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	441a      	add	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	441a      	add	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d118      	bne.n	800c9cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4b15      	ldr	r3, [pc, #84]	@ (800c9f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d00d      	beq.n	800c9c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685a      	ldr	r2, [r3, #4]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	441a      	add	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	e008      	b.n	800c9d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	e003      	b.n	800c9d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d002      	beq.n	800c9e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9e2:	bf00      	nop
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	20003f74 	.word	0x20003f74
 800c9f4:	20003f7c 	.word	0x20003f7c

0800c9f8 <sniprintf>:
 800c9f8:	b40c      	push	{r2, r3}
 800c9fa:	b530      	push	{r4, r5, lr}
 800c9fc:	4b18      	ldr	r3, [pc, #96]	@ (800ca60 <sniprintf+0x68>)
 800c9fe:	1e0c      	subs	r4, r1, #0
 800ca00:	681d      	ldr	r5, [r3, #0]
 800ca02:	b09d      	sub	sp, #116	@ 0x74
 800ca04:	da08      	bge.n	800ca18 <sniprintf+0x20>
 800ca06:	238b      	movs	r3, #139	@ 0x8b
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0e:	b01d      	add	sp, #116	@ 0x74
 800ca10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca14:	b002      	add	sp, #8
 800ca16:	4770      	bx	lr
 800ca18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ca1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca20:	f04f 0300 	mov.w	r3, #0
 800ca24:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ca26:	bf14      	ite	ne
 800ca28:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca2c:	4623      	moveq	r3, r4
 800ca2e:	9304      	str	r3, [sp, #16]
 800ca30:	9307      	str	r3, [sp, #28]
 800ca32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca36:	9002      	str	r0, [sp, #8]
 800ca38:	9006      	str	r0, [sp, #24]
 800ca3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ca40:	ab21      	add	r3, sp, #132	@ 0x84
 800ca42:	a902      	add	r1, sp, #8
 800ca44:	4628      	mov	r0, r5
 800ca46:	9301      	str	r3, [sp, #4]
 800ca48:	f000 fa0e 	bl	800ce68 <_svfiprintf_r>
 800ca4c:	1c43      	adds	r3, r0, #1
 800ca4e:	bfbc      	itt	lt
 800ca50:	238b      	movlt	r3, #139	@ 0x8b
 800ca52:	602b      	strlt	r3, [r5, #0]
 800ca54:	2c00      	cmp	r4, #0
 800ca56:	d0da      	beq.n	800ca0e <sniprintf+0x16>
 800ca58:	9b02      	ldr	r3, [sp, #8]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	e7d6      	b.n	800ca0e <sniprintf+0x16>
 800ca60:	200001c8 	.word	0x200001c8

0800ca64 <_vsniprintf_r>:
 800ca64:	b530      	push	{r4, r5, lr}
 800ca66:	4614      	mov	r4, r2
 800ca68:	2c00      	cmp	r4, #0
 800ca6a:	b09b      	sub	sp, #108	@ 0x6c
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	461a      	mov	r2, r3
 800ca70:	da05      	bge.n	800ca7e <_vsniprintf_r+0x1a>
 800ca72:	238b      	movs	r3, #139	@ 0x8b
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7a:	b01b      	add	sp, #108	@ 0x6c
 800ca7c:	bd30      	pop	{r4, r5, pc}
 800ca7e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ca82:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ca86:	f04f 0300 	mov.w	r3, #0
 800ca8a:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca8c:	bf14      	ite	ne
 800ca8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca92:	4623      	moveq	r3, r4
 800ca94:	9302      	str	r3, [sp, #8]
 800ca96:	9305      	str	r3, [sp, #20]
 800ca98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca9c:	9100      	str	r1, [sp, #0]
 800ca9e:	9104      	str	r1, [sp, #16]
 800caa0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800caa4:	4669      	mov	r1, sp
 800caa6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800caa8:	f000 f9de 	bl	800ce68 <_svfiprintf_r>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	bfbc      	itt	lt
 800cab0:	238b      	movlt	r3, #139	@ 0x8b
 800cab2:	602b      	strlt	r3, [r5, #0]
 800cab4:	2c00      	cmp	r4, #0
 800cab6:	d0e0      	beq.n	800ca7a <_vsniprintf_r+0x16>
 800cab8:	9b00      	ldr	r3, [sp, #0]
 800caba:	2200      	movs	r2, #0
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	e7dc      	b.n	800ca7a <_vsniprintf_r+0x16>

0800cac0 <vsniprintf>:
 800cac0:	b507      	push	{r0, r1, r2, lr}
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	4613      	mov	r3, r2
 800cac6:	460a      	mov	r2, r1
 800cac8:	4601      	mov	r1, r0
 800caca:	4803      	ldr	r0, [pc, #12]	@ (800cad8 <vsniprintf+0x18>)
 800cacc:	6800      	ldr	r0, [r0, #0]
 800cace:	f7ff ffc9 	bl	800ca64 <_vsniprintf_r>
 800cad2:	b003      	add	sp, #12
 800cad4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cad8:	200001c8 	.word	0x200001c8

0800cadc <memcmp>:
 800cadc:	b510      	push	{r4, lr}
 800cade:	3901      	subs	r1, #1
 800cae0:	4402      	add	r2, r0
 800cae2:	4290      	cmp	r0, r2
 800cae4:	d101      	bne.n	800caea <memcmp+0xe>
 800cae6:	2000      	movs	r0, #0
 800cae8:	e005      	b.n	800caf6 <memcmp+0x1a>
 800caea:	7803      	ldrb	r3, [r0, #0]
 800caec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	d001      	beq.n	800caf8 <memcmp+0x1c>
 800caf4:	1b18      	subs	r0, r3, r4
 800caf6:	bd10      	pop	{r4, pc}
 800caf8:	3001      	adds	r0, #1
 800cafa:	e7f2      	b.n	800cae2 <memcmp+0x6>

0800cafc <memset>:
 800cafc:	4402      	add	r2, r0
 800cafe:	4603      	mov	r3, r0
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d100      	bne.n	800cb06 <memset+0xa>
 800cb04:	4770      	bx	lr
 800cb06:	f803 1b01 	strb.w	r1, [r3], #1
 800cb0a:	e7f9      	b.n	800cb00 <memset+0x4>

0800cb0c <strncpy>:
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	3901      	subs	r1, #1
 800cb10:	4603      	mov	r3, r0
 800cb12:	b132      	cbz	r2, 800cb22 <strncpy+0x16>
 800cb14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb18:	f803 4b01 	strb.w	r4, [r3], #1
 800cb1c:	3a01      	subs	r2, #1
 800cb1e:	2c00      	cmp	r4, #0
 800cb20:	d1f7      	bne.n	800cb12 <strncpy+0x6>
 800cb22:	441a      	add	r2, r3
 800cb24:	2100      	movs	r1, #0
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d100      	bne.n	800cb2c <strncpy+0x20>
 800cb2a:	bd10      	pop	{r4, pc}
 800cb2c:	f803 1b01 	strb.w	r1, [r3], #1
 800cb30:	e7f9      	b.n	800cb26 <strncpy+0x1a>

0800cb32 <strnlen>:
 800cb32:	b510      	push	{r4, lr}
 800cb34:	4602      	mov	r2, r0
 800cb36:	4401      	add	r1, r0
 800cb38:	428a      	cmp	r2, r1
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	d003      	beq.n	800cb46 <strnlen+0x14>
 800cb3e:	781c      	ldrb	r4, [r3, #0]
 800cb40:	3201      	adds	r2, #1
 800cb42:	2c00      	cmp	r4, #0
 800cb44:	d1f8      	bne.n	800cb38 <strnlen+0x6>
 800cb46:	1a18      	subs	r0, r3, r0
 800cb48:	bd10      	pop	{r4, pc}
	...

0800cb4c <__errno>:
 800cb4c:	4b01      	ldr	r3, [pc, #4]	@ (800cb54 <__errno+0x8>)
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	200001c8 	.word	0x200001c8

0800cb58 <__libc_init_array>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	4d0d      	ldr	r5, [pc, #52]	@ (800cb90 <__libc_init_array+0x38>)
 800cb5c:	4c0d      	ldr	r4, [pc, #52]	@ (800cb94 <__libc_init_array+0x3c>)
 800cb5e:	1b64      	subs	r4, r4, r5
 800cb60:	10a4      	asrs	r4, r4, #2
 800cb62:	2600      	movs	r6, #0
 800cb64:	42a6      	cmp	r6, r4
 800cb66:	d109      	bne.n	800cb7c <__libc_init_array+0x24>
 800cb68:	4d0b      	ldr	r5, [pc, #44]	@ (800cb98 <__libc_init_array+0x40>)
 800cb6a:	4c0c      	ldr	r4, [pc, #48]	@ (800cb9c <__libc_init_array+0x44>)
 800cb6c:	f000 fc64 	bl	800d438 <_init>
 800cb70:	1b64      	subs	r4, r4, r5
 800cb72:	10a4      	asrs	r4, r4, #2
 800cb74:	2600      	movs	r6, #0
 800cb76:	42a6      	cmp	r6, r4
 800cb78:	d105      	bne.n	800cb86 <__libc_init_array+0x2e>
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb80:	4798      	blx	r3
 800cb82:	3601      	adds	r6, #1
 800cb84:	e7ee      	b.n	800cb64 <__libc_init_array+0xc>
 800cb86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8a:	4798      	blx	r3
 800cb8c:	3601      	adds	r6, #1
 800cb8e:	e7f2      	b.n	800cb76 <__libc_init_array+0x1e>
 800cb90:	0800d814 	.word	0x0800d814
 800cb94:	0800d814 	.word	0x0800d814
 800cb98:	0800d814 	.word	0x0800d814
 800cb9c:	0800d818 	.word	0x0800d818

0800cba0 <__retarget_lock_acquire_recursive>:
 800cba0:	4770      	bx	lr

0800cba2 <__retarget_lock_release_recursive>:
 800cba2:	4770      	bx	lr

0800cba4 <memcpy>:
 800cba4:	440a      	add	r2, r1
 800cba6:	4291      	cmp	r1, r2
 800cba8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbac:	d100      	bne.n	800cbb0 <memcpy+0xc>
 800cbae:	4770      	bx	lr
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbba:	4291      	cmp	r1, r2
 800cbbc:	d1f9      	bne.n	800cbb2 <memcpy+0xe>
 800cbbe:	bd10      	pop	{r4, pc}

0800cbc0 <_free_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	d041      	beq.n	800cc4c <_free_r+0x8c>
 800cbc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbcc:	1f0c      	subs	r4, r1, #4
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	bfb8      	it	lt
 800cbd2:	18e4      	addlt	r4, r4, r3
 800cbd4:	f000 f8e0 	bl	800cd98 <__malloc_lock>
 800cbd8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc50 <_free_r+0x90>)
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	b933      	cbnz	r3, 800cbec <_free_r+0x2c>
 800cbde:	6063      	str	r3, [r4, #4]
 800cbe0:	6014      	str	r4, [r2, #0]
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbe8:	f000 b8dc 	b.w	800cda4 <__malloc_unlock>
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	d908      	bls.n	800cc02 <_free_r+0x42>
 800cbf0:	6820      	ldr	r0, [r4, #0]
 800cbf2:	1821      	adds	r1, r4, r0
 800cbf4:	428b      	cmp	r3, r1
 800cbf6:	bf01      	itttt	eq
 800cbf8:	6819      	ldreq	r1, [r3, #0]
 800cbfa:	685b      	ldreq	r3, [r3, #4]
 800cbfc:	1809      	addeq	r1, r1, r0
 800cbfe:	6021      	streq	r1, [r4, #0]
 800cc00:	e7ed      	b.n	800cbde <_free_r+0x1e>
 800cc02:	461a      	mov	r2, r3
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	b10b      	cbz	r3, 800cc0c <_free_r+0x4c>
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	d9fa      	bls.n	800cc02 <_free_r+0x42>
 800cc0c:	6811      	ldr	r1, [r2, #0]
 800cc0e:	1850      	adds	r0, r2, r1
 800cc10:	42a0      	cmp	r0, r4
 800cc12:	d10b      	bne.n	800cc2c <_free_r+0x6c>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	4401      	add	r1, r0
 800cc18:	1850      	adds	r0, r2, r1
 800cc1a:	4283      	cmp	r3, r0
 800cc1c:	6011      	str	r1, [r2, #0]
 800cc1e:	d1e0      	bne.n	800cbe2 <_free_r+0x22>
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	6053      	str	r3, [r2, #4]
 800cc26:	4408      	add	r0, r1
 800cc28:	6010      	str	r0, [r2, #0]
 800cc2a:	e7da      	b.n	800cbe2 <_free_r+0x22>
 800cc2c:	d902      	bls.n	800cc34 <_free_r+0x74>
 800cc2e:	230c      	movs	r3, #12
 800cc30:	602b      	str	r3, [r5, #0]
 800cc32:	e7d6      	b.n	800cbe2 <_free_r+0x22>
 800cc34:	6820      	ldr	r0, [r4, #0]
 800cc36:	1821      	adds	r1, r4, r0
 800cc38:	428b      	cmp	r3, r1
 800cc3a:	bf04      	itt	eq
 800cc3c:	6819      	ldreq	r1, [r3, #0]
 800cc3e:	685b      	ldreq	r3, [r3, #4]
 800cc40:	6063      	str	r3, [r4, #4]
 800cc42:	bf04      	itt	eq
 800cc44:	1809      	addeq	r1, r1, r0
 800cc46:	6021      	streq	r1, [r4, #0]
 800cc48:	6054      	str	r4, [r2, #4]
 800cc4a:	e7ca      	b.n	800cbe2 <_free_r+0x22>
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	200040d8 	.word	0x200040d8

0800cc54 <sbrk_aligned>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	4e0f      	ldr	r6, [pc, #60]	@ (800cc94 <sbrk_aligned+0x40>)
 800cc58:	460c      	mov	r4, r1
 800cc5a:	6831      	ldr	r1, [r6, #0]
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	b911      	cbnz	r1, 800cc66 <sbrk_aligned+0x12>
 800cc60:	f000 fba4 	bl	800d3ac <_sbrk_r>
 800cc64:	6030      	str	r0, [r6, #0]
 800cc66:	4621      	mov	r1, r4
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f000 fb9f 	bl	800d3ac <_sbrk_r>
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	d103      	bne.n	800cc7a <sbrk_aligned+0x26>
 800cc72:	f04f 34ff 	mov.w	r4, #4294967295
 800cc76:	4620      	mov	r0, r4
 800cc78:	bd70      	pop	{r4, r5, r6, pc}
 800cc7a:	1cc4      	adds	r4, r0, #3
 800cc7c:	f024 0403 	bic.w	r4, r4, #3
 800cc80:	42a0      	cmp	r0, r4
 800cc82:	d0f8      	beq.n	800cc76 <sbrk_aligned+0x22>
 800cc84:	1a21      	subs	r1, r4, r0
 800cc86:	4628      	mov	r0, r5
 800cc88:	f000 fb90 	bl	800d3ac <_sbrk_r>
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	d1f2      	bne.n	800cc76 <sbrk_aligned+0x22>
 800cc90:	e7ef      	b.n	800cc72 <sbrk_aligned+0x1e>
 800cc92:	bf00      	nop
 800cc94:	200040d4 	.word	0x200040d4

0800cc98 <_malloc_r>:
 800cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	1ccd      	adds	r5, r1, #3
 800cc9e:	f025 0503 	bic.w	r5, r5, #3
 800cca2:	3508      	adds	r5, #8
 800cca4:	2d0c      	cmp	r5, #12
 800cca6:	bf38      	it	cc
 800cca8:	250c      	movcc	r5, #12
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	4606      	mov	r6, r0
 800ccae:	db01      	blt.n	800ccb4 <_malloc_r+0x1c>
 800ccb0:	42a9      	cmp	r1, r5
 800ccb2:	d904      	bls.n	800ccbe <_malloc_r+0x26>
 800ccb4:	230c      	movs	r3, #12
 800ccb6:	6033      	str	r3, [r6, #0]
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd94 <_malloc_r+0xfc>
 800ccc2:	f000 f869 	bl	800cd98 <__malloc_lock>
 800ccc6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccca:	461c      	mov	r4, r3
 800cccc:	bb44      	cbnz	r4, 800cd20 <_malloc_r+0x88>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff ffbf 	bl	800cc54 <sbrk_aligned>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	4604      	mov	r4, r0
 800ccda:	d158      	bne.n	800cd8e <_malloc_r+0xf6>
 800ccdc:	f8d8 4000 	ldr.w	r4, [r8]
 800cce0:	4627      	mov	r7, r4
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	d143      	bne.n	800cd6e <_malloc_r+0xd6>
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	d04b      	beq.n	800cd82 <_malloc_r+0xea>
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	4639      	mov	r1, r7
 800ccee:	4630      	mov	r0, r6
 800ccf0:	eb04 0903 	add.w	r9, r4, r3
 800ccf4:	f000 fb5a 	bl	800d3ac <_sbrk_r>
 800ccf8:	4581      	cmp	r9, r0
 800ccfa:	d142      	bne.n	800cd82 <_malloc_r+0xea>
 800ccfc:	6821      	ldr	r1, [r4, #0]
 800ccfe:	1a6d      	subs	r5, r5, r1
 800cd00:	4629      	mov	r1, r5
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff ffa6 	bl	800cc54 <sbrk_aligned>
 800cd08:	3001      	adds	r0, #1
 800cd0a:	d03a      	beq.n	800cd82 <_malloc_r+0xea>
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	442b      	add	r3, r5
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	f8d8 3000 	ldr.w	r3, [r8]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	bb62      	cbnz	r2, 800cd74 <_malloc_r+0xdc>
 800cd1a:	f8c8 7000 	str.w	r7, [r8]
 800cd1e:	e00f      	b.n	800cd40 <_malloc_r+0xa8>
 800cd20:	6822      	ldr	r2, [r4, #0]
 800cd22:	1b52      	subs	r2, r2, r5
 800cd24:	d420      	bmi.n	800cd68 <_malloc_r+0xd0>
 800cd26:	2a0b      	cmp	r2, #11
 800cd28:	d917      	bls.n	800cd5a <_malloc_r+0xc2>
 800cd2a:	1961      	adds	r1, r4, r5
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	6025      	str	r5, [r4, #0]
 800cd30:	bf18      	it	ne
 800cd32:	6059      	strne	r1, [r3, #4]
 800cd34:	6863      	ldr	r3, [r4, #4]
 800cd36:	bf08      	it	eq
 800cd38:	f8c8 1000 	streq.w	r1, [r8]
 800cd3c:	5162      	str	r2, [r4, r5]
 800cd3e:	604b      	str	r3, [r1, #4]
 800cd40:	4630      	mov	r0, r6
 800cd42:	f000 f82f 	bl	800cda4 <__malloc_unlock>
 800cd46:	f104 000b 	add.w	r0, r4, #11
 800cd4a:	1d23      	adds	r3, r4, #4
 800cd4c:	f020 0007 	bic.w	r0, r0, #7
 800cd50:	1ac2      	subs	r2, r0, r3
 800cd52:	bf1c      	itt	ne
 800cd54:	1a1b      	subne	r3, r3, r0
 800cd56:	50a3      	strne	r3, [r4, r2]
 800cd58:	e7af      	b.n	800ccba <_malloc_r+0x22>
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	42a3      	cmp	r3, r4
 800cd5e:	bf0c      	ite	eq
 800cd60:	f8c8 2000 	streq.w	r2, [r8]
 800cd64:	605a      	strne	r2, [r3, #4]
 800cd66:	e7eb      	b.n	800cd40 <_malloc_r+0xa8>
 800cd68:	4623      	mov	r3, r4
 800cd6a:	6864      	ldr	r4, [r4, #4]
 800cd6c:	e7ae      	b.n	800cccc <_malloc_r+0x34>
 800cd6e:	463c      	mov	r4, r7
 800cd70:	687f      	ldr	r7, [r7, #4]
 800cd72:	e7b6      	b.n	800cce2 <_malloc_r+0x4a>
 800cd74:	461a      	mov	r2, r3
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	42a3      	cmp	r3, r4
 800cd7a:	d1fb      	bne.n	800cd74 <_malloc_r+0xdc>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	6053      	str	r3, [r2, #4]
 800cd80:	e7de      	b.n	800cd40 <_malloc_r+0xa8>
 800cd82:	230c      	movs	r3, #12
 800cd84:	6033      	str	r3, [r6, #0]
 800cd86:	4630      	mov	r0, r6
 800cd88:	f000 f80c 	bl	800cda4 <__malloc_unlock>
 800cd8c:	e794      	b.n	800ccb8 <_malloc_r+0x20>
 800cd8e:	6005      	str	r5, [r0, #0]
 800cd90:	e7d6      	b.n	800cd40 <_malloc_r+0xa8>
 800cd92:	bf00      	nop
 800cd94:	200040d8 	.word	0x200040d8

0800cd98 <__malloc_lock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	@ (800cda0 <__malloc_lock+0x8>)
 800cd9a:	f7ff bf01 	b.w	800cba0 <__retarget_lock_acquire_recursive>
 800cd9e:	bf00      	nop
 800cda0:	200040d0 	.word	0x200040d0

0800cda4 <__malloc_unlock>:
 800cda4:	4801      	ldr	r0, [pc, #4]	@ (800cdac <__malloc_unlock+0x8>)
 800cda6:	f7ff befc 	b.w	800cba2 <__retarget_lock_release_recursive>
 800cdaa:	bf00      	nop
 800cdac:	200040d0 	.word	0x200040d0

0800cdb0 <__ssputs_r>:
 800cdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb4:	688e      	ldr	r6, [r1, #8]
 800cdb6:	461f      	mov	r7, r3
 800cdb8:	42be      	cmp	r6, r7
 800cdba:	680b      	ldr	r3, [r1, #0]
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	4690      	mov	r8, r2
 800cdc2:	d82d      	bhi.n	800ce20 <__ssputs_r+0x70>
 800cdc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cdcc:	d026      	beq.n	800ce1c <__ssputs_r+0x6c>
 800cdce:	6965      	ldr	r5, [r4, #20]
 800cdd0:	6909      	ldr	r1, [r1, #16]
 800cdd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd6:	eba3 0901 	sub.w	r9, r3, r1
 800cdda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdde:	1c7b      	adds	r3, r7, #1
 800cde0:	444b      	add	r3, r9
 800cde2:	106d      	asrs	r5, r5, #1
 800cde4:	429d      	cmp	r5, r3
 800cde6:	bf38      	it	cc
 800cde8:	461d      	movcc	r5, r3
 800cdea:	0553      	lsls	r3, r2, #21
 800cdec:	d527      	bpl.n	800ce3e <__ssputs_r+0x8e>
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f7ff ff52 	bl	800cc98 <_malloc_r>
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	b360      	cbz	r0, 800ce52 <__ssputs_r+0xa2>
 800cdf8:	6921      	ldr	r1, [r4, #16]
 800cdfa:	464a      	mov	r2, r9
 800cdfc:	f7ff fed2 	bl	800cba4 <memcpy>
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	6126      	str	r6, [r4, #16]
 800ce0e:	6165      	str	r5, [r4, #20]
 800ce10:	444e      	add	r6, r9
 800ce12:	eba5 0509 	sub.w	r5, r5, r9
 800ce16:	6026      	str	r6, [r4, #0]
 800ce18:	60a5      	str	r5, [r4, #8]
 800ce1a:	463e      	mov	r6, r7
 800ce1c:	42be      	cmp	r6, r7
 800ce1e:	d900      	bls.n	800ce22 <__ssputs_r+0x72>
 800ce20:	463e      	mov	r6, r7
 800ce22:	6820      	ldr	r0, [r4, #0]
 800ce24:	4632      	mov	r2, r6
 800ce26:	4641      	mov	r1, r8
 800ce28:	f000 faa6 	bl	800d378 <memmove>
 800ce2c:	68a3      	ldr	r3, [r4, #8]
 800ce2e:	1b9b      	subs	r3, r3, r6
 800ce30:	60a3      	str	r3, [r4, #8]
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	4433      	add	r3, r6
 800ce36:	6023      	str	r3, [r4, #0]
 800ce38:	2000      	movs	r0, #0
 800ce3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3e:	462a      	mov	r2, r5
 800ce40:	f000 fac4 	bl	800d3cc <_realloc_r>
 800ce44:	4606      	mov	r6, r0
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d1e0      	bne.n	800ce0c <__ssputs_r+0x5c>
 800ce4a:	6921      	ldr	r1, [r4, #16]
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	f7ff feb7 	bl	800cbc0 <_free_r>
 800ce52:	230c      	movs	r3, #12
 800ce54:	f8ca 3000 	str.w	r3, [sl]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	f04f 30ff 	mov.w	r0, #4294967295
 800ce64:	e7e9      	b.n	800ce3a <__ssputs_r+0x8a>
	...

0800ce68 <_svfiprintf_r>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	4698      	mov	r8, r3
 800ce6e:	898b      	ldrh	r3, [r1, #12]
 800ce70:	061b      	lsls	r3, r3, #24
 800ce72:	b09d      	sub	sp, #116	@ 0x74
 800ce74:	4607      	mov	r7, r0
 800ce76:	460d      	mov	r5, r1
 800ce78:	4614      	mov	r4, r2
 800ce7a:	d510      	bpl.n	800ce9e <_svfiprintf_r+0x36>
 800ce7c:	690b      	ldr	r3, [r1, #16]
 800ce7e:	b973      	cbnz	r3, 800ce9e <_svfiprintf_r+0x36>
 800ce80:	2140      	movs	r1, #64	@ 0x40
 800ce82:	f7ff ff09 	bl	800cc98 <_malloc_r>
 800ce86:	6028      	str	r0, [r5, #0]
 800ce88:	6128      	str	r0, [r5, #16]
 800ce8a:	b930      	cbnz	r0, 800ce9a <_svfiprintf_r+0x32>
 800ce8c:	230c      	movs	r3, #12
 800ce8e:	603b      	str	r3, [r7, #0]
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	b01d      	add	sp, #116	@ 0x74
 800ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9a:	2340      	movs	r3, #64	@ 0x40
 800ce9c:	616b      	str	r3, [r5, #20]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cea2:	2320      	movs	r3, #32
 800cea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cea8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceac:	2330      	movs	r3, #48	@ 0x30
 800ceae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d04c <_svfiprintf_r+0x1e4>
 800ceb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ceb6:	f04f 0901 	mov.w	r9, #1
 800ceba:	4623      	mov	r3, r4
 800cebc:	469a      	mov	sl, r3
 800cebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec2:	b10a      	cbz	r2, 800cec8 <_svfiprintf_r+0x60>
 800cec4:	2a25      	cmp	r2, #37	@ 0x25
 800cec6:	d1f9      	bne.n	800cebc <_svfiprintf_r+0x54>
 800cec8:	ebba 0b04 	subs.w	fp, sl, r4
 800cecc:	d00b      	beq.n	800cee6 <_svfiprintf_r+0x7e>
 800cece:	465b      	mov	r3, fp
 800ced0:	4622      	mov	r2, r4
 800ced2:	4629      	mov	r1, r5
 800ced4:	4638      	mov	r0, r7
 800ced6:	f7ff ff6b 	bl	800cdb0 <__ssputs_r>
 800ceda:	3001      	adds	r0, #1
 800cedc:	f000 80a7 	beq.w	800d02e <_svfiprintf_r+0x1c6>
 800cee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee2:	445a      	add	r2, fp
 800cee4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cee6:	f89a 3000 	ldrb.w	r3, [sl]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 809f 	beq.w	800d02e <_svfiprintf_r+0x1c6>
 800cef0:	2300      	movs	r3, #0
 800cef2:	f04f 32ff 	mov.w	r2, #4294967295
 800cef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cefa:	f10a 0a01 	add.w	sl, sl, #1
 800cefe:	9304      	str	r3, [sp, #16]
 800cf00:	9307      	str	r3, [sp, #28]
 800cf02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf06:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf08:	4654      	mov	r4, sl
 800cf0a:	2205      	movs	r2, #5
 800cf0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf10:	484e      	ldr	r0, [pc, #312]	@ (800d04c <_svfiprintf_r+0x1e4>)
 800cf12:	f7f3 f975 	bl	8000200 <memchr>
 800cf16:	9a04      	ldr	r2, [sp, #16]
 800cf18:	b9d8      	cbnz	r0, 800cf52 <_svfiprintf_r+0xea>
 800cf1a:	06d0      	lsls	r0, r2, #27
 800cf1c:	bf44      	itt	mi
 800cf1e:	2320      	movmi	r3, #32
 800cf20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf24:	0711      	lsls	r1, r2, #28
 800cf26:	bf44      	itt	mi
 800cf28:	232b      	movmi	r3, #43	@ 0x2b
 800cf2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf2e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf32:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf34:	d015      	beq.n	800cf62 <_svfiprintf_r+0xfa>
 800cf36:	9a07      	ldr	r2, [sp, #28]
 800cf38:	4654      	mov	r4, sl
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	f04f 0c0a 	mov.w	ip, #10
 800cf40:	4621      	mov	r1, r4
 800cf42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf46:	3b30      	subs	r3, #48	@ 0x30
 800cf48:	2b09      	cmp	r3, #9
 800cf4a:	d94b      	bls.n	800cfe4 <_svfiprintf_r+0x17c>
 800cf4c:	b1b0      	cbz	r0, 800cf7c <_svfiprintf_r+0x114>
 800cf4e:	9207      	str	r2, [sp, #28]
 800cf50:	e014      	b.n	800cf7c <_svfiprintf_r+0x114>
 800cf52:	eba0 0308 	sub.w	r3, r0, r8
 800cf56:	fa09 f303 	lsl.w	r3, r9, r3
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	9304      	str	r3, [sp, #16]
 800cf5e:	46a2      	mov	sl, r4
 800cf60:	e7d2      	b.n	800cf08 <_svfiprintf_r+0xa0>
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	1d19      	adds	r1, r3, #4
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	9103      	str	r1, [sp, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bfbb      	ittet	lt
 800cf6e:	425b      	neglt	r3, r3
 800cf70:	f042 0202 	orrlt.w	r2, r2, #2
 800cf74:	9307      	strge	r3, [sp, #28]
 800cf76:	9307      	strlt	r3, [sp, #28]
 800cf78:	bfb8      	it	lt
 800cf7a:	9204      	strlt	r2, [sp, #16]
 800cf7c:	7823      	ldrb	r3, [r4, #0]
 800cf7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf80:	d10a      	bne.n	800cf98 <_svfiprintf_r+0x130>
 800cf82:	7863      	ldrb	r3, [r4, #1]
 800cf84:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf86:	d132      	bne.n	800cfee <_svfiprintf_r+0x186>
 800cf88:	9b03      	ldr	r3, [sp, #12]
 800cf8a:	1d1a      	adds	r2, r3, #4
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	9203      	str	r2, [sp, #12]
 800cf90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf94:	3402      	adds	r4, #2
 800cf96:	9305      	str	r3, [sp, #20]
 800cf98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d05c <_svfiprintf_r+0x1f4>
 800cf9c:	7821      	ldrb	r1, [r4, #0]
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	4650      	mov	r0, sl
 800cfa2:	f7f3 f92d 	bl	8000200 <memchr>
 800cfa6:	b138      	cbz	r0, 800cfb8 <_svfiprintf_r+0x150>
 800cfa8:	9b04      	ldr	r3, [sp, #16]
 800cfaa:	eba0 000a 	sub.w	r0, r0, sl
 800cfae:	2240      	movs	r2, #64	@ 0x40
 800cfb0:	4082      	lsls	r2, r0
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	9304      	str	r3, [sp, #16]
 800cfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbc:	4824      	ldr	r0, [pc, #144]	@ (800d050 <_svfiprintf_r+0x1e8>)
 800cfbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfc2:	2206      	movs	r2, #6
 800cfc4:	f7f3 f91c 	bl	8000200 <memchr>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d036      	beq.n	800d03a <_svfiprintf_r+0x1d2>
 800cfcc:	4b21      	ldr	r3, [pc, #132]	@ (800d054 <_svfiprintf_r+0x1ec>)
 800cfce:	bb1b      	cbnz	r3, 800d018 <_svfiprintf_r+0x1b0>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	3307      	adds	r3, #7
 800cfd4:	f023 0307 	bic.w	r3, r3, #7
 800cfd8:	3308      	adds	r3, #8
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfde:	4433      	add	r3, r6
 800cfe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfe2:	e76a      	b.n	800ceba <_svfiprintf_r+0x52>
 800cfe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe8:	460c      	mov	r4, r1
 800cfea:	2001      	movs	r0, #1
 800cfec:	e7a8      	b.n	800cf40 <_svfiprintf_r+0xd8>
 800cfee:	2300      	movs	r3, #0
 800cff0:	3401      	adds	r4, #1
 800cff2:	9305      	str	r3, [sp, #20]
 800cff4:	4619      	mov	r1, r3
 800cff6:	f04f 0c0a 	mov.w	ip, #10
 800cffa:	4620      	mov	r0, r4
 800cffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d000:	3a30      	subs	r2, #48	@ 0x30
 800d002:	2a09      	cmp	r2, #9
 800d004:	d903      	bls.n	800d00e <_svfiprintf_r+0x1a6>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0c6      	beq.n	800cf98 <_svfiprintf_r+0x130>
 800d00a:	9105      	str	r1, [sp, #20]
 800d00c:	e7c4      	b.n	800cf98 <_svfiprintf_r+0x130>
 800d00e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d012:	4604      	mov	r4, r0
 800d014:	2301      	movs	r3, #1
 800d016:	e7f0      	b.n	800cffa <_svfiprintf_r+0x192>
 800d018:	ab03      	add	r3, sp, #12
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	462a      	mov	r2, r5
 800d01e:	4b0e      	ldr	r3, [pc, #56]	@ (800d058 <_svfiprintf_r+0x1f0>)
 800d020:	a904      	add	r1, sp, #16
 800d022:	4638      	mov	r0, r7
 800d024:	f3af 8000 	nop.w
 800d028:	1c42      	adds	r2, r0, #1
 800d02a:	4606      	mov	r6, r0
 800d02c:	d1d6      	bne.n	800cfdc <_svfiprintf_r+0x174>
 800d02e:	89ab      	ldrh	r3, [r5, #12]
 800d030:	065b      	lsls	r3, r3, #25
 800d032:	f53f af2d 	bmi.w	800ce90 <_svfiprintf_r+0x28>
 800d036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d038:	e72c      	b.n	800ce94 <_svfiprintf_r+0x2c>
 800d03a:	ab03      	add	r3, sp, #12
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	462a      	mov	r2, r5
 800d040:	4b05      	ldr	r3, [pc, #20]	@ (800d058 <_svfiprintf_r+0x1f0>)
 800d042:	a904      	add	r1, sp, #16
 800d044:	4638      	mov	r0, r7
 800d046:	f000 f879 	bl	800d13c <_printf_i>
 800d04a:	e7ed      	b.n	800d028 <_svfiprintf_r+0x1c0>
 800d04c:	0800d7d8 	.word	0x0800d7d8
 800d050:	0800d7e2 	.word	0x0800d7e2
 800d054:	00000000 	.word	0x00000000
 800d058:	0800cdb1 	.word	0x0800cdb1
 800d05c:	0800d7de 	.word	0x0800d7de

0800d060 <_printf_common>:
 800d060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d064:	4616      	mov	r6, r2
 800d066:	4698      	mov	r8, r3
 800d068:	688a      	ldr	r2, [r1, #8]
 800d06a:	690b      	ldr	r3, [r1, #16]
 800d06c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d070:	4293      	cmp	r3, r2
 800d072:	bfb8      	it	lt
 800d074:	4613      	movlt	r3, r2
 800d076:	6033      	str	r3, [r6, #0]
 800d078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d07c:	4607      	mov	r7, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	b10a      	cbz	r2, 800d086 <_printf_common+0x26>
 800d082:	3301      	adds	r3, #1
 800d084:	6033      	str	r3, [r6, #0]
 800d086:	6823      	ldr	r3, [r4, #0]
 800d088:	0699      	lsls	r1, r3, #26
 800d08a:	bf42      	ittt	mi
 800d08c:	6833      	ldrmi	r3, [r6, #0]
 800d08e:	3302      	addmi	r3, #2
 800d090:	6033      	strmi	r3, [r6, #0]
 800d092:	6825      	ldr	r5, [r4, #0]
 800d094:	f015 0506 	ands.w	r5, r5, #6
 800d098:	d106      	bne.n	800d0a8 <_printf_common+0x48>
 800d09a:	f104 0a19 	add.w	sl, r4, #25
 800d09e:	68e3      	ldr	r3, [r4, #12]
 800d0a0:	6832      	ldr	r2, [r6, #0]
 800d0a2:	1a9b      	subs	r3, r3, r2
 800d0a4:	42ab      	cmp	r3, r5
 800d0a6:	dc26      	bgt.n	800d0f6 <_printf_common+0x96>
 800d0a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0ac:	6822      	ldr	r2, [r4, #0]
 800d0ae:	3b00      	subs	r3, #0
 800d0b0:	bf18      	it	ne
 800d0b2:	2301      	movne	r3, #1
 800d0b4:	0692      	lsls	r2, r2, #26
 800d0b6:	d42b      	bmi.n	800d110 <_printf_common+0xb0>
 800d0b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0bc:	4641      	mov	r1, r8
 800d0be:	4638      	mov	r0, r7
 800d0c0:	47c8      	blx	r9
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	d01e      	beq.n	800d104 <_printf_common+0xa4>
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	6922      	ldr	r2, [r4, #16]
 800d0ca:	f003 0306 	and.w	r3, r3, #6
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	bf02      	ittt	eq
 800d0d2:	68e5      	ldreq	r5, [r4, #12]
 800d0d4:	6833      	ldreq	r3, [r6, #0]
 800d0d6:	1aed      	subeq	r5, r5, r3
 800d0d8:	68a3      	ldr	r3, [r4, #8]
 800d0da:	bf0c      	ite	eq
 800d0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0e0:	2500      	movne	r5, #0
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	bfc4      	itt	gt
 800d0e6:	1a9b      	subgt	r3, r3, r2
 800d0e8:	18ed      	addgt	r5, r5, r3
 800d0ea:	2600      	movs	r6, #0
 800d0ec:	341a      	adds	r4, #26
 800d0ee:	42b5      	cmp	r5, r6
 800d0f0:	d11a      	bne.n	800d128 <_printf_common+0xc8>
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	e008      	b.n	800d108 <_printf_common+0xa8>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	4652      	mov	r2, sl
 800d0fa:	4641      	mov	r1, r8
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	47c8      	blx	r9
 800d100:	3001      	adds	r0, #1
 800d102:	d103      	bne.n	800d10c <_printf_common+0xac>
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10c:	3501      	adds	r5, #1
 800d10e:	e7c6      	b.n	800d09e <_printf_common+0x3e>
 800d110:	18e1      	adds	r1, r4, r3
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	2030      	movs	r0, #48	@ 0x30
 800d116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d11a:	4422      	add	r2, r4
 800d11c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d124:	3302      	adds	r3, #2
 800d126:	e7c7      	b.n	800d0b8 <_printf_common+0x58>
 800d128:	2301      	movs	r3, #1
 800d12a:	4622      	mov	r2, r4
 800d12c:	4641      	mov	r1, r8
 800d12e:	4638      	mov	r0, r7
 800d130:	47c8      	blx	r9
 800d132:	3001      	adds	r0, #1
 800d134:	d0e6      	beq.n	800d104 <_printf_common+0xa4>
 800d136:	3601      	adds	r6, #1
 800d138:	e7d9      	b.n	800d0ee <_printf_common+0x8e>
	...

0800d13c <_printf_i>:
 800d13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	7e0f      	ldrb	r7, [r1, #24]
 800d142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d144:	2f78      	cmp	r7, #120	@ 0x78
 800d146:	4691      	mov	r9, r2
 800d148:	4680      	mov	r8, r0
 800d14a:	460c      	mov	r4, r1
 800d14c:	469a      	mov	sl, r3
 800d14e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d152:	d807      	bhi.n	800d164 <_printf_i+0x28>
 800d154:	2f62      	cmp	r7, #98	@ 0x62
 800d156:	d80a      	bhi.n	800d16e <_printf_i+0x32>
 800d158:	2f00      	cmp	r7, #0
 800d15a:	f000 80d1 	beq.w	800d300 <_printf_i+0x1c4>
 800d15e:	2f58      	cmp	r7, #88	@ 0x58
 800d160:	f000 80b8 	beq.w	800d2d4 <_printf_i+0x198>
 800d164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d16c:	e03a      	b.n	800d1e4 <_printf_i+0xa8>
 800d16e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d172:	2b15      	cmp	r3, #21
 800d174:	d8f6      	bhi.n	800d164 <_printf_i+0x28>
 800d176:	a101      	add	r1, pc, #4	@ (adr r1, 800d17c <_printf_i+0x40>)
 800d178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d17c:	0800d1d5 	.word	0x0800d1d5
 800d180:	0800d1e9 	.word	0x0800d1e9
 800d184:	0800d165 	.word	0x0800d165
 800d188:	0800d165 	.word	0x0800d165
 800d18c:	0800d165 	.word	0x0800d165
 800d190:	0800d165 	.word	0x0800d165
 800d194:	0800d1e9 	.word	0x0800d1e9
 800d198:	0800d165 	.word	0x0800d165
 800d19c:	0800d165 	.word	0x0800d165
 800d1a0:	0800d165 	.word	0x0800d165
 800d1a4:	0800d165 	.word	0x0800d165
 800d1a8:	0800d2e7 	.word	0x0800d2e7
 800d1ac:	0800d213 	.word	0x0800d213
 800d1b0:	0800d2a1 	.word	0x0800d2a1
 800d1b4:	0800d165 	.word	0x0800d165
 800d1b8:	0800d165 	.word	0x0800d165
 800d1bc:	0800d309 	.word	0x0800d309
 800d1c0:	0800d165 	.word	0x0800d165
 800d1c4:	0800d213 	.word	0x0800d213
 800d1c8:	0800d165 	.word	0x0800d165
 800d1cc:	0800d165 	.word	0x0800d165
 800d1d0:	0800d2a9 	.word	0x0800d2a9
 800d1d4:	6833      	ldr	r3, [r6, #0]
 800d1d6:	1d1a      	adds	r2, r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6032      	str	r2, [r6, #0]
 800d1dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e09c      	b.n	800d322 <_printf_i+0x1e6>
 800d1e8:	6833      	ldr	r3, [r6, #0]
 800d1ea:	6820      	ldr	r0, [r4, #0]
 800d1ec:	1d19      	adds	r1, r3, #4
 800d1ee:	6031      	str	r1, [r6, #0]
 800d1f0:	0606      	lsls	r6, r0, #24
 800d1f2:	d501      	bpl.n	800d1f8 <_printf_i+0xbc>
 800d1f4:	681d      	ldr	r5, [r3, #0]
 800d1f6:	e003      	b.n	800d200 <_printf_i+0xc4>
 800d1f8:	0645      	lsls	r5, r0, #25
 800d1fa:	d5fb      	bpl.n	800d1f4 <_printf_i+0xb8>
 800d1fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d200:	2d00      	cmp	r5, #0
 800d202:	da03      	bge.n	800d20c <_printf_i+0xd0>
 800d204:	232d      	movs	r3, #45	@ 0x2d
 800d206:	426d      	negs	r5, r5
 800d208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d20c:	4858      	ldr	r0, [pc, #352]	@ (800d370 <_printf_i+0x234>)
 800d20e:	230a      	movs	r3, #10
 800d210:	e011      	b.n	800d236 <_printf_i+0xfa>
 800d212:	6821      	ldr	r1, [r4, #0]
 800d214:	6833      	ldr	r3, [r6, #0]
 800d216:	0608      	lsls	r0, r1, #24
 800d218:	f853 5b04 	ldr.w	r5, [r3], #4
 800d21c:	d402      	bmi.n	800d224 <_printf_i+0xe8>
 800d21e:	0649      	lsls	r1, r1, #25
 800d220:	bf48      	it	mi
 800d222:	b2ad      	uxthmi	r5, r5
 800d224:	2f6f      	cmp	r7, #111	@ 0x6f
 800d226:	4852      	ldr	r0, [pc, #328]	@ (800d370 <_printf_i+0x234>)
 800d228:	6033      	str	r3, [r6, #0]
 800d22a:	bf14      	ite	ne
 800d22c:	230a      	movne	r3, #10
 800d22e:	2308      	moveq	r3, #8
 800d230:	2100      	movs	r1, #0
 800d232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d236:	6866      	ldr	r6, [r4, #4]
 800d238:	60a6      	str	r6, [r4, #8]
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	db05      	blt.n	800d24a <_printf_i+0x10e>
 800d23e:	6821      	ldr	r1, [r4, #0]
 800d240:	432e      	orrs	r6, r5
 800d242:	f021 0104 	bic.w	r1, r1, #4
 800d246:	6021      	str	r1, [r4, #0]
 800d248:	d04b      	beq.n	800d2e2 <_printf_i+0x1a6>
 800d24a:	4616      	mov	r6, r2
 800d24c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d250:	fb03 5711 	mls	r7, r3, r1, r5
 800d254:	5dc7      	ldrb	r7, [r0, r7]
 800d256:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d25a:	462f      	mov	r7, r5
 800d25c:	42bb      	cmp	r3, r7
 800d25e:	460d      	mov	r5, r1
 800d260:	d9f4      	bls.n	800d24c <_printf_i+0x110>
 800d262:	2b08      	cmp	r3, #8
 800d264:	d10b      	bne.n	800d27e <_printf_i+0x142>
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	07df      	lsls	r7, r3, #31
 800d26a:	d508      	bpl.n	800d27e <_printf_i+0x142>
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	6861      	ldr	r1, [r4, #4]
 800d270:	4299      	cmp	r1, r3
 800d272:	bfde      	ittt	le
 800d274:	2330      	movle	r3, #48	@ 0x30
 800d276:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d27a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d27e:	1b92      	subs	r2, r2, r6
 800d280:	6122      	str	r2, [r4, #16]
 800d282:	f8cd a000 	str.w	sl, [sp]
 800d286:	464b      	mov	r3, r9
 800d288:	aa03      	add	r2, sp, #12
 800d28a:	4621      	mov	r1, r4
 800d28c:	4640      	mov	r0, r8
 800d28e:	f7ff fee7 	bl	800d060 <_printf_common>
 800d292:	3001      	adds	r0, #1
 800d294:	d14a      	bne.n	800d32c <_printf_i+0x1f0>
 800d296:	f04f 30ff 	mov.w	r0, #4294967295
 800d29a:	b004      	add	sp, #16
 800d29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	f043 0320 	orr.w	r3, r3, #32
 800d2a6:	6023      	str	r3, [r4, #0]
 800d2a8:	4832      	ldr	r0, [pc, #200]	@ (800d374 <_printf_i+0x238>)
 800d2aa:	2778      	movs	r7, #120	@ 0x78
 800d2ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	6831      	ldr	r1, [r6, #0]
 800d2b4:	061f      	lsls	r7, r3, #24
 800d2b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2ba:	d402      	bmi.n	800d2c2 <_printf_i+0x186>
 800d2bc:	065f      	lsls	r7, r3, #25
 800d2be:	bf48      	it	mi
 800d2c0:	b2ad      	uxthmi	r5, r5
 800d2c2:	6031      	str	r1, [r6, #0]
 800d2c4:	07d9      	lsls	r1, r3, #31
 800d2c6:	bf44      	itt	mi
 800d2c8:	f043 0320 	orrmi.w	r3, r3, #32
 800d2cc:	6023      	strmi	r3, [r4, #0]
 800d2ce:	b11d      	cbz	r5, 800d2d8 <_printf_i+0x19c>
 800d2d0:	2310      	movs	r3, #16
 800d2d2:	e7ad      	b.n	800d230 <_printf_i+0xf4>
 800d2d4:	4826      	ldr	r0, [pc, #152]	@ (800d370 <_printf_i+0x234>)
 800d2d6:	e7e9      	b.n	800d2ac <_printf_i+0x170>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	f023 0320 	bic.w	r3, r3, #32
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	e7f6      	b.n	800d2d0 <_printf_i+0x194>
 800d2e2:	4616      	mov	r6, r2
 800d2e4:	e7bd      	b.n	800d262 <_printf_i+0x126>
 800d2e6:	6833      	ldr	r3, [r6, #0]
 800d2e8:	6825      	ldr	r5, [r4, #0]
 800d2ea:	6961      	ldr	r1, [r4, #20]
 800d2ec:	1d18      	adds	r0, r3, #4
 800d2ee:	6030      	str	r0, [r6, #0]
 800d2f0:	062e      	lsls	r6, r5, #24
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	d501      	bpl.n	800d2fa <_printf_i+0x1be>
 800d2f6:	6019      	str	r1, [r3, #0]
 800d2f8:	e002      	b.n	800d300 <_printf_i+0x1c4>
 800d2fa:	0668      	lsls	r0, r5, #25
 800d2fc:	d5fb      	bpl.n	800d2f6 <_printf_i+0x1ba>
 800d2fe:	8019      	strh	r1, [r3, #0]
 800d300:	2300      	movs	r3, #0
 800d302:	6123      	str	r3, [r4, #16]
 800d304:	4616      	mov	r6, r2
 800d306:	e7bc      	b.n	800d282 <_printf_i+0x146>
 800d308:	6833      	ldr	r3, [r6, #0]
 800d30a:	1d1a      	adds	r2, r3, #4
 800d30c:	6032      	str	r2, [r6, #0]
 800d30e:	681e      	ldr	r6, [r3, #0]
 800d310:	6862      	ldr	r2, [r4, #4]
 800d312:	2100      	movs	r1, #0
 800d314:	4630      	mov	r0, r6
 800d316:	f7f2 ff73 	bl	8000200 <memchr>
 800d31a:	b108      	cbz	r0, 800d320 <_printf_i+0x1e4>
 800d31c:	1b80      	subs	r0, r0, r6
 800d31e:	6060      	str	r0, [r4, #4]
 800d320:	6863      	ldr	r3, [r4, #4]
 800d322:	6123      	str	r3, [r4, #16]
 800d324:	2300      	movs	r3, #0
 800d326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d32a:	e7aa      	b.n	800d282 <_printf_i+0x146>
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	4632      	mov	r2, r6
 800d330:	4649      	mov	r1, r9
 800d332:	4640      	mov	r0, r8
 800d334:	47d0      	blx	sl
 800d336:	3001      	adds	r0, #1
 800d338:	d0ad      	beq.n	800d296 <_printf_i+0x15a>
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	079b      	lsls	r3, r3, #30
 800d33e:	d413      	bmi.n	800d368 <_printf_i+0x22c>
 800d340:	68e0      	ldr	r0, [r4, #12]
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	4298      	cmp	r0, r3
 800d346:	bfb8      	it	lt
 800d348:	4618      	movlt	r0, r3
 800d34a:	e7a6      	b.n	800d29a <_printf_i+0x15e>
 800d34c:	2301      	movs	r3, #1
 800d34e:	4632      	mov	r2, r6
 800d350:	4649      	mov	r1, r9
 800d352:	4640      	mov	r0, r8
 800d354:	47d0      	blx	sl
 800d356:	3001      	adds	r0, #1
 800d358:	d09d      	beq.n	800d296 <_printf_i+0x15a>
 800d35a:	3501      	adds	r5, #1
 800d35c:	68e3      	ldr	r3, [r4, #12]
 800d35e:	9903      	ldr	r1, [sp, #12]
 800d360:	1a5b      	subs	r3, r3, r1
 800d362:	42ab      	cmp	r3, r5
 800d364:	dcf2      	bgt.n	800d34c <_printf_i+0x210>
 800d366:	e7eb      	b.n	800d340 <_printf_i+0x204>
 800d368:	2500      	movs	r5, #0
 800d36a:	f104 0619 	add.w	r6, r4, #25
 800d36e:	e7f5      	b.n	800d35c <_printf_i+0x220>
 800d370:	0800d7e9 	.word	0x0800d7e9
 800d374:	0800d7fa 	.word	0x0800d7fa

0800d378 <memmove>:
 800d378:	4288      	cmp	r0, r1
 800d37a:	b510      	push	{r4, lr}
 800d37c:	eb01 0402 	add.w	r4, r1, r2
 800d380:	d902      	bls.n	800d388 <memmove+0x10>
 800d382:	4284      	cmp	r4, r0
 800d384:	4623      	mov	r3, r4
 800d386:	d807      	bhi.n	800d398 <memmove+0x20>
 800d388:	1e43      	subs	r3, r0, #1
 800d38a:	42a1      	cmp	r1, r4
 800d38c:	d008      	beq.n	800d3a0 <memmove+0x28>
 800d38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d392:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d396:	e7f8      	b.n	800d38a <memmove+0x12>
 800d398:	4402      	add	r2, r0
 800d39a:	4601      	mov	r1, r0
 800d39c:	428a      	cmp	r2, r1
 800d39e:	d100      	bne.n	800d3a2 <memmove+0x2a>
 800d3a0:	bd10      	pop	{r4, pc}
 800d3a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3aa:	e7f7      	b.n	800d39c <memmove+0x24>

0800d3ac <_sbrk_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4d06      	ldr	r5, [pc, #24]	@ (800d3c8 <_sbrk_r+0x1c>)
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	602b      	str	r3, [r5, #0]
 800d3b8:	f7f6 f9c8 	bl	800374c <_sbrk>
 800d3bc:	1c43      	adds	r3, r0, #1
 800d3be:	d102      	bne.n	800d3c6 <_sbrk_r+0x1a>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	b103      	cbz	r3, 800d3c6 <_sbrk_r+0x1a>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	200040cc 	.word	0x200040cc

0800d3cc <_realloc_r>:
 800d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	b921      	cbnz	r1, 800d3e2 <_realloc_r+0x16>
 800d3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	4611      	mov	r1, r2
 800d3de:	f7ff bc5b 	b.w	800cc98 <_malloc_r>
 800d3e2:	b92a      	cbnz	r2, 800d3f0 <_realloc_r+0x24>
 800d3e4:	f7ff fbec 	bl	800cbc0 <_free_r>
 800d3e8:	4625      	mov	r5, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f0:	f000 f81a 	bl	800d428 <_malloc_usable_size_r>
 800d3f4:	4284      	cmp	r4, r0
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	d802      	bhi.n	800d400 <_realloc_r+0x34>
 800d3fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3fe:	d8f4      	bhi.n	800d3ea <_realloc_r+0x1e>
 800d400:	4621      	mov	r1, r4
 800d402:	4638      	mov	r0, r7
 800d404:	f7ff fc48 	bl	800cc98 <_malloc_r>
 800d408:	4680      	mov	r8, r0
 800d40a:	b908      	cbnz	r0, 800d410 <_realloc_r+0x44>
 800d40c:	4645      	mov	r5, r8
 800d40e:	e7ec      	b.n	800d3ea <_realloc_r+0x1e>
 800d410:	42b4      	cmp	r4, r6
 800d412:	4622      	mov	r2, r4
 800d414:	4629      	mov	r1, r5
 800d416:	bf28      	it	cs
 800d418:	4632      	movcs	r2, r6
 800d41a:	f7ff fbc3 	bl	800cba4 <memcpy>
 800d41e:	4629      	mov	r1, r5
 800d420:	4638      	mov	r0, r7
 800d422:	f7ff fbcd 	bl	800cbc0 <_free_r>
 800d426:	e7f1      	b.n	800d40c <_realloc_r+0x40>

0800d428 <_malloc_usable_size_r>:
 800d428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42c:	1f18      	subs	r0, r3, #4
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bfbc      	itt	lt
 800d432:	580b      	ldrlt	r3, [r1, r0]
 800d434:	18c0      	addlt	r0, r0, r3
 800d436:	4770      	bx	lr

0800d438 <_init>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	bf00      	nop
 800d43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43e:	bc08      	pop	{r3}
 800d440:	469e      	mov	lr, r3
 800d442:	4770      	bx	lr

0800d444 <_fini>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	bf00      	nop
 800d448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44a:	bc08      	pop	{r3}
 800d44c:	469e      	mov	lr, r3
 800d44e:	4770      	bx	lr
