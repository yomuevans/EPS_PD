
EPSPD_STM32L496VGTRTOS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800d590  0800d590  0000e590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d94c  0800d94c  0000f218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d94c  0800d94c  0000e94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d954  0800d954  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d958  0800d958  0000e958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800d95c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec4  20000218  0800db74  0000f218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  0800db74  000100dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b70e  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a39  00000000  00000000  0003a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  00040390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bcc  00000000  00000000  000426e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000308ee  00000000  00000000  000442ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bcf2  00000000  00000000  00074b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012689d  00000000  00000000  000a088c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d0c  00000000  00000000  001c716c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001d0e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d578 	.word	0x0800d578

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	0800d578 	.word	0x0800d578

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <EPS_Log_Message>:

void EPS_Log_SetLevel(EPS_LogLevel level) {
    current_log_level = level;
}

void EPS_Log_Message(EPS_LogLevel level, const char *format, ...) {
 8000da8:	b40e      	push	{r1, r2, r3}
 8000daa:	b590      	push	{r4, r7, lr}
 8000dac:	b0cc      	sub	sp, #304	@ 0x130
 8000dae:	af04      	add	r7, sp, #16
 8000db0:	4602      	mov	r2, r0
 8000db2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000db6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dba:	701a      	strb	r2, [r3, #0]
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <EPS_Log_Message+0x10c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000dc4:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d867      	bhi.n	8000e9e <EPS_Log_Message+0xf6>
 8000dce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dd2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d060      	beq.n	8000e9e <EPS_Log_Message+0xf6>

    char buffer[LOG_BUFFER_SIZE];
    int offset = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    uint64_t counter;
    uint32_t subtick;
    GetSyncTimestamp(&counter, &subtick);
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 febb 	bl	8001b68 <GetSyncTimestamp>

    offset += snprintf(buffer, LOG_BUFFER_SIZE, "%s[%llu.%06lu] ",
 8000df2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000df6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <EPS_Log_Message+0x110>)
 8000dfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e06:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000e0a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000e0e:	6809      	ldr	r1, [r1, #0]
 8000e10:	f107 0018 	add.w	r0, r7, #24
 8000e14:	9102      	str	r1, [sp, #8]
 8000e16:	e9cd 2300 	strd	r2, r3, [sp]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <EPS_Log_Message+0x114>)
 8000e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e22:	f00b fe89 	bl	800cb38 <sniprintf>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                       log_prefixes[level], counter, (unsigned long)subtick);

    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db33      	blt.n	8000ea2 <EPS_Log_Message+0xfa>
 8000e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e3e:	2bff      	cmp	r3, #255	@ 0xff
 8000e40:	dc2f      	bgt.n	8000ea2 <EPS_Log_Message+0xfa>

    va_list args;
    va_start(args, format);
 8000e42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e4e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, LOG_BUFFER_SIZE - offset, format, args);
 8000e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e54:	f107 0218 	add.w	r2, r7, #24
 8000e58:	18d0      	adds	r0, r2, r3
 8000e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e5e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e62:	4619      	mov	r1, r3
 8000e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e72:	f00b fec5 	bl	800cc00 <vsniprintf>
    va_end(args);

    size_t msg_len = strnlen(buffer, LOG_BUFFER_SIZE);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00b fef7 	bl	800cc72 <strnlen>
 8000e84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, msg_len, HAL_MAX_DELAY);
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0118 	add.w	r1, r7, #24
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <EPS_Log_Message+0x118>)
 8000e98:	f007 fd4c 	bl	8008934 <HAL_UART_Transmit>
 8000e9c:	e002      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (level > current_log_level || level == EPS_LOG_OFF) return;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <EPS_Log_Message+0xfc>
    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8000ea2:	bf00      	nop
}
 8000ea4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000eae:	b003      	add	sp, #12
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000018 	.word	0x20000018
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	0800d5bc 	.word	0x0800d5bc
 8000ec0:	20000814 	.word	0x20000814

08000ec4 <software_delay_start>:
#include "delay.h" // Include the header file for software delay functions
#include "stm32l4xx_hal.h" // Include HAL library for STM32



static inline void software_delay_start(SoftwareDelay_t* timer, uint32_t delay_ms) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    timer->start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <software_delay_start+0x28>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
    timer->delay_ms = delay_ms;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000730 	.word	0x20000730

08000ef0 <software_delay_elapsed>:

static inline uint8_t software_delay_elapsed(SoftwareDelay_t* timer) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    uint32_t elapsed_us = (__HAL_TIM_GET_COUNTER(&htim2) - timer->start_time);
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <software_delay_elapsed+0x3c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	60fb      	str	r3, [r7, #12]
    return (elapsed_us >= (timer->delay_ms * 1000));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	bf2c      	ite	cs
 8000f18:	2301      	movcs	r3, #1
 8000f1a:	2300      	movcc	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000730 	.word	0x20000730

08000f30 <SoftwareDelay>:

void SoftwareDelay(uint32_t delay_ms) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    SoftwareDelay_t timer;
    software_delay_start(&timer, delay_ms);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffc0 	bl	8000ec4 <software_delay_start>
    while (!software_delay_elapsed(&timer));
 8000f44:	bf00      	nop
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffd0 	bl	8000ef0 <software_delay_elapsed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f7      	beq.n	8000f46 <SoftwareDelay+0x16>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <acquire_eeprom_lock>:
    uint16_t lock_value;
    uint32_t timestamp;
} EEPROM_Lock;

bool acquire_eeprom_lock(uint8_t mcu_id)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 8000f6a:	f002 fd29 	bl	80039c0 <HAL_GetTick>
 8000f6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    EEPROM_Lock current_lock;
    EEPROM_Lock new_lock = {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <acquire_eeprom_lock+0x1c>
 8000f76:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8000f7a:	e001      	b.n	8000f80 <acquire_eeprom_lock+0x20>
 8000f7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8000f80:	83bb      	strh	r3, [r7, #28]
        .lock_value = (mcu_id == 1) ? LOCK_MCU1 : LOCK_MCU2,
        .timestamp = HAL_GetTick()
 8000f82:	f002 fd1d 	bl	80039c0 <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
    EEPROM_Lock new_lock = {
 8000f88:	623b      	str	r3, [r7, #32]
    };

    uint8_t lock_addr[2] = { LOCK_ADDRESS >> 8, LOCK_ADDRESS & 0xFF };
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	833b      	strh	r3, [r7, #24]

    while ((HAL_GetTick() - start_time) < LOCK_TIMEOUT_MS)
 8000f8e:	e051      	b.n	8001034 <acquire_eeprom_lock+0xd4>
    {
        HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, lock_addr, 2, 100);
 8000f90:	f107 0218 	add.w	r2, r7, #24
 8000f94:	2364      	movs	r3, #100	@ 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	21a0      	movs	r1, #160	@ 0xa0
 8000f9c:	482c      	ldr	r0, [pc, #176]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000f9e:	f004 fd29 	bl	80059f4 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, (uint8_t *)&current_lock, sizeof(current_lock), 100);
 8000fa2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000fa6:	2364      	movs	r3, #100	@ 0x64
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2308      	movs	r3, #8
 8000fac:	21a0      	movs	r1, #160	@ 0xa0
 8000fae:	4828      	ldr	r0, [pc, #160]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000fb0:	f004 fe38 	bl	8005c24 <HAL_I2C_Master_Receive>

        if (current_lock.lock_value == 0 ||
 8000fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <acquire_eeprom_lock+0x6c>
            (HAL_GetTick() - current_lock.timestamp) > LOCK_TIMEOUT_MS)
 8000fba:	f002 fd01 	bl	80039c0 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	1ad3      	subs	r3, r2, r3
        if (current_lock.lock_value == 0 ||
 8000fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d930      	bls.n	800102e <acquire_eeprom_lock+0xce>
        {
            uint8_t txbuf[2 + sizeof(EEPROM_Lock)];
            txbuf[0] = lock_addr[0];
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	733b      	strb	r3, [r7, #12]
            txbuf[1] = lock_addr[1];
 8000fd0:	7e7b      	ldrb	r3, [r7, #25]
 8000fd2:	737b      	strb	r3, [r7, #13]
            memcpy(&txbuf[2], &new_lock, sizeof(EEPROM_Lock));
 8000fd4:	f107 011c 	add.w	r1, r7, #28
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	3302      	adds	r3, #2
 8000fde:	2208      	movs	r2, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b fe7f 	bl	800cce4 <memcpy>

            HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, txbuf, sizeof(txbuf), 100);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	230a      	movs	r3, #10
 8000ff0:	21a0      	movs	r1, #160	@ 0xa0
 8000ff2:	4817      	ldr	r0, [pc, #92]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 8000ff4:	f004 fcfe 	bl	80059f4 <HAL_I2C_Master_Transmit>
            HAL_Delay(WRITE_DELAY_MS);
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f002 fced 	bl	80039d8 <HAL_Delay>

            HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, lock_addr, 2, 100);
 8000ffe:	f107 0218 	add.w	r2, r7, #24
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	21a0      	movs	r1, #160	@ 0xa0
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 800100c:	f004 fcf2 	bl	80059f4 <HAL_I2C_Master_Transmit>
            HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, (uint8_t *)&current_lock, sizeof(current_lock), 100);
 8001010:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2308      	movs	r3, #8
 800101a:	21a0      	movs	r1, #160	@ 0xa0
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <acquire_eeprom_lock+0xf0>)
 800101e:	f004 fe01 	bl	8005c24 <HAL_I2C_Master_Receive>

            if (current_lock.lock_value == new_lock.lock_value)
 8001022:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001024:	8bbb      	ldrh	r3, [r7, #28]
 8001026:	429a      	cmp	r2, r3
 8001028:	d101      	bne.n	800102e <acquire_eeprom_lock+0xce>
                return true;
 800102a:	2301      	movs	r3, #1
 800102c:	e00c      	b.n	8001048 <acquire_eeprom_lock+0xe8>
        }
        HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f002 fcd2 	bl	80039d8 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < LOCK_TIMEOUT_MS)
 8001034:	f002 fcc4 	bl	80039c0 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001042:	4293      	cmp	r3, r2
 8001044:	d9a4      	bls.n	8000f90 <acquire_eeprom_lock+0x30>
    }
    return false;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000538 	.word	0x20000538

08001054 <release_eeprom_lock>:

void release_eeprom_lock(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af02      	add	r7, sp, #8
    EEPROM_Lock unlock = { .lock_value = 0, .timestamp = 0 };
 800105a:	2300      	movs	r3, #0
 800105c:	823b      	strh	r3, [r7, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    uint8_t txbuf[2 + sizeof(EEPROM_Lock)];
    txbuf[0] = LOCK_ADDRESS >> 8;
 8001062:	2300      	movs	r3, #0
 8001064:	713b      	strb	r3, [r7, #4]
    txbuf[1] = LOCK_ADDRESS & 0xFF;
 8001066:	2300      	movs	r3, #0
 8001068:	717b      	strb	r3, [r7, #5]
    memcpy(&txbuf[2], &unlock, sizeof(EEPROM_Lock));
 800106a:	f107 0110 	add.w	r1, r7, #16
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	3302      	adds	r3, #2
 8001072:	2208      	movs	r2, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f00b fe35 	bl	800cce4 <memcpy>

    HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, txbuf, sizeof(txbuf), 100);
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	230a      	movs	r3, #10
 8001082:	21a0      	movs	r1, #160	@ 0xa0
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <release_eeprom_lock+0x44>)
 8001086:	f004 fcb5 	bl	80059f4 <HAL_I2C_Master_Transmit>
    HAL_Delay(WRITE_DELAY_MS);
 800108a:	2005      	movs	r0, #5
 800108c:	f002 fca4 	bl	80039d8 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000538 	.word	0x20000538

0800109c <verify_write_success>:
    {
        release_eeprom_lock();
    }
}

static bool verify_write_success(uint16_t address, uint8_t* data, uint16_t size) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	@ 0x58
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80bb      	strh	r3, [r7, #4]
    uint8_t tx[2] = { address >> 8, address & 0xFF };
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t read_back[64];

    if (size > sizeof(read_back)) return false;
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	2b40      	cmp	r3, #64	@ 0x40
 80010c4:	d901      	bls.n	80010ca <verify_write_success+0x2e>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e028      	b.n	800111c <verify_write_success+0x80>

    if (HAL_I2C_Master_Transmit(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, tx, 2, 100) != HAL_OK)
 80010ca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	21a0      	movs	r1, #160	@ 0xa0
 80010d6:	4813      	ldr	r0, [pc, #76]	@ (8001124 <verify_write_success+0x88>)
 80010d8:	f004 fc8c 	bl	80059f4 <HAL_I2C_Master_Transmit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <verify_write_success+0x4a>
        return false;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e01a      	b.n	800111c <verify_write_success+0x80>

    if (HAL_I2C_Master_Receive(&hi2c2, epspd_I2C_ADDR_MEMORY << 1, read_back, size, 100) != HAL_OK)
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	2164      	movs	r1, #100	@ 0x64
 80010ee:	9100      	str	r1, [sp, #0]
 80010f0:	21a0      	movs	r1, #160	@ 0xa0
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <verify_write_success+0x88>)
 80010f4:	f004 fd96 	bl	8005c24 <HAL_I2C_Master_Receive>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <verify_write_success+0x66>
        return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e00c      	b.n	800111c <verify_write_success+0x80>

    return (memcmp(data, read_back, size) == 0);
 8001102:	88ba      	ldrh	r2, [r7, #4]
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f00b fd86 	bl	800cc1c <memcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3750      	adds	r7, #80	@ 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000538 	.word	0x20000538

08001128 <epspd_WriteTelemetry>:
        SoftwareDelay(1);
    }
    return status;
}

HAL_StatusTypeDef epspd_WriteTelemetry(I2C_HandleTypeDef *hi2c, EEPROM_TelemetryWithTimestamp *telemetry) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    if (!acquire_eeprom_lock(MCU_ID)) return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ff14 	bl	8000f60 <acquire_eeprom_lock>
 8001138:	4603      	mov	r3, r0
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <epspd_WriteTelemetry+0x20>
 8001144:	2301      	movs	r3, #1
 8001146:	e0b7      	b.n	80012b8 <epspd_WriteTelemetry+0x190>

    uint8_t buffer[20];
    buffer[0] = EEPROM_ADDR_MCU1_TELEMETRY >> 8;
 8001148:	2301      	movs	r3, #1
 800114a:	723b      	strb	r3, [r7, #8]
    buffer[1] = EEPROM_ADDR_MCU1_TELEMETRY & 0xFF;
 800114c:	2300      	movs	r3, #0
 800114e:	727b      	strb	r3, [r7, #9]
    buffer[2] = telemetry->telemetry.Bus12V >> 8;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b29b      	uxth	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	72bb      	strb	r3, [r7, #10]
    buffer[3] = telemetry->telemetry.Bus12V;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
    buffer[4] = telemetry->telemetry.Bus5V >> 8;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	885b      	ldrh	r3, [r3, #2]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	733b      	strb	r3, [r7, #12]
    buffer[5] = telemetry->telemetry.Bus5V;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	737b      	strb	r3, [r7, #13]
    buffer[6] = telemetry->telemetry.Bus3V3 >> 8;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73bb      	strb	r3, [r7, #14]
    buffer[7] = telemetry->telemetry.Bus3V3;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
    buffer[8] = telemetry->telemetry.subtick_us >> 24;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	0e1b      	lsrs	r3, r3, #24
 8001192:	b2db      	uxtb	r3, r3
 8001194:	743b      	strb	r3, [r7, #16]
    buffer[9] = telemetry->telemetry.subtick_us >> 16;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	b2db      	uxtb	r3, r3
 800119e:	747b      	strb	r3, [r7, #17]
    buffer[10] = telemetry->telemetry.subtick_us >> 8;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	74bb      	strb	r3, [r7, #18]
    buffer[11] = telemetry->telemetry.subtick_us;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	74fb      	strb	r3, [r7, #19]
    buffer[12] = telemetry->counter >> 56;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	0e0a      	lsrs	r2, r1, #24
 80011c2:	2300      	movs	r3, #0
 80011c4:	b2d3      	uxtb	r3, r2
 80011c6:	753b      	strb	r3, [r7, #20]
    buffer[13] = telemetry->counter >> 48;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	0c0a      	lsrs	r2, r1, #16
 80011d8:	2300      	movs	r3, #0
 80011da:	b2d3      	uxtb	r3, r2
 80011dc:	757b      	strb	r3, [r7, #21]
    buffer[14] = telemetry->counter >> 40;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0a0a      	lsrs	r2, r1, #8
 80011ee:	2300      	movs	r3, #0
 80011f0:	b2d3      	uxtb	r3, r2
 80011f2:	75bb      	strb	r3, [r7, #22]
    buffer[15] = telemetry->counter >> 32;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	000a      	movs	r2, r1
 8001204:	2300      	movs	r3, #0
 8001206:	b2d3      	uxtb	r3, r2
 8001208:	75fb      	strb	r3, [r7, #23]
    buffer[16] = telemetry->counter >> 24;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	0e02      	lsrs	r2, r0, #24
 800121a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800121e:	0e0b      	lsrs	r3, r1, #24
 8001220:	b2d3      	uxtb	r3, r2
 8001222:	763b      	strb	r3, [r7, #24]
    buffer[17] = telemetry->counter >> 16;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	0c02      	lsrs	r2, r0, #16
 8001234:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001238:	0c0b      	lsrs	r3, r1, #16
 800123a:	b2d3      	uxtb	r3, r2
 800123c:	767b      	strb	r3, [r7, #25]
    buffer[18] = telemetry->counter >> 8;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	0a02      	lsrs	r2, r0, #8
 800124e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001252:	0a0b      	lsrs	r3, r1, #8
 8001254:	b2d3      	uxtb	r3, r2
 8001256:	76bb      	strb	r3, [r7, #26]
    buffer[19] = telemetry->counter;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800125e:	b2d3      	uxtb	r3, r2
 8001260:	76fb      	strb	r3, [r7, #27]

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, epspd_I2C_ADDR_MEMORY << 1, buffer, 20, 100);
 8001262:	f107 0208 	add.w	r2, r7, #8
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2314      	movs	r3, #20
 800126c:	21a0      	movs	r1, #160	@ 0xa0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f004 fbc0 	bl	80059f4 <HAL_I2C_Master_Transmit>
 8001274:	4603      	mov	r3, r0
 8001276:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK) {
 8001278:	7ffb      	ldrb	r3, [r7, #31]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <epspd_WriteTelemetry+0x18a>
        SoftwareDelay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fe56 	bl	8000f30 <SoftwareDelay>

        if (!verify_write_success(EEPROM_ADDR_MCU1_TELEMETRY, &buffer[2], 18)) {
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	3302      	adds	r3, #2
 800128a:	2212      	movs	r2, #18
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001292:	f7ff ff03 	bl	800109c <verify_write_success>
 8001296:	4603      	mov	r3, r0
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <epspd_WriteTelemetry+0x18a>
            EPS_Log_Message(EPS_LOG_DEBUG, "EEPROM write verification failed");
 80012a2:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <epspd_WriteTelemetry+0x198>)
 80012a4:	2005      	movs	r0, #5
 80012a6:	f7ff fd7f 	bl	8000da8 <EPS_Log_Message>
            release_eeprom_lock();
 80012aa:	f7ff fed3 	bl	8001054 <release_eeprom_lock>
            Error_Handler();
 80012ae:	f001 fd81 	bl	8002db4 <Error_Handler>
        }
    }

    release_eeprom_lock();
 80012b2:	f7ff fecf 	bl	8001054 <release_eeprom_lock>
    return status;
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800d62c 	.word	0x0800d62c

080012c4 <EPS_LogFault>:
} FaultState;

static FaultState fault_states[sizeof(fault_config) / sizeof(FaultConfig)];
static uint8_t fault_log_index = 0;

void EPS_LogFault(I2C_HandleTypeDef *hi2c, const char *desc, uint8_t subsystem_id, uint8_t retry_count) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a2      	sub	sp, #136	@ 0x88
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	4613      	mov	r3, r2
 80012d8:	71bb      	strb	r3, [r7, #6]
    EEPROM_FaultLog log;
    memset(&log, 0, sizeof(log));
 80012da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012de:	2230      	movs	r2, #48	@ 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00b fcaa 	bl	800cc3c <memset>
    log.subsystem_id = subsystem_id;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    log.retry_count = retry_count;
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    strncpy(log.description, desc, FAULT_DESC_LEN - 1);
 80012f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012f8:	330e      	adds	r3, #14
 80012fa:	221f      	movs	r2, #31
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	4618      	mov	r0, r3
 8001300:	f00b fca4 	bl	800cc4c <strncpy>
    GetSyncTimestamp(&log.counter, &log.subtick_us);
 8001304:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001308:	f103 0208 	add.w	r2, r3, #8
 800130c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fc28 	bl	8001b68 <GetSyncTimestamp>

    uint16_t eeprom_addr = FAULT_LOG_START_ADDR + (fault_log_index * FAULT_LOG_SIZE);
 8001318:	4b20      	ldr	r3, [pc, #128]	@ (800139c <EPS_LogFault+0xd8>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	0052      	lsls	r2, r2, #1
 8001320:	4413      	add	r3, r2
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b29b      	uxth	r3, r3
 8001326:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800132a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t buffer[2 + FAULT_LOG_SIZE];
    buffer[0] = eeprom_addr >> 8;
 800132e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	753b      	strb	r3, [r7, #20]
    buffer[1] = eeprom_addr & 0xFF;
 800133a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800133e:	b2db      	uxtb	r3, r3
 8001340:	757b      	strb	r3, [r7, #21]
    memcpy(&buffer[2], &log, FAULT_LOG_SIZE);
 8001342:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	3302      	adds	r3, #2
 800134c:	2230      	movs	r2, #48	@ 0x30
 800134e:	4618      	mov	r0, r3
 8001350:	f00b fcc8 	bl	800cce4 <memcpy>

    if (HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDR, buffer, sizeof(buffer), 100) == HAL_OK) {
 8001354:	f107 0214 	add.w	r2, r7, #20
 8001358:	2364      	movs	r3, #100	@ 0x64
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2332      	movs	r3, #50	@ 0x32
 800135e:	21a0      	movs	r1, #160	@ 0xa0
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f004 fb47 	bl	80059f4 <HAL_I2C_Master_Transmit>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d113      	bne.n	8001394 <EPS_LogFault+0xd0>
        SoftwareDelay(4);
 800136c:	2004      	movs	r0, #4
 800136e:	f7ff fddf 	bl	8000f30 <SoftwareDelay>
        fault_log_index = (fault_log_index + 1) % MAX_FAULT_LOGS;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <EPS_LogFault+0xd8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <EPS_LogFault+0xdc>)
 800137a:	fb83 1302 	smull	r1, r3, r3, r2
 800137e:	10d9      	asrs	r1, r3, #3
 8001380:	17d3      	asrs	r3, r2, #31
 8001382:	1ac9      	subs	r1, r1, r3
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	1ad1      	subs	r1, r2, r3
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	4b02      	ldr	r3, [pc, #8]	@ (800139c <EPS_LogFault+0xd8>)
 8001392:	701a      	strb	r2, [r3, #0]
    }
}
 8001394:	bf00      	nop
 8001396:	3780      	adds	r7, #128	@ 0x80
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000029c 	.word	0x2000029c
 80013a0:	66666667 	.word	0x66666667

080013a4 <Fault_PollAndHandle>:

void Fault_PollAndHandle(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart_log) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    uint32_t now = HAL_GetTick();
 80013ae:	f002 fb07 	bl	80039c0 <HAL_GetTick>
 80013b2:	6538      	str	r0, [r7, #80]	@ 0x50

    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80013ba:	e168      	b.n	800168e <Fault_PollAndHandle+0x2ea>
        GPIO_PinState state = HAL_GPIO_ReadPin(fault_config[i].fault_port, fault_config[i].fault_pin);
 80013bc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80013c0:	49b8      	ldr	r1, [pc, #736]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80013d2:	49b4      	ldr	r1, [pc, #720]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3304      	adds	r3, #4
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f004 fa18 	bl	8005818 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 80013ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d153      	bne.n	800149e <Fault_PollAndHandle+0xfa>
 80013f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013fa:	4aab      	ldr	r2, [pc, #684]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80013fc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001400:	f083 0301 	eor.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d049      	beq.n	800149e <Fault_PollAndHandle+0xfa>
            // Fault detected
            fault_states[i].is_active = true;
 800140a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800140e:	4aa6      	ldr	r2, [pc, #664]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001410:	2101      	movs	r1, #1
 8001412:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            fault_states[i].retry_count = 0;
 8001416:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800141a:	4aa3      	ldr	r2, [pc, #652]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 8001424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001428:	4a9f      	ldr	r2, [pc, #636]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001430:	605a      	str	r2, [r3, #4]
            EPS_LogFault(hi2c, fault_config[i].description, fault_config[i].subsystem_id, 0);
 8001432:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001436:	499b      	ldr	r1, [pc, #620]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3310      	adds	r3, #16
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800144a:	4896      	ldr	r0, [pc, #600]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4403      	add	r3, r0
 8001456:	3314      	adds	r3, #20
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff31 	bl	80012c4 <EPS_LogFault>

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Detected\n", fault_config[i].description);
 8001462:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001466:	498f      	ldr	r1, [pc, #572]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	3310      	adds	r3, #16
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f107 000c 	add.w	r0, r7, #12
 800147a:	4a8c      	ldr	r2, [pc, #560]	@ (80016ac <Fault_PollAndHandle+0x308>)
 800147c:	2140      	movs	r1, #64	@ 0x40
 800147e:	f00b fb5b 	bl	800cb38 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe feb2 	bl	80001f0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	2364      	movs	r3, #100	@ 0x64
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f007 fa4c 	bl	8008934 <HAL_UART_Transmit>
        if (state == GPIO_PIN_RESET && !fault_states[i].is_active) {
 800149c:	e0f2      	b.n	8001684 <Fault_PollAndHandle+0x2e0>

        } else if (state == GPIO_PIN_SET && fault_states[i].is_active) {
 800149e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d135      	bne.n	8001512 <Fault_PollAndHandle+0x16e>
 80014a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014aa:	4a7f      	ldr	r2, [pc, #508]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80014ac:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02e      	beq.n	8001512 <Fault_PollAndHandle+0x16e>
            if (now - fault_states[i].last_fault_time > 5) {
 80014b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014b8:	4a7b      	ldr	r2, [pc, #492]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	f240 80dd 	bls.w	8001684 <Fault_PollAndHandle+0x2e0>
                fault_states[i].is_active = false;
 80014ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014ce:	4a76      	ldr	r2, [pc, #472]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

                char msg[64];
                snprintf(msg, sizeof(msg), "%s Fault Cleared\n", fault_config[i].description);
 80014d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80014da:	4972      	ldr	r1, [pc, #456]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3310      	adds	r3, #16
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f107 000c 	add.w	r0, r7, #12
 80014ee:	4a70      	ldr	r2, [pc, #448]	@ (80016b0 <Fault_PollAndHandle+0x30c>)
 80014f0:	2140      	movs	r1, #64	@ 0x40
 80014f2:	f00b fb21 	bl	800cb38 <sniprintf>
                HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fe78 	bl	80001f0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f007 fa12 	bl	8008934 <HAL_UART_Transmit>
            if (now - fault_states[i].last_fault_time > 5) {
 8001510:	e0b8      	b.n	8001684 <Fault_PollAndHandle+0x2e0>
            }

        } else if (fault_states[i].is_active && fault_states[i].retry_count < 5 && fault_config[i].en_port) {
 8001512:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001516:	4a64      	ldr	r2, [pc, #400]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001518:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d05b      	beq.n	80015d8 <Fault_PollAndHandle+0x234>
 8001520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001524:	4a60      	ldr	r2, [pc, #384]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d853      	bhi.n	80015d8 <Fault_PollAndHandle+0x234>
 8001530:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001534:	495b      	ldr	r1, [pc, #364]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3308      	adds	r3, #8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d047      	beq.n	80015d8 <Fault_PollAndHandle+0x234>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 8001548:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800154c:	4955      	ldr	r1, [pc, #340]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3308      	adds	r3, #8
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001560:	4950      	ldr	r1, [pc, #320]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	330c      	adds	r3, #12
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	f004 f968 	bl	8005848 <HAL_GPIO_WritePin>
            SoftwareDelay(100);
 8001578:	2064      	movs	r0, #100	@ 0x64
 800157a:	f7ff fcd9 	bl	8000f30 <SoftwareDelay>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_SET);
 800157e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001582:	4948      	ldr	r1, [pc, #288]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	3308      	adds	r3, #8
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001596:	4943      	ldr	r1, [pc, #268]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	330c      	adds	r3, #12
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4619      	mov	r1, r3
 80015aa:	f004 f94d 	bl	8005848 <HAL_GPIO_WritePin>
            fault_states[i].retry_count++;
 80015ae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80015b2:	493d      	ldr	r1, [pc, #244]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015b4:	00d3      	lsls	r3, r2, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	493a      	ldr	r1, [pc, #232]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015c0:	00d3      	lsls	r3, r2, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	4602      	mov	r2, r0
 80015c6:	705a      	strb	r2, [r3, #1]
            fault_states[i].last_fault_time = now;
 80015c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80015cc:	4a36      	ldr	r2, [pc, #216]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	e055      	b.n	8001684 <Fault_PollAndHandle+0x2e0>

        } else if (fault_states[i].is_active && fault_states[i].retry_count >= 5 && fault_config[i].en_port) {
 80015d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80015dc:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015de:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04e      	beq.n	8001684 <Fault_PollAndHandle+0x2e0>
 80015e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80015ea:	4a2f      	ldr	r2, [pc, #188]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d946      	bls.n	8001684 <Fault_PollAndHandle+0x2e0>
 80015f6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80015fa:	492a      	ldr	r1, [pc, #168]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3308      	adds	r3, #8
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03a      	beq.n	8001684 <Fault_PollAndHandle+0x2e0>
            HAL_GPIO_WritePin(fault_config[i].en_port, fault_config[i].en_pin, GPIO_PIN_RESET);
 800160e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001612:	4924      	ldr	r1, [pc, #144]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3308      	adds	r3, #8
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001626:	491f      	ldr	r1, [pc, #124]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	330c      	adds	r3, #12
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	f004 f905 	bl	8005848 <HAL_GPIO_WritePin>
            fault_states[i].is_active = false;
 800163e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001642:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <Fault_PollAndHandle+0x304>)
 8001644:	2100      	movs	r1, #0
 8001646:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

            char msg[64];
            snprintf(msg, sizeof(msg), "%s Fault Persistent: Disabled\n", fault_config[i].description);
 800164a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800164e:	4915      	ldr	r1, [pc, #84]	@ (80016a4 <Fault_PollAndHandle+0x300>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3310      	adds	r3, #16
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f107 000c 	add.w	r0, r7, #12
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <Fault_PollAndHandle+0x310>)
 8001664:	2140      	movs	r1, #64	@ 0x40
 8001666:	f00b fa67 	bl	800cb38 <sniprintf>
            HAL_UART_Transmit(huart_log, (uint8_t*)msg, strlen(msg), 100);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fdbe 	bl	80001f0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 010c 	add.w	r1, r7, #12
 800167c:	2364      	movs	r3, #100	@ 0x64
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f007 f958 	bl	8008934 <HAL_UART_Transmit>
    for (uint8_t i = 0; i < sizeof(fault_config)/sizeof(FaultConfig); ++i) {
 8001684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001688:	3301      	adds	r3, #1
 800168a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800168e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001692:	2b0c      	cmp	r3, #12
 8001694:	f67f ae92 	bls.w	80013bc <Fault_PollAndHandle+0x18>
        }
    }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3758      	adds	r7, #88	@ 0x58
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000001c 	.word	0x2000001c
 80016a8:	20000234 	.word	0x20000234
 80016ac:	0800d6a4 	.word	0x0800d6a4
 80016b0:	0800d6b8 	.word	0x0800d6b8
 80016b4:	0800d6cc 	.word	0x0800d6cc

080016b8 <EPS_I2C_CRC8>:
#define MAX_FRAME_SIZE      256
#define CRC_SIZE            1
#define MAX_I2C_RETRIES     5

// CRC-8/MAXIM: x⁸ + x⁵ + x⁴ + 1 → Polynomial = 0x31
uint8_t EPS_I2C_CRC8(const uint8_t *data, uint8_t len) {
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
 80016cc:	e023      	b.n	8001716 <EPS_I2C_CRC8+0x5e>
        crc ^= data[i];
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	4053      	eors	r3, r2
 80016da:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	737b      	strb	r3, [r7, #13]
 80016e0:	e013      	b.n	800170a <EPS_I2C_CRC8+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da08      	bge.n	80016fc <EPS_I2C_CRC8+0x44>
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e002      	b.n	8001702 <EPS_I2C_CRC8+0x4a>
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	3301      	adds	r3, #1
 8001708:	737b      	strb	r3, [r7, #13]
 800170a:	7b7b      	ldrb	r3, [r7, #13]
 800170c:	2b07      	cmp	r3, #7
 800170e:	d9e8      	bls.n	80016e2 <EPS_I2C_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	3301      	adds	r3, #1
 8001714:	73bb      	strb	r3, [r7, #14]
 8001716:	7bba      	ldrb	r2, [r7, #14]
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3d7      	bcc.n	80016ce <EPS_I2C_CRC8+0x16>
        }
    }
    return crc;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <EPS_I2C_TransmitReceiveWithRetry>:
    I2C_HandleTypeDef *hi2c,
    uint8_t cmd,
    const uint8_t *tx_payload, uint8_t tx_len,
    uint8_t *rx_payload, uint8_t *rx_len,  // in: max size; out: actual
    uint16_t slave_addr)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001732:	af02      	add	r7, sp, #8
 8001734:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8001738:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 800173c:	6020      	str	r0, [r4, #0]
 800173e:	4608      	mov	r0, r1
 8001740:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8001744:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8001748:	600a      	str	r2, [r1, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001750:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001754:	4602      	mov	r2, r0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800175c:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8001760:	460a      	mov	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
    if (tx_len > BMS_MAX_PAYLOAD_LEN || *rx_len > BMS_MAX_PAYLOAD_LEN)
 8001764:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001768:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2bfd      	cmp	r3, #253	@ 0xfd
 8001770:	d804      	bhi.n	800177c <EPS_I2C_TransmitReceiveWithRetry+0x50>
 8001772:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2bfd      	cmp	r3, #253	@ 0xfd
 800177a:	d901      	bls.n	8001780 <EPS_I2C_TransmitReceiveWithRetry+0x54>
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0fd      	b.n	800197c <EPS_I2C_TransmitReceiveWithRetry+0x250>

    HAL_StatusTypeDef status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215

    for (uint8_t attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800178c:	e0f0      	b.n	8001970 <EPS_I2C_TransmitReceiveWithRetry+0x244>
        uint8_t tx_buf[MAX_FRAME_SIZE];
        uint8_t tx_pos = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

        // [0] CMD
        tx_buf[tx_pos++] = cmd;
 8001794:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	f887 2216 	strb.w	r2, [r7, #534]	@ 0x216
 800179e:	4619      	mov	r1, r3
 80017a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017a4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80017a8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80017ac:	f2a2 220d 	subw	r2, r2, #525	@ 0x20d
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	545a      	strb	r2, [r3, r1]

        // [1] LEN
        tx_buf[tx_pos++] = tx_len;
 80017b4:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	f887 2216 	strb.w	r2, [r7, #534]	@ 0x216
 80017be:	4619      	mov	r1, r3
 80017c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017c4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80017c8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80017cc:	f2a2 220e 	subw	r2, r2, #526	@ 0x20e
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	545a      	strb	r2, [r3, r1]

        // [2:N] PAYLOAD
        if (tx_len && tx_payload) {
 80017d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017d8:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d021      	beq.n	8001826 <EPS_I2C_TransmitReceiveWithRetry+0xfa>
 80017e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017e6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01a      	beq.n	8001826 <EPS_I2C_TransmitReceiveWithRetry+0xfa>
            memcpy(&tx_buf[tx_pos], tx_payload, tx_len);
 80017f0:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80017f4:	f107 0210 	add.w	r2, r7, #16
 80017f8:	18d0      	adds	r0, r2, r3
 80017fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017fe:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001808:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	f00b fa69 	bl	800cce4 <memcpy>
            tx_pos += tx_len;
 8001812:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001816:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800181a:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4413      	add	r3, r2
 8001822:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
        }

        // [N+1] CRC
        tx_buf[tx_pos++] = EPS_I2C_CRC8(tx_buf, 2 + tx_len);
 8001826:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800182a:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3302      	adds	r3, #2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8001838:	1c59      	adds	r1, r3, #1
 800183a:	f887 1216 	strb.w	r1, [r7, #534]	@ 0x216
 800183e:	461c      	mov	r4, r3
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff36 	bl	80016b8 <EPS_I2C_CRC8>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001854:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001858:	551a      	strb	r2, [r3, r4]

        // Transmit full frame
        status = HAL_I2C_Master_Transmit(hi2c, slave_addr, tx_buf, tx_pos, I2C_TIMEOUT_MS);
 800185a:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800185e:	b29b      	uxth	r3, r3
 8001860:	f107 0210 	add.w	r2, r7, #16
 8001864:	f8b7 1230 	ldrh.w	r1, [r7, #560]	@ 0x230
 8001868:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 800186c:	f5a0 7003 	sub.w	r0, r0, #524	@ 0x20c
 8001870:	2464      	movs	r4, #100	@ 0x64
 8001872:	9400      	str	r4, [sp, #0]
 8001874:	6800      	ldr	r0, [r0, #0]
 8001876:	f004 f8bd 	bl	80059f4 <HAL_I2C_Master_Transmit>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
        if (status != HAL_OK) continue;
 8001880:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8001884:	2b00      	cmp	r3, #0
 8001886:	d165      	bne.n	8001954 <EPS_I2C_TransmitReceiveWithRetry+0x228>

        // Prepare RX buffer
        uint8_t rx_buf[MAX_FRAME_SIZE];
        uint8_t expected_rx_len = *rx_len + 3; // CMD + LEN + PAYLOAD + CRC
 8001888:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3303      	adds	r3, #3
 8001890:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214

        status = HAL_I2C_Master_Receive(hi2c, slave_addr, rx_buf, expected_rx_len, I2C_TIMEOUT_MS);
 8001894:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8001898:	b29b      	uxth	r3, r3
 800189a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800189e:	f8b7 1230 	ldrh.w	r1, [r7, #560]	@ 0x230
 80018a2:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 80018a6:	f5a0 7003 	sub.w	r0, r0, #524	@ 0x20c
 80018aa:	2464      	movs	r4, #100	@ 0x64
 80018ac:	9400      	str	r4, [sp, #0]
 80018ae:	6800      	ldr	r0, [r0, #0]
 80018b0:	f004 f9b8 	bl	8005c24 <HAL_I2C_Master_Receive>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
        if (status != HAL_OK) continue;
 80018ba:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d14a      	bne.n	8001958 <EPS_I2C_TransmitReceiveWithRetry+0x22c>

        // Validate response
        uint8_t response_cmd  = rx_buf[0];
 80018c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80018c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
        uint8_t response_len  = rx_buf[1];
 80018d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80018d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
        uint8_t response_crc  = rx_buf[2 + response_len];
 80018de:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80018e2:	3302      	adds	r3, #2
 80018e4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80018e8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

        if (response_cmd != cmd) continue;
 80018f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80018f6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80018fa:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d12b      	bne.n	800195c <EPS_I2C_TransmitReceiveWithRetry+0x230>
        if (response_len > *rx_len) continue;
 8001904:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f897 2212 	ldrb.w	r2, [r7, #530]	@ 0x212
 800190e:	429a      	cmp	r2, r3
 8001910:	d826      	bhi.n	8001960 <EPS_I2C_TransmitReceiveWithRetry+0x234>
        if (EPS_I2C_CRC8(&rx_buf[0], 2 + response_len) != response_crc) continue;
 8001912:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8001916:	3302      	adds	r3, #2
 8001918:	b2da      	uxtb	r2, r3
 800191a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fec9 	bl	80016b8 <EPS_I2C_CRC8>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800192e:	4293      	cmp	r3, r2
 8001930:	d118      	bne.n	8001964 <EPS_I2C_TransmitReceiveWithRetry+0x238>

        // Copy payload to user buffer
        memcpy(rx_payload, &rx_buf[2], response_len);
 8001932:	f897 2212 	ldrb.w	r2, [r7, #530]	@ 0x212
 8001936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800193a:	3302      	adds	r3, #2
 800193c:	4619      	mov	r1, r3
 800193e:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 8001942:	f00b f9cf 	bl	800cce4 <memcpy>
        *rx_len = response_len;
 8001946:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800194a:	f897 2212 	ldrb.w	r2, [r7, #530]	@ 0x212
 800194e:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e013      	b.n	800197c <EPS_I2C_TransmitReceiveWithRetry+0x250>
        if (status != HAL_OK) continue;
 8001954:	bf00      	nop
 8001956:	e006      	b.n	8001966 <EPS_I2C_TransmitReceiveWithRetry+0x23a>
        if (status != HAL_OK) continue;
 8001958:	bf00      	nop
 800195a:	e004      	b.n	8001966 <EPS_I2C_TransmitReceiveWithRetry+0x23a>
        if (response_cmd != cmd) continue;
 800195c:	bf00      	nop
 800195e:	e002      	b.n	8001966 <EPS_I2C_TransmitReceiveWithRetry+0x23a>
        if (response_len > *rx_len) continue;
 8001960:	bf00      	nop
 8001962:	e000      	b.n	8001966 <EPS_I2C_TransmitReceiveWithRetry+0x23a>
        if (EPS_I2C_CRC8(&rx_buf[0], 2 + response_len) != response_crc) continue;
 8001964:	bf00      	nop
    for (uint8_t attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8001966:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800196a:	3301      	adds	r3, #1
 800196c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8001970:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8001974:	2b04      	cmp	r3, #4
 8001976:	f67f af0a 	bls.w	800178e <EPS_I2C_TransmitReceiveWithRetry+0x62>
    }

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}

08001986 <EPS_I2C_SendSyncCounter>:
 * Send CMD_SYNC_COUNTER with 8-byte timestamp and expect ACK response
 */
HAL_StatusTypeDef EPS_I2C_SendSyncCounter(I2C_HandleTypeDef *hi2c,
                                          uint64_t sync_counter,
                                          uint16_t i2c_slave_addr)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b08c      	sub	sp, #48	@ 0x30
 800198a:	af04      	add	r7, sp, #16
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t payload[8];
    payload[0] = (sync_counter >> 56) & 0xFF;
 8001992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	0e0a      	lsrs	r2, r1, #24
 80019a0:	2300      	movs	r3, #0
 80019a2:	b2d3      	uxtb	r3, r2
 80019a4:	763b      	strb	r3, [r7, #24]
    payload[1] = (sync_counter >> 48) & 0xFF;
 80019a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	0c0a      	lsrs	r2, r1, #16
 80019b4:	2300      	movs	r3, #0
 80019b6:	b2d3      	uxtb	r3, r2
 80019b8:	767b      	strb	r3, [r7, #25]
    payload[2] = (sync_counter >> 40) & 0xFF;
 80019ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	0a0a      	lsrs	r2, r1, #8
 80019c8:	2300      	movs	r3, #0
 80019ca:	b2d3      	uxtb	r3, r2
 80019cc:	76bb      	strb	r3, [r7, #26]
    payload[3] = (sync_counter >> 32) & 0xFF;
 80019ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	000a      	movs	r2, r1
 80019dc:	2300      	movs	r3, #0
 80019de:	b2d3      	uxtb	r3, r2
 80019e0:	76fb      	strb	r3, [r7, #27]
    payload[4] = (sync_counter >> 24) & 0xFF;
 80019e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	0e02      	lsrs	r2, r0, #24
 80019f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019f4:	0e0b      	lsrs	r3, r1, #24
 80019f6:	b2d3      	uxtb	r3, r2
 80019f8:	773b      	strb	r3, [r7, #28]
    payload[5] = (sync_counter >> 16) & 0xFF;
 80019fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	0c02      	lsrs	r2, r0, #16
 8001a08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a0c:	0c0b      	lsrs	r3, r1, #16
 8001a0e:	b2d3      	uxtb	r3, r2
 8001a10:	777b      	strb	r3, [r7, #29]
    payload[6] = (sync_counter >> 8)  & 0xFF;
 8001a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	0a02      	lsrs	r2, r0, #8
 8001a20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001a24:	0a0b      	lsrs	r3, r1, #8
 8001a26:	b2d3      	uxtb	r3, r2
 8001a28:	77bb      	strb	r3, [r7, #30]
    payload[7] =  sync_counter        & 0xFF;
 8001a2a:	783b      	ldrb	r3, [r7, #0]
 8001a2c:	77fb      	strb	r3, [r7, #31]

    // Expect 0-byte ACK response
    uint8_t dummy_rx[1] = {0};
 8001a2e:	2300      	movs	r3, #0
 8001a30:	753b      	strb	r3, [r7, #20]
    uint8_t rx_len = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	74fb      	strb	r3, [r7, #19]

    return EPS_I2C_TransmitReceiveWithRetry(
 8001a36:	f107 0218 	add.w	r2, r7, #24
 8001a3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	f107 0313 	add.w	r3, r7, #19
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff fe6c 	bl	800172c <EPS_I2C_TransmitReceiveWithRetry>
 8001a54:	4603      	mov	r3, r0
        CMD_SYNC_COUNTER,
        payload, sizeof(payload),
        dummy_rx, &rx_len,
        i2c_slave_addr
    );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <SSP_GetRxBuffer>:
// Output:
//   - Returns a pointer to a uint8_t array, the appropriate receive buffer (rx_buffer1 or rx_buffer2)
// Significance:
//   - A helper function that selects the correct receive buffer based on the UART interface,
//     used to manage DMA reception of SSP frames. It’s marked "inline" for faster execution.
static inline uint8_t* SSP_GetRxBuffer(UART_HandleTypeDef *huart) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    // Check if the UART handle matches ssp_uart1; if so, return rx_buffer1, else return rx_buffer2
    return (huart == ssp_uart1) ? rx_buffer1 : rx_buffer2;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <SSP_GetRxBuffer+0x24>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d101      	bne.n	8001a76 <SSP_GetRxBuffer+0x16>
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <SSP_GetRxBuffer+0x28>)
 8001a74:	e000      	b.n	8001a78 <SSP_GetRxBuffer+0x18>
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <SSP_GetRxBuffer+0x2c>)
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	200002a0 	.word	0x200002a0
 8001a88:	200002a8 	.word	0x200002a8
 8001a8c:	200003a8 	.word	0x200003a8

08001a90 <HAL_UART_TxCpltCallback>:
// Output:
//   - None (void), resets the RS485 driver enable pin
// Significance:
//   - Called when a UART DMA transmission completes, resets the RS485 driver enable
//     pin to allow reception, critical for RS485 communication (Reference Manual, Section 36.8).
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces (UART2 or UART3)
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_UART_TxCpltCallback+0x48>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d004      	beq.n	8001aac <HAL_UART_TxCpltCallback+0x1c>
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_UART_TxCpltCallback+0x4c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d111      	bne.n	8001ad0 <HAL_UART_TxCpltCallback+0x40>
        // Select the correct driver enable pin based on UART
        GPIO_PinState de_pin = (huart->Instance == USART2) ? RS4852_DE_Pin : RS4851_DE_Pin;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_UART_TxCpltCallback+0x50>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_UART_TxCpltCallback+0x2a>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_UART_TxCpltCallback+0x2c>
 8001aba:	2310      	movs	r3, #16
 8001abc:	73fb      	strb	r3, [r7, #15]
        // Both pins are on GPIOD
        GPIO_TypeDef *de_port = (huart->Instance == USART2) ? GPIOD : GPIOD;
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_UART_TxCpltCallback+0x54>)
 8001ac0:	60bb      	str	r3, [r7, #8]
        // Reset the driver enable pin to disable RS485 transmission
        HAL_GPIO_WritePin(de_port, de_pin, GPIO_PIN_RESET);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f003 febc 	bl	8005848 <HAL_GPIO_WritePin>
    }
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200002a0 	.word	0x200002a0
 8001adc:	200002a4 	.word	0x200002a4
 8001ae0:	40004400 	.word	0x40004400
 8001ae4:	48000c00 	.word	0x48000c00

08001ae8 <HAL_UART_ErrorCallback>:
// Output:
//   - None (void), handles UART errors by restarting DMA reception
// Significance:
//   - Handles UART errors (e.g., framing errors) by incrementing an error counter and
//     restarting DMA reception to recover, ensuring robust communication.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    // Check if the UART is one of the SSP interfaces
    if (huart == ssp_uart1 || huart == ssp_uart2) {
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_UART_ErrorCallback+0x44>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d004      	beq.n	8001b04 <HAL_UART_ErrorCallback+0x1c>
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_UART_ErrorCallback+0x48>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10e      	bne.n	8001b22 <HAL_UART_ErrorCallback+0x3a>
        // Increment the framing error counter
        framing_errors++;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_UART_ErrorCallback+0x4c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_UART_ErrorCallback+0x4c>)
 8001b0c:	6013      	str	r3, [r2, #0]

        // Get the correct receive buffer for this UART
        uint8_t *rx_buffer = SSP_GetRxBuffer(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa6 	bl	8001a60 <SSP_GetRxBuffer>
 8001b14:	60f8      	str	r0, [r7, #12]
        // Restart DMA reception to recover from the error
        HAL_UART_Receive_DMA(huart, rx_buffer, SSP_MAX_DATA_LEN + SSP_FRAME_OVERHEAD);
 8001b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f006 ff93 	bl	8008a48 <HAL_UART_Receive_DMA>
    }
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200002a0 	.word	0x200002a0
 8001b30:	200002a4 	.word	0x200002a4
 8001b34:	200004a8 	.word	0x200004a8

08001b38 <GetSyncCounter>:
    __enable_irq();
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset TIM2
}

// Get current sync counter value with race condition protection
uint64_t GetSyncCounter(void) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3e:	b672      	cpsid	i
}
 8001b40:	bf00      	nop
    uint64_t val;
    __disable_irq();
    val = sync_counter.sync_counter;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <GetSyncCounter+0x2c>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4c:	b662      	cpsie	i
}
 8001b4e:	bf00      	nop
    __enable_irq();
    return val;
 8001b50:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	200004b0 	.word	0x200004b0

08001b68 <GetSyncTimestamp>:
uint32_t GetSubtickUs(void) {
    return __HAL_TIM_GET_COUNTER(&htim2); // Current TIM2 count since last pulse
}

// Get composite timestamp with race condition protection
void GetSyncTimestamp(uint64_t *counter, uint32_t *subtick) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b72:	b672      	cpsid	i
}
 8001b74:	bf00      	nop
    __disable_irq();
    *counter = sync_counter.sync_counter;
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <GetSyncTimestamp+0x34>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	e9c1 2300 	strd	r2, r3, [r1]
    *subtick = __HAL_TIM_GET_COUNTER(&htim2);
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <GetSyncTimestamp+0x38>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b8c:	b662      	cpsie	i
}
 8001b8e:	bf00      	nop
    __enable_irq();
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	200004b0 	.word	0x200004b0
 8001ba0:	20000730 	.word	0x20000730

08001ba4 <SelectMultiplexerChannel>:
//   - None (void), sets GPIO pins to select the multiplexer channel
// Significance:
//   - Configures the multiplexer (controlled by S0, S1, S2 pins) to select a specific
//     input channel for ADC measurements (e.g., solar array voltages or currents).
static void SelectMultiplexerChannel(uint8_t channel)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
    // Set S0 pin (bit 0 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (channel & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2180      	movs	r1, #128	@ 0x80
 8001bba:	480f      	ldr	r0, [pc, #60]	@ (8001bf8 <SelectMultiplexerChannel+0x54>)
 8001bbc:	f003 fe44 	bl	8005848 <HAL_GPIO_WritePin>
    // Set S1 pin (bit 1 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (channel & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	105b      	asrs	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <SelectMultiplexerChannel+0x54>)
 8001bd4:	f003 fe38 	bl	8005848 <HAL_GPIO_WritePin>
    // Set S2 pin (bit 2 of channel) to high (1) or low (0)
    HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (channel & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	109b      	asrs	r3, r3, #2
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bea:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <SelectMultiplexerChannel+0x54>)
 8001bec:	f003 fe2c 	bl	8005848 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	00000000 	.word	0x00000000

08001c00 <EPSPD_UpdateTelemetryAndParameters>:
//   - None (void), updates TelemetryData and Parameters, saves to EEPROM
// Significance:
//   - Processes raw ADC values to update telemetry (voltages, currents) and saves
//     them to EEPROM via I2C, critical for monitoring power distribution.
void EPSPD_UpdateTelemetryAndParameters(I2C_HandleTypeDef *hi2c, uint16_t *adc_values)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b090      	sub	sp, #64	@ 0x40
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
    // Declare variables for sync counter and subtick
    uint64_t counter;
    uint32_t subtick;
    // Get the sync counter and subtick timestamp from the BMS (via sync_counter.h)
    GetSyncTimestamp(&counter, &subtick);
 8001c0a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ffa7 	bl	8001b68 <GetSyncTimestamp>
    // Store subtick in telemetry (microseconds)
    TelemetryData.subtick_us = subtick;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	4ad2      	ldr	r2, [pc, #840]	@ (8001f68 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001c1e:	6093      	str	r3, [r2, #8]

    // Update 12V bus voltage (mV) from ADC channel 13
    TelemetryData.Bus12V = (uint16_t)(adc_values[13] * VOLTAGE_PER_COUNT);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	331a      	adds	r3, #26
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3a:	ee17 3a90 	vmov	r3, s15
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4bc9      	ldr	r3, [pc, #804]	@ (8001f68 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001c42:	801a      	strh	r2, [r3, #0]
    // Update 5V bus voltage (mV) from ADC channel 1
    TelemetryData.Bus5V = (uint16_t)(adc_values[1] * VOLTAGE_PER_COUNT);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3302      	adds	r3, #2
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c52:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5e:	ee17 3a90 	vmov	r3, s15
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4bc0      	ldr	r3, [pc, #768]	@ (8001f68 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001c66:	805a      	strh	r2, [r3, #2]
    // Update 3.3V bus voltage (mV) from ADC channel 10
    TelemetryData.Bus3V3 = (uint16_t)(adc_values[10] * VOLTAGE_PER_COUNT);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c76:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c82:	ee17 3a90 	vmov	r3, s15
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4bb7      	ldr	r3, [pc, #732]	@ (8001f68 <EPSPD_UpdateTelemetryAndParameters+0x368>)
 8001c8a:	809a      	strh	r2, [r3, #4]

    // Select multiplexer channel 0 for solar array 1 current
    SelectMultiplexerChannel(0);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ff89 	bl	8001ba4 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff f94c 	bl	8000f30 <SoftwareDelay>

    // Update solar array 1 current (mA) from ADC channel 4
    Parameters[6].Value = (uint16_t)(adc_values[4] * CURRENT_SCALING_FACTOR);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc50 	bl	8000544 <__aeabi_i2d>
 8001ca4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001f48 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fcb5 	bl	8000618 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fec1 	bl	8000a3c <__aeabi_d2uiz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4bac      	ldr	r3, [pc, #688]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001cc0:	835a      	strh	r2, [r3, #26]

    // Select multiplexer channel 1 for solar array 3 voltage
    SelectMultiplexerChannel(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff ff6e 	bl	8001ba4 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff f931 	bl	8000f30 <SoftwareDelay>
    // Update solar array 3 voltage (mV) from ADC channel 4
    Parameters[24].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc35 	bl	8000544 <__aeabi_i2d>
 8001cda:	a39d      	add	r3, pc, #628	@ (adr r3, 8001f50 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fc9a 	bl	8000618 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe fea6 	bl	8000a3c <__aeabi_d2uiz>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b9e      	ldr	r3, [pc, #632]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001cf6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

    // Select multiplexer channel 2 for solar array 2 voltage
    SelectMultiplexerChannel(2);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f7ff ff52 	bl	8001ba4 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff f915 	bl	8000f30 <SoftwareDelay>
    // Update solar array 2 voltage (mV) from ADC channel 4
    Parameters[23].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3308      	adds	r3, #8
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc19 	bl	8000544 <__aeabi_i2d>
 8001d12:	a38f      	add	r3, pc, #572	@ (adr r3, 8001f50 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc7e 	bl	8000618 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fe8a 	bl	8000a3c <__aeabi_d2uiz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b90      	ldr	r3, [pc, #576]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    // Select multiplexer channel 3 for solar array 1 voltage
    SelectMultiplexerChannel(3);
 8001d32:	2003      	movs	r0, #3
 8001d34:	f7ff ff36 	bl	8001ba4 <SelectMultiplexerChannel>
    // Wait 1ms for multiplexer to stabilize
    SoftwareDelay(1);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff f8f9 	bl	8000f30 <SoftwareDelay>
    // Update solar array 1 voltage (mV) from ADC channel 4
    Parameters[22].Value = (uint16_t)(adc_values[4] * VOLTAGE_SCALING_FACTOR);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	3308      	adds	r3, #8
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbfd 	bl	8000544 <__aeabi_i2d>
 8001d4a:	a381      	add	r3, pc, #516	@ (adr r3, 8001f50 <EPSPD_UpdateTelemetryAndParameters+0x350>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fc62 	bl	8000618 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fe6e 	bl	8000a3c <__aeabi_d2uiz>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b82      	ldr	r3, [pc, #520]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001d66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    // Calculate current for RS 5V rail (mA) from ADC channel 0
    float v_imon = adc_values[0] * VOLTAGE_PER_COUNT;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[19].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001d82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d84:	f7fe fbf0 	bl	8000568 <__aeabi_f2d>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b79      	ldr	r3, [pc, #484]	@ (8001f74 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001d8e:	f7fe fd6d 	bl	800086c <__aeabi_ddiv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	a36f      	add	r3, pc, #444	@ (adr r3, 8001f58 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc3a 	bl	8000618 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7fe fe46 	bl	8000a3c <__aeabi_d2uiz>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b6e      	ldr	r3, [pc, #440]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001db6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

    // Calculate current for PL 5V rail (mA) from ADC channel 1
    v_imon = adc_values[1] * VOLTAGE_PER_COUNT;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[18].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001dd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001dd6:	f7fe fbc7 	bl	8000568 <__aeabi_f2d>
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	4b65      	ldr	r3, [pc, #404]	@ (8001f74 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001de0:	f7fe fd44 	bl	800086c <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	a35a      	add	r3, pc, #360	@ (adr r3, 8001f58 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fc11 	bl	8000618 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fe1d 	bl	8000a3c <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b5a      	ldr	r3, [pc, #360]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001e08:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    // Calculate current for CCU 5V rail (mA) from ADC channel 2
    v_imon = adc_values[2] * VOLTAGE_PER_COUNT;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e22:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[17].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001e26:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e28:	f7fe fb9e 	bl	8000568 <__aeabi_f2d>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b50      	ldr	r3, [pc, #320]	@ (8001f74 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001e32:	f7fe fd1b 	bl	800086c <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	a346      	add	r3, pc, #280	@ (adr r3, 8001f58 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbe8 	bl	8000618 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fdf4 	bl	8000a3c <__aeabi_d2uiz>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b45      	ldr	r3, [pc, #276]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    // Calculate current for GPS (mA) from ADC channel 3
    v_imon = adc_values[3] * VOLTAGE_PER_COUNT;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3306      	adds	r3, #6
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e74:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[12].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001e78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e7a:	f7fe fb75 	bl	8000568 <__aeabi_f2d>
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <EPSPD_UpdateTelemetryAndParameters+0x374>)
 8001e84:	f7fe fcf2 	bl	800086c <__aeabi_ddiv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	a331      	add	r3, pc, #196	@ (adr r3, 8001f58 <EPSPD_UpdateTelemetryAndParameters+0x358>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbbf 	bl	8000618 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fdcb 	bl	8000a3c <__aeabi_d2uiz>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001eac:	865a      	strh	r2, [r3, #50]	@ 0x32

    // Update solar array 2 current (mA) from ADC channel 5
    Parameters[7].Value = (uint16_t)(adc_values[5] * CURRENT_SCALING_FACTOR);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	330a      	adds	r3, #10
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb45 	bl	8000544 <__aeabi_i2d>
 8001eba:	a323      	add	r3, pc, #140	@ (adr r3, 8001f48 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fbaa 	bl	8000618 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe fdb6 	bl	8000a3c <__aeabi_d2uiz>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001ed6:	83da      	strh	r2, [r3, #30]

    // Update solar array 3 current (mA) from ADC channel 6
    Parameters[8].Value = (uint16_t)(adc_values[6] * CURRENT_SCALING_FACTOR);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb30 	bl	8000544 <__aeabi_i2d>
 8001ee4:	a318      	add	r3, pc, #96	@ (adr r3, 8001f48 <EPSPD_UpdateTelemetryAndParameters+0x348>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb95 	bl	8000618 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fda1 	bl	8000a3c <__aeabi_d2uiz>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001f00:	845a      	strh	r2, [r3, #34]	@ 0x22

    // Update XB subsystem current (mA) from ADC channel 7
    Parameters[9].Value = (uint16_t)(adc_values[7] * CURRENT_PER_COUNT);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	330e      	adds	r3, #14
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb1b 	bl	8000544 <__aeabi_i2d>
 8001f0e:	a314      	add	r3, pc, #80	@ (adr r3, 8001f60 <EPSPD_UpdateTelemetryAndParameters+0x360>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe fb80 	bl	8000618 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fd8c 	bl	8000a3c <__aeabi_d2uiz>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <EPSPD_UpdateTelemetryAndParameters+0x370>)
 8001f2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    // Update XB 12V current (mA) from ADC channel 7
    Parameters[21].Value = (uint16_t)((adc_values[7] * VOLTAGE_PER_COUNT / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	330e      	adds	r3, #14
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001f6c <EPSPD_UpdateTelemetryAndParameters+0x36c>
 8001f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f42:	e019      	b.n	8001f78 <EPSPD_UpdateTelemetryAndParameters+0x378>
 8001f44:	f3af 8000 	nop.w
 8001f48:	f38c5437 	.word	0xf38c5437
 8001f4c:	3fc4a137 	.word	0x3fc4a137
 8001f50:	4d163348 	.word	0x4d163348
 8001f54:	40228767 	.word	0x40228767
 8001f58:	c94fe0ff 	.word	0xc94fe0ff
 8001f5c:	40a9aaa5 	.word	0x40a9aaa5
 8001f60:	00000000 	.word	0x00000000
 8001f64:	40201d00 	.word	0x40201d00
 8001f68:	200004c0 	.word	0x200004c0
 8001f6c:	3f4e4000 	.word	0x3f4e4000
 8001f70:	20000154 	.word	0x20000154
 8001f74:	408f4000 	.word	0x408f4000
 8001f78:	ee17 0a90 	vmov	r0, s15
 8001f7c:	f7fe faf4 	bl	8000568 <__aeabi_f2d>
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4ba4      	ldr	r3, [pc, #656]	@ (8002218 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001f86:	f7fe fc71 	bl	800086c <__aeabi_ddiv>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	a39d      	add	r3, pc, #628	@ (adr r3, 8002208 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fb3e 	bl	8000618 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd4a 	bl	8000a3c <__aeabi_d2uiz>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b9b      	ldr	r3, [pc, #620]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8001fae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    // Calculate current for ADCS 5V rail (mA) from ADC channel 8
    v_imon = adc_values[8] * VOLTAGE_PER_COUNT;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8002220 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8001fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[16].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8001fcc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001fce:	f7fe facb 	bl	8000568 <__aeabi_f2d>
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4b90      	ldr	r3, [pc, #576]	@ (8002218 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8001fd8:	f7fe fc48 	bl	800086c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	a388      	add	r3, pc, #544	@ (adr r3, 8002208 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fb15 	bl	8000618 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fd21 	bl	8000a3c <__aeabi_d2uiz>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b87      	ldr	r3, [pc, #540]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8002000:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Update CCU subsystem current (mA) from ADC channel 9
    Parameters[10].Value = (uint16_t)(adc_values[9] * CURRENT_PER_COUNT);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	3312      	adds	r3, #18
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa9a 	bl	8000544 <__aeabi_i2d>
 8002010:	a37f      	add	r3, pc, #508	@ (adr r3, 8002210 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe faff 	bl	8000618 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fd0b 	bl	8000a3c <__aeabi_d2uiz>
 8002026:	4603      	mov	r3, r0
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b7c      	ldr	r3, [pc, #496]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 800202c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    // Calculate current for 3.3V bus (mA) from ADC channel 10
    v_imon = adc_values[10] * VOLTAGE_PER_COUNT;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3314      	adds	r3, #20
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002220 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8002040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002044:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[5].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 8002048:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800204a:	f7fe fa8d 	bl	8000568 <__aeabi_f2d>
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b71      	ldr	r3, [pc, #452]	@ (8002218 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 8002054:	f7fe fc0a 	bl	800086c <__aeabi_ddiv>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a369      	add	r3, pc, #420	@ (adr r3, 8002208 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fad7 	bl	8000618 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fce3 	bl	8000a3c <__aeabi_d2uiz>
 8002076:	4603      	mov	r3, r0
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b68      	ldr	r3, [pc, #416]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 800207c:	82da      	strh	r2, [r3, #22]

    // Update ADCS subsystem current (mA) from ADC channel 11
    Parameters[11].Value = (uint16_t)(adc_values[11] * CURRENT_PER_COUNT);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3316      	adds	r3, #22
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa5d 	bl	8000544 <__aeabi_i2d>
 800208a:	a361      	add	r3, pc, #388	@ (adr r3, 8002210 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fac2 	bl	8000618 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fcce 	bl	8000a3c <__aeabi_d2uiz>
 80020a0:	4603      	mov	r3, r0
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80020a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Update payload current (mA) from ADC channel 12
    Parameters[13].Value = (uint16_t)(adc_values[12] * CURRENT_PER_COUNT);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3318      	adds	r3, #24
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa48 	bl	8000544 <__aeabi_i2d>
 80020b4:	a356      	add	r3, pc, #344	@ (adr r3, 8002210 <EPSPD_UpdateTelemetryAndParameters+0x610>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe faad 	bl	8000618 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fcb9 	bl	8000a3c <__aeabi_d2uiz>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b53      	ldr	r3, [pc, #332]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80020d0:	86da      	strh	r2, [r3, #54]	@ 0x36

    // Calculate current for ADCS 12V rail (mA) from ADC channel 13
    v_imon = adc_values[13] * VOLTAGE_PER_COUNT;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	331a      	adds	r3, #26
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002220 <EPSPD_UpdateTelemetryAndParameters+0x620>
 80020e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[20].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 80020ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020ee:	f7fe fa3b 	bl	8000568 <__aeabi_f2d>
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b48      	ldr	r3, [pc, #288]	@ (8002218 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 80020f8:	f7fe fbb8 	bl	800086c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	a340      	add	r3, pc, #256	@ (adr r3, 8002208 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe fa85 	bl	8000618 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fc91 	bl	8000a3c <__aeabi_d2uiz>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b3f      	ldr	r3, [pc, #252]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8002120:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    // Calculate current for UHF subsystem (mA) from ADC channel 14
    v_imon = adc_values[14] * VOLTAGE_PER_COUNT;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	331c      	adds	r3, #28
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002132:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002220 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8002136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[14].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 800213e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002140:	f7fe fa12 	bl	8000568 <__aeabi_f2d>
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b33      	ldr	r3, [pc, #204]	@ (8002218 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 800214a:	f7fe fb8f 	bl	800086c <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	a32c      	add	r3, pc, #176	@ (adr r3, 8002208 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe fa5c 	bl	8000618 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fc68 	bl	8000a3c <__aeabi_d2uiz>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 8002172:	875a      	strh	r2, [r3, #58]	@ 0x3a

    // Calculate current for OBC subsystem (mA) from ADC channel 15
    v_imon = adc_values[15] * VOLTAGE_PER_COUNT;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	331e      	adds	r3, #30
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002182:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002220 <EPSPD_UpdateTelemetryAndParameters+0x620>
 8002186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    Parameters[15].Value = (uint16_t)((v_imon / 1000.0) * IMON_CURRENT_PER_VOLT);
 800218e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002190:	f7fe f9ea 	bl	8000568 <__aeabi_f2d>
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <EPSPD_UpdateTelemetryAndParameters+0x618>)
 800219a:	f7fe fb67 	bl	800086c <__aeabi_ddiv>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	a318      	add	r3, pc, #96	@ (adr r3, 8002208 <EPSPD_UpdateTelemetryAndParameters+0x608>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fa34 	bl	8000618 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fc40 	bl	8000a3c <__aeabi_d2uiz>
 80021bc:	4603      	mov	r3, r0
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80021c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

    // Copy bus voltages to parameter array for consistency
    Parameters[0].Value = TelemetryData.Bus12V;
 80021c4:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 80021c6:	881a      	ldrh	r2, [r3, #0]
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80021ca:	805a      	strh	r2, [r3, #2]
    Parameters[1].Value = TelemetryData.Bus5V;
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 80021ce:	885a      	ldrh	r2, [r3, #2]
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80021d2:	80da      	strh	r2, [r3, #6]
    Parameters[2].Value = TelemetryData.Bus3V3;
 80021d4:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 80021d6:	889a      	ldrh	r2, [r3, #4]
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <EPSPD_UpdateTelemetryAndParameters+0x61c>)
 80021da:	815a      	strh	r2, [r3, #10]

    // Prepare EEPROM data structure with telemetry and timestamp
    EEPROM_TelemetryWithTimestamp eeprom_data;
    eeprom_data.telemetry = TelemetryData;
 80021dc:	4a11      	ldr	r2, [pc, #68]	@ (8002224 <EPSPD_UpdateTelemetryAndParameters+0x624>)
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80021e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    eeprom_data.counter = counter;
 80021e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    eeprom_data.subtick_us = subtick;
 80021f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f2:	623b      	str	r3, [r7, #32]
    // Save telemetry to EEPROM via I2C
    epspd_WriteTelemetry(hi2c, &eeprom_data);
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe ff94 	bl	8001128 <epspd_WriteTelemetry>
}
 8002200:	bf00      	nop
 8002202:	3740      	adds	r7, #64	@ 0x40
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	c94fe0ff 	.word	0xc94fe0ff
 800220c:	40a9aaa5 	.word	0x40a9aaa5
 8002210:	00000000 	.word	0x00000000
 8002214:	40201d00 	.word	0x40201d00
 8002218:	408f4000 	.word	0x408f4000
 800221c:	20000154 	.word	0x20000154
 8002220:	3f4e4000 	.word	0x3f4e4000
 8002224:	200004c0 	.word	0x200004c0

08002228 <main>:
void StartTask02(void *argument);
void StartTask03(void *argument);
void StartTask04(void *argument);

int main(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  HAL_Init();
 800222c:	f001 fb9b 	bl	8003966 <HAL_Init>
  SystemClock_Config();
 8002230:	f000 f8fc 	bl	800242c <SystemClock_Config>
  MX_GPIO_Init();
 8002234:	f000 fc82 	bl	8002b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002238:	f000 fc3a 	bl	8002ab0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800223c:	f000 fbd4 	bl	80029e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002240:	f000 fc04 	bl	8002a4c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8002244:	f000 fba0 	bl	8002988 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002248:	f000 f936 	bl	80024b8 <MX_ADC1_Init>
  MX_I2C2_Init();
 800224c:	f000 f9aa 	bl	80025a4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002250:	f000 f9e8 	bl	8002624 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002254:	f000 fa20 	bl	8002698 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002258:	f000 fa58 	bl	800270c <MX_TIM1_Init>
  MX_TIM2_Init();
 800225c:	f000 faaa 	bl	80027b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002260:	f000 faf6 	bl	8002850 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002264:	f000 fb42 	bl	80028ec <MX_TIM4_Init>

  osKernelInitialize();
 8002268:	f007 fee4 	bl	800a034 <osKernelInitialize>

  NormalTaskHandle = osThreadNew(StartDefaultTask, NULL, &NormalTask_attributes);
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <main+0x8c>)
 800226e:	2100      	movs	r1, #0
 8002270:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <main+0x90>)
 8002272:	f007 ff29 	bl	800a0c8 <osThreadNew>
 8002276:	4603      	mov	r3, r0
 8002278:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <main+0x94>)
 800227a:	6013      	str	r3, [r2, #0]
  FaultTask02Handle = osThreadNew(StartTask02, NULL, &FaultTask02_attributes);
 800227c:	4a10      	ldr	r2, [pc, #64]	@ (80022c0 <main+0x98>)
 800227e:	2100      	movs	r1, #0
 8002280:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <main+0x9c>)
 8002282:	f007 ff21 	bl	800a0c8 <osThreadNew>
 8002286:	4603      	mov	r3, r0
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <main+0xa0>)
 800228a:	6013      	str	r3, [r2, #0]
  SSPmasterTask03Handle = osThreadNew(StartTask03, NULL, &SSPmasterTask03_attributes);
 800228c:	4a0f      	ldr	r2, [pc, #60]	@ (80022cc <main+0xa4>)
 800228e:	2100      	movs	r1, #0
 8002290:	480f      	ldr	r0, [pc, #60]	@ (80022d0 <main+0xa8>)
 8002292:	f007 ff19 	bl	800a0c8 <osThreadNew>
 8002296:	4603      	mov	r3, r0
 8002298:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <main+0xac>)
 800229a:	6013      	str	r3, [r2, #0]
  SyncTask04Handle = osThreadNew(StartTask04, NULL, &SyncTask04_attributes);
 800229c:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <main+0xb0>)
 800229e:	2100      	movs	r1, #0
 80022a0:	480e      	ldr	r0, [pc, #56]	@ (80022dc <main+0xb4>)
 80022a2:	f007 ff11 	bl	800a0c8 <osThreadNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <main+0xb8>)
 80022aa:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80022ac:	f007 fee6 	bl	800a07c <osKernelStart>

  while(1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <main+0x88>
 80022b4:	0800d840 	.word	0x0800d840
 80022b8:	080022e5 	.word	0x080022e5
 80022bc:	20000ad0 	.word	0x20000ad0
 80022c0:	0800d864 	.word	0x0800d864
 80022c4:	08002389 	.word	0x08002389
 80022c8:	20000ad4 	.word	0x20000ad4
 80022cc:	0800d888 	.word	0x0800d888
 80022d0:	080023b9 	.word	0x080023b9
 80022d4:	20000ad8 	.word	0x20000ad8
 80022d8:	0800d8ac 	.word	0x0800d8ac
 80022dc:	080023d9 	.word	0x080023d9
 80022e0:	20000adc 	.word	0x20000adc

080022e4 <StartDefaultTask>:
  }
}


void StartDefaultTask(void *argument)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
    for (;;) {
        uint16_t adc_values[16] = {0};
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2220      	movs	r2, #32
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00a fca1 	bl	800cc3c <memset>
        uint32_t last_save_time = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_ready = 0;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <StartDefaultTask+0x88>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
        EPS_Log_Message(EPS_LOG_INFO, "Starting ADC conversion via DMA for telemetry update");
 8002304:	491a      	ldr	r1, [pc, #104]	@ (8002370 <StartDefaultTask+0x8c>)
 8002306:	2003      	movs	r0, #3
 8002308:	f7fe fd4e 	bl	8000da8 <EPS_Log_Message>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 16);
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2210      	movs	r2, #16
 8002312:	4619      	mov	r1, r3
 8002314:	4817      	ldr	r0, [pc, #92]	@ (8002374 <StartDefaultTask+0x90>)
 8002316:	f001 febf 	bl	8004098 <HAL_ADC_Start_DMA>
        while (!adc_ready) {
 800231a:	e003      	b.n	8002324 <StartDefaultTask+0x40>
            EPS_Log_Message(EPS_LOG_WARNING, "Waiting for ADC DMA complete flag...");
 800231c:	4916      	ldr	r1, [pc, #88]	@ (8002378 <StartDefaultTask+0x94>)
 800231e:	2002      	movs	r0, #2
 8002320:	f7fe fd42 	bl	8000da8 <EPS_Log_Message>
        while (!adc_ready) {
 8002324:	4b11      	ldr	r3, [pc, #68]	@ (800236c <StartDefaultTask+0x88>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f6      	beq.n	800231c <StartDefaultTask+0x38>
        }
        EPSPD_UpdateTelemetryAndParameters(&hi2c2, adc_values);
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4619      	mov	r1, r3
 8002334:	4811      	ldr	r0, [pc, #68]	@ (800237c <StartDefaultTask+0x98>)
 8002336:	f7ff fc63 	bl	8001c00 <EPSPD_UpdateTelemetryAndParameters>
        EPS_Log_Message(EPS_LOG_INFO, "Telemetry updated from ADC values");
 800233a:	4911      	ldr	r1, [pc, #68]	@ (8002380 <StartDefaultTask+0x9c>)
 800233c:	2003      	movs	r0, #3
 800233e:	f7fe fd33 	bl	8000da8 <EPS_Log_Message>

        if (HAL_GetTick() - last_save_time >= EEPROM_SAVE_INTERVAL) {
 8002342:	f001 fb3d 	bl	80039c0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002350:	4293      	cmp	r3, r2
 8002352:	d906      	bls.n	8002362 <StartDefaultTask+0x7e>
            last_save_time = HAL_GetTick();
 8002354:	f001 fb34 	bl	80039c0 <HAL_GetTick>
 8002358:	62f8      	str	r0, [r7, #44]	@ 0x2c
            EPS_Log_Message(EPS_LOG_INFO, "Saving telemetry to EEPROM");
 800235a:	490a      	ldr	r1, [pc, #40]	@ (8002384 <StartDefaultTask+0xa0>)
 800235c:	2003      	movs	r0, #3
 800235e:	f7fe fd23 	bl	8000da8 <EPS_Log_Message>
        }
        osDelay(1000);
 8002362:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002366:	f007 ff41 	bl	800a1ec <osDelay>
    for (;;) {
 800236a:	e7bf      	b.n	80022ec <StartDefaultTask+0x8>
 800236c:	200004cc 	.word	0x200004cc
 8002370:	0800d720 	.word	0x0800d720
 8002374:	200004d0 	.word	0x200004d0
 8002378:	0800d758 	.word	0x0800d758
 800237c:	20000538 	.word	0x20000538
 8002380:	0800d780 	.word	0x0800d780
 8002384:	0800d7a4 	.word	0x0800d7a4

08002388 <StartTask02>:
    }
}

void StartTask02(void *argument)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 8002390:	4906      	ldr	r1, [pc, #24]	@ (80023ac <StartTask02+0x24>)
 8002392:	2004      	movs	r0, #4
 8002394:	f7fe fd08 	bl	8000da8 <EPS_Log_Message>
        Fault_PollAndHandle(&hi2c2, &huart1);
 8002398:	4905      	ldr	r1, [pc, #20]	@ (80023b0 <StartTask02+0x28>)
 800239a:	4806      	ldr	r0, [pc, #24]	@ (80023b4 <StartTask02+0x2c>)
 800239c:	f7ff f802 	bl	80013a4 <Fault_PollAndHandle>
        osDelay(100);
 80023a0:	2064      	movs	r0, #100	@ 0x64
 80023a2:	f007 ff23 	bl	800a1ec <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling faults from GPIO and subsystems");
 80023a6:	bf00      	nop
 80023a8:	e7f2      	b.n	8002390 <StartTask02+0x8>
 80023aa:	bf00      	nop
 80023ac:	0800d7c0 	.word	0x0800d7c0
 80023b0:	20000814 	.word	0x20000814
 80023b4:	20000538 	.word	0x20000538

080023b8 <StartTask03>:
    }
}

void StartTask03(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    for (;;) {
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 80023c0:	4904      	ldr	r1, [pc, #16]	@ (80023d4 <StartTask03+0x1c>)
 80023c2:	2004      	movs	r0, #4
 80023c4:	f7fe fcf0 	bl	8000da8 <EPS_Log_Message>
        osDelay(10000); // Poll every 10 seconds
 80023c8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80023cc:	f007 ff0e 	bl	800a1ec <osDelay>
        EPS_Log_Message(EPS_LOG_VERBOSE, "Polling for SSP commands from OBC");
 80023d0:	bf00      	nop
 80023d2:	e7f5      	b.n	80023c0 <StartTask03+0x8>
 80023d4:	0800d7e8 	.word	0x0800d7e8

080023d8 <StartTask04>:
    }
}

void StartTask04(void *argument)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	6078      	str	r0, [r7, #4]
    for (;;) {
        if (sync_pulse_triggered) {
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <StartTask04+0x48>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <StartTask04+0x40>
            sync_pulse_triggered = false;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <StartTask04+0x48>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]

            uint64_t counter = GetSyncCounter();
 80023f0:	f7ff fba2 	bl	8001b38 <GetSyncCounter>
 80023f4:	e9c7 0104 	strd	r0, r1, [r7, #16]
            HAL_StatusTypeDef status = EPS_I2C_SendSyncCounter(&hi2c2, counter, I2C_SLAVE_ADDR_BMS);
 80023f8:	2360      	movs	r3, #96	@ 0x60
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002400:	4808      	ldr	r0, [pc, #32]	@ (8002424 <StartTask04+0x4c>)
 8002402:	f7ff fac0 	bl	8001986 <EPS_I2C_SendSyncCounter>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]

            if (status != HAL_OK) {
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <StartTask04+0x40>
                EPS_Log_Message(EPS_LOG_ERROR, "Failed to send sync counter");
 8002410:	4905      	ldr	r1, [pc, #20]	@ (8002428 <StartTask04+0x50>)
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fcc8 	bl	8000da8 <EPS_Log_Message>
            }
        }

        osDelay(5);
 8002418:	2005      	movs	r0, #5
 800241a:	f007 fee7 	bl	800a1ec <osDelay>
        if (sync_pulse_triggered) {
 800241e:	e7df      	b.n	80023e0 <StartTask04+0x8>
 8002420:	20000acc 	.word	0x20000acc
 8002424:	20000538 	.word	0x20000538
 8002428:	0800d80c 	.word	0x0800d80c

0800242c <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b096      	sub	sp, #88	@ 0x58
 8002430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	2244      	movs	r2, #68	@ 0x44
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f00a fbfe 	bl	800cc3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002440:	463b      	mov	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]

  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800244e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002452:	f004 f829 	bl	80064a8 <HAL_PWREx_ControlVoltageScaling>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800245c:	f000 fcaa 	bl	8002db4 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002460:	2302      	movs	r3, #2
 8002462:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002468:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800246a:	2340      	movs	r3, #64	@ 0x40
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800246e:	2300      	movs	r3, #0
 8002470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4618      	mov	r0, r3
 8002478:	f004 f86c 	bl	8006554 <HAL_RCC_OscConfig>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002482:	f000 fc97 	bl	8002db4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002486:	230f      	movs	r3, #15
 8002488:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800248a:	2301      	movs	r3, #1
 800248c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800249a:	463b      	mov	r3, r7
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 fc72 	bl	8006d88 <HAL_RCC_ClockConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024aa:	f000 fc83 	bl	8002db4 <Error_Handler>
  }
}
 80024ae:	bf00      	nop
 80024b0:	3758      	adds	r7, #88	@ 0x58
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 80024da:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <MX_ADC1_Init+0xe0>)
 80024dc:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <MX_ADC1_Init+0xe4>)
 80024de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002598 <MX_ADC1_Init+0xe0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002598 <MX_ADC1_Init+0xe0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <MX_ADC1_Init+0xe0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024f2:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <MX_ADC1_Init+0xe0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024f8:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <MX_ADC1_Init+0xe0>)
 80024fa:	2204      	movs	r2, #4
 80024fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024fe:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002500:	2200      	movs	r2, #0
 8002502:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002504:	4b24      	ldr	r3, [pc, #144]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002506:	2200      	movs	r2, #0
 8002508:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800250a:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <MX_ADC1_Init+0xe0>)
 800250c:	2201      	movs	r2, #1
 800250e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002510:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <MX_ADC1_Init+0xe0>)
 800251a:	2200      	movs	r2, #0
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002520:	2200      	movs	r2, #0
 8002522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <MX_ADC1_Init+0xe0>)
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if(HAL_ADC_Init(&hadc1) != HAL_OK)
 800253a:	4817      	ldr	r0, [pc, #92]	@ (8002598 <MX_ADC1_Init+0xe0>)
 800253c:	f001 fc58 	bl	8003df0 <HAL_ADC_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002546:	f000 fc35 	bl	8002db4 <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  if(HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4810      	ldr	r0, [pc, #64]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002556:	f002 fbc5 	bl	8004ce4 <HAL_ADCEx_MultiModeConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002560:	f000 fc28 	bl	8002db4 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <MX_ADC1_Init+0xe8>)
 8002566:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002568:	2306      	movs	r3, #6
 800256a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002570:	237f      	movs	r3, #127	@ 0x7f
 8002572:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002574:	2304      	movs	r3, #4
 8002576:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_ADC1_Init+0xe0>)
 8002582:	f001 fe63 	bl	800424c <HAL_ADC_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800258c:	f000 fc12 	bl	8002db4 <Error_Handler>
  }
}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200004d0 	.word	0x200004d0
 800259c:	50040000 	.word	0x50040000
 80025a0:	04300002 	.word	0x04300002

080025a4 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <MX_I2C2_Init+0x78>)
 80025ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <MX_I2C2_Init+0x7c>)
 80025b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ba:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025bc:	2201      	movs	r2, #1
 80025be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025c6:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025cc:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
  if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025de:	480e      	ldr	r0, [pc, #56]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025e0:	f003 f96d 	bl	80058be <HAL_I2C_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80025ea:	f000 fbe3 	bl	8002db4 <Error_Handler>
  }

  if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ee:	2100      	movs	r1, #0
 80025f0:	4809      	ldr	r0, [pc, #36]	@ (8002618 <MX_I2C2_Init+0x74>)
 80025f2:	f003 feb3 	bl	800635c <HAL_I2CEx_ConfigAnalogFilter>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025fc:	f000 fbda 	bl	8002db4 <Error_Handler>
  }

  if(HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002600:	2100      	movs	r1, #0
 8002602:	4805      	ldr	r0, [pc, #20]	@ (8002618 <MX_I2C2_Init+0x74>)
 8002604:	f003 fef5 	bl	80063f2 <HAL_I2CEx_ConfigDigitalFilter>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800260e:	f000 fbd1 	bl	8002db4 <Error_Handler>
  }
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000538 	.word	0x20000538
 800261c:	40005800 	.word	0x40005800
 8002620:	00503d58 	.word	0x00503d58

08002624 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <MX_SPI1_Init+0x6c>)
 800262a:	4a1a      	ldr	r2, [pc, #104]	@ (8002694 <MX_SPI1_Init+0x70>)
 800262c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <MX_SPI1_Init+0x6c>)
 800263c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002642:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_SPI1_Init+0x6c>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002654:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_SPI1_Init+0x6c>)
 800265e:	2200      	movs	r2, #0
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002664:	2200      	movs	r2, #0
 8002666:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_SPI1_Init+0x6c>)
 800266a:	2207      	movs	r2, #7
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_SPI1_Init+0x6c>)
 8002676:	2200      	movs	r2, #0
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi1) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_SPI1_Init+0x6c>)
 800267c:	f005 faa4 	bl	8007bc8 <HAL_SPI_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8002686:	f000 fb95 	bl	8002db4 <Error_Handler>
  }
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000061c 	.word	0x2000061c
 8002694:	40013000 	.word	0x40013000

08002698 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  hspi3.Instance = SPI3;
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <MX_SPI3_Init+0x6c>)
 800269e:	4a1a      	ldr	r2, [pc, #104]	@ (8002708 <MX_SPI3_Init+0x70>)
 80026a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80026a2:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80026a8:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80026b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b6:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026de:	2207      	movs	r2, #7
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if(HAL_SPI_Init(&hspi3) != HAL_OK)
 80026ee:	4805      	ldr	r0, [pc, #20]	@ (8002704 <MX_SPI3_Init+0x6c>)
 80026f0:	f005 fa6a 	bl	8007bc8 <HAL_SPI_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 80026fa:	f000 fb5b 	bl	8002db4 <Error_Handler>
  }
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000680 	.word	0x20000680
 8002708:	40003c00 	.word	0x40003c00

0800270c <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800272a:	4b20      	ldr	r3, [pc, #128]	@ (80027ac <MX_TIM1_Init+0xa0>)
 800272c:	4a20      	ldr	r2, [pc, #128]	@ (80027b0 <MX_TIM1_Init+0xa4>)
 800272e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8002730:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002732:	224f      	movs	r2, #79	@ 0x4f
 8002734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <MX_TIM1_Init+0xa0>)
 800273e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002742:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800274a:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <MX_TIM1_Init+0xa0>)
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002750:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002756:	4815      	ldr	r0, [pc, #84]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002758:	f005 fbf9 	bl	8007f4e <HAL_TIM_Base_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002762:	f000 fb27 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276a:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	4619      	mov	r1, r3
 8002772:	480e      	ldr	r0, [pc, #56]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002774:	f005 fdb9 	bl	80082ea <HAL_TIM_ConfigClockSource>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800277e:	f000 fb19 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4806      	ldr	r0, [pc, #24]	@ (80027ac <MX_TIM1_Init+0xa0>)
 8002794:	f005 ffda 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800279e:	f000 fb09 	bl	8002db4 <Error_Handler>
  }
}
 80027a2:	bf00      	nop
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200006e4 	.word	0x200006e4
 80027b0:	40012c00 	.word	0x40012c00

080027b4 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <MX_TIM2_Init+0x98>)
 80027d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80027da:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <MX_TIM2_Init+0x98>)
 80027dc:	224f      	movs	r2, #79	@ 0x4f
 80027de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <MX_TIM2_Init+0x98>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <MX_TIM2_Init+0x98>)
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <MX_TIM2_Init+0x98>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <MX_TIM2_Init+0x98>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027fa:	4814      	ldr	r0, [pc, #80]	@ (800284c <MX_TIM2_Init+0x98>)
 80027fc:	f005 fba7 	bl	8007f4e <HAL_TIM_Base_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002806:	f000 fad5 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800280a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280e:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4619      	mov	r1, r3
 8002816:	480d      	ldr	r0, [pc, #52]	@ (800284c <MX_TIM2_Init+0x98>)
 8002818:	f005 fd67 	bl	80082ea <HAL_TIM_ConfigClockSource>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002822:	f000 fac7 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4806      	ldr	r0, [pc, #24]	@ (800284c <MX_TIM2_Init+0x98>)
 8002834:	f005 ff8a 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800283e:	f000 fab9 	bl	8002db4 <Error_Handler>
  }
}
 8002842:	bf00      	nop
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000730 	.word	0x20000730

08002850 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <MX_TIM3_Init+0x94>)
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <MX_TIM3_Init+0x98>)
 8002872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <MX_TIM3_Init+0x94>)
 8002876:	224f      	movs	r2, #79	@ 0x4f
 8002878:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <MX_TIM3_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <MX_TIM3_Init+0x94>)
 8002882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b16      	ldr	r3, [pc, #88]	@ (80028e4 <MX_TIM3_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <MX_TIM3_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002894:	4813      	ldr	r0, [pc, #76]	@ (80028e4 <MX_TIM3_Init+0x94>)
 8002896:	f005 fb5a 	bl	8007f4e <HAL_TIM_Base_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028a0:	f000 fa88 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a8:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <MX_TIM3_Init+0x94>)
 80028b2:	f005 fd1a 	bl	80082ea <HAL_TIM_ConfigClockSource>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028bc:	f000 fa7a 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <MX_TIM3_Init+0x94>)
 80028ce:	f005 ff3d 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028d8:	f000 fa6c 	bl	8002db4 <Error_Handler>
  }
}
 80028dc:	bf00      	nop
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	2000077c 	.word	0x2000077c
 80028e8:	40000400 	.word	0x40000400

080028ec <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800290a:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <MX_TIM4_Init+0x94>)
 800290c:	4a1d      	ldr	r2, [pc, #116]	@ (8002984 <MX_TIM4_Init+0x98>)
 800290e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <MX_TIM4_Init+0x94>)
 8002912:	224f      	movs	r2, #79	@ 0x4f
 8002914:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <MX_TIM4_Init+0x94>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800291c:	4b18      	ldr	r3, [pc, #96]	@ (8002980 <MX_TIM4_Init+0x94>)
 800291e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002922:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002924:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <MX_TIM4_Init+0x94>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <MX_TIM4_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002930:	4813      	ldr	r0, [pc, #76]	@ (8002980 <MX_TIM4_Init+0x94>)
 8002932:	f005 fb0c 	bl	8007f4e <HAL_TIM_Base_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800293c:	f000 fa3a 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002944:	613b      	str	r3, [r7, #16]
  if(HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002946:	f107 0310 	add.w	r3, r7, #16
 800294a:	4619      	mov	r1, r3
 800294c:	480c      	ldr	r0, [pc, #48]	@ (8002980 <MX_TIM4_Init+0x94>)
 800294e:	f005 fccc 	bl	80082ea <HAL_TIM_ConfigClockSource>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002958:	f000 fa2c 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  if(HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	4619      	mov	r1, r3
 8002968:	4805      	ldr	r0, [pc, #20]	@ (8002980 <MX_TIM4_Init+0x94>)
 800296a:	f005 feef 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002974:	f000 fa1e 	bl	8002db4 <Error_Handler>
  }
}
 8002978:	bf00      	nop
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200007c8 	.word	0x200007c8
 8002984:	40000800 	.word	0x40000800

08002988 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800298c:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 800298e:	4a15      	ldr	r2, [pc, #84]	@ (80029e4 <MX_USART1_UART_Init+0x5c>)
 8002990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002992:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 8002994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_UART_Init(&huart1) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_USART1_UART_Init+0x58>)
 80029cc:	f005 ff64 	bl	8008898 <HAL_UART_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029d6:	f000 f9ed 	bl	8002db4 <Error_Handler>
  }
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000814 	.word	0x20000814
 80029e4:	40013800 	.word	0x40013800

080029e8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80029ec:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 80029ee:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <MX_USART2_UART_Init+0x60>)
 80029f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029f2:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 80029f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fa:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a06:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a0e:	220c      	movs	r2, #12
 8002a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a24:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4804      	ldr	r0, [pc, #16]	@ (8002a44 <MX_USART2_UART_Init+0x5c>)
 8002a32:	f007 fa49 	bl	8009ec8 <HAL_RS485Ex_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a3c:	f000 f9ba 	bl	8002db4 <Error_Handler>
  }
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000089c 	.word	0x2000089c
 8002a48:	40004400 	.word	0x40004400

08002a4c <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002a50:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a52:	4a16      	ldr	r2, [pc, #88]	@ (8002aac <MX_USART3_UART_Init+0x60>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a88:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if(HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <MX_USART3_UART_Init+0x5c>)
 8002a96:	f007 fa17 	bl	8009ec8 <HAL_RS485Ex_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002aa0:	f000 f988 	bl	8002db4 <Error_Handler>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000924 	.word	0x20000924
 8002aac:	40004800 	.word	0x40004800

08002ab0 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <MX_DMA_Init+0x88>)
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aba:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <MX_DMA_Init+0x88>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <MX_DMA_Init+0x88>)
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	200c      	movs	r0, #12
 8002ad4:	f002 fa6e 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ad8:	200c      	movs	r0, #12
 8002ada:	f002 fa87 	bl	8004fec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2105      	movs	r1, #5
 8002ae2:	200d      	movs	r0, #13
 8002ae4:	f002 fa66 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ae8:	200d      	movs	r0, #13
 8002aea:	f002 fa7f 	bl	8004fec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2105      	movs	r1, #5
 8002af2:	200e      	movs	r0, #14
 8002af4:	f002 fa5e 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002af8:	200e      	movs	r0, #14
 8002afa:	f002 fa77 	bl	8004fec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2105      	movs	r1, #5
 8002b02:	200f      	movs	r0, #15
 8002b04:	f002 fa56 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002b08:	200f      	movs	r0, #15
 8002b0a:	f002 fa6f 	bl	8004fec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2105      	movs	r1, #5
 8002b12:	2010      	movs	r0, #16
 8002b14:	f002 fa4e 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002b18:	2010      	movs	r0, #16
 8002b1a:	f002 fa67 	bl	8004fec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2105      	movs	r1, #5
 8002b22:	2011      	movs	r0, #17
 8002b24:	f002 fa46 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002b28:	2011      	movs	r0, #17
 8002b2a:	f002 fa5f 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000

08002b3c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	@ 0x30
 8002b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b42:	f107 031c 	add.w	r3, r7, #28
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b52:	4b89      	ldr	r3, [pc, #548]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b56:	4a88      	ldr	r2, [pc, #544]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b58:	f043 0310 	orr.w	r3, r3, #16
 8002b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b5e:	4b86      	ldr	r3, [pc, #536]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	4a82      	ldr	r2, [pc, #520]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b76:	4b80      	ldr	r3, [pc, #512]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b82:	4b7d      	ldr	r3, [pc, #500]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	4a7c      	ldr	r2, [pc, #496]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	4b77      	ldr	r3, [pc, #476]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	4a76      	ldr	r2, [pc, #472]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba6:	4b74      	ldr	r3, [pc, #464]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	4b71      	ldr	r3, [pc, #452]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	4a70      	ldr	r2, [pc, #448]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bca:	4b6b      	ldr	r3, [pc, #428]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	4a6a      	ldr	r2, [pc, #424]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002bd0:	f043 0308 	orr.w	r3, r3, #8
 8002bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd6:	4b68      	ldr	r3, [pc, #416]	@ (8002d78 <MX_GPIO_Init+0x23c>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOE, RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002be2:	2200      	movs	r2, #0
 8002be4:	f240 511c 	movw	r1, #1308	@ 0x51c
 8002be8:	4864      	ldr	r0, [pc, #400]	@ (8002d7c <MX_GPIO_Init+0x240>)
 8002bea:	f002 fe2d 	bl	8005848 <HAL_GPIO_WritePin>
                          |CCU5V_EN_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin, GPIO_PIN_RESET);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002bf4:	4862      	ldr	r0, [pc, #392]	@ (8002d80 <MX_GPIO_Init+0x244>)
 8002bf6:	f002 fe27 	bl	8005848 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, PL_EN_Pin|UHF_EN_Pin, GPIO_PIN_RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8002c00:	4860      	ldr	r0, [pc, #384]	@ (8002d84 <MX_GPIO_Init+0x248>)
 8002c02:	f002 fe21 	bl	8005848 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002c0c:	485e      	ldr	r0, [pc, #376]	@ (8002d88 <MX_GPIO_Init+0x24c>)
 8002c0e:	f002 fe1b 	bl	8005848 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ADCS_EN_GPIO_Port, ADCS_EN_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1c:	f002 fe14 	bl	8005848 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PIN_RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2108      	movs	r1, #8
 8002c24:	4859      	ldr	r0, [pc, #356]	@ (8002d8c <MX_GPIO_Init+0x250>)
 8002c26:	f002 fe0f 	bl	8005848 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = RS5V_EN_Pin|PL5V_EN_Pin|ADCS5V_EN_Pin|XB12V_EN_Pin
 8002c2a:	f240 531c 	movw	r3, #1308	@ 0x51c
 8002c2e:	61fb      	str	r3, [r7, #28]
                          |CCU5V_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	484e      	ldr	r0, [pc, #312]	@ (8002d7c <MX_GPIO_Init+0x240>)
 8002c44:	f002 fc56 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_EN_Pin|RS3V3_EN_Pin|ADCS12_EN_Pin;
 8002c48:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4847      	ldr	r0, [pc, #284]	@ (8002d80 <MX_GPIO_Init+0x244>)
 8002c62:	f002 fc47 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS12V_FLT_Pin|XB12V_FLT_Pin|CCU5V_FLT_Pin|PL5V_FLT_Pin
 8002c66:	f640 2383 	movw	r3, #2691	@ 0xa83
 8002c6a:	61fb      	str	r3, [r7, #28]
                          |RS5V_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4840      	ldr	r0, [pc, #256]	@ (8002d7c <MX_GPIO_Init+0x240>)
 8002c7c:	f002 fc3a 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RS3V3_FLT_Pin|CCU_FAULT_Pin|PL_FLT_Pin|ADCS_FAULT_Pin
 8002c80:	f244 3305 	movw	r3, #17157	@ 0x4305
 8002c84:	61fb      	str	r3, [r7, #28]
                          |OBC_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4619      	mov	r1, r3
 8002c94:	483b      	ldr	r0, [pc, #236]	@ (8002d84 <MX_GPIO_Init+0x248>)
 8002c96:	f002 fc2d 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PL_EN_Pin|UHF_EN_Pin;
 8002c9a:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8002c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4834      	ldr	r0, [pc, #208]	@ (8002d84 <MX_GPIO_Init+0x248>)
 8002cb4:	f002 fc1e 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin;
 8002cb8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	482d      	ldr	r0, [pc, #180]	@ (8002d88 <MX_GPIO_Init+0x24c>)
 8002cd2:	f002 fc0f 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCS_EN_Pin;
 8002cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADCS_EN_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	4619      	mov	r1, r3
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cf2:	f002 fbff 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SYNC_PULSE_Pin;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SYNC_PULSE_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	4619      	mov	r1, r3
 8002d0a:	481e      	ldr	r0, [pc, #120]	@ (8002d84 <MX_GPIO_Init+0x248>)
 8002d0c:	f002 fbf2 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = UHF_FLT_Pin|GPS_FLT_Pin|ADCS12V_FLT_Pin|ADCS5V_FLT_Pin;
 8002d10:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8002d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	4619      	mov	r1, r3
 8002d24:	4816      	ldr	r0, [pc, #88]	@ (8002d80 <MX_GPIO_Init+0x244>)
 8002d26:	f002 fbe5 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPS_EN_Pin;
 8002d2a:	2340      	movs	r3, #64	@ 0x40
 8002d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4810      	ldr	r0, [pc, #64]	@ (8002d80 <MX_GPIO_Init+0x244>)
 8002d40:	f002 fbd8 	bl	80054f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BOOT0_Pin;
 8002d44:	2308      	movs	r3, #8
 8002d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480c      	ldr	r0, [pc, #48]	@ (8002d8c <MX_GPIO_Init+0x250>)
 8002d5c:	f002 fbca 	bl	80054f4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2105      	movs	r1, #5
 8002d64:	2007      	movs	r0, #7
 8002d66:	f002 f925 	bl	8004fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d6a:	2007      	movs	r0, #7
 8002d6c:	f002 f93e 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 8002d70:	bf00      	nop
 8002d72:	3730      	adds	r7, #48	@ 0x30
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	48001000 	.word	0x48001000
 8002d80:	48000400 	.word	0x48000400
 8002d84:	48000c00 	.word	0x48000c00
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48001c00 	.word	0x48001c00

08002d90 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002da2:	f000 fdf9 	bl	8003998 <HAL_IncTick>
  }
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40001000 	.word	0x40001000

08002db4 <Error_Handler>:

void Error_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002db8:	b672      	cpsid	i
}
 8002dba:	bf00      	nop
  __disable_irq();
  while(1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <Error_Handler+0x8>

08002dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <HAL_MspInit+0x4c>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dca:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_MspInit+0x4c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_MspInit+0x4c>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_MspInit+0x4c>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_MspInit+0x4c>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dea:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <HAL_MspInit+0x4c>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	210f      	movs	r1, #15
 8002dfa:	f06f 0001 	mvn.w	r0, #1
 8002dfe:	f002 f8d9 	bl	8004fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0ae      	sub	sp, #184	@ 0xb8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e28:	f107 0318 	add.w	r3, r7, #24
 8002e2c:	228c      	movs	r2, #140	@ 0x8c
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f009 ff03 	bl	800cc3c <memset>
  if(hadc->Instance==ADC1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a42      	ldr	r2, [pc, #264]	@ (8002f44 <HAL_ADC_MspInit+0x134>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d17d      	bne.n	8002f3c <HAL_ADC_MspInit+0x12c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002e46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002e56:	2308      	movs	r3, #8
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002e62:	2302      	movs	r3, #2
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 f9df 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002e7c:	f7ff ff9a 	bl	8002db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e80:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e84:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002e86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e98:	4b2b      	ldr	r3, [pc, #172]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	4a24      	ldr	r2, [pc, #144]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ebc:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_ADC_MspInit+0x138>)
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = RS5V_I_Pin|PS5V_I_Pin|ADCS5V_1_Pin|GPS_I_Pin
 8002ee0:	233f      	movs	r3, #63	@ 0x3f
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |PL_I_Pin|ADCS12V_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4814      	ldr	r0, [pc, #80]	@ (8002f4c <HAL_ADC_MspInit+0x13c>)
 8002efa:	f002 fafb 	bl	80054f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M_OUT_Pin|SA2_I_Pin|SA3_I_Pin|XB12V_I_Pin
 8002efe:	23ff      	movs	r3, #255	@ 0xff
 8002f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |CCU5V_I_Pin|CCU_I_Pin|RS3V3_I_Pin|ADCS_I_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f14:	4619      	mov	r1, r3
 8002f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f1a:	f002 faeb 	bl	80054f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UHF_I_Pin|OBC_I_Pin;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f24:	2303      	movs	r3, #3
 8002f26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4806      	ldr	r0, [pc, #24]	@ (8002f50 <HAL_ADC_MspInit+0x140>)
 8002f38:	f002 fadc 	bl	80054f4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f3c:	bf00      	nop
 8002f3e:	37b8      	adds	r7, #184	@ 0xb8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	50040000 	.word	0x50040000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	48000800 	.word	0x48000800
 8002f50:	48000400 	.word	0x48000400

08002f54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0ac      	sub	sp, #176	@ 0xb0
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	228c      	movs	r2, #140	@ 0x8c
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f009 fe61 	bl	800cc3c <memset>
  if(hi2c->Instance==I2C2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a4b      	ldr	r2, [pc, #300]	@ (80030ac <HAL_I2C_MspInit+0x158>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	f040 808e 	bne.w	80030a2 <HAL_I2C_MspInit+0x14e>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 f94e 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002f9e:	f7ff ff09 	bl	8002db4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	4b43      	ldr	r3, [pc, #268]	@ (80030b0 <HAL_I2C_MspInit+0x15c>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4a42      	ldr	r2, [pc, #264]	@ (80030b0 <HAL_I2C_MspInit+0x15c>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fae:	4b40      	ldr	r3, [pc, #256]	@ (80030b0 <HAL_I2C_MspInit+0x15c>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002fba:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc2:	2312      	movs	r3, #18
 8002fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4834      	ldr	r0, [pc, #208]	@ (80030b4 <HAL_I2C_MspInit+0x160>)
 8002fe2:	f002 fa87 	bl	80054f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fe6:	4b32      	ldr	r3, [pc, #200]	@ (80030b0 <HAL_I2C_MspInit+0x15c>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a31      	ldr	r2, [pc, #196]	@ (80030b0 <HAL_I2C_MspInit+0x15c>)
 8002fec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80030b0 <HAL_I2C_MspInit+0x15c>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003000:	4a2e      	ldr	r2, [pc, #184]	@ (80030bc <HAL_I2C_MspInit+0x168>)
 8003002:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8003004:	4b2c      	ldr	r3, [pc, #176]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003006:	2203      	movs	r2, #3
 8003008:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800300a:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003010:	4b29      	ldr	r3, [pc, #164]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003016:	4b28      	ldr	r3, [pc, #160]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003018:	2280      	movs	r2, #128	@ 0x80
 800301a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301c:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003022:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003028:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003034:	4820      	ldr	r0, [pc, #128]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003036:	f001 ffe7 	bl	8005008 <HAL_DMA_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8003040:	f7ff feb8 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 8003048:	63da      	str	r2, [r3, #60]	@ 0x3c
 800304a:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <HAL_I2C_MspInit+0x164>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_I2C_MspInit+0x170>)
 8003054:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003058:	2203      	movs	r2, #3
 800305a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800305c:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 800305e:	2210      	movs	r2, #16
 8003060:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003064:	2200      	movs	r2, #0
 8003066:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003068:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003076:	2200      	movs	r2, #0
 8003078:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800307a:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003080:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003086:	480e      	ldr	r0, [pc, #56]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 8003088:	f001 ffbe 	bl	8005008 <HAL_DMA_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 8003092:	f7ff fe8f 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 800309a:	639a      	str	r2, [r3, #56]	@ 0x38
 800309c:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <HAL_I2C_MspInit+0x16c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80030a2:	bf00      	nop
 80030a4:	37b0      	adds	r7, #176	@ 0xb0
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40005800 	.word	0x40005800
 80030b0:	40021000 	.word	0x40021000
 80030b4:	48000400 	.word	0x48000400
 80030b8:	2000058c 	.word	0x2000058c
 80030bc:	40020058 	.word	0x40020058
 80030c0:	200005d4 	.word	0x200005d4
 80030c4:	40020044 	.word	0x40020044

080030c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	@ 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a42      	ldr	r2, [pc, #264]	@ (80031f0 <HAL_SPI_MspInit+0x128>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d129      	bne.n	800313e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ea:	4b42      	ldr	r3, [pc, #264]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	4a41      	ldr	r2, [pc, #260]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 80030f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030f6:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003102:	4b3c      	ldr	r3, [pc, #240]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	4a3b      	ldr	r2, [pc, #236]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SS_Pin|SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800311a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800311e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800312c:	2305      	movs	r3, #5
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	4830      	ldr	r0, [pc, #192]	@ (80031f8 <HAL_SPI_MspInit+0x130>)
 8003138:	f002 f9dc 	bl	80054f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800313c:	e053      	b.n	80031e6 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2e      	ldr	r2, [pc, #184]	@ (80031fc <HAL_SPI_MspInit+0x134>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d14e      	bne.n	80031e6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003148:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	4a29      	ldr	r2, [pc, #164]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	6593      	str	r3, [r2, #88]	@ 0x58
 8003154:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003160:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003164:	4a23      	ldr	r2, [pc, #140]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800316c:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 800316e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003178:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 800317a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317c:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003184:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_SPI_MspInit+0x12c>)
 8003186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SS_Pin;
 8003190:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031a2:	2306      	movs	r3, #6
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b0:	f002 f9a0 	bl	80054f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SP13_SCK_Pin|SPI3_MISO_Pin|SP13_MOSI_Pin;
 80031b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031c6:	2306      	movs	r3, #6
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	4619      	mov	r1, r3
 80031d0:	480b      	ldr	r0, [pc, #44]	@ (8003200 <HAL_SPI_MspInit+0x138>)
 80031d2:	f002 f98f 	bl	80054f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2105      	movs	r1, #5
 80031da:	2033      	movs	r0, #51	@ 0x33
 80031dc:	f001 feea 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80031e0:	2033      	movs	r0, #51	@ 0x33
 80031e2:	f001 ff03 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3730      	adds	r7, #48	@ 0x30
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40013000 	.word	0x40013000
 80031f4:	40021000 	.word	0x40021000
 80031f8:	48001000 	.word	0x48001000
 80031fc:	40003c00 	.word	0x40003c00
 8003200:	48000800 	.word	0x48000800

08003204 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a25      	ldr	r2, [pc, #148]	@ (80032a8 <HAL_TIM_Base_MspInit+0xa4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10c      	bne.n	8003230 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003216:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321a:	4a24      	ldr	r2, [pc, #144]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 800321c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003220:	6613      	str	r3, [r2, #96]	@ 0x60
 8003222:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800322e:	e034      	b.n	800329a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003238:	d10c      	bne.n	8003254 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800323a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6593      	str	r3, [r2, #88]	@ 0x58
 8003246:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]
}
 8003252:	e022      	b.n	800329a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a15      	ldr	r2, [pc, #84]	@ (80032b0 <HAL_TIM_Base_MspInit+0xac>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10c      	bne.n	8003278 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6593      	str	r3, [r2, #88]	@ 0x58
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
}
 8003276:	e010      	b.n	800329a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	@ (80032b4 <HAL_TIM_Base_MspInit+0xb0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10b      	bne.n	800329a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6593      	str	r3, [r2, #88]	@ 0x58
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_TIM_Base_MspInit+0xa8>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40012c00 	.word	0x40012c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800

080032b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0b2      	sub	sp, #200	@ 0xc8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032d4:	228c      	movs	r2, #140	@ 0x8c
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f009 fcaf 	bl	800cc3c <memset>
  if(huart->Instance==USART1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a72      	ldr	r2, [pc, #456]	@ (80034ac <HAL_UART_MspInit+0x1f4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d145      	bne.n	8003374 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032ec:	2300      	movs	r3, #0
 80032ee:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 ff9d 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003300:	f7ff fd58 	bl	8002db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003304:	4b6a      	ldr	r3, [pc, #424]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	4a69      	ldr	r2, [pc, #420]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 800330a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800330e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003310:	4b67      	ldr	r3, [pc, #412]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 8003312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	4b64      	ldr	r3, [pc, #400]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003320:	4a63      	ldr	r2, [pc, #396]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003328:	4b61      	ldr	r3, [pc, #388]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 800332a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003334:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800334e:	2307      	movs	r3, #7
 8003350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800335e:	f002 f8c9 	bl	80054f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2105      	movs	r1, #5
 8003366:	2025      	movs	r0, #37	@ 0x25
 8003368:	f001 fe24 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800336c:	2025      	movs	r0, #37	@ 0x25
 800336e:	f001 fe3d 	bl	8004fec <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003372:	e169      	b.n	8003648 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a4e      	ldr	r2, [pc, #312]	@ (80034b4 <HAL_UART_MspInit+0x1fc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f040 80a6 	bne.w	80034cc <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003384:	2300      	movs	r3, #0
 8003386:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003388:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800338c:	4618      	mov	r0, r3
 800338e:	f003 ff51 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003398:	f7ff fd0c 	bl	8002db4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800339c:	4b44      	ldr	r3, [pc, #272]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	4a43      	ldr	r2, [pc, #268]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 80033a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a8:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b4:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 80033b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b8:	4a3d      	ldr	r2, [pc, #244]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c0:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HAL_UART_MspInit+0x1f8>)
 80033c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RS4851_DE_Pin|RS4851_TX_Pin|RS4851_RX_Pin;
 80033cc:	2370      	movs	r3, #112	@ 0x70
 80033ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033e4:	2307      	movs	r3, #7
 80033e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ea:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4831      	ldr	r0, [pc, #196]	@ (80034b8 <HAL_UART_MspInit+0x200>)
 80033f2:	f002 f87f 	bl	80054f4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80033f6:	4b31      	ldr	r3, [pc, #196]	@ (80034bc <HAL_UART_MspInit+0x204>)
 80033f8:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <HAL_UART_MspInit+0x208>)
 80033fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80033fc:	4b2f      	ldr	r3, [pc, #188]	@ (80034bc <HAL_UART_MspInit+0x204>)
 80033fe:	2202      	movs	r2, #2
 8003400:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003402:	4b2e      	ldr	r3, [pc, #184]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003404:	2210      	movs	r2, #16
 8003406:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003408:	4b2c      	ldr	r3, [pc, #176]	@ (80034bc <HAL_UART_MspInit+0x204>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800340e:	4b2b      	ldr	r3, [pc, #172]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003410:	2280      	movs	r2, #128	@ 0x80
 8003412:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003414:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003416:	2200      	movs	r2, #0
 8003418:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800341a:	4b28      	ldr	r3, [pc, #160]	@ (80034bc <HAL_UART_MspInit+0x204>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003420:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003426:	4b25      	ldr	r3, [pc, #148]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003428:	2200      	movs	r2, #0
 800342a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800342c:	4823      	ldr	r0, [pc, #140]	@ (80034bc <HAL_UART_MspInit+0x204>)
 800342e:	f001 fdeb 	bl	8005008 <HAL_DMA_Init>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_UART_MspInit+0x184>
      Error_Handler();
 8003438:	f7ff fcbc 	bl	8002db4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003440:	671a      	str	r2, [r3, #112]	@ 0x70
 8003442:	4a1e      	ldr	r2, [pc, #120]	@ (80034bc <HAL_UART_MspInit+0x204>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003448:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 800344a:	4a1f      	ldr	r2, [pc, #124]	@ (80034c8 <HAL_UART_MspInit+0x210>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800344e:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003450:	2202      	movs	r2, #2
 8003452:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003454:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003466:	4b17      	ldr	r3, [pc, #92]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800346c:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003472:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003474:	2200      	movs	r2, #0
 8003476:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003478:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 800347a:	2200      	movs	r2, #0
 800347c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800347e:	4811      	ldr	r0, [pc, #68]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003480:	f001 fdc2 	bl	8005008 <HAL_DMA_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 800348a:	f7ff fc93 	bl	8002db4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a0c      	ldr	r2, [pc, #48]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003492:	675a      	str	r2, [r3, #116]	@ 0x74
 8003494:	4a0b      	ldr	r2, [pc, #44]	@ (80034c4 <HAL_UART_MspInit+0x20c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2105      	movs	r1, #5
 800349e:	2026      	movs	r0, #38	@ 0x26
 80034a0:	f001 fd88 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034a4:	2026      	movs	r0, #38	@ 0x26
 80034a6:	f001 fda1 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 80034aa:	e0cd      	b.n	8003648 <HAL_UART_MspInit+0x390>
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40004400 	.word	0x40004400
 80034b8:	48000c00 	.word	0x48000c00
 80034bc:	200009ac 	.word	0x200009ac
 80034c0:	40020080 	.word	0x40020080
 80034c4:	200009f4 	.word	0x200009f4
 80034c8:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003650 <HAL_UART_MspInit+0x398>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f040 80b8 	bne.w	8003648 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80034d8:	2304      	movs	r3, #4
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80034dc:	2300      	movs	r3, #0
 80034de:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fea5 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 80034f0:	f7ff fc60 	bl	8002db4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034f4:	4b57      	ldr	r3, [pc, #348]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	4a56      	ldr	r2, [pc, #344]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 80034fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	4b54      	ldr	r3, [pc, #336]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350c:	4b51      	ldr	r3, [pc, #324]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003510:	4a50      	ldr	r2, [pc, #320]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 8003512:	f043 0302 	orr.w	r3, r3, #2
 8003516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003518:	4b4e      	ldr	r3, [pc, #312]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003524:	4b4b      	ldr	r3, [pc, #300]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003528:	4a4a      	ldr	r2, [pc, #296]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003530:	4b48      	ldr	r3, [pc, #288]	@ (8003654 <HAL_UART_MspInit+0x39c>)
 8003532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS4852_TX_Pin|RS4852_RX_Pin;
 800353c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003556:	2307      	movs	r3, #7
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003560:	4619      	mov	r1, r3
 8003562:	483d      	ldr	r0, [pc, #244]	@ (8003658 <HAL_UART_MspInit+0x3a0>)
 8003564:	f001 ffc6 	bl	80054f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8003568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003582:	2307      	movs	r3, #7
 8003584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8003588:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800358c:	4619      	mov	r1, r3
 800358e:	4833      	ldr	r0, [pc, #204]	@ (800365c <HAL_UART_MspInit+0x3a4>)
 8003590:	f001 ffb0 	bl	80054f4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003594:	4b32      	ldr	r3, [pc, #200]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 8003596:	4a33      	ldr	r2, [pc, #204]	@ (8003664 <HAL_UART_MspInit+0x3ac>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 800359a:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 800359c:	2202      	movs	r2, #2
 800359e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035a2:	2210      	movs	r2, #16
 80035a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035b8:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80035be:	4b28      	ldr	r3, [pc, #160]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035c4:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80035ca:	4825      	ldr	r0, [pc, #148]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035cc:	f001 fd1c 	bl	8005008 <HAL_DMA_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_UART_MspInit+0x322>
      Error_Handler();
 80035d6:	f7ff fbed 	bl	8002db4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a20      	ldr	r2, [pc, #128]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035de:	671a      	str	r2, [r3, #112]	@ 0x70
 80035e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_UART_MspInit+0x3a8>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80035e6:	4b20      	ldr	r3, [pc, #128]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 80035e8:	4a20      	ldr	r2, [pc, #128]	@ (800366c <HAL_UART_MspInit+0x3b4>)
 80035ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 80035ee:	2202      	movs	r2, #2
 80035f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 8003600:	2280      	movs	r2, #128	@ 0x80
 8003602:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 8003606:	2200      	movs	r2, #0
 8003608:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800360a:	4b17      	ldr	r3, [pc, #92]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 800360c:	2200      	movs	r2, #0
 800360e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003610:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 8003618:	2200      	movs	r2, #0
 800361a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800361c:	4812      	ldr	r0, [pc, #72]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 800361e:	f001 fcf3 	bl	8005008 <HAL_DMA_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_MspInit+0x374>
      Error_Handler();
 8003628:	f7ff fbc4 	bl	8002db4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 8003630:	675a      	str	r2, [r3, #116]	@ 0x74
 8003632:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <HAL_UART_MspInit+0x3b0>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2105      	movs	r1, #5
 800363c:	2027      	movs	r0, #39	@ 0x27
 800363e:	f001 fcb9 	bl	8004fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003642:	2027      	movs	r0, #39	@ 0x27
 8003644:	f001 fcd2 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 8003648:	bf00      	nop
 800364a:	37c8      	adds	r7, #200	@ 0xc8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40004800 	.word	0x40004800
 8003654:	40021000 	.word	0x40021000
 8003658:	48000400 	.word	0x48000400
 800365c:	48000c00 	.word	0x48000c00
 8003660:	20000a3c 	.word	0x20000a3c
 8003664:	4002001c 	.word	0x4002001c
 8003668:	20000a84 	.word	0x20000a84
 800366c:	40020030 	.word	0x40020030

08003670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	@ 0x38
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800367e:	4b34      	ldr	r3, [pc, #208]	@ (8003750 <HAL_InitTick+0xe0>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <HAL_InitTick+0xe0>)
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	6593      	str	r3, [r2, #88]	@ 0x58
 800368a:	4b31      	ldr	r3, [pc, #196]	@ (8003750 <HAL_InitTick+0xe0>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003696:	f107 0210 	add.w	r2, r7, #16
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 fd35 	bl	8007110 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036b0:	f003 fd02 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 80036b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80036b6:	e004      	b.n	80036c2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80036b8:	f003 fcfe 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 80036bc:	4603      	mov	r3, r0
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c4:	4a23      	ldr	r2, [pc, #140]	@ (8003754 <HAL_InitTick+0xe4>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	3b01      	subs	r3, #1
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_InitTick+0xe8>)
 80036d2:	4a22      	ldr	r2, [pc, #136]	@ (800375c <HAL_InitTick+0xec>)
 80036d4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <HAL_InitTick+0xe8>)
 80036d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036de:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <HAL_InitTick+0xe8>)
 80036e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003758 <HAL_InitTick+0xe8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_InitTick+0xe8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_InitTick+0xe8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036f6:	4818      	ldr	r0, [pc, #96]	@ (8003758 <HAL_InitTick+0xe8>)
 80036f8:	f004 fc29 	bl	8007f4e <HAL_TIM_Base_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003702:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11b      	bne.n	8003742 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800370a:	4813      	ldr	r0, [pc, #76]	@ (8003758 <HAL_InitTick+0xe8>)
 800370c:	f004 fc76 	bl	8007ffc <HAL_TIM_Base_Start_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003716:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800371a:	2b00      	cmp	r3, #0
 800371c:	d111      	bne.n	8003742 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800371e:	2036      	movs	r0, #54	@ 0x36
 8003720:	f001 fc64 	bl	8004fec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	d808      	bhi.n	800373c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800372a:	2200      	movs	r2, #0
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	2036      	movs	r0, #54	@ 0x36
 8003730:	f001 fc40 	bl	8004fb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003734:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <HAL_InitTick+0xf0>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e002      	b.n	8003742 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003742:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003746:	4618      	mov	r0, r3
 8003748:	3738      	adds	r7, #56	@ 0x38
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	431bde83 	.word	0x431bde83
 8003758:	20000ae0 	.word	0x20000ae0
 800375c:	40001000 	.word	0x40001000
 8003760:	200001bc 	.word	0x200001bc

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <NMI_Handler+0x4>

0800376c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <HardFault_Handler+0x4>

08003774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <MemManage_Handler+0x4>

0800377c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <BusFault_Handler+0x4>

08003784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <UsageFault_Handler+0x4>

0800378c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SYNC_PULSE_Pin);
 800379e:	2002      	movs	r0, #2
 80037a0:	f002 f86a 	bl	8005878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037ac:	4802      	ldr	r0, [pc, #8]	@ (80037b8 <DMA1_Channel2_IRQHandler+0x10>)
 80037ae:	f001 fdc2 	bl	8005336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000a3c 	.word	0x20000a3c

080037bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <DMA1_Channel3_IRQHandler+0x10>)
 80037c2:	f001 fdb8 	bl	8005336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000a84 	.word	0x20000a84

080037d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80037d4:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <DMA1_Channel4_IRQHandler+0x10>)
 80037d6:	f001 fdae 	bl	8005336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200005d4 	.word	0x200005d4

080037e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <DMA1_Channel5_IRQHandler+0x10>)
 80037ea:	f001 fda4 	bl	8005336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000058c 	.word	0x2000058c

080037f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <DMA1_Channel6_IRQHandler+0x10>)
 80037fe:	f001 fd9a 	bl	8005336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200009f4 	.word	0x200009f4

0800380c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <DMA1_Channel7_IRQHandler+0x10>)
 8003812:	f001 fd90 	bl	8005336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200009ac 	.word	0x200009ac

08003820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <USART1_IRQHandler+0x10>)
 8003826:	f005 f95b 	bl	8008ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000814 	.word	0x20000814

08003834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003838:	4802      	ldr	r0, [pc, #8]	@ (8003844 <USART2_IRQHandler+0x10>)
 800383a:	f005 f951 	bl	8008ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	2000089c 	.word	0x2000089c

08003848 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800384c:	4802      	ldr	r0, [pc, #8]	@ (8003858 <USART3_IRQHandler+0x10>)
 800384e:	f005 f947 	bl	8008ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000924 	.word	0x20000924

0800385c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003860:	4802      	ldr	r0, [pc, #8]	@ (800386c <SPI3_IRQHandler+0x10>)
 8003862:	f004 fa55 	bl	8007d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000680 	.word	0x20000680

08003870 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003874:	4802      	ldr	r0, [pc, #8]	@ (8003880 <TIM6_DAC_IRQHandler+0x10>)
 8003876:	f004 fc31 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000ae0 	.word	0x20000ae0

08003884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <_sbrk+0x5c>)
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <_sbrk+0x60>)
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <_sbrk+0x64>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	@ (80038ec <_sbrk+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <_sbrk+0x64>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d207      	bcs.n	80038c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038b4:	f009 f9ea 	bl	800cc8c <__errno>
 80038b8:	4603      	mov	r3, r0
 80038ba:	220c      	movs	r2, #12
 80038bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e009      	b.n	80038d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <_sbrk+0x64>)
 80038d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20040000 	.word	0x20040000
 80038e4:	00000400 	.word	0x00000400
 80038e8:	20000b2c 	.word	0x20000b2c
 80038ec:	200040e0 	.word	0x200040e0

080038f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <SystemInit+0x20>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <SystemInit+0x20>)
 80038fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800394c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003918:	f7ff ffea 	bl	80038f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800391c:	480c      	ldr	r0, [pc, #48]	@ (8003950 <LoopForever+0x6>)
  ldr r1, =_edata
 800391e:	490d      	ldr	r1, [pc, #52]	@ (8003954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <LoopForever+0xe>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800392c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003934:	4c0a      	ldr	r4, [pc, #40]	@ (8003960 <LoopForever+0x16>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003942:	f009 f9a9 	bl	800cc98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003946:	f7fe fc6f 	bl	8002228 <main>

0800394a <LoopForever>:

LoopForever:
    b LoopForever
 800394a:	e7fe      	b.n	800394a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800394c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003954:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003958:	0800d95c 	.word	0x0800d95c
  ldr r2, =_sbss
 800395c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003960:	200040dc 	.word	0x200040dc

08003964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003964:	e7fe      	b.n	8003964 <ADC1_2_IRQHandler>

08003966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003970:	2003      	movs	r0, #3
 8003972:	f001 fb14 	bl	8004f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003976:	200f      	movs	r0, #15
 8003978:	f7ff fe7a 	bl	8003670 <HAL_InitTick>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	71fb      	strb	r3, [r7, #7]
 8003986:	e001      	b.n	800398c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003988:	f7ff fa1a 	bl	8002dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800398c:	79fb      	ldrb	r3, [r7, #7]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800399c:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_IncTick+0x20>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_IncTick+0x24>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_IncTick+0x24>)
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	200001c0 	.word	0x200001c0
 80039bc:	20000b30 	.word	0x20000b30

080039c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return uwTick;
 80039c4:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <HAL_GetTick+0x14>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000b30 	.word	0x20000b30

080039d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff ffee 	bl	80039c0 <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d005      	beq.n	80039fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80039f2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <HAL_Delay+0x44>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	bf00      	nop
 8003a00:	f7ff ffde 	bl	80039c0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f7      	bhi.n	8003a00 <HAL_Delay+0x28>
  {
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200001c0 	.word	0x200001c0

08003a20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3360      	adds	r3, #96	@ 0x60
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <LL_ADC_SetOffset+0x44>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	03fff000 	.word	0x03fff000

08003ad0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3360      	adds	r3, #96	@ 0x60
 8003ade:	461a      	mov	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3360      	adds	r3, #96	@ 0x60
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	615a      	str	r2, [r3, #20]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3330      	adds	r3, #48	@ 0x30
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	4413      	add	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	211f      	movs	r1, #31
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	f003 011f 	and.w	r1, r3, #31
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b087      	sub	sp, #28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3314      	adds	r3, #20
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	0e5b      	lsrs	r3, r3, #25
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	0d1b      	lsrs	r3, r3, #20
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2107      	movs	r1, #7
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	0d1b      	lsrs	r3, r3, #20
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	43db      	mvns	r3, r3
 8003c46:	401a      	ands	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0318 	and.w	r3, r3, #24
 8003c4e:	4908      	ldr	r1, [pc, #32]	@ (8003c70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c50:	40d9      	lsrs	r1, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	400b      	ands	r3, r1
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	0007ffff 	.word	0x0007ffff

08003c74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 031f 	and.w	r3, r3, #31
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ca0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6093      	str	r3, [r2, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc8:	d101      	bne.n	8003cce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003cec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cf0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d18:	d101      	bne.n	8003d1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <LL_ADC_IsEnabled+0x18>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <LL_ADC_IsEnabled+0x1a>
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d101      	bne.n	8003dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d101      	bne.n	8003de0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b089      	sub	sp, #36	@ 0x24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e133      	b.n	8004072 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fe fff9 	bl	8002e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff3f 	bl	8003cb4 <LL_ADC_IsDeepPowerDownEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff25 	bl	8003c90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff5a 	bl	8003d04 <LL_ADC_IsInternalRegulatorEnabled>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d115      	bne.n	8003e82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff3e 	bl	8003cdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e60:	4b86      	ldr	r3, [pc, #536]	@ (800407c <HAL_ADC_Init+0x28c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	4a86      	ldr	r2, [pc, #536]	@ (8004080 <HAL_ADC_Init+0x290>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e74:	e002      	b.n	8003e7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f9      	bne.n	8003e76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff ff3c 	bl	8003d04 <LL_ADC_IsInternalRegulatorEnabled>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	f043 0210 	orr.w	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff75 	bl	8003da2 <LL_ADC_REG_IsConversionOngoing>
 8003eb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80cc 	bne.w	8004060 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 80c8 	bne.w	8004060 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ed8:	f043 0202 	orr.w	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff35 	bl	8003d54 <LL_ADC_IsEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d115      	bne.n	8003f1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef0:	4864      	ldr	r0, [pc, #400]	@ (8004084 <HAL_ADC_Init+0x294>)
 8003ef2:	f7ff ff2f 	bl	8003d54 <LL_ADC_IsEnabled>
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4863      	ldr	r0, [pc, #396]	@ (8004088 <HAL_ADC_Init+0x298>)
 8003efa:	f7ff ff2b 	bl	8003d54 <LL_ADC_IsEnabled>
 8003efe:	4603      	mov	r3, r0
 8003f00:	431c      	orrs	r4, r3
 8003f02:	4862      	ldr	r0, [pc, #392]	@ (800408c <HAL_ADC_Init+0x29c>)
 8003f04:	f7ff ff26 	bl	8003d54 <LL_ADC_IsEnabled>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4323      	orrs	r3, r4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4619      	mov	r1, r3
 8003f16:	485e      	ldr	r0, [pc, #376]	@ (8004090 <HAL_ADC_Init+0x2a0>)
 8003f18:	f7ff fd82 	bl	8003a20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7e5b      	ldrb	r3, [r3, #25]
 8003f20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d106      	bne.n	8003f58 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	045b      	lsls	r3, r3, #17
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	4b46      	ldr	r3, [pc, #280]	@ (8004094 <HAL_ADC_Init+0x2a4>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff1b 	bl	8003dc8 <LL_ADC_INJ_IsConversionOngoing>
 8003f92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d140      	bne.n	800401c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d13d      	bne.n	800401c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7e1b      	ldrb	r3, [r3, #24]
 8003fa8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003faa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fb2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fc2:	f023 0306 	bic.w	r3, r3, #6
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d118      	bne.n	800400c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ff0:	4311      	orrs	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e007      	b.n	800401c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d10c      	bne.n	800403e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f023 010f 	bic.w	r1, r3, #15
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
 800403c:	e007      	b.n	800404e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 020f 	bic.w	r2, r2, #15
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	659a      	str	r2, [r3, #88]	@ 0x58
 800405e:	e007      	b.n	8004070 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004064:	f043 0210 	orr.w	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004070:	7ffb      	ldrb	r3, [r7, #31]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	@ 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd90      	pop	{r4, r7, pc}
 800407a:	bf00      	nop
 800407c:	200001b8 	.word	0x200001b8
 8004080:	053e2d63 	.word	0x053e2d63
 8004084:	50040000 	.word	0x50040000
 8004088:	50040100 	.word	0x50040100
 800408c:	50040200 	.word	0x50040200
 8004090:	50040300 	.word	0x50040300
 8004094:	fff0c007 	.word	0xfff0c007

08004098 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040a4:	4853      	ldr	r0, [pc, #332]	@ (80041f4 <HAL_ADC_Start_DMA+0x15c>)
 80040a6:	f7ff fde5 	bl	8003c74 <LL_ADC_GetMultimode>
 80040aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fe76 	bl	8003da2 <LL_ADC_REG_IsConversionOngoing>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 8093 	bne.w	80041e4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_Start_DMA+0x34>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e08e      	b.n	80041ea <HAL_ADC_Start_DMA+0x152>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a47      	ldr	r2, [pc, #284]	@ (80041f8 <HAL_ADC_Start_DMA+0x160>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d008      	beq.n	80040f0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d002      	beq.n	80040f0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b09      	cmp	r3, #9
 80040ee:	d172      	bne.n	80041d6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fcb7 	bl	8004a64 <ADC_Enable>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d165      	bne.n	80041cc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a38      	ldr	r2, [pc, #224]	@ (80041fc <HAL_ADC_Start_DMA+0x164>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d002      	beq.n	8004124 <HAL_ADC_Start_DMA+0x8c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	e000      	b.n	8004126 <HAL_ADC_Start_DMA+0x8e>
 8004124:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <HAL_ADC_Start_DMA+0x168>)
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	4293      	cmp	r3, r2
 800412c:	d002      	beq.n	8004134 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004150:	f023 0206 	bic.w	r2, r3, #6
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004158:	e002      	b.n	8004160 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004164:	4a27      	ldr	r2, [pc, #156]	@ (8004204 <HAL_ADC_Start_DMA+0x16c>)
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416c:	4a26      	ldr	r2, [pc, #152]	@ (8004208 <HAL_ADC_Start_DMA+0x170>)
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004174:	4a25      	ldr	r2, [pc, #148]	@ (800420c <HAL_ADC_Start_DMA+0x174>)
 8004176:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	221c      	movs	r2, #28
 800417e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0210 	orr.w	r2, r2, #16
 8004196:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3340      	adds	r3, #64	@ 0x40
 80041b2:	4619      	mov	r1, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f000 ffde 	bl	8005178 <HAL_DMA_Start_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fdd8 	bl	8003d7a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041ca:	e00d      	b.n	80041e8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80041d4:	e008      	b.n	80041e8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80041e2:	e001      	b.n	80041e8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	50040300 	.word	0x50040300
 80041f8:	50040200 	.word	0x50040200
 80041fc:	50040100 	.word	0x50040100
 8004200:	50040000 	.word	0x50040000
 8004204:	08004b71 	.word	0x08004b71
 8004208:	08004c49 	.word	0x08004c49
 800420c:	08004c65 	.word	0x08004c65

08004210 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b0b6      	sub	sp, #216	@ 0xd8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x22>
 800426a:	2302      	movs	r3, #2
 800426c:	e3e3      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x7ea>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd91 	bl	8003da2 <LL_ADC_REG_IsConversionOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 83c4 	bne.w	8004a10 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b05      	cmp	r3, #5
 8004296:	d824      	bhi.n	80042e2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	3b02      	subs	r3, #2
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d81b      	bhi.n	80042da <HAL_ADC_ConfigChannel+0x8e>
 80042a2:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <HAL_ADC_ConfigChannel+0x5c>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042c9 	.word	0x080042c9
 80042b4:	080042d1 	.word	0x080042d1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80042b8:	230c      	movs	r3, #12
 80042ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80042be:	e010      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80042c0:	2312      	movs	r3, #18
 80042c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80042c6:	e00c      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80042c8:	2318      	movs	r3, #24
 80042ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80042ce:	e008      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80042d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80042d8:	e003      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80042da:	2306      	movs	r3, #6
 80042dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80042e0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80042f0:	f7ff fc45 	bl	8003b7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fd52 	bl	8003da2 <LL_ADC_REG_IsConversionOngoing>
 80042fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fd5e 	bl	8003dc8 <LL_ADC_INJ_IsConversionOngoing>
 800430c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 81bf 	bne.w	8004698 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800431a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 81ba 	bne.w	8004698 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800432c:	d10f      	bne.n	800434e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	4619      	mov	r1, r3
 800433a:	f7ff fc4c 	bl	8003bd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fbf3 	bl	8003b32 <LL_ADC_SetSamplingTimeCommonConfig>
 800434c:	e00e      	b.n	800436c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	461a      	mov	r2, r3
 800435c:	f7ff fc3b 	bl	8003bd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fbe3 	bl	8003b32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	08db      	lsrs	r3, r3, #3
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d00a      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6919      	ldr	r1, [r3, #16]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800439e:	f7ff fb73 	bl	8003a88 <LL_ADC_SetOffset>
 80043a2:	e179      	b.n	8004698 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fb90 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x184>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fb85 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	f003 021f 	and.w	r2, r3, #31
 80043ce:	e01e      	b.n	800440e <HAL_ADC_ConfigChannel+0x1c2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fb7a 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80043fe:	2320      	movs	r3, #32
 8004400:	e004      	b.n	800440c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x1da>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	e018      	b.n	8004458 <HAL_ADC_ConfigChannel+0x20c>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800443a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800443e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004442:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800444a:	2320      	movs	r3, #32
 800444c:	e004      	b.n	8004458 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800444e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004458:	429a      	cmp	r2, r3
 800445a:	d106      	bne.n	800446a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2200      	movs	r2, #0
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fb49 	bl	8003afc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fb2d 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 8004476:	4603      	mov	r3, r0
 8004478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x24a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fb22 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 800448c:	4603      	mov	r3, r0
 800448e:	0e9b      	lsrs	r3, r3, #26
 8004490:	f003 021f 	and.w	r2, r3, #31
 8004494:	e01e      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x288>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fb17 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80044c4:	2320      	movs	r3, #32
 80044c6:	e004      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80044c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x2a0>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	0e9b      	lsrs	r3, r3, #26
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	e018      	b.n	800451e <HAL_ADC_ConfigChannel+0x2d2>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004500:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	e004      	b.n	800451e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800451e:	429a      	cmp	r2, r3
 8004520:	d106      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fae6 	bl	8003afc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2102      	movs	r1, #2
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff faca 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 800453c:	4603      	mov	r3, r0
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_ADC_ConfigChannel+0x310>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2102      	movs	r1, #2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fabf 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	f003 021f 	and.w	r2, r3, #31
 800455a:	e01e      	b.n	800459a <HAL_ADC_ConfigChannel+0x34e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fab4 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800457a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800458a:	2320      	movs	r3, #32
 800458c:	e004      	b.n	8004598 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x366>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	0e9b      	lsrs	r3, r3, #26
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	e014      	b.n	80045dc <HAL_ADC_ConfigChannel+0x390>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80045ce:	2320      	movs	r3, #32
 80045d0:	e004      	b.n	80045dc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80045d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045dc:	429a      	cmp	r2, r3
 80045de:	d106      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fa87 	bl	8003afc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2103      	movs	r1, #3
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fa6b 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <HAL_ADC_ConfigChannel+0x3ce>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2103      	movs	r1, #3
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fa60 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 8004610:	4603      	mov	r3, r0
 8004612:	0e9b      	lsrs	r3, r3, #26
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	e017      	b.n	800464a <HAL_ADC_ConfigChannel+0x3fe>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2103      	movs	r1, #3
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fa55 	bl	8003ad0 <LL_ADC_GetOffsetChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004634:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800463c:	2320      	movs	r3, #32
 800463e:	e003      	b.n	8004648 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004640:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x416>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	e011      	b.n	8004686 <HAL_ADC_ConfigChannel+0x43a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004672:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800467a:	2320      	movs	r3, #32
 800467c:	e003      	b.n	8004686 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800467e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004686:	429a      	cmp	r2, r3
 8004688:	d106      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	2103      	movs	r1, #3
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fa32 	bl	8003afc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fb59 	bl	8003d54 <LL_ADC_IsEnabled>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f040 813f 	bne.w	8004928 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7ff fab8 	bl	8003c2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a8e      	ldr	r2, [pc, #568]	@ (80048fc <HAL_ADC_ConfigChannel+0x6b0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f040 8130 	bne.w	8004928 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x4a4>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	bf94      	ite	ls
 80046e8:	2301      	movls	r3, #1
 80046ea:	2300      	movhi	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e019      	b.n	8004724 <HAL_ADC_ConfigChannel+0x4d8>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80046fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004700:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004708:	2320      	movs	r3, #32
 800470a:	e003      	b.n	8004714 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800470c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3301      	adds	r3, #1
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b09      	cmp	r3, #9
 800471c:	bf94      	ite	ls
 800471e:	2301      	movls	r3, #1
 8004720:	2300      	movhi	r3, #0
 8004722:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004724:	2b00      	cmp	r3, #0
 8004726:	d079      	beq.n	800481c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x4f8>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0e9b      	lsrs	r3, r3, #26
 800473a:	3301      	adds	r3, #1
 800473c:	069b      	lsls	r3, r3, #26
 800473e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004742:	e015      	b.n	8004770 <HAL_ADC_ConfigChannel+0x524>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004754:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800475c:	2320      	movs	r3, #32
 800475e:	e003      	b.n	8004768 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3301      	adds	r3, #1
 800476a:	069b      	lsls	r3, r3, #26
 800476c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x544>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0e9b      	lsrs	r3, r3, #26
 8004782:	3301      	adds	r3, #1
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2101      	movs	r1, #1
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	e017      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x574>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004798:	fa93 f3a3 	rbit	r3, r3
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800479e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80047a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80047a8:	2320      	movs	r3, #32
 80047aa:	e003      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80047ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	ea42 0103 	orr.w	r1, r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x59a>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	0e9b      	lsrs	r3, r3, #26
 80047d6:	3301      	adds	r3, #1
 80047d8:	f003 021f 	and.w	r2, r3, #31
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	051b      	lsls	r3, r3, #20
 80047e4:	e018      	b.n	8004818 <HAL_ADC_ConfigChannel+0x5cc>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80047fe:	2320      	movs	r3, #32
 8004800:	e003      	b.n	800480a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	3301      	adds	r3, #1
 800480c:	f003 021f 	and.w	r2, r3, #31
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004818:	430b      	orrs	r3, r1
 800481a:	e080      	b.n	800491e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	2b00      	cmp	r3, #0
 8004826:	d107      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x5ec>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	3301      	adds	r3, #1
 8004830:	069b      	lsls	r3, r3, #26
 8004832:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004836:	e015      	b.n	8004864 <HAL_ADC_ConfigChannel+0x618>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800484a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004850:	2320      	movs	r3, #32
 8004852:	e003      	b.n	800485c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004856:	fab3 f383 	clz	r3, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	3301      	adds	r3, #1
 800485e:	069b      	lsls	r3, r3, #26
 8004860:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x638>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	0e9b      	lsrs	r3, r3, #26
 8004876:	3301      	adds	r3, #1
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2101      	movs	r1, #1
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	e017      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x668>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	61bb      	str	r3, [r7, #24]
  return result;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800489c:	2320      	movs	r3, #32
 800489e:	e003      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	2101      	movs	r1, #1
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x694>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	3301      	adds	r3, #1
 80048cc:	f003 021f 	and.w	r2, r3, #31
 80048d0:	4613      	mov	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4413      	add	r3, r2
 80048d6:	3b1e      	subs	r3, #30
 80048d8:	051b      	lsls	r3, r3, #20
 80048da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048de:	e01d      	b.n	800491c <HAL_ADC_ConfigChannel+0x6d0>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	60fb      	str	r3, [r7, #12]
  return result;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80048f8:	2320      	movs	r3, #32
 80048fa:	e005      	b.n	8004908 <HAL_ADC_ConfigChannel+0x6bc>
 80048fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f003 021f 	and.w	r2, r3, #31
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	3b1e      	subs	r3, #30
 8004916:	051b      	lsls	r3, r3, #20
 8004918:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800491c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004922:	4619      	mov	r1, r3
 8004924:	f7ff f957 	bl	8003bd6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b44      	ldr	r3, [pc, #272]	@ (8004a40 <HAL_ADC_ConfigChannel+0x7f4>)
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d07a      	beq.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004934:	4843      	ldr	r0, [pc, #268]	@ (8004a44 <HAL_ADC_ConfigChannel+0x7f8>)
 8004936:	f7ff f899 	bl	8003a6c <LL_ADC_GetCommonPathInternalCh>
 800493a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a41      	ldr	r2, [pc, #260]	@ (8004a48 <HAL_ADC_ConfigChannel+0x7fc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d12c      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800494c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d126      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3c      	ldr	r2, [pc, #240]	@ (8004a4c <HAL_ADC_ConfigChannel+0x800>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_ADC_ConfigChannel+0x71c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3b      	ldr	r2, [pc, #236]	@ (8004a50 <HAL_ADC_ConfigChannel+0x804>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d15d      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800496c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004970:	4619      	mov	r1, r3
 8004972:	4834      	ldr	r0, [pc, #208]	@ (8004a44 <HAL_ADC_ConfigChannel+0x7f8>)
 8004974:	f7ff f867 	bl	8003a46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004978:	4b36      	ldr	r3, [pc, #216]	@ (8004a54 <HAL_ADC_ConfigChannel+0x808>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	099b      	lsrs	r3, r3, #6
 800497e:	4a36      	ldr	r2, [pc, #216]	@ (8004a58 <HAL_ADC_ConfigChannel+0x80c>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004992:	e002      	b.n	800499a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f9      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049a0:	e040      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a5c <HAL_ADC_ConfigChannel+0x810>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d118      	bne.n	80049de <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d112      	bne.n	80049de <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a23      	ldr	r2, [pc, #140]	@ (8004a4c <HAL_ADC_ConfigChannel+0x800>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_ADC_ConfigChannel+0x780>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <HAL_ADC_ConfigChannel+0x804>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d12d      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d4:	4619      	mov	r1, r3
 80049d6:	481b      	ldr	r0, [pc, #108]	@ (8004a44 <HAL_ADC_ConfigChannel+0x7f8>)
 80049d8:	f7ff f835 	bl	8003a46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049dc:	e024      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a60 <HAL_ADC_ConfigChannel+0x814>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d120      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11a      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <HAL_ADC_ConfigChannel+0x800>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d115      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a06:	4619      	mov	r1, r3
 8004a08:	480e      	ldr	r0, [pc, #56]	@ (8004a44 <HAL_ADC_ConfigChannel+0x7f8>)
 8004a0a:	f7ff f81c 	bl	8003a46 <LL_ADC_SetCommonPathInternalCh>
 8004a0e:	e00c      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a22:	e002      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a24:	bf00      	nop
 8004a26:	e000      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a32:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	37d8      	adds	r7, #216	@ 0xd8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	80080000 	.word	0x80080000
 8004a44:	50040300 	.word	0x50040300
 8004a48:	c7520000 	.word	0xc7520000
 8004a4c:	50040000 	.word	0x50040000
 8004a50:	50040200 	.word	0x50040200
 8004a54:	200001b8 	.word	0x200001b8
 8004a58:	053e2d63 	.word	0x053e2d63
 8004a5c:	cb840000 	.word	0xcb840000
 8004a60:	80000001 	.word	0x80000001

08004a64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff f96d 	bl	8003d54 <LL_ADC_IsEnabled>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d169      	bne.n	8004b54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <ADC_Enable+0xfc>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e055      	b.n	8004b56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f93c 	bl	8003d2c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ab4:	482b      	ldr	r0, [pc, #172]	@ (8004b64 <ADC_Enable+0x100>)
 8004ab6:	f7fe ffd9 	bl	8003a6c <LL_ADC_GetCommonPathInternalCh>
 8004aba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac4:	4b28      	ldr	r3, [pc, #160]	@ (8004b68 <ADC_Enable+0x104>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	4a28      	ldr	r2, [pc, #160]	@ (8004b6c <ADC_Enable+0x108>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ade:	e002      	b.n	8004ae6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f9      	bne.n	8004ae0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004aec:	f7fe ff68 	bl	80039c0 <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004af2:	e028      	b.n	8004b46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f92b 	bl	8003d54 <LL_ADC_IsEnabled>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff f90f 	bl	8003d2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b0e:	f7fe ff57 	bl	80039c0 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d914      	bls.n	8004b46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d00d      	beq.n	8004b46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e007      	b.n	8004b56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d1cf      	bne.n	8004af4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	8000003f 	.word	0x8000003f
 8004b64:	50040300 	.word	0x50040300
 8004b68:	200001b8 	.word	0x200001b8
 8004b6c:	053e2d63 	.word	0x053e2d63

08004b70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d14b      	bne.n	8004c22 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d021      	beq.n	8004be8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe ffd5 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d032      	beq.n	8004c1a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d12b      	bne.n	8004c1a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11f      	bne.n	8004c1a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004be6:	e018      	b.n	8004c1a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d111      	bne.n	8004c1a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff faf8 	bl	8004210 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c20:	e00e      	b.n	8004c40 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fb02 	bl	8004238 <HAL_ADC_ErrorCallback>
}
 8004c34:	e004      	b.n	8004c40 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fae4 	bl	8004224 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c82:	f043 0204 	orr.w	r2, r3, #4
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7ff fad4 	bl	8004238 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <LL_ADC_IsEnabled>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <LL_ADC_IsEnabled+0x18>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <LL_ADC_IsEnabled+0x1a>
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <LL_ADC_REG_IsConversionOngoing>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d101      	bne.n	8004cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b0a1      	sub	sp, #132	@ 0x84
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e093      	b.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a47      	ldr	r2, [pc, #284]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d102      	bne.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d1c:	4b46      	ldr	r3, [pc, #280]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e001      	b.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e072      	b.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ffb9 	bl	8004cbe <LL_ADC_REG_IsConversionOngoing>
 8004d4c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff ffb3 	bl	8004cbe <LL_ADC_REG_IsConversionOngoing>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d154      	bne.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d151      	bne.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d64:	4b35      	ldr	r3, [pc, #212]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004d66:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02c      	beq.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d82:	035b      	lsls	r3, r3, #13
 8004d84:	430b      	orrs	r3, r1
 8004d86:	431a      	orrs	r2, r3
 8004d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d8c:	4829      	ldr	r0, [pc, #164]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004d8e:	f7ff ff83 	bl	8004c98 <LL_ADC_IsEnabled>
 8004d92:	4604      	mov	r4, r0
 8004d94:	4828      	ldr	r0, [pc, #160]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d96:	f7ff ff7f 	bl	8004c98 <LL_ADC_IsEnabled>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	431c      	orrs	r4, r3
 8004d9e:	4828      	ldr	r0, [pc, #160]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004da0:	f7ff ff7a 	bl	8004c98 <LL_ADC_IsEnabled>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4323      	orrs	r3, r4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d137      	bne.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004db4:	f023 030f 	bic.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	6811      	ldr	r1, [r2, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dc8:	e028      	b.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dd6:	4817      	ldr	r0, [pc, #92]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004dd8:	f7ff ff5e 	bl	8004c98 <LL_ADC_IsEnabled>
 8004ddc:	4604      	mov	r4, r0
 8004dde:	4816      	ldr	r0, [pc, #88]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004de0:	f7ff ff5a 	bl	8004c98 <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	431c      	orrs	r4, r3
 8004de8:	4815      	ldr	r0, [pc, #84]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004dea:	f7ff ff55 	bl	8004c98 <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4323      	orrs	r3, r4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d112      	bne.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dfe:	f023 030f 	bic.w	r3, r3, #15
 8004e02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e06:	e009      	b.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e1a:	e000      	b.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004e26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3784      	adds	r7, #132	@ 0x84
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	bf00      	nop
 8004e34:	50040000 	.word	0x50040000
 8004e38:	50040100 	.word	0x50040100
 8004e3c:	50040300 	.word	0x50040300
 8004e40:	50040200 	.word	0x50040200

08004e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e54:	4b0c      	ldr	r3, [pc, #48]	@ (8004e88 <__NVIC_SetPriorityGrouping+0x44>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e60:	4013      	ands	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e76:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <__NVIC_SetPriorityGrouping+0x44>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	60d3      	str	r3, [r2, #12]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e90:	4b04      	ldr	r3, [pc, #16]	@ (8004ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	f003 0307 	and.w	r3, r3, #7
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db0b      	blt.n	8004ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	4907      	ldr	r1, [pc, #28]	@ (8004ee0 <__NVIC_EnableIRQ+0x38>)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2001      	movs	r0, #1
 8004eca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000e100 	.word	0xe000e100

08004ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	db0a      	blt.n	8004f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	490c      	ldr	r1, [pc, #48]	@ (8004f30 <__NVIC_SetPriority+0x4c>)
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	0112      	lsls	r2, r2, #4
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	440b      	add	r3, r1
 8004f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f0c:	e00a      	b.n	8004f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4908      	ldr	r1, [pc, #32]	@ (8004f34 <__NVIC_SetPriority+0x50>)
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	0112      	lsls	r2, r2, #4
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	440b      	add	r3, r1
 8004f22:	761a      	strb	r2, [r3, #24]
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000e100 	.word	0xe000e100
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b089      	sub	sp, #36	@ 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f1c3 0307 	rsb	r3, r3, #7
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	bf28      	it	cs
 8004f56:	2304      	movcs	r3, #4
 8004f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d902      	bls.n	8004f68 <NVIC_EncodePriority+0x30>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3b03      	subs	r3, #3
 8004f66:	e000      	b.n	8004f6a <NVIC_EncodePriority+0x32>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43da      	mvns	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f80:	f04f 31ff 	mov.w	r1, #4294967295
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	43d9      	mvns	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f90:	4313      	orrs	r3, r2
         );
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ff4c 	bl	8004e44 <__NVIC_SetPriorityGrouping>
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc6:	f7ff ff61 	bl	8004e8c <__NVIC_GetPriorityGrouping>
 8004fca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	6978      	ldr	r0, [r7, #20]
 8004fd2:	f7ff ffb1 	bl	8004f38 <NVIC_EncodePriority>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ff80 	bl	8004ee4 <__NVIC_SetPriority>
}
 8004fe4:	bf00      	nop
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ff54 	bl	8004ea8 <__NVIC_EnableIRQ>
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e098      	b.n	800514c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	4b4d      	ldr	r3, [pc, #308]	@ (8005158 <HAL_DMA_Init+0x150>)
 8005022:	429a      	cmp	r2, r3
 8005024:	d80f      	bhi.n	8005046 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	4b4b      	ldr	r3, [pc, #300]	@ (800515c <HAL_DMA_Init+0x154>)
 800502e:	4413      	add	r3, r2
 8005030:	4a4b      	ldr	r2, [pc, #300]	@ (8005160 <HAL_DMA_Init+0x158>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	009a      	lsls	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a48      	ldr	r2, [pc, #288]	@ (8005164 <HAL_DMA_Init+0x15c>)
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40
 8005044:	e00e      	b.n	8005064 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	4b46      	ldr	r3, [pc, #280]	@ (8005168 <HAL_DMA_Init+0x160>)
 800504e:	4413      	add	r3, r2
 8005050:	4a43      	ldr	r2, [pc, #268]	@ (8005160 <HAL_DMA_Init+0x158>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	009a      	lsls	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a42      	ldr	r2, [pc, #264]	@ (800516c <HAL_DMA_Init+0x164>)
 8005062:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050be:	d039      	beq.n	8005134 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	4a27      	ldr	r2, [pc, #156]	@ (8005164 <HAL_DMA_Init+0x15c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d11a      	bne.n	8005100 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80050ca:	4b29      	ldr	r3, [pc, #164]	@ (8005170 <HAL_DMA_Init+0x168>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	f003 031c 	and.w	r3, r3, #28
 80050d6:	210f      	movs	r1, #15
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	4924      	ldr	r1, [pc, #144]	@ (8005170 <HAL_DMA_Init+0x168>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80050e4:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <HAL_DMA_Init+0x168>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	f003 031c 	and.w	r3, r3, #28
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	491d      	ldr	r1, [pc, #116]	@ (8005170 <HAL_DMA_Init+0x168>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
 80050fe:	e019      	b.n	8005134 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005100:	4b1c      	ldr	r3, [pc, #112]	@ (8005174 <HAL_DMA_Init+0x16c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005108:	f003 031c 	and.w	r3, r3, #28
 800510c:	210f      	movs	r1, #15
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	4917      	ldr	r1, [pc, #92]	@ (8005174 <HAL_DMA_Init+0x16c>)
 8005116:	4013      	ands	r3, r2
 8005118:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800511a:	4b16      	ldr	r3, [pc, #88]	@ (8005174 <HAL_DMA_Init+0x16c>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	f003 031c 	and.w	r3, r3, #28
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	4911      	ldr	r1, [pc, #68]	@ (8005174 <HAL_DMA_Init+0x16c>)
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40020407 	.word	0x40020407
 800515c:	bffdfff8 	.word	0xbffdfff8
 8005160:	cccccccd 	.word	0xcccccccd
 8005164:	40020000 	.word	0x40020000
 8005168:	bffdfbf8 	.word	0xbffdfbf8
 800516c:	40020400 	.word	0x40020400
 8005170:	400200a8 	.word	0x400200a8
 8005174:	400204a8 	.word	0x400204a8

08005178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Start_IT+0x20>
 8005194:	2302      	movs	r3, #2
 8005196:	e04b      	b.n	8005230 <HAL_DMA_Start_IT+0xb8>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d13a      	bne.n	8005222 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f95f 	bl	8005494 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 020e 	orr.w	r2, r2, #14
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e00f      	b.n	8005210 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0204 	bic.w	r2, r2, #4
 80051fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 020a 	orr.w	r2, r2, #10
 800520e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e005      	b.n	800522e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d008      	beq.n	8005262 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2204      	movs	r2, #4
 8005254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e022      	b.n	80052a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 020e 	bic.w	r2, r2, #14
 8005270:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f003 021c 	and.w	r2, r3, #28
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f202 	lsl.w	r2, r1, r2
 8005294:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d005      	beq.n	80052d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2204      	movs	r2, #4
 80052d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	e029      	b.n	800532c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 020e 	bic.w	r2, r2, #14
 80052e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fc:	f003 021c 	and.w	r2, r3, #28
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f202 	lsl.w	r2, r1, r2
 800530a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
    }
  }
  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f003 031c 	and.w	r3, r3, #28
 8005356:	2204      	movs	r2, #4
 8005358:	409a      	lsls	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4013      	ands	r3, r2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d026      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x7a>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d021      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0204 	bic.w	r2, r2, #4
 8005388:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f003 021c 	and.w	r2, r3, #28
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2104      	movs	r1, #4
 8005398:	fa01 f202 	lsl.w	r2, r1, r2
 800539c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d071      	beq.n	800548a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053ae:	e06c      	b.n	800548a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b4:	f003 031c 	and.w	r3, r3, #28
 80053b8:	2202      	movs	r2, #2
 80053ba:	409a      	lsls	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02e      	beq.n	8005422 <HAL_DMA_IRQHandler+0xec>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d029      	beq.n	8005422 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 020a 	bic.w	r2, r2, #10
 80053ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	f003 021c 	and.w	r2, r3, #28
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	2102      	movs	r1, #2
 8005402:	fa01 f202 	lsl.w	r2, r1, r2
 8005406:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d038      	beq.n	800548a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005420:	e033      	b.n	800548a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f003 031c 	and.w	r3, r3, #28
 800542a:	2208      	movs	r2, #8
 800542c:	409a      	lsls	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4013      	ands	r3, r2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02a      	beq.n	800548c <HAL_DMA_IRQHandler+0x156>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d025      	beq.n	800548c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 020e 	bic.w	r2, r2, #14
 800544e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005454:	f003 021c 	and.w	r2, r3, #28
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f202 	lsl.w	r2, r1, r2
 8005462:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800548a:	bf00      	nop
 800548c:	bf00      	nop
}
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	f003 021c 	and.w	r2, r3, #28
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	2101      	movs	r1, #1
 80054b0:	fa01 f202 	lsl.w	r2, r1, r2
 80054b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d108      	bne.n	80054d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054d6:	e007      	b.n	80054e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005502:	e166      	b.n	80057d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2101      	movs	r1, #1
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8158 	beq.w	80057cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d005      	beq.n	8005534 <HAL_GPIO_Init+0x40>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d130      	bne.n	8005596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	2203      	movs	r2, #3
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800556a:	2201      	movs	r2, #1
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	f003 0201 	and.w	r2, r3, #1
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d017      	beq.n	80055d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	2203      	movs	r2, #3
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d123      	bne.n	8005626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	08da      	lsrs	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3208      	adds	r2, #8
 80055e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	220f      	movs	r2, #15
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	08da      	lsrs	r2, r3, #3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3208      	adds	r2, #8
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 0203 	and.w	r2, r3, #3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80b2 	beq.w	80057cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005668:	4b61      	ldr	r3, [pc, #388]	@ (80057f0 <HAL_GPIO_Init+0x2fc>)
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	4a60      	ldr	r2, [pc, #384]	@ (80057f0 <HAL_GPIO_Init+0x2fc>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6613      	str	r3, [r2, #96]	@ 0x60
 8005674:	4b5e      	ldr	r3, [pc, #376]	@ (80057f0 <HAL_GPIO_Init+0x2fc>)
 8005676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005680:	4a5c      	ldr	r2, [pc, #368]	@ (80057f4 <HAL_GPIO_Init+0x300>)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	220f      	movs	r2, #15
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80056aa:	d02b      	beq.n	8005704 <HAL_GPIO_Init+0x210>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a52      	ldr	r2, [pc, #328]	@ (80057f8 <HAL_GPIO_Init+0x304>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d025      	beq.n	8005700 <HAL_GPIO_Init+0x20c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a51      	ldr	r2, [pc, #324]	@ (80057fc <HAL_GPIO_Init+0x308>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d01f      	beq.n	80056fc <HAL_GPIO_Init+0x208>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a50      	ldr	r2, [pc, #320]	@ (8005800 <HAL_GPIO_Init+0x30c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d019      	beq.n	80056f8 <HAL_GPIO_Init+0x204>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a4f      	ldr	r2, [pc, #316]	@ (8005804 <HAL_GPIO_Init+0x310>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_GPIO_Init+0x200>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005808 <HAL_GPIO_Init+0x314>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00d      	beq.n	80056f0 <HAL_GPIO_Init+0x1fc>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a4d      	ldr	r2, [pc, #308]	@ (800580c <HAL_GPIO_Init+0x318>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <HAL_GPIO_Init+0x1f8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a4c      	ldr	r2, [pc, #304]	@ (8005810 <HAL_GPIO_Init+0x31c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_GPIO_Init+0x1f4>
 80056e4:	2307      	movs	r3, #7
 80056e6:	e00e      	b.n	8005706 <HAL_GPIO_Init+0x212>
 80056e8:	2308      	movs	r3, #8
 80056ea:	e00c      	b.n	8005706 <HAL_GPIO_Init+0x212>
 80056ec:	2306      	movs	r3, #6
 80056ee:	e00a      	b.n	8005706 <HAL_GPIO_Init+0x212>
 80056f0:	2305      	movs	r3, #5
 80056f2:	e008      	b.n	8005706 <HAL_GPIO_Init+0x212>
 80056f4:	2304      	movs	r3, #4
 80056f6:	e006      	b.n	8005706 <HAL_GPIO_Init+0x212>
 80056f8:	2303      	movs	r3, #3
 80056fa:	e004      	b.n	8005706 <HAL_GPIO_Init+0x212>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e002      	b.n	8005706 <HAL_GPIO_Init+0x212>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <HAL_GPIO_Init+0x212>
 8005704:	2300      	movs	r3, #0
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f002 0203 	and.w	r2, r2, #3
 800570c:	0092      	lsls	r2, r2, #2
 800570e:	4093      	lsls	r3, r2
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005716:	4937      	ldr	r1, [pc, #220]	@ (80057f4 <HAL_GPIO_Init+0x300>)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	3302      	adds	r3, #2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005724:	4b3b      	ldr	r3, [pc, #236]	@ (8005814 <HAL_GPIO_Init+0x320>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43db      	mvns	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005748:	4a32      	ldr	r2, [pc, #200]	@ (8005814 <HAL_GPIO_Init+0x320>)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800574e:	4b31      	ldr	r3, [pc, #196]	@ (8005814 <HAL_GPIO_Init+0x320>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	43db      	mvns	r3, r3
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005772:	4a28      	ldr	r2, [pc, #160]	@ (8005814 <HAL_GPIO_Init+0x320>)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005778:	4b26      	ldr	r3, [pc, #152]	@ (8005814 <HAL_GPIO_Init+0x320>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	43db      	mvns	r3, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800579c:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <HAL_GPIO_Init+0x320>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80057a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005814 <HAL_GPIO_Init+0x320>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	43db      	mvns	r3, r3
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057c6:	4a13      	ldr	r2, [pc, #76]	@ (8005814 <HAL_GPIO_Init+0x320>)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	3301      	adds	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f47f ae91 	bne.w	8005504 <HAL_GPIO_Init+0x10>
  }
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40010000 	.word	0x40010000
 80057f8:	48000400 	.word	0x48000400
 80057fc:	48000800 	.word	0x48000800
 8005800:	48000c00 	.word	0x48000c00
 8005804:	48001000 	.word	0x48001000
 8005808:	48001400 	.word	0x48001400
 800580c:	48001800 	.word	0x48001800
 8005810:	48001c00 	.word	0x48001c00
 8005814:	40010400 	.word	0x40010400

08005818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	887b      	ldrh	r3, [r7, #2]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e001      	b.n	800583a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005858:	787b      	ldrb	r3, [r7, #1]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005864:	e002      	b.n	800586c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005882:	4b08      	ldr	r3, [pc, #32]	@ (80058a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800588e:	4a05      	ldr	r2, [pc, #20]	@ (80058a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f806 	bl	80058a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40010400 	.word	0x40010400

080058a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e08d      	b.n	80059ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fd fb35 	bl	8002f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2224      	movs	r2, #36	@ 0x24
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800590e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800591e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d107      	bne.n	8005938 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	e006      	b.n	8005946 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d108      	bne.n	8005960 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	e007      	b.n	8005970 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800596e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800597e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005982:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005992:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69d9      	ldr	r1, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1a      	ldr	r2, [r3, #32]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	461a      	mov	r2, r3
 8005a00:	460b      	mov	r3, r1
 8005a02:	817b      	strh	r3, [r7, #10]
 8005a04:	4613      	mov	r3, r2
 8005a06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	f040 80fd 	bne.w	8005c10 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_I2C_Master_Transmit+0x30>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e0f6      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x21e>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a2c:	f7fd ffc8 	bl	80039c0 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	2319      	movs	r3, #25
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa0a 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e0e1      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2221      	movs	r2, #33	@ 0x21
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	893a      	ldrh	r2, [r7, #8]
 8005a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2bff      	cmp	r3, #255	@ 0xff
 8005a7e:	d906      	bls.n	8005a8e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	22ff      	movs	r2, #255	@ 0xff
 8005a84:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e007      	b.n	8005a9e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a9c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d024      	beq.n	8005af0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	3301      	adds	r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	8979      	ldrh	r1, [r7, #10]
 8005ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8005c1c <HAL_I2C_Master_Transmit+0x228>)
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fc05 	bl	80062f8 <I2C_TransferConfig>
 8005aee:	e066      	b.n	8005bbe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	8979      	ldrh	r1, [r7, #10]
 8005af8:	4b48      	ldr	r3, [pc, #288]	@ (8005c1c <HAL_I2C_Master_Transmit+0x228>)
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fbfa 	bl	80062f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b04:	e05b      	b.n	8005bbe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f9fd 	bl	8005f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e07b      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d034      	beq.n	8005bbe <HAL_I2C_Master_Transmit+0x1ca>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d130      	bne.n	8005bbe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	@ 0x80
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f976 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e04d      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2bff      	cmp	r3, #255	@ 0xff
 8005b7e:	d90e      	bls.n	8005b9e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	22ff      	movs	r2, #255	@ 0xff
 8005b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	8979      	ldrh	r1, [r7, #10]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fbae 	bl	80062f8 <I2C_TransferConfig>
 8005b9c:	e00f      	b.n	8005bbe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	8979      	ldrh	r1, [r7, #10]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fb9d 	bl	80062f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d19e      	bne.n	8005b06 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	6a39      	ldr	r1, [r7, #32]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f9e3 	bl	8005f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e01a      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2220      	movs	r2, #32
 8005be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <HAL_I2C_Master_Transmit+0x22c>)
 8005bf0:	400b      	ands	r3, r1
 8005bf2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	80002000 	.word	0x80002000
 8005c20:	fe00e800 	.word	0xfe00e800

08005c24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	460b      	mov	r3, r1
 8005c32:	817b      	strh	r3, [r7, #10]
 8005c34:	4613      	mov	r3, r2
 8005c36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 80db 	bne.w	8005dfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_I2C_Master_Receive+0x30>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0d4      	b.n	8005dfe <HAL_I2C_Master_Receive+0x1da>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c5c:	f7fd feb0 	bl	80039c0 <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	2319      	movs	r3, #25
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f8f2 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0bf      	b.n	8005dfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2222      	movs	r2, #34	@ 0x22
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2210      	movs	r2, #16
 8005c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	893a      	ldrh	r2, [r7, #8]
 8005c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2bff      	cmp	r3, #255	@ 0xff
 8005cae:	d90e      	bls.n	8005cce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	8979      	ldrh	r1, [r7, #10]
 8005cbe:	4b52      	ldr	r3, [pc, #328]	@ (8005e08 <HAL_I2C_Master_Receive+0x1e4>)
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fb16 	bl	80062f8 <I2C_TransferConfig>
 8005ccc:	e06d      	b.n	8005daa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	4b49      	ldr	r3, [pc, #292]	@ (8005e08 <HAL_I2C_Master_Receive+0x1e4>)
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 fb05 	bl	80062f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005cee:	e05c      	b.n	8005daa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	6a39      	ldr	r1, [r7, #32]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f993 	bl	8006020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e07c      	b.n	8005dfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d034      	beq.n	8005daa <HAL_I2C_Master_Receive+0x186>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d130      	bne.n	8005daa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2180      	movs	r1, #128	@ 0x80
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f880 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e04d      	b.n	8005dfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2bff      	cmp	r3, #255	@ 0xff
 8005d6a:	d90e      	bls.n	8005d8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	22ff      	movs	r2, #255	@ 0xff
 8005d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	8979      	ldrh	r1, [r7, #10]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 fab8 	bl	80062f8 <I2C_TransferConfig>
 8005d88:	e00f      	b.n	8005daa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	8979      	ldrh	r1, [r7, #10]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 faa7 	bl	80062f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d19d      	bne.n	8005cf0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	6a39      	ldr	r1, [r7, #32]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f8ed 	bl	8005f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e01a      	b.n	8005dfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <HAL_I2C_Master_Receive+0x1e8>)
 8005ddc:	400b      	ands	r3, r1
 8005dde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e000      	b.n	8005dfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005dfc:	2302      	movs	r3, #2
  }
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	80002400 	.word	0x80002400
 8005e0c:	fe00e800 	.word	0xfe00e800

08005e10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d103      	bne.n	8005e2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d007      	beq.n	8005e4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	619a      	str	r2, [r3, #24]
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e68:	e03b      	b.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f962 	bl	8006138 <I2C_IsErrorOccurred>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e041      	b.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d02d      	beq.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fd fd9b 	bl	80039c0 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d302      	bcc.n	8005e9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d122      	bne.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d113      	bne.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e00f      	b.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d0b4      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f16:	e033      	b.n	8005f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f90b 	bl	8006138 <I2C_IsErrorOccurred>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e031      	b.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d025      	beq.n	8005f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f34:	f7fd fd44 	bl	80039c0 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d302      	bcc.n	8005f4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11a      	bne.n	8005f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d013      	beq.n	8005f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e007      	b.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d1c4      	bne.n	8005f18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa4:	e02f      	b.n	8006006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f8c4 	bl	8006138 <I2C_IsErrorOccurred>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e02d      	b.n	8006016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fba:	f7fd fd01 	bl	80039c0 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11a      	bne.n	8006006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d013      	beq.n	8006006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e007      	b.n	8006016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d1c8      	bne.n	8005fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006030:	e071      	b.n	8006116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f87e 	bl	8006138 <I2C_IsErrorOccurred>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b20      	cmp	r3, #32
 8006052:	d13b      	bne.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d138      	bne.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d105      	bne.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	2b10      	cmp	r3, #16
 8006080:	d121      	bne.n	80060c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2210      	movs	r2, #16
 8006088:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2204      	movs	r2, #4
 800608e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2220      	movs	r2, #32
 8006096:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b24      	ldr	r3, [pc, #144]	@ (8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80060a4:	400b      	ands	r3, r1
 80060a6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
 80060c4:	e002      	b.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80060cc:	f7fd fc78 	bl	80039c0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d302      	bcc.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d119      	bne.n	8006116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d116      	bne.n	8006116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d00f      	beq.n	8006116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fa:	f043 0220 	orr.w	r2, r3, #32
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d002      	beq.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d083      	beq.n	8006032 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	fe00e800 	.word	0xfe00e800

08006138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	@ 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b00      	cmp	r3, #0
 8006162:	d068      	beq.n	8006236 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2210      	movs	r2, #16
 800616a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800616c:	e049      	b.n	8006202 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d045      	beq.n	8006202 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fd fc23 	bl	80039c0 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_IsErrorOccurred+0x54>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d13a      	bne.n	8006202 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006196:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800619e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ae:	d121      	bne.n	80061f4 <I2C_IsErrorOccurred+0xbc>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b6:	d01d      	beq.n	80061f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80061b8:	7cfb      	ldrb	r3, [r7, #19]
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d01a      	beq.n	80061f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061ce:	f7fd fbf7 	bl	80039c0 <HAL_GetTick>
 80061d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061d4:	e00e      	b.n	80061f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061d6:	f7fd fbf3 	bl	80039c0 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b19      	cmp	r3, #25
 80061e2:	d907      	bls.n	80061f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	f043 0320 	orr.w	r3, r3, #32
 80061ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80061f2:	e006      	b.n	8006202 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d1e9      	bne.n	80061d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b20      	cmp	r3, #32
 800620e:	d003      	beq.n	8006218 <I2C_IsErrorOccurred+0xe0>
 8006210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0aa      	beq.n	800616e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2220      	movs	r2, #32
 8006226:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	f043 0304 	orr.w	r3, r3, #4
 800622e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f043 0308 	orr.w	r3, r3, #8
 8006270:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800627a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	f043 0302 	orr.w	r3, r3, #2
 8006292:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800629c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80062a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01c      	beq.n	80062e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fdaf 	bl	8005e10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b0d      	ldr	r3, [pc, #52]	@ (80062f4 <I2C_IsErrorOccurred+0x1bc>)
 80062be:	400b      	ands	r3, r1
 80062c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80062e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3728      	adds	r7, #40	@ 0x28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	fe00e800 	.word	0xfe00e800

080062f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	817b      	strh	r3, [r7, #10]
 8006306:	4613      	mov	r3, r2
 8006308:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800630a:	897b      	ldrh	r3, [r7, #10]
 800630c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006310:	7a7b      	ldrb	r3, [r7, #9]
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006318:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	4313      	orrs	r3, r2
 8006322:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006326:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	0d5b      	lsrs	r3, r3, #21
 8006332:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006336:	4b08      	ldr	r3, [pc, #32]	@ (8006358 <I2C_TransferConfig+0x60>)
 8006338:	430b      	orrs	r3, r1
 800633a:	43db      	mvns	r3, r3
 800633c:	ea02 0103 	and.w	r1, r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	03ff63ff 	.word	0x03ff63ff

0800635c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b20      	cmp	r3, #32
 8006370:	d138      	bne.n	80063e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800637c:	2302      	movs	r3, #2
 800637e:	e032      	b.n	80063e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	@ 0x24
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b20      	cmp	r3, #32
 8006406:	d139      	bne.n	800647c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006412:	2302      	movs	r3, #2
 8006414:	e033      	b.n	800647e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2224      	movs	r2, #36	@ 0x24
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006490:	4b04      	ldr	r3, [pc, #16]	@ (80064a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40007000 	.word	0x40007000

080064a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b6:	d130      	bne.n	800651a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b8:	4b23      	ldr	r3, [pc, #140]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c4:	d038      	beq.n	8006538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064c6:	4b20      	ldr	r3, [pc, #128]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064d6:	4b1d      	ldr	r3, [pc, #116]	@ (800654c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2232      	movs	r2, #50	@ 0x32
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	0c9b      	lsrs	r3, r3, #18
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ec:	e002      	b.n	80064f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064f4:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006500:	d102      	bne.n	8006508 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f2      	bne.n	80064ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006508:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006514:	d110      	bne.n	8006538 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e00f      	b.n	800653a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800651a:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006526:	d007      	beq.n	8006538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006528:	4b07      	ldr	r3, [pc, #28]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006530:	4a05      	ldr	r2, [pc, #20]	@ (8006548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006536:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40007000 	.word	0x40007000
 800654c:	200001b8 	.word	0x200001b8
 8006550:	431bde83 	.word	0x431bde83

08006554 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f000 bc08 	b.w	8006d78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006568:	4b96      	ldr	r3, [pc, #600]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006572:	4b94      	ldr	r3, [pc, #592]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80e4 	beq.w	8006752 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_RCC_OscConfig+0x4c>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b0c      	cmp	r3, #12
 8006594:	f040 808b 	bne.w	80066ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b01      	cmp	r3, #1
 800659c:	f040 8087 	bne.w	80066ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065a0:	4b88      	ldr	r3, [pc, #544]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_RCC_OscConfig+0x64>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e3df      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	4b81      	ldr	r3, [pc, #516]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <HAL_RCC_OscConfig+0x7e>
 80065c8:	4b7e      	ldr	r3, [pc, #504]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065d0:	e005      	b.n	80065de <HAL_RCC_OscConfig+0x8a>
 80065d2:	4b7c      	ldr	r3, [pc, #496]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80065d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065de:	4293      	cmp	r3, r2
 80065e0:	d223      	bcs.n	800662a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fdc4 	bl	8007174 <RCC_SetFlashLatencyFromMSIRange>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e3c0      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065f6:	4b73      	ldr	r3, [pc, #460]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a72      	ldr	r2, [pc, #456]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80065fc:	f043 0308 	orr.w	r3, r3, #8
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4b70      	ldr	r3, [pc, #448]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	496d      	ldr	r1, [pc, #436]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006610:	4313      	orrs	r3, r2
 8006612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006614:	4b6b      	ldr	r3, [pc, #428]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	4968      	ldr	r1, [pc, #416]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006624:	4313      	orrs	r3, r2
 8006626:	604b      	str	r3, [r1, #4]
 8006628:	e025      	b.n	8006676 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800662a:	4b66      	ldr	r3, [pc, #408]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a65      	ldr	r2, [pc, #404]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006630:	f043 0308 	orr.w	r3, r3, #8
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b63      	ldr	r3, [pc, #396]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	4960      	ldr	r1, [pc, #384]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006648:	4b5e      	ldr	r3, [pc, #376]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	495b      	ldr	r1, [pc, #364]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006658:	4313      	orrs	r3, r2
 800665a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fd84 	bl	8007174 <RCC_SetFlashLatencyFromMSIRange>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e380      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006676:	f000 fc87 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 800667a:	4602      	mov	r2, r0
 800667c:	4b51      	ldr	r3, [pc, #324]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	4950      	ldr	r1, [pc, #320]	@ (80067c8 <HAL_RCC_OscConfig+0x274>)
 8006688:	5ccb      	ldrb	r3, [r1, r3]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	4a4e      	ldr	r2, [pc, #312]	@ (80067cc <HAL_RCC_OscConfig+0x278>)
 8006694:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006696:	4b4e      	ldr	r3, [pc, #312]	@ (80067d0 <HAL_RCC_OscConfig+0x27c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fc ffe8 	bl	8003670 <HAL_InitTick>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d052      	beq.n	8006750 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	e364      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d032      	beq.n	800671c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066b6:	4b43      	ldr	r3, [pc, #268]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a42      	ldr	r2, [pc, #264]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066c2:	f7fd f97d 	bl	80039c0 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066ca:	f7fd f979 	bl	80039c0 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e34d      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066dc:	4b39      	ldr	r3, [pc, #228]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066e8:	4b36      	ldr	r3, [pc, #216]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a35      	ldr	r2, [pc, #212]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80066ee:	f043 0308 	orr.w	r3, r3, #8
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4b33      	ldr	r3, [pc, #204]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	4930      	ldr	r1, [pc, #192]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006706:	4b2f      	ldr	r3, [pc, #188]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	492b      	ldr	r1, [pc, #172]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
 800671a:	e01a      	b.n	8006752 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800671c:	4b29      	ldr	r3, [pc, #164]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a28      	ldr	r2, [pc, #160]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006722:	f023 0301 	bic.w	r3, r3, #1
 8006726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006728:	f7fd f94a 	bl	80039c0 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006730:	f7fd f946 	bl	80039c0 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e31a      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006742:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x1dc>
 800674e:	e000      	b.n	8006752 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006750:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d073      	beq.n	8006846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d005      	beq.n	8006770 <HAL_RCC_OscConfig+0x21c>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b0c      	cmp	r3, #12
 8006768:	d10e      	bne.n	8006788 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b03      	cmp	r3, #3
 800676e:	d10b      	bne.n	8006788 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d063      	beq.n	8006844 <HAL_RCC_OscConfig+0x2f0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d15f      	bne.n	8006844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e2f7      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006790:	d106      	bne.n	80067a0 <HAL_RCC_OscConfig+0x24c>
 8006792:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a0b      	ldr	r2, [pc, #44]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e025      	b.n	80067ec <HAL_RCC_OscConfig+0x298>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a8:	d114      	bne.n	80067d4 <HAL_RCC_OscConfig+0x280>
 80067aa:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a05      	ldr	r2, [pc, #20]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80067b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a02      	ldr	r2, [pc, #8]	@ (80067c4 <HAL_RCC_OscConfig+0x270>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e013      	b.n	80067ec <HAL_RCC_OscConfig+0x298>
 80067c4:	40021000 	.word	0x40021000
 80067c8:	0800d8d0 	.word	0x0800d8d0
 80067cc:	200001b8 	.word	0x200001b8
 80067d0:	200001bc 	.word	0x200001bc
 80067d4:	4ba0      	ldr	r3, [pc, #640]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a9f      	ldr	r2, [pc, #636]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80067da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4b9d      	ldr	r3, [pc, #628]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a9c      	ldr	r2, [pc, #624]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80067e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d013      	beq.n	800681c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fd f8e4 	bl	80039c0 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067fc:	f7fd f8e0 	bl	80039c0 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	@ 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e2b4      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800680e:	4b92      	ldr	r3, [pc, #584]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x2a8>
 800681a:	e014      	b.n	8006846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fd f8d0 	bl	80039c0 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006824:	f7fd f8cc 	bl	80039c0 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b64      	cmp	r3, #100	@ 0x64
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e2a0      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006836:	4b88      	ldr	r3, [pc, #544]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0x2d0>
 8006842:	e000      	b.n	8006846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d060      	beq.n	8006914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d005      	beq.n	8006864 <HAL_RCC_OscConfig+0x310>
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b0c      	cmp	r3, #12
 800685c:	d119      	bne.n	8006892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d116      	bne.n	8006892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006864:	4b7c      	ldr	r3, [pc, #496]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <HAL_RCC_OscConfig+0x328>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e27d      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687c:	4b76      	ldr	r3, [pc, #472]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	4973      	ldr	r1, [pc, #460]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800688c:	4313      	orrs	r3, r2
 800688e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006890:	e040      	b.n	8006914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d023      	beq.n	80068e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800689a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a6e      	ldr	r2, [pc, #440]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80068a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a6:	f7fd f88b 	bl	80039c0 <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ae:	f7fd f887 	bl	80039c0 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e25b      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c0:	4b65      	ldr	r3, [pc, #404]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068cc:	4b62      	ldr	r3, [pc, #392]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	061b      	lsls	r3, r3, #24
 80068da:	495f      	ldr	r1, [pc, #380]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	604b      	str	r3, [r1, #4]
 80068e0:	e018      	b.n	8006914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a5c      	ldr	r2, [pc, #368]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80068e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ee:	f7fd f867 	bl	80039c0 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f6:	f7fd f863 	bl	80039c0 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e237      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006908:	4b53      	ldr	r3, [pc, #332]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1f0      	bne.n	80068f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03c      	beq.n	800699a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01c      	beq.n	8006962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006928:	4b4b      	ldr	r3, [pc, #300]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800692a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800692e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006938:	f7fd f842 	bl	80039c0 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006940:	f7fd f83e 	bl	80039c0 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e212      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006952:	4b41      	ldr	r3, [pc, #260]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0ef      	beq.n	8006940 <HAL_RCC_OscConfig+0x3ec>
 8006960:	e01b      	b.n	800699a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006962:	4b3d      	ldr	r3, [pc, #244]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006968:	4a3b      	ldr	r2, [pc, #236]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006972:	f7fd f825 	bl	80039c0 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800697a:	f7fd f821 	bl	80039c0 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e1f5      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800698c:	4b32      	ldr	r3, [pc, #200]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 800698e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ef      	bne.n	800697a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a6 	beq.w	8006af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a8:	2300      	movs	r3, #0
 80069aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80069ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10d      	bne.n	80069d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b8:	4b27      	ldr	r3, [pc, #156]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80069ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069bc:	4a26      	ldr	r2, [pc, #152]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c4:	4b24      	ldr	r3, [pc, #144]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 80069c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d0:	2301      	movs	r3, #1
 80069d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d4:	4b21      	ldr	r3, [pc, #132]	@ (8006a5c <HAL_RCC_OscConfig+0x508>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d118      	bne.n	8006a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069e0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a5c <HAL_RCC_OscConfig+0x508>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a5c <HAL_RCC_OscConfig+0x508>)
 80069e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ec:	f7fc ffe8 	bl	80039c0 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f4:	f7fc ffe4 	bl	80039c0 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e1b8      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a06:	4b15      	ldr	r3, [pc, #84]	@ (8006a5c <HAL_RCC_OscConfig+0x508>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d108      	bne.n	8006a2c <HAL_RCC_OscConfig+0x4d8>
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a20:	4a0d      	ldr	r2, [pc, #52]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a2a:	e029      	b.n	8006a80 <HAL_RCC_OscConfig+0x52c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b05      	cmp	r3, #5
 8006a32:	d115      	bne.n	8006a60 <HAL_RCC_OscConfig+0x50c>
 8006a34:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3a:	4a07      	ldr	r2, [pc, #28]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006a3c:	f043 0304 	orr.w	r3, r3, #4
 8006a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a44:	4b04      	ldr	r3, [pc, #16]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4a:	4a03      	ldr	r2, [pc, #12]	@ (8006a58 <HAL_RCC_OscConfig+0x504>)
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a54:	e014      	b.n	8006a80 <HAL_RCC_OscConfig+0x52c>
 8006a56:	bf00      	nop
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	40007000 	.word	0x40007000
 8006a60:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a66:	4a9c      	ldr	r2, [pc, #624]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a70:	4b99      	ldr	r3, [pc, #612]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a76:	4a98      	ldr	r2, [pc, #608]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006a78:	f023 0304 	bic.w	r3, r3, #4
 8006a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d016      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fc ff9a 	bl	80039c0 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8e:	e00a      	b.n	8006aa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a90:	f7fc ff96 	bl	80039c0 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e168      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa6:	4b8c      	ldr	r3, [pc, #560]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ed      	beq.n	8006a90 <HAL_RCC_OscConfig+0x53c>
 8006ab4:	e015      	b.n	8006ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab6:	f7fc ff83 	bl	80039c0 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006abe:	f7fc ff7f 	bl	80039c0 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e151      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad4:	4b80      	ldr	r3, [pc, #512]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1ed      	bne.n	8006abe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ae2:	7ffb      	ldrb	r3, [r7, #31]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d105      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aec:	4a7a      	ldr	r2, [pc, #488]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006af2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d03c      	beq.n	8006b7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01c      	beq.n	8006b42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b08:	4b73      	ldr	r3, [pc, #460]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b0e:	4a72      	ldr	r2, [pc, #456]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b18:	f7fc ff52 	bl	80039c0 <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b20:	f7fc ff4e 	bl	80039c0 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e122      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b32:	4b69      	ldr	r3, [pc, #420]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0ef      	beq.n	8006b20 <HAL_RCC_OscConfig+0x5cc>
 8006b40:	e01b      	b.n	8006b7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b42:	4b65      	ldr	r3, [pc, #404]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b48:	4a63      	ldr	r2, [pc, #396]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b52:	f7fc ff35 	bl	80039c0 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b5a:	f7fc ff31 	bl	80039c0 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e105      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ef      	bne.n	8006b5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80f9 	beq.w	8006d76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	f040 80cf 	bne.w	8006d2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b8e:	4b52      	ldr	r3, [pc, #328]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f003 0203 	and.w	r2, r3, #3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d12c      	bne.n	8006bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bac:	3b01      	subs	r3, #1
 8006bae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d123      	bne.n	8006bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d11b      	bne.n	8006bfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d113      	bne.n	8006bfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	3b01      	subs	r3, #1
 8006be2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d109      	bne.n	8006bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d071      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b0c      	cmp	r3, #12
 8006c00:	d068      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c02:	4b35      	ldr	r3, [pc, #212]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006c0e:	4b32      	ldr	r3, [pc, #200]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e0ac      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c2a:	f7fc fec9 	bl	80039c0 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c32:	f7fc fec5 	bl	80039c0 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e099      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c44:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c50:	4b21      	ldr	r3, [pc, #132]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	4b21      	ldr	r3, [pc, #132]	@ (8006cdc <HAL_RCC_OscConfig+0x788>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c60:	3a01      	subs	r2, #1
 8006c62:	0112      	lsls	r2, r2, #4
 8006c64:	4311      	orrs	r1, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c6a:	0212      	lsls	r2, r2, #8
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c72:	0852      	lsrs	r2, r2, #1
 8006c74:	3a01      	subs	r2, #1
 8006c76:	0552      	lsls	r2, r2, #21
 8006c78:	4311      	orrs	r1, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c7e:	0852      	lsrs	r2, r2, #1
 8006c80:	3a01      	subs	r2, #1
 8006c82:	0652      	lsls	r2, r2, #25
 8006c84:	4311      	orrs	r1, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c8a:	06d2      	lsls	r2, r2, #27
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	4912      	ldr	r1, [pc, #72]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c94:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a0f      	ldr	r2, [pc, #60]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cac:	f7fc fe88 	bl	80039c0 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb4:	f7fc fe84 	bl	80039c0 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e058      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cc6:	4b04      	ldr	r3, [pc, #16]	@ (8006cd8 <HAL_RCC_OscConfig+0x784>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cd2:	e050      	b.n	8006d76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e04f      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ce0:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d144      	bne.n	8006d76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006cec:	4b24      	ldr	r3, [pc, #144]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a23      	ldr	r2, [pc, #140]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cf8:	4b21      	ldr	r3, [pc, #132]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	4a20      	ldr	r2, [pc, #128]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d04:	f7fc fe5c 	bl	80039c0 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0c:	f7fc fe58 	bl	80039c0 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e02c      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d1e:	4b18      	ldr	r3, [pc, #96]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x7b8>
 8006d2a:	e024      	b.n	8006d76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b0c      	cmp	r3, #12
 8006d30:	d01f      	beq.n	8006d72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d32:	4b13      	ldr	r3, [pc, #76]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006d38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fc fe3f 	bl	80039c0 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d46:	f7fc fe3b 	bl	80039c0 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e00f      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d58:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d64:	4b06      	ldr	r3, [pc, #24]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	4905      	ldr	r1, [pc, #20]	@ (8006d80 <HAL_RCC_OscConfig+0x82c>)
 8006d6a:	4b06      	ldr	r3, [pc, #24]	@ (8006d84 <HAL_RCC_OscConfig+0x830>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60cb      	str	r3, [r1, #12]
 8006d70:	e001      	b.n	8006d76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40021000 	.word	0x40021000
 8006d84:	feeefffc 	.word	0xfeeefffc

08006d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0e7      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b75      	ldr	r3, [pc, #468]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d910      	bls.n	8006dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	4b72      	ldr	r3, [pc, #456]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f023 0207 	bic.w	r2, r3, #7
 8006db2:	4970      	ldr	r1, [pc, #448]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	4b6e      	ldr	r3, [pc, #440]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0cf      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d010      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	4b66      	ldr	r3, [pc, #408]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d908      	bls.n	8006dfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de8:	4b63      	ldr	r3, [pc, #396]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4960      	ldr	r1, [pc, #384]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d04c      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d121      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0a6      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e26:	4b54      	ldr	r3, [pc, #336]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d115      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e09a      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e08e      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e086      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e5e:	4b46      	ldr	r3, [pc, #280]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f023 0203 	bic.w	r2, r3, #3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4943      	ldr	r1, [pc, #268]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e70:	f7fc fda6 	bl	80039c0 <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e78:	f7fc fda2 	bl	80039c0 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e06e      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 020c 	and.w	r2, r3, #12
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d1eb      	bne.n	8006e78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	4b31      	ldr	r3, [pc, #196]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d208      	bcs.n	8006ece <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	492b      	ldr	r1, [pc, #172]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ece:	4b29      	ldr	r3, [pc, #164]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d210      	bcs.n	8006efe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006edc:	4b25      	ldr	r3, [pc, #148]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f023 0207 	bic.w	r2, r3, #7
 8006ee4:	4923      	ldr	r1, [pc, #140]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eec:	4b21      	ldr	r3, [pc, #132]	@ (8006f74 <HAL_RCC_ClockConfig+0x1ec>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d001      	beq.n	8006efe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e036      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	4918      	ldr	r1, [pc, #96]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f28:	4b13      	ldr	r3, [pc, #76]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	4910      	ldr	r1, [pc, #64]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f3c:	f000 f824 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8006f40:	4602      	mov	r2, r0
 8006f42:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	091b      	lsrs	r3, r3, #4
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	490b      	ldr	r1, [pc, #44]	@ (8006f7c <HAL_RCC_ClockConfig+0x1f4>)
 8006f4e:	5ccb      	ldrb	r3, [r1, r3]
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f5c:	4b09      	ldr	r3, [pc, #36]	@ (8006f84 <HAL_RCC_ClockConfig+0x1fc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fc fb85 	bl	8003670 <HAL_InitTick>
 8006f66:	4603      	mov	r3, r0
 8006f68:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40022000 	.word	0x40022000
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	0800d8d0 	.word	0x0800d8d0
 8006f80:	200001b8 	.word	0x200001b8
 8006f84:	200001bc 	.word	0x200001bc

08006f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b089      	sub	sp, #36	@ 0x24
 8006f8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	2300      	movs	r3, #0
 8006f94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f96:	4b3e      	ldr	r3, [pc, #248]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_GetSysClockFreq+0x34>
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2b0c      	cmp	r3, #12
 8006fb4:	d121      	bne.n	8006ffa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d11e      	bne.n	8006ffa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fbc:	4b34      	ldr	r3, [pc, #208]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d107      	bne.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006fc8:	4b31      	ldr	r3, [pc, #196]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	e005      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10d      	bne.n	8007010 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d102      	bne.n	8007006 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007000:	4b25      	ldr	r3, [pc, #148]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x110>)
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	e004      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d101      	bne.n	8007010 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800700c:	4b23      	ldr	r3, [pc, #140]	@ (800709c <HAL_RCC_GetSysClockFreq+0x114>)
 800700e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b0c      	cmp	r3, #12
 8007014:	d134      	bne.n	8007080 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007016:	4b1e      	ldr	r3, [pc, #120]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d003      	beq.n	800702e <HAL_RCC_GetSysClockFreq+0xa6>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b03      	cmp	r3, #3
 800702a:	d003      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0xac>
 800702c:	e005      	b.n	800703a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800702e:	4b1a      	ldr	r3, [pc, #104]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x110>)
 8007030:	617b      	str	r3, [r7, #20]
      break;
 8007032:	e005      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007034:	4b19      	ldr	r3, [pc, #100]	@ (800709c <HAL_RCC_GetSysClockFreq+0x114>)
 8007036:	617b      	str	r3, [r7, #20]
      break;
 8007038:	e002      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	617b      	str	r3, [r7, #20]
      break;
 800703e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007040:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	091b      	lsrs	r3, r3, #4
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	3301      	adds	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800704e:	4b10      	ldr	r3, [pc, #64]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	fb03 f202 	mul.w	r2, r3, r2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007066:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x108>)
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	0e5b      	lsrs	r3, r3, #25
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	3301      	adds	r3, #1
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007080:	69bb      	ldr	r3, [r7, #24]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3724      	adds	r7, #36	@ 0x24
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
 8007094:	0800d8e8 	.word	0x0800d8e8
 8007098:	00f42400 	.word	0x00f42400
 800709c:	007a1200 	.word	0x007a1200

080070a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a4:	4b03      	ldr	r3, [pc, #12]	@ (80070b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a6:	681b      	ldr	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	200001b8 	.word	0x200001b8

080070b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070bc:	f7ff fff0 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	0a1b      	lsrs	r3, r3, #8
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	4904      	ldr	r1, [pc, #16]	@ (80070e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ce:	5ccb      	ldrb	r3, [r1, r3]
 80070d0:	f003 031f 	and.w	r3, r3, #31
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40021000 	.word	0x40021000
 80070e0:	0800d8e0 	.word	0x0800d8e0

080070e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070e8:	f7ff ffda 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0adb      	lsrs	r3, r3, #11
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4904      	ldr	r1, [pc, #16]	@ (800710c <HAL_RCC_GetPCLK2Freq+0x28>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40021000 	.word	0x40021000
 800710c:	0800d8e0 	.word	0x0800d8e0

08007110 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220f      	movs	r2, #15
 800711e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007120:	4b12      	ldr	r3, [pc, #72]	@ (800716c <HAL_RCC_GetClockConfig+0x5c>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0203 	and.w	r2, r3, #3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800712c:	4b0f      	ldr	r3, [pc, #60]	@ (800716c <HAL_RCC_GetClockConfig+0x5c>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007138:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <HAL_RCC_GetClockConfig+0x5c>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007144:	4b09      	ldr	r3, [pc, #36]	@ (800716c <HAL_RCC_GetClockConfig+0x5c>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007152:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <HAL_RCC_GetClockConfig+0x60>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0207 	and.w	r2, r3, #7
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40021000 	.word	0x40021000
 8007170:	40022000 	.word	0x40022000

08007174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007180:	4b2a      	ldr	r3, [pc, #168]	@ (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800718c:	f7ff f97e 	bl	800648c <HAL_PWREx_GetVoltageRange>
 8007190:	6178      	str	r0, [r7, #20]
 8007192:	e014      	b.n	80071be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007194:	4b25      	ldr	r3, [pc, #148]	@ (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007198:	4a24      	ldr	r2, [pc, #144]	@ (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800719a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800719e:	6593      	str	r3, [r2, #88]	@ 0x58
 80071a0:	4b22      	ldr	r3, [pc, #136]	@ (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071ac:	f7ff f96e 	bl	800648c <HAL_PWREx_GetVoltageRange>
 80071b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071b2:	4b1e      	ldr	r3, [pc, #120]	@ (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b6:	4a1d      	ldr	r2, [pc, #116]	@ (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c4:	d10b      	bne.n	80071de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b80      	cmp	r3, #128	@ 0x80
 80071ca:	d919      	bls.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80071d0:	d902      	bls.n	80071d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071d2:	2302      	movs	r3, #2
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	e013      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071d8:	2301      	movs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	e010      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b80      	cmp	r3, #128	@ 0x80
 80071e2:	d902      	bls.n	80071ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80071e4:	2303      	movs	r3, #3
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	e00a      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b80      	cmp	r3, #128	@ 0x80
 80071ee:	d102      	bne.n	80071f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071f0:	2302      	movs	r3, #2
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	e004      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b70      	cmp	r3, #112	@ 0x70
 80071fa:	d101      	bne.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071fc:	2301      	movs	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007200:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f023 0207 	bic.w	r2, r3, #7
 8007208:	4909      	ldr	r1, [pc, #36]	@ (8007230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007210:	4b07      	ldr	r3, [pc, #28]	@ (8007230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d001      	beq.n	8007222 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40021000 	.word	0x40021000
 8007230:	40022000 	.word	0x40022000

08007234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800723c:	2300      	movs	r3, #0
 800723e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007240:	2300      	movs	r3, #0
 8007242:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800724c:	2b00      	cmp	r3, #0
 800724e:	d041      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007254:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007258:	d02a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800725a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800725e:	d824      	bhi.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007260:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007264:	d008      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800726a:	d81e      	bhi.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007270:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007274:	d010      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007276:	e018      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007278:	4b86      	ldr	r3, [pc, #536]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4a85      	ldr	r2, [pc, #532]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007282:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007284:	e015      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f000 facd 	bl	800782c <RCCEx_PLLSAI1_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007296:	e00c      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3320      	adds	r3, #32
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fbb6 	bl	8007a10 <RCCEx_PLLSAI2_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072a8:	e003      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	74fb      	strb	r3, [r7, #19]
      break;
 80072ae:	e000      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80072b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072b2:	7cfb      	ldrb	r3, [r7, #19]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072b8:	4b76      	ldr	r3, [pc, #472]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c6:	4973      	ldr	r1, [pc, #460]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80072ce:	e001      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d0:	7cfb      	ldrb	r3, [r7, #19]
 80072d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d041      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072e8:	d02a      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80072ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072ee:	d824      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072f4:	d008      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072fa:	d81e      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007304:	d010      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007306:	e018      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007308:	4b62      	ldr	r3, [pc, #392]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	4a61      	ldr	r2, [pc, #388]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007312:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007314:	e015      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3304      	adds	r3, #4
 800731a:	2100      	movs	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fa85 	bl	800782c <RCCEx_PLLSAI1_Config>
 8007322:	4603      	mov	r3, r0
 8007324:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007326:	e00c      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3320      	adds	r3, #32
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fb6e 	bl	8007a10 <RCCEx_PLLSAI2_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007338:	e003      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	74fb      	strb	r3, [r7, #19]
      break;
 800733e:	e000      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007342:	7cfb      	ldrb	r3, [r7, #19]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007348:	4b52      	ldr	r3, [pc, #328]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007356:	494f      	ldr	r1, [pc, #316]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800735e:	e001      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	7cfb      	ldrb	r3, [r7, #19]
 8007362:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80a0 	beq.w	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007372:	2300      	movs	r3, #0
 8007374:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007376:	4b47      	ldr	r3, [pc, #284]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800737a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00d      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800738c:	4b41      	ldr	r3, [pc, #260]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800738e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007390:	4a40      	ldr	r2, [pc, #256]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007396:	6593      	str	r3, [r2, #88]	@ 0x58
 8007398:	4b3e      	ldr	r3, [pc, #248]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800739a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073a4:	2301      	movs	r3, #1
 80073a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a3a      	ldr	r2, [pc, #232]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073b4:	f7fc fb04 	bl	80039c0 <HAL_GetTick>
 80073b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073ba:	e009      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073bc:	f7fc fb00 	bl	80039c0 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d902      	bls.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	74fb      	strb	r3, [r7, #19]
        break;
 80073ce:	e005      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073d0:	4b31      	ldr	r3, [pc, #196]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0ef      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d15c      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01f      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d019      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007400:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800740a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800740c:	4b21      	ldr	r3, [pc, #132]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007412:	4a20      	ldr	r2, [pc, #128]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800741c:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007422:	4a1c      	ldr	r2, [pc, #112]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800742c:	4a19      	ldr	r2, [pc, #100]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d016      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7fc fabf 	bl	80039c0 <HAL_GetTick>
 8007442:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007444:	e00b      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007446:	f7fc fabb 	bl	80039c0 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007454:	4293      	cmp	r3, r2
 8007456:	d902      	bls.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	74fb      	strb	r3, [r7, #19]
            break;
 800745c:	e006      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800745e:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0ec      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10c      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007472:	4b08      	ldr	r3, [pc, #32]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007482:	4904      	ldr	r1, [pc, #16]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800748a:	e009      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800748c:	7cfb      	ldrb	r3, [r7, #19]
 800748e:	74bb      	strb	r3, [r7, #18]
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007492:	bf00      	nop
 8007494:	40021000 	.word	0x40021000
 8007498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749c:	7cfb      	ldrb	r3, [r7, #19]
 800749e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074a0:	7c7b      	ldrb	r3, [r7, #17]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d105      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a6:	4ba6      	ldr	r3, [pc, #664]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074aa:	4aa5      	ldr	r2, [pc, #660]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074be:	4ba0      	ldr	r3, [pc, #640]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c4:	f023 0203 	bic.w	r2, r3, #3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074cc:	499c      	ldr	r1, [pc, #624]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074e0:	4b97      	ldr	r3, [pc, #604]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e6:	f023 020c 	bic.w	r2, r3, #12
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ee:	4994      	ldr	r1, [pc, #592]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007502:	4b8f      	ldr	r3, [pc, #572]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007508:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007510:	498b      	ldr	r1, [pc, #556]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007524:	4b86      	ldr	r3, [pc, #536]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007532:	4983      	ldr	r1, [pc, #524]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007546:	4b7e      	ldr	r3, [pc, #504]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007554:	497a      	ldr	r1, [pc, #488]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007568:	4b75      	ldr	r3, [pc, #468]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007576:	4972      	ldr	r1, [pc, #456]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800758a:	4b6d      	ldr	r3, [pc, #436]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007590:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007598:	4969      	ldr	r1, [pc, #420]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075ac:	4b64      	ldr	r3, [pc, #400]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ba:	4961      	ldr	r1, [pc, #388]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075dc:	4958      	ldr	r1, [pc, #352]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075f0:	4b53      	ldr	r3, [pc, #332]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fe:	4950      	ldr	r1, [pc, #320]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007612:	4b4b      	ldr	r3, [pc, #300]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007620:	4947      	ldr	r1, [pc, #284]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007634:	4b42      	ldr	r3, [pc, #264]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007636:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800763a:	f023 0203 	bic.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007642:	493f      	ldr	r1, [pc, #252]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d028      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007656:	4b3a      	ldr	r3, [pc, #232]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007664:	4936      	ldr	r1, [pc, #216]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007674:	d106      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007676:	4b32      	ldr	r3, [pc, #200]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4a31      	ldr	r2, [pc, #196]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800767c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007680:	60d3      	str	r3, [r2, #12]
 8007682:	e011      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	2101      	movs	r1, #1
 8007694:	4618      	mov	r0, r3
 8007696:	f000 f8c9 	bl	800782c <RCCEx_PLLSAI1_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800769e:	7cfb      	ldrb	r3, [r7, #19]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80076a4:	7cfb      	ldrb	r3, [r7, #19]
 80076a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d028      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076b4:	4b22      	ldr	r3, [pc, #136]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c2:	491f      	ldr	r1, [pc, #124]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d2:	d106      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4a19      	ldr	r2, [pc, #100]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80076da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076de:	60d3      	str	r3, [r2, #12]
 80076e0:	e011      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076ea:	d10c      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	2101      	movs	r1, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f89a 	bl	800782c <RCCEx_PLLSAI1_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076fc:	7cfb      	ldrb	r3, [r7, #19]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007702:	7cfb      	ldrb	r3, [r7, #19]
 8007704:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d02a      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007712:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007718:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007720:	4907      	ldr	r1, [pc, #28]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800772c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007730:	d108      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007732:	4b03      	ldr	r3, [pc, #12]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	4a02      	ldr	r2, [pc, #8]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007738:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800773c:	60d3      	str	r3, [r2, #12]
 800773e:	e013      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007740:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800774c:	d10c      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3304      	adds	r3, #4
 8007752:	2101      	movs	r1, #1
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f869 	bl	800782c <RCCEx_PLLSAI1_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800775e:	7cfb      	ldrb	r3, [r7, #19]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007764:	7cfb      	ldrb	r3, [r7, #19]
 8007766:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d02f      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007774:	4b2c      	ldr	r3, [pc, #176]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007782:	4929      	ldr	r1, [pc, #164]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007792:	d10d      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f846 	bl	800782c <RCCEx_PLLSAI1_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077a4:	7cfb      	ldrb	r3, [r7, #19]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d014      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80077aa:	7cfb      	ldrb	r3, [r7, #19]
 80077ac:	74bb      	strb	r3, [r7, #18]
 80077ae:	e011      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3320      	adds	r3, #32
 80077be:	2102      	movs	r1, #2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f925 	bl	8007a10 <RCCEx_PLLSAI2_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077ca:	7cfb      	ldrb	r3, [r7, #19]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80077d0:	7cfb      	ldrb	r3, [r7, #19]
 80077d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077e0:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f0:	490d      	ldr	r1, [pc, #52]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007804:	4b08      	ldr	r3, [pc, #32]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007814:	4904      	ldr	r1, [pc, #16]	@ (8007828 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800781c:	7cbb      	ldrb	r3, [r7, #18]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40021000 	.word	0x40021000

0800782c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800783a:	4b74      	ldr	r3, [pc, #464]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d018      	beq.n	8007878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007846:	4b71      	ldr	r3, [pc, #452]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0203 	and.w	r2, r3, #3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d10d      	bne.n	8007872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
       ||
 800785a:	2b00      	cmp	r3, #0
 800785c:	d009      	beq.n	8007872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800785e:	4b6b      	ldr	r3, [pc, #428]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	091b      	lsrs	r3, r3, #4
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
       ||
 800786e:	429a      	cmp	r2, r3
 8007870:	d047      	beq.n	8007902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	e044      	b.n	8007902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b03      	cmp	r3, #3
 800787e:	d018      	beq.n	80078b2 <RCCEx_PLLSAI1_Config+0x86>
 8007880:	2b03      	cmp	r3, #3
 8007882:	d825      	bhi.n	80078d0 <RCCEx_PLLSAI1_Config+0xa4>
 8007884:	2b01      	cmp	r3, #1
 8007886:	d002      	beq.n	800788e <RCCEx_PLLSAI1_Config+0x62>
 8007888:	2b02      	cmp	r3, #2
 800788a:	d009      	beq.n	80078a0 <RCCEx_PLLSAI1_Config+0x74>
 800788c:	e020      	b.n	80078d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800788e:	4b5f      	ldr	r3, [pc, #380]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d11d      	bne.n	80078d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800789e:	e01a      	b.n	80078d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078a0:	4b5a      	ldr	r3, [pc, #360]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d116      	bne.n	80078da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078b0:	e013      	b.n	80078da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078b2:	4b56      	ldr	r3, [pc, #344]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078be:	4b53      	ldr	r3, [pc, #332]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078ce:	e006      	b.n	80078de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e004      	b.n	80078e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078d6:	bf00      	nop
 80078d8:	e002      	b.n	80078e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078da:	bf00      	nop
 80078dc:	e000      	b.n	80078e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078de:	bf00      	nop
    }

    if(status == HAL_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10d      	bne.n	8007902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80078e6:	4b49      	ldr	r3, [pc, #292]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	011b      	lsls	r3, r3, #4
 80078fa:	430b      	orrs	r3, r1
 80078fc:	4943      	ldr	r1, [pc, #268]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d17c      	bne.n	8007a02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007908:	4b40      	ldr	r3, [pc, #256]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800790e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007914:	f7fc f854 	bl	80039c0 <HAL_GetTick>
 8007918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800791a:	e009      	b.n	8007930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800791c:	f7fc f850 	bl	80039c0 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d902      	bls.n	8007930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	73fb      	strb	r3, [r7, #15]
        break;
 800792e:	e005      	b.n	800793c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007930:	4b36      	ldr	r3, [pc, #216]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1ef      	bne.n	800791c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d15f      	bne.n	8007a02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d110      	bne.n	800796a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007948:	4b30      	ldr	r3, [pc, #192]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007950:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6892      	ldr	r2, [r2, #8]
 8007958:	0211      	lsls	r1, r2, #8
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68d2      	ldr	r2, [r2, #12]
 800795e:	06d2      	lsls	r2, r2, #27
 8007960:	430a      	orrs	r2, r1
 8007962:	492a      	ldr	r1, [pc, #168]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007964:	4313      	orrs	r3, r2
 8007966:	610b      	str	r3, [r1, #16]
 8007968:	e027      	b.n	80079ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d112      	bne.n	8007996 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007970:	4b26      	ldr	r3, [pc, #152]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007978:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6892      	ldr	r2, [r2, #8]
 8007980:	0211      	lsls	r1, r2, #8
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6912      	ldr	r2, [r2, #16]
 8007986:	0852      	lsrs	r2, r2, #1
 8007988:	3a01      	subs	r2, #1
 800798a:	0552      	lsls	r2, r2, #21
 800798c:	430a      	orrs	r2, r1
 800798e:	491f      	ldr	r1, [pc, #124]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007990:	4313      	orrs	r3, r2
 8007992:	610b      	str	r3, [r1, #16]
 8007994:	e011      	b.n	80079ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007996:	4b1d      	ldr	r3, [pc, #116]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800799e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6892      	ldr	r2, [r2, #8]
 80079a6:	0211      	lsls	r1, r2, #8
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6952      	ldr	r2, [r2, #20]
 80079ac:	0852      	lsrs	r2, r2, #1
 80079ae:	3a01      	subs	r2, #1
 80079b0:	0652      	lsls	r2, r2, #25
 80079b2:	430a      	orrs	r2, r1
 80079b4:	4915      	ldr	r1, [pc, #84]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80079ba:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c6:	f7fb fffb 	bl	80039c0 <HAL_GetTick>
 80079ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079cc:	e009      	b.n	80079e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079ce:	f7fb fff7 	bl	80039c0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d902      	bls.n	80079e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
          break;
 80079e0:	e005      	b.n	80079ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079e2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ef      	beq.n	80079ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80079f4:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	4903      	ldr	r1, [pc, #12]	@ (8007a0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40021000 	.word	0x40021000

08007a10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a1e:	4b69      	ldr	r3, [pc, #420]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d018      	beq.n	8007a5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007a2a:	4b66      	ldr	r3, [pc, #408]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f003 0203 	and.w	r2, r3, #3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d10d      	bne.n	8007a56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007a42:	4b60      	ldr	r3, [pc, #384]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	091b      	lsrs	r3, r3, #4
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
       ||
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d047      	beq.n	8007ae6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]
 8007a5a:	e044      	b.n	8007ae6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d018      	beq.n	8007a96 <RCCEx_PLLSAI2_Config+0x86>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d825      	bhi.n	8007ab4 <RCCEx_PLLSAI2_Config+0xa4>
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d002      	beq.n	8007a72 <RCCEx_PLLSAI2_Config+0x62>
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d009      	beq.n	8007a84 <RCCEx_PLLSAI2_Config+0x74>
 8007a70:	e020      	b.n	8007ab4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a72:	4b54      	ldr	r3, [pc, #336]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d11d      	bne.n	8007aba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a82:	e01a      	b.n	8007aba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a84:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d116      	bne.n	8007abe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a94:	e013      	b.n	8007abe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a96:	4b4b      	ldr	r3, [pc, #300]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10f      	bne.n	8007ac2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007aa2:	4b48      	ldr	r3, [pc, #288]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ab2:	e006      	b.n	8007ac2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab8:	e004      	b.n	8007ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10d      	bne.n	8007ae6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007aca:	4b3e      	ldr	r3, [pc, #248]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6819      	ldr	r1, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	4938      	ldr	r1, [pc, #224]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d166      	bne.n	8007bba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007aec:	4b35      	ldr	r3, [pc, #212]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a34      	ldr	r2, [pc, #208]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af8:	f7fb ff62 	bl	80039c0 <HAL_GetTick>
 8007afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007afe:	e009      	b.n	8007b14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b00:	f7fb ff5e 	bl	80039c0 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d902      	bls.n	8007b14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	73fb      	strb	r3, [r7, #15]
        break;
 8007b12:	e005      	b.n	8007b20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b14:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1ef      	bne.n	8007b00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d149      	bne.n	8007bba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d110      	bne.n	8007b4e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b2c:	4b25      	ldr	r3, [pc, #148]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007b34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6892      	ldr	r2, [r2, #8]
 8007b3c:	0211      	lsls	r1, r2, #8
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	68d2      	ldr	r2, [r2, #12]
 8007b42:	06d2      	lsls	r2, r2, #27
 8007b44:	430a      	orrs	r2, r1
 8007b46:	491f      	ldr	r1, [pc, #124]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	614b      	str	r3, [r1, #20]
 8007b4c:	e011      	b.n	8007b72 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007b56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6892      	ldr	r2, [r2, #8]
 8007b5e:	0211      	lsls	r1, r2, #8
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6912      	ldr	r2, [r2, #16]
 8007b64:	0852      	lsrs	r2, r2, #1
 8007b66:	3a01      	subs	r2, #1
 8007b68:	0652      	lsls	r2, r2, #25
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	4915      	ldr	r1, [pc, #84]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b72:	4b14      	ldr	r3, [pc, #80]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a13      	ldr	r2, [pc, #76]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fb ff1f 	bl	80039c0 <HAL_GetTick>
 8007b82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b84:	e009      	b.n	8007b9a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b86:	f7fb ff1b 	bl	80039c0 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d902      	bls.n	8007b9a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	73fb      	strb	r3, [r7, #15]
          break;
 8007b98:	e005      	b.n	8007ba6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0ef      	beq.n	8007b86 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d106      	bne.n	8007bba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bae:	695a      	ldr	r2, [r3, #20]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	4903      	ldr	r1, [pc, #12]	@ (8007bc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40021000 	.word	0x40021000

08007bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e095      	b.n	8007d06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bea:	d009      	beq.n	8007c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
 8007bf2:	e005      	b.n	8007c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fb fa54 	bl	80030c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c40:	d902      	bls.n	8007c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e002      	b.n	8007c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007c56:	d007      	beq.n	8007c68 <HAL_SPI_Init+0xa0>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c60:	d002      	beq.n	8007c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007caa:	ea42 0103 	orr.w	r1, r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	0c1b      	lsrs	r3, r3, #16
 8007cc4:	f003 0204 	and.w	r2, r3, #4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	f003 0310 	and.w	r3, r3, #16
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ce4:	ea42 0103 	orr.w	r1, r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	099b      	lsrs	r3, r3, #6
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10f      	bne.n	8007d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	099b      	lsrs	r3, r3, #6
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
    return;
 8007d52:	e0d7      	b.n	8007f04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <HAL_SPI_IRQHandler+0x66>
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	09db      	lsrs	r3, r3, #7
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
    return;
 8007d74:	e0c6      	b.n	8007f04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10c      	bne.n	8007d9c <HAL_SPI_IRQHandler+0x8c>
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	099b      	lsrs	r3, r3, #6
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	0a1b      	lsrs	r3, r3, #8
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80b4 	beq.w	8007f04 <HAL_SPI_IRQHandler+0x1f4>
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80ad 	beq.w	8007f04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	099b      	lsrs	r3, r3, #6
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d023      	beq.n	8007dfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d011      	beq.n	8007de6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc6:	f043 0204 	orr.w	r2, r3, #4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	e00b      	b.n	8007dfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	693b      	ldr	r3, [r7, #16]
        return;
 8007dfc:	e082      	b.n	8007f04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d014      	beq.n	8007e34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e0e:	f043 0201 	orr.w	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	0a1b      	lsrs	r3, r3, #8
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00c      	beq.n	8007e5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e44:	f043 0208 	orr.w	r2, r3, #8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60bb      	str	r3, [r7, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04f      	beq.n	8007f02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <HAL_SPI_IRQHandler+0x17e>
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d034      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0203 	bic.w	r2, r2, #3
 8007e9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eaa:	4a18      	ldr	r2, [pc, #96]	@ (8007f0c <HAL_SPI_IRQHandler+0x1fc>)
 8007eac:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd f9fe 	bl	80052b4 <HAL_DMA_Abort_IT>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d016      	beq.n	8007f00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8007f0c <HAL_SPI_IRQHandler+0x1fc>)
 8007ed8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd f9e8 	bl	80052b4 <HAL_DMA_Abort_IT>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007ef6:	e003      	b.n	8007f00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f809 	bl	8007f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007efe:	e000      	b.n	8007f02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007f00:	bf00      	nop
    return;
 8007f02:	bf00      	nop
  }
}
 8007f04:	3720      	adds	r7, #32
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	08007f25 	.word	0x08007f25

08007f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff ffe5 	bl	8007f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e049      	b.n	8007ff4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7fb f945 	bl	8003204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f000 fa9d 	bl	80084cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e04f      	b.n	80080b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	@ (80080c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803e:	d018      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1f      	ldr	r2, [pc, #124]	@ (80080c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1e      	ldr	r2, [pc, #120]	@ (80080c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1c      	ldr	r2, [pc, #112]	@ (80080cc <HAL_TIM_Base_Start_IT+0xd0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1b      	ldr	r2, [pc, #108]	@ (80080d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d115      	bne.n	800809e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800807a:	4013      	ands	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b06      	cmp	r3, #6
 8008082:	d015      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800808a:	d011      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	e008      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e000      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40013400 	.word	0x40013400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	00010007 	.word	0x00010007

080080dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d020      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0202 	mvn.w	r2, #2
 8008110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9b2 	bl	8008490 <HAL_TIM_IC_CaptureCallback>
 800812c:	e005      	b.n	800813a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9a4 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9b5 	bl	80084a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0204 	mvn.w	r2, #4
 800815c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f98c 	bl	8008490 <HAL_TIM_IC_CaptureCallback>
 8008178:	e005      	b.n	8008186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f97e 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f98f 	bl	80084a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d020      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01b      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0208 	mvn.w	r2, #8
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f966 	bl	8008490 <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f958 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f969 	bl	80084a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d020      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01b      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f940 	bl	8008490 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f932 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f943 	bl	80084a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0201 	mvn.w	r2, #1
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fa fda4 	bl	8002d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d104      	bne.n	800825c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800826e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fafd 	bl	8008870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 faf5 	bl	8008884 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8fd 	bl	80084b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00c      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f06f 0220 	mvn.w	r2, #32
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fabd 	bl	800885c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_TIM_ConfigClockSource+0x1c>
 8008302:	2302      	movs	r3, #2
 8008304:	e0b6      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x18a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2202      	movs	r2, #2
 8008312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008324:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008328:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008330:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008342:	d03e      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0xd8>
 8008344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008348:	f200 8087 	bhi.w	800845a <HAL_TIM_ConfigClockSource+0x170>
 800834c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008350:	f000 8086 	beq.w	8008460 <HAL_TIM_ConfigClockSource+0x176>
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008358:	d87f      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 800835a:	2b70      	cmp	r3, #112	@ 0x70
 800835c:	d01a      	beq.n	8008394 <HAL_TIM_ConfigClockSource+0xaa>
 800835e:	2b70      	cmp	r3, #112	@ 0x70
 8008360:	d87b      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 8008362:	2b60      	cmp	r3, #96	@ 0x60
 8008364:	d050      	beq.n	8008408 <HAL_TIM_ConfigClockSource+0x11e>
 8008366:	2b60      	cmp	r3, #96	@ 0x60
 8008368:	d877      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 800836a:	2b50      	cmp	r3, #80	@ 0x50
 800836c:	d03c      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0xfe>
 800836e:	2b50      	cmp	r3, #80	@ 0x50
 8008370:	d873      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d058      	beq.n	8008428 <HAL_TIM_ConfigClockSource+0x13e>
 8008376:	2b40      	cmp	r3, #64	@ 0x40
 8008378:	d86f      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 800837a:	2b30      	cmp	r3, #48	@ 0x30
 800837c:	d064      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x15e>
 800837e:	2b30      	cmp	r3, #48	@ 0x30
 8008380:	d86b      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 8008382:	2b20      	cmp	r3, #32
 8008384:	d060      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x15e>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d867      	bhi.n	800845a <HAL_TIM_ConfigClockSource+0x170>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d05c      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x15e>
 800838e:	2b10      	cmp	r3, #16
 8008390:	d05a      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x15e>
 8008392:	e062      	b.n	800845a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083a4:	f000 f9b2 	bl	800870c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	609a      	str	r2, [r3, #8]
      break;
 80083c0:	e04f      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083d2:	f000 f99b 	bl	800870c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083e4:	609a      	str	r2, [r3, #8]
      break;
 80083e6:	e03c      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f4:	461a      	mov	r2, r3
 80083f6:	f000 f90f 	bl	8008618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2150      	movs	r1, #80	@ 0x50
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f968 	bl	80086d6 <TIM_ITRx_SetConfig>
      break;
 8008406:	e02c      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008414:	461a      	mov	r2, r3
 8008416:	f000 f92e 	bl	8008676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2160      	movs	r1, #96	@ 0x60
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f958 	bl	80086d6 <TIM_ITRx_SetConfig>
      break;
 8008426:	e01c      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008434:	461a      	mov	r2, r3
 8008436:	f000 f8ef 	bl	8008618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2140      	movs	r1, #64	@ 0x40
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f948 	bl	80086d6 <TIM_ITRx_SetConfig>
      break;
 8008446:	e00c      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f000 f93f 	bl	80086d6 <TIM_ITRx_SetConfig>
      break;
 8008458:	e003      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]
      break;
 800845e:	e000      	b.n	8008462 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008460:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a46      	ldr	r2, [pc, #280]	@ (80085f8 <TIM_Base_SetConfig+0x12c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d013      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ea:	d00f      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a43      	ldr	r2, [pc, #268]	@ (80085fc <TIM_Base_SetConfig+0x130>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00b      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a42      	ldr	r2, [pc, #264]	@ (8008600 <TIM_Base_SetConfig+0x134>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d007      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a41      	ldr	r2, [pc, #260]	@ (8008604 <TIM_Base_SetConfig+0x138>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d003      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a40      	ldr	r2, [pc, #256]	@ (8008608 <TIM_Base_SetConfig+0x13c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d108      	bne.n	800851e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a35      	ldr	r2, [pc, #212]	@ (80085f8 <TIM_Base_SetConfig+0x12c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d01f      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852c:	d01b      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a32      	ldr	r2, [pc, #200]	@ (80085fc <TIM_Base_SetConfig+0x130>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d017      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a31      	ldr	r2, [pc, #196]	@ (8008600 <TIM_Base_SetConfig+0x134>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d013      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a30      	ldr	r2, [pc, #192]	@ (8008604 <TIM_Base_SetConfig+0x138>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00f      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2f      	ldr	r2, [pc, #188]	@ (8008608 <TIM_Base_SetConfig+0x13c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00b      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2e      	ldr	r2, [pc, #184]	@ (800860c <TIM_Base_SetConfig+0x140>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d007      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2d      	ldr	r2, [pc, #180]	@ (8008610 <TIM_Base_SetConfig+0x144>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d003      	beq.n	8008566 <TIM_Base_SetConfig+0x9a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2c      	ldr	r2, [pc, #176]	@ (8008614 <TIM_Base_SetConfig+0x148>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d108      	bne.n	8008578 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a16      	ldr	r2, [pc, #88]	@ (80085f8 <TIM_Base_SetConfig+0x12c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00f      	beq.n	80085c4 <TIM_Base_SetConfig+0xf8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a18      	ldr	r2, [pc, #96]	@ (8008608 <TIM_Base_SetConfig+0x13c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <TIM_Base_SetConfig+0xf8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a17      	ldr	r2, [pc, #92]	@ (800860c <TIM_Base_SetConfig+0x140>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d007      	beq.n	80085c4 <TIM_Base_SetConfig+0xf8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a16      	ldr	r2, [pc, #88]	@ (8008610 <TIM_Base_SetConfig+0x144>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_Base_SetConfig+0xf8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a15      	ldr	r2, [pc, #84]	@ (8008614 <TIM_Base_SetConfig+0x148>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d103      	bne.n	80085cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d105      	bne.n	80085ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f023 0201 	bic.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	611a      	str	r2, [r3, #16]
  }
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40000400 	.word	0x40000400
 8008600:	40000800 	.word	0x40000800
 8008604:	40000c00 	.word	0x40000c00
 8008608:	40013400 	.word	0x40013400
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800

08008618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f023 0201 	bic.w	r2, r3, #1
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f023 030a 	bic.w	r3, r3, #10
 8008654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	621a      	str	r2, [r3, #32]
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008676:	b480      	push	{r7}
 8008678:	b087      	sub	sp, #28
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f023 0210 	bic.w	r2, r3, #16
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	031b      	lsls	r3, r3, #12
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b085      	sub	sp, #20
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f043 0307 	orr.w	r3, r3, #7
 80086f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	609a      	str	r2, [r3, #8]
}
 8008700:	bf00      	nop
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	021a      	lsls	r2, r3, #8
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	431a      	orrs	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4313      	orrs	r3, r2
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008760:	2302      	movs	r3, #2
 8008762:	e068      	b.n	8008836 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a2e      	ldr	r2, [pc, #184]	@ (8008844 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a2d      	ldr	r2, [pc, #180]	@ (8008848 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d108      	bne.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800879e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a1e      	ldr	r2, [pc, #120]	@ (8008844 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d01d      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d6:	d018      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1b      	ldr	r2, [pc, #108]	@ (800884c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d013      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00e      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a18      	ldr	r2, [pc, #96]	@ (8008854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d009      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a13      	ldr	r2, [pc, #76]	@ (8008848 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d004      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a14      	ldr	r2, [pc, #80]	@ (8008858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d10c      	bne.n	8008824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4313      	orrs	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40012c00 	.word	0x40012c00
 8008848:	40013400 	.word	0x40013400
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40000c00 	.word	0x40000c00
 8008858:	40014000 	.word	0x40014000

0800885c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e040      	b.n	800892c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fa fcfc 	bl	80032b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2224      	movs	r2, #36	@ 0x24
 80088c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0201 	bic.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fedc 	bl	800969c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fc21 	bl	800912c <UART_SetConfig>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e01b      	b.n	800892c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 ff5b 	bl	80097e0 <UART_CheckIdleState>
 800892a:	4603      	mov	r3, r0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08a      	sub	sp, #40	@ 0x28
 8008938:	af02      	add	r7, sp, #8
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	4613      	mov	r3, r2
 8008942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008948:	2b20      	cmp	r3, #32
 800894a:	d177      	bne.n	8008a3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_UART_Transmit+0x24>
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e070      	b.n	8008a3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2221      	movs	r2, #33	@ 0x21
 8008968:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800896a:	f7fb f829 	bl	80039c0 <HAL_GetTick>
 800896e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008988:	d108      	bne.n	800899c <HAL_UART_Transmit+0x68>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d104      	bne.n	800899c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	e003      	b.n	80089a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089a4:	e02f      	b.n	8008a06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2200      	movs	r2, #0
 80089ae:	2180      	movs	r1, #128	@ 0x80
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 ffbd 	bl	8009930 <UART_WaitOnFlagUntilTimeout>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2220      	movs	r2, #32
 80089c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e03b      	b.n	8008a3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	881a      	ldrh	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d8:	b292      	uxth	r2, r2
 80089da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	3302      	adds	r3, #2
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e007      	b.n	80089f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	3301      	adds	r3, #1
 80089f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1c9      	bne.n	80089a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2140      	movs	r1, #64	@ 0x40
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 ff87 	bl	8009930 <UART_WaitOnFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e005      	b.n	8008a3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e000      	b.n	8008a3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008a3c:	2302      	movs	r3, #2
  }
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	@ 0x28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d137      	bne.n	8008ad0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <HAL_UART_Receive_DMA+0x24>
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e030      	b.n	8008ad2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a18      	ldr	r2, [pc, #96]	@ (8008adc <HAL_UART_Receive_DMA+0x94>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d01f      	beq.n	8008ac0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d018      	beq.n	8008ac0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	623b      	str	r3, [r7, #32]
 8008aae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	69f9      	ldr	r1, [r7, #28]
 8008ab2:	6a3a      	ldr	r2, [r7, #32]
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e6      	bne.n	8008a8e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 ffa0 	bl	8009a0c <UART_Start_Receive_DMA>
 8008acc:	4603      	mov	r3, r0
 8008ace:	e000      	b.n	8008ad2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
  }
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3728      	adds	r7, #40	@ 0x28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40008000 	.word	0x40008000

08008ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008b0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008b0e:	4013      	ands	r3, r2
 8008b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d115      	bne.n	8008b48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b20:	f003 0320 	and.w	r3, r3, #32
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00f      	beq.n	8008b48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d009      	beq.n	8008b48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 82ca 	beq.w	80090d2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
      }
      return;
 8008b46:	e2c4      	b.n	80090d2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8117 	beq.w	8008d80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d106      	bne.n	8008b6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b62:	4b85      	ldr	r3, [pc, #532]	@ (8008d78 <HAL_UART_IRQHandler+0x298>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 810a 	beq.w	8008d80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d011      	beq.n	8008b9c <HAL_UART_IRQHandler+0xbc>
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b92:	f043 0201 	orr.w	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d011      	beq.n	8008bcc <HAL_UART_IRQHandler+0xec>
 8008ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bc2:	f043 0204 	orr.w	r2, r3, #4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d011      	beq.n	8008bfc <HAL_UART_IRQHandler+0x11c>
 8008bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2204      	movs	r2, #4
 8008bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bf2:	f043 0202 	orr.w	r2, r3, #2
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c00:	f003 0308 	and.w	r3, r3, #8
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d017      	beq.n	8008c38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d105      	bne.n	8008c20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2208      	movs	r2, #8
 8008c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c2e:	f043 0208 	orr.w	r2, r3, #8
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d012      	beq.n	8008c6a <HAL_UART_IRQHandler+0x18a>
 8008c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00c      	beq.n	8008c6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c60:	f043 0220 	orr.w	r2, r3, #32
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 8230 	beq.w	80090d6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00d      	beq.n	8008c9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb2:	2b40      	cmp	r3, #64	@ 0x40
 8008cb4:	d005      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d04f      	beq.n	8008d62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 ff68 	bl	8009b98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	d141      	bne.n	8008d5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1d9      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d013      	beq.n	8008d52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d2e:	4a13      	ldr	r2, [pc, #76]	@ (8008d7c <HAL_UART_IRQHandler+0x29c>)
 8008d30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fc fabc 	bl	80052b4 <HAL_DMA_Abort_IT>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d017      	beq.n	8008d72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d50:	e00f      	b.n	8008d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7f8 fec8 	bl	8001ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d58:	e00b      	b.n	8008d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7f8 fec4 	bl	8001ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d60:	e007      	b.n	8008d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f8 fec0 	bl	8001ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008d70:	e1b1      	b.n	80090d6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d72:	bf00      	nop
    return;
 8008d74:	e1af      	b.n	80090d6 <HAL_UART_IRQHandler+0x5f6>
 8008d76:	bf00      	nop
 8008d78:	04000120 	.word	0x04000120
 8008d7c:	08009e49 	.word	0x08009e49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	f040 816a 	bne.w	800905e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8e:	f003 0310 	and.w	r3, r3, #16
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8163 	beq.w	800905e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 815c 	beq.w	800905e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2210      	movs	r2, #16
 8008dac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db8:	2b40      	cmp	r3, #64	@ 0x40
 8008dba:	f040 80d4 	bne.w	8008f66 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008dca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80ad 	beq.w	8008f2e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dde:	429a      	cmp	r2, r3
 8008de0:	f080 80a5 	bcs.w	8008f2e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f040 8086 	bne.w	8008f0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1da      	bne.n	8008e00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e5c:	f023 0301 	bic.w	r3, r3, #1
 8008e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e1      	bne.n	8008e4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008eaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008eac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e3      	bne.n	8008e86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008edc:	f023 0310 	bic.w	r3, r3, #16
 8008ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ef0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ef4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e4      	bne.n	8008ecc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc f996 	bl	8005238 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f8f4 	bl	8009114 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008f2c:	e0d5      	b.n	80090da <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	f040 80ce 	bne.w	80090da <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	f040 80c5 	bne.w	80090da <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8d8 	bl	8009114 <HAL_UARTEx_RxEventCallback>
      return;
 8008f64:	e0b9      	b.n	80090da <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80ab 	beq.w	80090de <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80a6 	beq.w	80090de <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e4      	bne.n	8008f92 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fec:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e3      	bne.n	8008fc8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	60fb      	str	r3, [r7, #12]
   return(result);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f023 0310 	bic.w	r3, r3, #16
 8009028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	69b9      	ldr	r1, [r7, #24]
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	617b      	str	r3, [r7, #20]
   return(result);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e4      	bne.n	8009014 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f85c 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800905c:	e03f      	b.n	80090de <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00e      	beq.n	8009088 <HAL_UART_IRQHandler+0x5a8>
 800906a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800906e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800907e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 ff88 	bl	8009f96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009086:	e02d      	b.n	80090e4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00e      	beq.n	80090b2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800909c:	2b00      	cmp	r3, #0
 800909e:	d008      	beq.n	80090b2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d01c      	beq.n	80090e2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
    }
    return;
 80090b0:	e017      	b.n	80090e2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d012      	beq.n	80090e4 <HAL_UART_IRQHandler+0x604>
 80090be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00c      	beq.n	80090e4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fed2 	bl	8009e74 <UART_EndTransmit_IT>
    return;
 80090d0:	e008      	b.n	80090e4 <HAL_UART_IRQHandler+0x604>
      return;
 80090d2:	bf00      	nop
 80090d4:	e006      	b.n	80090e4 <HAL_UART_IRQHandler+0x604>
    return;
 80090d6:	bf00      	nop
 80090d8:	e004      	b.n	80090e4 <HAL_UART_IRQHandler+0x604>
      return;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <HAL_UART_IRQHandler+0x604>
      return;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <HAL_UART_IRQHandler+0x604>
    return;
 80090e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80090e4:	37e8      	adds	r7, #232	@ 0xe8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop

080090ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800912c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009130:	b08a      	sub	sp, #40	@ 0x28
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	431a      	orrs	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	431a      	orrs	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	4313      	orrs	r3, r2
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	4ba4      	ldr	r3, [pc, #656]	@ (80093ec <UART_SetConfig+0x2c0>)
 800915c:	4013      	ands	r3, r2
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	6812      	ldr	r2, [r2, #0]
 8009162:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009164:	430b      	orrs	r3, r1
 8009166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a99      	ldr	r2, [pc, #612]	@ (80093f0 <UART_SetConfig+0x2c4>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009194:	4313      	orrs	r3, r2
 8009196:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a8:	430a      	orrs	r2, r1
 80091aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a90      	ldr	r2, [pc, #576]	@ (80093f4 <UART_SetConfig+0x2c8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d126      	bne.n	8009204 <UART_SetConfig+0xd8>
 80091b6:	4b90      	ldr	r3, [pc, #576]	@ (80093f8 <UART_SetConfig+0x2cc>)
 80091b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d81b      	bhi.n	80091fc <UART_SetConfig+0xd0>
 80091c4:	a201      	add	r2, pc, #4	@ (adr r2, 80091cc <UART_SetConfig+0xa0>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	080091dd 	.word	0x080091dd
 80091d0:	080091ed 	.word	0x080091ed
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091f5 	.word	0x080091f5
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091e2:	e116      	b.n	8009412 <UART_SetConfig+0x2e6>
 80091e4:	2302      	movs	r3, #2
 80091e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091ea:	e112      	b.n	8009412 <UART_SetConfig+0x2e6>
 80091ec:	2304      	movs	r3, #4
 80091ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091f2:	e10e      	b.n	8009412 <UART_SetConfig+0x2e6>
 80091f4:	2308      	movs	r3, #8
 80091f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091fa:	e10a      	b.n	8009412 <UART_SetConfig+0x2e6>
 80091fc:	2310      	movs	r3, #16
 80091fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009202:	e106      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a7c      	ldr	r2, [pc, #496]	@ (80093fc <UART_SetConfig+0x2d0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d138      	bne.n	8009280 <UART_SetConfig+0x154>
 800920e:	4b7a      	ldr	r3, [pc, #488]	@ (80093f8 <UART_SetConfig+0x2cc>)
 8009210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009214:	f003 030c 	and.w	r3, r3, #12
 8009218:	2b0c      	cmp	r3, #12
 800921a:	d82d      	bhi.n	8009278 <UART_SetConfig+0x14c>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <UART_SetConfig+0xf8>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009259 	.word	0x08009259
 8009228:	08009279 	.word	0x08009279
 800922c:	08009279 	.word	0x08009279
 8009230:	08009279 	.word	0x08009279
 8009234:	08009269 	.word	0x08009269
 8009238:	08009279 	.word	0x08009279
 800923c:	08009279 	.word	0x08009279
 8009240:	08009279 	.word	0x08009279
 8009244:	08009261 	.word	0x08009261
 8009248:	08009279 	.word	0x08009279
 800924c:	08009279 	.word	0x08009279
 8009250:	08009279 	.word	0x08009279
 8009254:	08009271 	.word	0x08009271
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800925e:	e0d8      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009260:	2302      	movs	r3, #2
 8009262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009266:	e0d4      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009268:	2304      	movs	r3, #4
 800926a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800926e:	e0d0      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009270:	2308      	movs	r3, #8
 8009272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009276:	e0cc      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009278:	2310      	movs	r3, #16
 800927a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800927e:	e0c8      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a5e      	ldr	r2, [pc, #376]	@ (8009400 <UART_SetConfig+0x2d4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d125      	bne.n	80092d6 <UART_SetConfig+0x1aa>
 800928a:	4b5b      	ldr	r3, [pc, #364]	@ (80093f8 <UART_SetConfig+0x2cc>)
 800928c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009290:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009294:	2b30      	cmp	r3, #48	@ 0x30
 8009296:	d016      	beq.n	80092c6 <UART_SetConfig+0x19a>
 8009298:	2b30      	cmp	r3, #48	@ 0x30
 800929a:	d818      	bhi.n	80092ce <UART_SetConfig+0x1a2>
 800929c:	2b20      	cmp	r3, #32
 800929e:	d00a      	beq.n	80092b6 <UART_SetConfig+0x18a>
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d814      	bhi.n	80092ce <UART_SetConfig+0x1a2>
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <UART_SetConfig+0x182>
 80092a8:	2b10      	cmp	r3, #16
 80092aa:	d008      	beq.n	80092be <UART_SetConfig+0x192>
 80092ac:	e00f      	b.n	80092ce <UART_SetConfig+0x1a2>
 80092ae:	2300      	movs	r3, #0
 80092b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092b4:	e0ad      	b.n	8009412 <UART_SetConfig+0x2e6>
 80092b6:	2302      	movs	r3, #2
 80092b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092bc:	e0a9      	b.n	8009412 <UART_SetConfig+0x2e6>
 80092be:	2304      	movs	r3, #4
 80092c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092c4:	e0a5      	b.n	8009412 <UART_SetConfig+0x2e6>
 80092c6:	2308      	movs	r3, #8
 80092c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092cc:	e0a1      	b.n	8009412 <UART_SetConfig+0x2e6>
 80092ce:	2310      	movs	r3, #16
 80092d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092d4:	e09d      	b.n	8009412 <UART_SetConfig+0x2e6>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a4a      	ldr	r2, [pc, #296]	@ (8009404 <UART_SetConfig+0x2d8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d125      	bne.n	800932c <UART_SetConfig+0x200>
 80092e0:	4b45      	ldr	r3, [pc, #276]	@ (80093f8 <UART_SetConfig+0x2cc>)
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80092ec:	d016      	beq.n	800931c <UART_SetConfig+0x1f0>
 80092ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80092f0:	d818      	bhi.n	8009324 <UART_SetConfig+0x1f8>
 80092f2:	2b80      	cmp	r3, #128	@ 0x80
 80092f4:	d00a      	beq.n	800930c <UART_SetConfig+0x1e0>
 80092f6:	2b80      	cmp	r3, #128	@ 0x80
 80092f8:	d814      	bhi.n	8009324 <UART_SetConfig+0x1f8>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <UART_SetConfig+0x1d8>
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d008      	beq.n	8009314 <UART_SetConfig+0x1e8>
 8009302:	e00f      	b.n	8009324 <UART_SetConfig+0x1f8>
 8009304:	2300      	movs	r3, #0
 8009306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800930a:	e082      	b.n	8009412 <UART_SetConfig+0x2e6>
 800930c:	2302      	movs	r3, #2
 800930e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009312:	e07e      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009314:	2304      	movs	r3, #4
 8009316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800931a:	e07a      	b.n	8009412 <UART_SetConfig+0x2e6>
 800931c:	2308      	movs	r3, #8
 800931e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009322:	e076      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009324:	2310      	movs	r3, #16
 8009326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800932a:	e072      	b.n	8009412 <UART_SetConfig+0x2e6>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a35      	ldr	r2, [pc, #212]	@ (8009408 <UART_SetConfig+0x2dc>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d12a      	bne.n	800938c <UART_SetConfig+0x260>
 8009336:	4b30      	ldr	r3, [pc, #192]	@ (80093f8 <UART_SetConfig+0x2cc>)
 8009338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800933c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009344:	d01a      	beq.n	800937c <UART_SetConfig+0x250>
 8009346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800934a:	d81b      	bhi.n	8009384 <UART_SetConfig+0x258>
 800934c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009350:	d00c      	beq.n	800936c <UART_SetConfig+0x240>
 8009352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009356:	d815      	bhi.n	8009384 <UART_SetConfig+0x258>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <UART_SetConfig+0x238>
 800935c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009360:	d008      	beq.n	8009374 <UART_SetConfig+0x248>
 8009362:	e00f      	b.n	8009384 <UART_SetConfig+0x258>
 8009364:	2300      	movs	r3, #0
 8009366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800936a:	e052      	b.n	8009412 <UART_SetConfig+0x2e6>
 800936c:	2302      	movs	r3, #2
 800936e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009372:	e04e      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800937a:	e04a      	b.n	8009412 <UART_SetConfig+0x2e6>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009382:	e046      	b.n	8009412 <UART_SetConfig+0x2e6>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800938a:	e042      	b.n	8009412 <UART_SetConfig+0x2e6>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a17      	ldr	r2, [pc, #92]	@ (80093f0 <UART_SetConfig+0x2c4>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d13a      	bne.n	800940c <UART_SetConfig+0x2e0>
 8009396:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <UART_SetConfig+0x2cc>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093a4:	d01a      	beq.n	80093dc <UART_SetConfig+0x2b0>
 80093a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093aa:	d81b      	bhi.n	80093e4 <UART_SetConfig+0x2b8>
 80093ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093b0:	d00c      	beq.n	80093cc <UART_SetConfig+0x2a0>
 80093b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093b6:	d815      	bhi.n	80093e4 <UART_SetConfig+0x2b8>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <UART_SetConfig+0x298>
 80093bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093c0:	d008      	beq.n	80093d4 <UART_SetConfig+0x2a8>
 80093c2:	e00f      	b.n	80093e4 <UART_SetConfig+0x2b8>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ca:	e022      	b.n	8009412 <UART_SetConfig+0x2e6>
 80093cc:	2302      	movs	r3, #2
 80093ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093d2:	e01e      	b.n	8009412 <UART_SetConfig+0x2e6>
 80093d4:	2304      	movs	r3, #4
 80093d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093da:	e01a      	b.n	8009412 <UART_SetConfig+0x2e6>
 80093dc:	2308      	movs	r3, #8
 80093de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093e2:	e016      	b.n	8009412 <UART_SetConfig+0x2e6>
 80093e4:	2310      	movs	r3, #16
 80093e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ea:	e012      	b.n	8009412 <UART_SetConfig+0x2e6>
 80093ec:	efff69f3 	.word	0xefff69f3
 80093f0:	40008000 	.word	0x40008000
 80093f4:	40013800 	.word	0x40013800
 80093f8:	40021000 	.word	0x40021000
 80093fc:	40004400 	.word	0x40004400
 8009400:	40004800 	.word	0x40004800
 8009404:	40004c00 	.word	0x40004c00
 8009408:	40005000 	.word	0x40005000
 800940c:	2310      	movs	r3, #16
 800940e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a9f      	ldr	r2, [pc, #636]	@ (8009694 <UART_SetConfig+0x568>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d17a      	bne.n	8009512 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800941c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009420:	2b08      	cmp	r3, #8
 8009422:	d824      	bhi.n	800946e <UART_SetConfig+0x342>
 8009424:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <UART_SetConfig+0x300>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	08009451 	.word	0x08009451
 8009430:	0800946f 	.word	0x0800946f
 8009434:	08009459 	.word	0x08009459
 8009438:	0800946f 	.word	0x0800946f
 800943c:	0800945f 	.word	0x0800945f
 8009440:	0800946f 	.word	0x0800946f
 8009444:	0800946f 	.word	0x0800946f
 8009448:	0800946f 	.word	0x0800946f
 800944c:	08009467 	.word	0x08009467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009450:	f7fd fe32 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 8009454:	61f8      	str	r0, [r7, #28]
        break;
 8009456:	e010      	b.n	800947a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009458:	4b8f      	ldr	r3, [pc, #572]	@ (8009698 <UART_SetConfig+0x56c>)
 800945a:	61fb      	str	r3, [r7, #28]
        break;
 800945c:	e00d      	b.n	800947a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800945e:	f7fd fd93 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8009462:	61f8      	str	r0, [r7, #28]
        break;
 8009464:	e009      	b.n	800947a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800946a:	61fb      	str	r3, [r7, #28]
        break;
 800946c:	e005      	b.n	800947a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80fb 	beq.w	8009678 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4613      	mov	r3, r2
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	4413      	add	r3, r2
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	429a      	cmp	r2, r3
 8009490:	d305      	bcc.n	800949e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	429a      	cmp	r2, r3
 800949c:	d903      	bls.n	80094a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80094a4:	e0e8      	b.n	8009678 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2200      	movs	r2, #0
 80094aa:	461c      	mov	r4, r3
 80094ac:	4615      	mov	r5, r2
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	022b      	lsls	r3, r5, #8
 80094b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80094bc:	0222      	lsls	r2, r4, #8
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	6849      	ldr	r1, [r1, #4]
 80094c2:	0849      	lsrs	r1, r1, #1
 80094c4:	2000      	movs	r0, #0
 80094c6:	4688      	mov	r8, r1
 80094c8:	4681      	mov	r9, r0
 80094ca:	eb12 0a08 	adds.w	sl, r2, r8
 80094ce:	eb43 0b09 	adc.w	fp, r3, r9
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	603b      	str	r3, [r7, #0]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e0:	4650      	mov	r0, sl
 80094e2:	4659      	mov	r1, fp
 80094e4:	f7f7 faca 	bl	8000a7c <__aeabi_uldivmod>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4613      	mov	r3, r2
 80094ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094f6:	d308      	bcc.n	800950a <UART_SetConfig+0x3de>
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094fe:	d204      	bcs.n	800950a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	60da      	str	r2, [r3, #12]
 8009508:	e0b6      	b.n	8009678 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009510:	e0b2      	b.n	8009678 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800951a:	d15e      	bne.n	80095da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800951c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009520:	2b08      	cmp	r3, #8
 8009522:	d828      	bhi.n	8009576 <UART_SetConfig+0x44a>
 8009524:	a201      	add	r2, pc, #4	@ (adr r2, 800952c <UART_SetConfig+0x400>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	08009551 	.word	0x08009551
 8009530:	08009559 	.word	0x08009559
 8009534:	08009561 	.word	0x08009561
 8009538:	08009577 	.word	0x08009577
 800953c:	08009567 	.word	0x08009567
 8009540:	08009577 	.word	0x08009577
 8009544:	08009577 	.word	0x08009577
 8009548:	08009577 	.word	0x08009577
 800954c:	0800956f 	.word	0x0800956f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009550:	f7fd fdb2 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 8009554:	61f8      	str	r0, [r7, #28]
        break;
 8009556:	e014      	b.n	8009582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009558:	f7fd fdc4 	bl	80070e4 <HAL_RCC_GetPCLK2Freq>
 800955c:	61f8      	str	r0, [r7, #28]
        break;
 800955e:	e010      	b.n	8009582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009560:	4b4d      	ldr	r3, [pc, #308]	@ (8009698 <UART_SetConfig+0x56c>)
 8009562:	61fb      	str	r3, [r7, #28]
        break;
 8009564:	e00d      	b.n	8009582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009566:	f7fd fd0f 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 800956a:	61f8      	str	r0, [r7, #28]
        break;
 800956c:	e009      	b.n	8009582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800956e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009572:	61fb      	str	r3, [r7, #28]
        break;
 8009574:	e005      	b.n	8009582 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d077      	beq.n	8009678 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	005a      	lsls	r2, r3, #1
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	441a      	add	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	fbb2 f3f3 	udiv	r3, r2, r3
 800959c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b0f      	cmp	r3, #15
 80095a2:	d916      	bls.n	80095d2 <UART_SetConfig+0x4a6>
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095aa:	d212      	bcs.n	80095d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f023 030f 	bic.w	r3, r3, #15
 80095b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	085b      	lsrs	r3, r3, #1
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	8afb      	ldrh	r3, [r7, #22]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	8afa      	ldrh	r2, [r7, #22]
 80095ce:	60da      	str	r2, [r3, #12]
 80095d0:	e052      	b.n	8009678 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80095d8:	e04e      	b.n	8009678 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d827      	bhi.n	8009632 <UART_SetConfig+0x506>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x4bc>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	08009615 	.word	0x08009615
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	08009633 	.word	0x08009633
 80095f8:	08009623 	.word	0x08009623
 80095fc:	08009633 	.word	0x08009633
 8009600:	08009633 	.word	0x08009633
 8009604:	08009633 	.word	0x08009633
 8009608:	0800962b 	.word	0x0800962b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800960c:	f7fd fd54 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 8009610:	61f8      	str	r0, [r7, #28]
        break;
 8009612:	e014      	b.n	800963e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009614:	f7fd fd66 	bl	80070e4 <HAL_RCC_GetPCLK2Freq>
 8009618:	61f8      	str	r0, [r7, #28]
        break;
 800961a:	e010      	b.n	800963e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800961c:	4b1e      	ldr	r3, [pc, #120]	@ (8009698 <UART_SetConfig+0x56c>)
 800961e:	61fb      	str	r3, [r7, #28]
        break;
 8009620:	e00d      	b.n	800963e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009622:	f7fd fcb1 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8009626:	61f8      	str	r0, [r7, #28]
        break;
 8009628:	e009      	b.n	800963e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962e:	61fb      	str	r3, [r7, #28]
        break;
 8009630:	e005      	b.n	800963e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800963c:	bf00      	nop
    }

    if (pclk != 0U)
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d019      	beq.n	8009678 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	085a      	lsrs	r2, r3, #1
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	441a      	add	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d909      	bls.n	8009672 <UART_SetConfig+0x546>
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009664:	d205      	bcs.n	8009672 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60da      	str	r2, [r3, #12]
 8009670:	e002      	b.n	8009678 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009684:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009688:	4618      	mov	r0, r3
 800968a:	3728      	adds	r7, #40	@ 0x28
 800968c:	46bd      	mov	sp, r7
 800968e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009692:	bf00      	nop
 8009694:	40008000 	.word	0x40008000
 8009698:	00f42400 	.word	0x00f42400

0800969c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	430a      	orrs	r2, r1
 80096e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	f003 0310 	and.w	r3, r3, #16
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01a      	beq.n	80097b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800979a:	d10a      	bne.n	80097b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	605a      	str	r2, [r3, #4]
  }
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b098      	sub	sp, #96	@ 0x60
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097f0:	f7fa f8e6 	bl	80039c0 <HAL_GetTick>
 80097f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0308 	and.w	r3, r3, #8
 8009800:	2b08      	cmp	r3, #8
 8009802:	d12e      	bne.n	8009862 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800980c:	2200      	movs	r2, #0
 800980e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f88c 	bl	8009930 <UART_WaitOnFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d021      	beq.n	8009862 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800982c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800982e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009832:	653b      	str	r3, [r7, #80]	@ 0x50
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800983c:	647b      	str	r3, [r7, #68]	@ 0x44
 800983e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800984a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e6      	bne.n	800981e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2220      	movs	r2, #32
 8009854:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e062      	b.n	8009928 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b04      	cmp	r3, #4
 800986e:	d149      	bne.n	8009904 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009878:	2200      	movs	r2, #0
 800987a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f856 	bl	8009930 <UART_WaitOnFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d03c      	beq.n	8009904 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	623b      	str	r3, [r7, #32]
   return(result);
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800989e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80098aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e6      	bne.n	800988a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0301 	bic.w	r3, r3, #1
 80098d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098dc:	61fa      	str	r2, [r7, #28]
 80098de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	69b9      	ldr	r1, [r7, #24]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e5      	bne.n	80098bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e011      	b.n	8009928 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2220      	movs	r2, #32
 800990e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3758      	adds	r7, #88	@ 0x58
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009940:	e04f      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009948:	d04b      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994a:	f7fa f839 	bl	80039c0 <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	429a      	cmp	r2, r3
 8009958:	d302      	bcc.n	8009960 <UART_WaitOnFlagUntilTimeout+0x30>
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e04e      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	d037      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b80      	cmp	r3, #128	@ 0x80
 8009976:	d034      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b40      	cmp	r3, #64	@ 0x40
 800997c:	d031      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b08      	cmp	r3, #8
 800998a:	d110      	bne.n	80099ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2208      	movs	r2, #8
 8009992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f8ff 	bl	8009b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2208      	movs	r2, #8
 800999e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e029      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099bc:	d111      	bne.n	80099e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f8e5 	bl	8009b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2220      	movs	r2, #32
 80099d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e00f      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69da      	ldr	r2, [r3, #28]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4013      	ands	r3, r2
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	bf0c      	ite	eq
 80099f2:	2301      	moveq	r3, #1
 80099f4:	2300      	movne	r3, #0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	461a      	mov	r2, r3
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d0a0      	beq.n	8009942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b096      	sub	sp, #88	@ 0x58
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	88fa      	ldrh	r2, [r7, #6]
 8009a24:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2222      	movs	r2, #34	@ 0x22
 8009a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d028      	beq.n	8009a92 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a44:	4a3e      	ldr	r2, [pc, #248]	@ (8009b40 <UART_Start_Receive_DMA+0x134>)
 8009a46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a4c:	4a3d      	ldr	r2, [pc, #244]	@ (8009b44 <UART_Start_Receive_DMA+0x138>)
 8009a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a54:	4a3c      	ldr	r2, [pc, #240]	@ (8009b48 <UART_Start_Receive_DMA+0x13c>)
 8009a56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3324      	adds	r3, #36	@ 0x24
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a70:	461a      	mov	r2, r3
 8009a72:	88fb      	ldrh	r3, [r7, #6]
 8009a74:	f7fb fb80 	bl	8005178 <HAL_DMA_Start_IT>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2210      	movs	r2, #16
 8009a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e051      	b.n	8009b36 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d018      	beq.n	8009acc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ac0:	e841 2300 	strex	r3, r2, [r1]
 8009ac4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e6      	bne.n	8009a9a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ade:	f043 0301 	orr.w	r3, r3, #1
 8009ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009aec:	637a      	str	r2, [r7, #52]	@ 0x34
 8009aee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009af4:	e841 2300 	strex	r3, r2, [r1]
 8009af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e5      	bne.n	8009acc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b20:	623a      	str	r2, [r7, #32]
 8009b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	69f9      	ldr	r1, [r7, #28]
 8009b26:	6a3a      	ldr	r2, [r7, #32]
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e5      	bne.n	8009b00 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3758      	adds	r7, #88	@ 0x58
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	08009c61 	.word	0x08009c61
 8009b44:	08009d8d 	.word	0x08009d8d
 8009b48:	08009dcb 	.word	0x08009dcb

08009b4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b089      	sub	sp, #36	@ 0x24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b76:	6979      	ldr	r1, [r7, #20]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	e841 2300 	strex	r3, r2, [r1]
 8009b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1e6      	bne.n	8009b54 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009b8c:	bf00      	nop
 8009b8e:	3724      	adds	r7, #36	@ 0x24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b095      	sub	sp, #84	@ 0x54
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e6      	bne.n	8009ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3308      	adds	r3, #8
 8009bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e5      	bne.n	8009bd2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d118      	bne.n	8009c40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f023 0310 	bic.w	r3, r3, #16
 8009c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	6979      	ldr	r1, [r7, #20]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e6      	bne.n	8009c0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c54:	bf00      	nop
 8009c56:	3754      	adds	r7, #84	@ 0x54
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b09c      	sub	sp, #112	@ 0x70
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d171      	bne.n	8009d60 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ca4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e6      	bne.n	8009c84 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc8:	f023 0301 	bic.w	r3, r3, #1
 8009ccc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009cd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3308      	adds	r3, #8
 8009d08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e5      	bne.n	8009cea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d118      	bne.n	8009d60 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0310 	bic.w	r3, r3, #16
 8009d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d4c:	61fb      	str	r3, [r7, #28]
 8009d4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	69b9      	ldr	r1, [r7, #24]
 8009d52:	69fa      	ldr	r2, [r7, #28]
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	617b      	str	r3, [r7, #20]
   return(result);
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d62:	2200      	movs	r2, #0
 8009d64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d107      	bne.n	8009d7e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d74:	4619      	mov	r1, r3
 8009d76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d78:	f7ff f9cc 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d7c:	e002      	b.n	8009d84 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009d7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d80:	f7ff f9b4 	bl	80090ec <HAL_UART_RxCpltCallback>
}
 8009d84:	bf00      	nop
 8009d86:	3770      	adds	r7, #112	@ 0x70
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d109      	bne.n	8009dbc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	4619      	mov	r1, r3
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f7ff f9ad 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dba:	e002      	b.n	8009dc2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f7ff f99f 	bl	8009100 <HAL_UART_RxHalfCpltCallback>
}
 8009dc2:	bf00      	nop
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b086      	sub	sp, #24
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ddc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df0:	2b80      	cmp	r3, #128	@ 0x80
 8009df2:	d109      	bne.n	8009e08 <UART_DMAError+0x3e>
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	2b21      	cmp	r3, #33	@ 0x21
 8009df8:	d106      	bne.n	8009e08 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009e02:	6978      	ldr	r0, [r7, #20]
 8009e04:	f7ff fea2 	bl	8009b4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e12:	2b40      	cmp	r3, #64	@ 0x40
 8009e14:	d109      	bne.n	8009e2a <UART_DMAError+0x60>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b22      	cmp	r3, #34	@ 0x22
 8009e1a:	d106      	bne.n	8009e2a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009e24:	6978      	ldr	r0, [r7, #20]
 8009e26:	f7ff feb7 	bl	8009b98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e30:	f043 0210 	orr.w	r2, r3, #16
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f7f7 fe54 	bl	8001ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e40:	bf00      	nop
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7f7 fe3e 	bl	8001ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6979      	ldr	r1, [r7, #20]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e6      	bne.n	8009e7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7f7 fde8 	bl	8001a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ec0:	bf00      	nop
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e056      	b.n	8009f8e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d106      	bne.n	8009ef6 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7f9 f9e1 	bl	80032b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2224      	movs	r2, #36	@ 0x24
 8009efa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0201 	bic.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff fbc1 	bl	800969c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff f906 	bl	800912c <UART_SetConfig>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e031      	b.n	8009f8e <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f38:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	055b      	lsls	r3, r3, #21
 8009f52:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009f68:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	6812      	ldr	r2, [r2, #0]
 8009f70:	6979      	ldr	r1, [r7, #20]
 8009f72:	430b      	orrs	r3, r1
 8009f74:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f042 0201 	orr.w	r2, r2, #1
 8009f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f7ff fc2a 	bl	80097e0 <UART_CheckIdleState>
 8009f8c:	4603      	mov	r3, r0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
	...

08009fac <__NVIC_SetPriority>:
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	6039      	str	r1, [r7, #0]
 8009fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	db0a      	blt.n	8009fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	490c      	ldr	r1, [pc, #48]	@ (8009ff8 <__NVIC_SetPriority+0x4c>)
 8009fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fca:	0112      	lsls	r2, r2, #4
 8009fcc:	b2d2      	uxtb	r2, r2
 8009fce:	440b      	add	r3, r1
 8009fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009fd4:	e00a      	b.n	8009fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4908      	ldr	r1, [pc, #32]	@ (8009ffc <__NVIC_SetPriority+0x50>)
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	3b04      	subs	r3, #4
 8009fe4:	0112      	lsls	r2, r2, #4
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	440b      	add	r3, r1
 8009fea:	761a      	strb	r2, [r3, #24]
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	e000e100 	.word	0xe000e100
 8009ffc:	e000ed00 	.word	0xe000ed00

0800a000 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a004:	4b05      	ldr	r3, [pc, #20]	@ (800a01c <SysTick_Handler+0x1c>)
 800a006:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a008:	f001 fd18 	bl	800ba3c <xTaskGetSchedulerState>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d001      	beq.n	800a016 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a012:	f002 fb11 	bl	800c638 <xPortSysTickHandler>
  }
}
 800a016:	bf00      	nop
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	e000e010 	.word	0xe000e010

0800a020 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a024:	2100      	movs	r1, #0
 800a026:	f06f 0004 	mvn.w	r0, #4
 800a02a:	f7ff ffbf 	bl	8009fac <__NVIC_SetPriority>
#endif
}
 800a02e:	bf00      	nop
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a03a:	f3ef 8305 	mrs	r3, IPSR
 800a03e:	603b      	str	r3, [r7, #0]
  return(result);
 800a040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a046:	f06f 0305 	mvn.w	r3, #5
 800a04a:	607b      	str	r3, [r7, #4]
 800a04c:	e00c      	b.n	800a068 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a04e:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <osKernelInitialize+0x44>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a056:	4b08      	ldr	r3, [pc, #32]	@ (800a078 <osKernelInitialize+0x44>)
 800a058:	2201      	movs	r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	607b      	str	r3, [r7, #4]
 800a060:	e002      	b.n	800a068 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a062:	f04f 33ff 	mov.w	r3, #4294967295
 800a066:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a068:	687b      	ldr	r3, [r7, #4]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000b34 	.word	0x20000b34

0800a07c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a082:	f3ef 8305 	mrs	r3, IPSR
 800a086:	603b      	str	r3, [r7, #0]
  return(result);
 800a088:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a08e:	f06f 0305 	mvn.w	r3, #5
 800a092:	607b      	str	r3, [r7, #4]
 800a094:	e010      	b.n	800a0b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a096:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <osKernelStart+0x48>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d109      	bne.n	800a0b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a09e:	f7ff ffbf 	bl	800a020 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0a2:	4b08      	ldr	r3, [pc, #32]	@ (800a0c4 <osKernelStart+0x48>)
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0a8:	f001 f87a 	bl	800b1a0 <vTaskStartScheduler>
      stat = osOK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	607b      	str	r3, [r7, #4]
 800a0b0:	e002      	b.n	800a0b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0b8:	687b      	ldr	r3, [r7, #4]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000b34 	.word	0x20000b34

0800a0c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08e      	sub	sp, #56	@ 0x38
 800a0cc:	af04      	add	r7, sp, #16
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0d8:	f3ef 8305 	mrs	r3, IPSR
 800a0dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a0de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d17e      	bne.n	800a1e2 <osThreadNew+0x11a>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d07b      	beq.n	800a1e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a0ea:	2380      	movs	r3, #128	@ 0x80
 800a0ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0ee:	2318      	movs	r3, #24
 800a0f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d045      	beq.n	800a18e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <osThreadNew+0x48>
        name = attr->name;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d008      	beq.n	800a136 <osThreadNew+0x6e>
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	2b38      	cmp	r3, #56	@ 0x38
 800a128:	d805      	bhi.n	800a136 <osThreadNew+0x6e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f003 0301 	and.w	r3, r3, #1
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <osThreadNew+0x72>
        return (NULL);
 800a136:	2300      	movs	r3, #0
 800a138:	e054      	b.n	800a1e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	089b      	lsrs	r3, r3, #2
 800a148:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00e      	beq.n	800a170 <osThreadNew+0xa8>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b5b      	cmp	r3, #91	@ 0x5b
 800a158:	d90a      	bls.n	800a170 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d006      	beq.n	800a170 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <osThreadNew+0xa8>
        mem = 1;
 800a16a:	2301      	movs	r3, #1
 800a16c:	61bb      	str	r3, [r7, #24]
 800a16e:	e010      	b.n	800a192 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10c      	bne.n	800a192 <osThreadNew+0xca>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d108      	bne.n	800a192 <osThreadNew+0xca>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d104      	bne.n	800a192 <osThreadNew+0xca>
          mem = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	61bb      	str	r3, [r7, #24]
 800a18c:	e001      	b.n	800a192 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d110      	bne.n	800a1ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1a0:	9202      	str	r2, [sp, #8]
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6a3a      	ldr	r2, [r7, #32]
 800a1ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 fe1a 	bl	800ade8 <xTaskCreateStatic>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	e013      	b.n	800a1e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d110      	bne.n	800a1e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	f107 0310 	add.w	r3, r7, #16
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fe68 	bl	800aea8 <xTaskCreate>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d001      	beq.n	800a1e2 <osThreadNew+0x11a>
            hTask = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1e2:	693b      	ldr	r3, [r7, #16]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3728      	adds	r7, #40	@ 0x28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f4:	f3ef 8305 	mrs	r3, IPSR
 800a1f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <osDelay+0x1c>
    stat = osErrorISR;
 800a200:	f06f 0305 	mvn.w	r3, #5
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e007      	b.n	800a218 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 ff8e 	bl	800b134 <vTaskDelay>
    }
  }

  return (stat);
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a07      	ldr	r2, [pc, #28]	@ (800a250 <vApplicationGetIdleTaskMemory+0x2c>)
 800a234:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4a06      	ldr	r2, [pc, #24]	@ (800a254 <vApplicationGetIdleTaskMemory+0x30>)
 800a23a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2280      	movs	r2, #128	@ 0x80
 800a240:	601a      	str	r2, [r3, #0]
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20000b38 	.word	0x20000b38
 800a254:	20000b94 	.word	0x20000b94

0800a258 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4a07      	ldr	r2, [pc, #28]	@ (800a284 <vApplicationGetTimerTaskMemory+0x2c>)
 800a268:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	4a06      	ldr	r2, [pc, #24]	@ (800a288 <vApplicationGetTimerTaskMemory+0x30>)
 800a26e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a276:	601a      	str	r2, [r3, #0]
}
 800a278:	bf00      	nop
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	20000d94 	.word	0x20000d94
 800a288:	20000df0 	.word	0x20000df0

0800a28c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f103 0208 	add.w	r2, r3, #8
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f103 0208 	add.w	r2, r3, #8
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f103 0208 	add.w	r2, r3, #8
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b085      	sub	sp, #20
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	601a      	str	r2, [r3, #0]
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	d103      	bne.n	800a34e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	e00c      	b.n	800a368 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3308      	adds	r3, #8
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	e002      	b.n	800a35c <vListInsert+0x2e>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	429a      	cmp	r2, r3
 800a366:	d2f6      	bcs.n	800a356 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	1c5a      	adds	r2, r3, #1
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	6892      	ldr	r2, [r2, #8]
 800a3b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6852      	ldr	r2, [r2, #4]
 800a3c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d103      	bne.n	800a3d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	1e5a      	subs	r2, r3, #1
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10b      	bne.n	800a420 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
 800a41e:	e7fd      	b.n	800a41c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a420:	f002 f87a 	bl	800c518 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42c:	68f9      	ldr	r1, [r7, #12]
 800a42e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a430:	fb01 f303 	mul.w	r3, r1, r3
 800a434:	441a      	add	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a450:	3b01      	subs	r3, #1
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	441a      	add	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	22ff      	movs	r2, #255	@ 0xff
 800a464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	22ff      	movs	r2, #255	@ 0xff
 800a46c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d114      	bne.n	800a4a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01a      	beq.n	800a4b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3310      	adds	r3, #16
 800a482:	4618      	mov	r0, r3
 800a484:	f001 f91a 	bl	800b6bc <xTaskRemoveFromEventList>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d012      	beq.n	800a4b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a48e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c4 <xQueueGenericReset+0xd0>)
 800a490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	e009      	b.n	800a4b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3310      	adds	r3, #16
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fef1 	bl	800a28c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3324      	adds	r3, #36	@ 0x24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff feec 	bl	800a28c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4b4:	f002 f862 	bl	800c57c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4b8:	2301      	movs	r3, #1
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	e000ed04 	.word	0xe000ed04

0800a4c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	@ 0x38
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10b      	bne.n	800a4f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4ee:	bf00      	nop
 800a4f0:	bf00      	nop
 800a4f2:	e7fd      	b.n	800a4f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	e7fd      	b.n	800a50e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <xQueueGenericCreateStatic+0x56>
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <xQueueGenericCreateStatic+0x5a>
 800a51e:	2301      	movs	r3, #1
 800a520:	e000      	b.n	800a524 <xQueueGenericCreateStatic+0x5c>
 800a522:	2300      	movs	r3, #0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10b      	bne.n	800a540 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	623b      	str	r3, [r7, #32]
}
 800a53a:	bf00      	nop
 800a53c:	bf00      	nop
 800a53e:	e7fd      	b.n	800a53c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d102      	bne.n	800a54c <xQueueGenericCreateStatic+0x84>
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <xQueueGenericCreateStatic+0x88>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e000      	b.n	800a552 <xQueueGenericCreateStatic+0x8a>
 800a550:	2300      	movs	r3, #0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10b      	bne.n	800a56e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	61fb      	str	r3, [r7, #28]
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	e7fd      	b.n	800a56a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a56e:	2350      	movs	r3, #80	@ 0x50
 800a570:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b50      	cmp	r3, #80	@ 0x50
 800a576:	d00b      	beq.n	800a590 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	61bb      	str	r3, [r7, #24]
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	e7fd      	b.n	800a58c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a590:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00d      	beq.n	800a5b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 f805 	bl	800a5c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3730      	adds	r7, #48	@ 0x30
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	60b9      	str	r1, [r7, #8]
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	e002      	b.n	800a5e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	69b8      	ldr	r0, [r7, #24]
 800a5f4:	f7ff fefe 	bl	800a3f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	78fa      	ldrb	r2, [r7, #3]
 800a5fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08e      	sub	sp, #56	@ 0x38
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a616:	2300      	movs	r3, #0
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10b      	bne.n	800a63c <xQueueGenericSend+0x34>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	e7fd      	b.n	800a638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <xQueueGenericSend+0x42>
 800a642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueGenericSend+0x46>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueGenericSend+0x48>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10b      	bne.n	800a66c <xQueueGenericSend+0x64>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	e7fd      	b.n	800a668 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d103      	bne.n	800a67a <xQueueGenericSend+0x72>
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <xQueueGenericSend+0x76>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueGenericSend+0x78>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <xQueueGenericSend+0x94>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	623b      	str	r3, [r7, #32]
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a69c:	f001 f9ce 	bl	800ba3c <xTaskGetSchedulerState>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <xQueueGenericSend+0xa4>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <xQueueGenericSend+0xa8>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <xQueueGenericSend+0xaa>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10b      	bne.n	800a6ce <xQueueGenericSend+0xc6>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	61fb      	str	r3, [r7, #28]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ce:	f001 ff23 	bl	800c518 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d302      	bcc.n	800a6e4 <xQueueGenericSend+0xdc>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d129      	bne.n	800a738 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6ea:	f000 fa0f 	bl	800ab0c <prvCopyDataToQueue>
 800a6ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d010      	beq.n	800a71a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	3324      	adds	r3, #36	@ 0x24
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 ffdd 	bl	800b6bc <xTaskRemoveFromEventList>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d013      	beq.n	800a730 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a708:	4b3f      	ldr	r3, [pc, #252]	@ (800a808 <xQueueGenericSend+0x200>)
 800a70a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	e00a      	b.n	800a730 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d007      	beq.n	800a730 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a720:	4b39      	ldr	r3, [pc, #228]	@ (800a808 <xQueueGenericSend+0x200>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a730:	f001 ff24 	bl	800c57c <vPortExitCritical>
				return pdPASS;
 800a734:	2301      	movs	r3, #1
 800a736:	e063      	b.n	800a800 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d103      	bne.n	800a746 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a73e:	f001 ff1d 	bl	800c57c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a742:	2300      	movs	r3, #0
 800a744:	e05c      	b.n	800a800 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d106      	bne.n	800a75a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	4618      	mov	r0, r3
 800a752:	f001 f817 	bl	800b784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a756:	2301      	movs	r3, #1
 800a758:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a75a:	f001 ff0f 	bl	800c57c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75e:	f000 fd87 	bl	800b270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a762:	f001 fed9 	bl	800c518 <vPortEnterCritical>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a76c:	b25b      	sxtb	r3, r3
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d103      	bne.n	800a77c <xQueueGenericSend+0x174>
 800a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a782:	b25b      	sxtb	r3, r3
 800a784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a788:	d103      	bne.n	800a792 <xQueueGenericSend+0x18a>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a792:	f001 fef3 	bl	800c57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a796:	1d3a      	adds	r2, r7, #4
 800a798:	f107 0314 	add.w	r3, r7, #20
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 f806 	bl	800b7b0 <xTaskCheckForTimeOut>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d124      	bne.n	800a7f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ac:	f000 faa6 	bl	800acfc <prvIsQueueFull>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d018      	beq.n	800a7e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	3310      	adds	r3, #16
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 ff2a 	bl	800b618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7c6:	f000 fa31 	bl	800ac2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7ca:	f000 fd5f 	bl	800b28c <xTaskResumeAll>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f47f af7c 	bne.w	800a6ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a808 <xQueueGenericSend+0x200>)
 800a7d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	e772      	b.n	800a6ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ea:	f000 fa1f 	bl	800ac2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ee:	f000 fd4d 	bl	800b28c <xTaskResumeAll>
 800a7f2:	e76c      	b.n	800a6ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7f6:	f000 fa19 	bl	800ac2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7fa:	f000 fd47 	bl	800b28c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a800:	4618      	mov	r0, r3
 800a802:	3738      	adds	r7, #56	@ 0x38
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	e000ed04 	.word	0xe000ed04

0800a80c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b090      	sub	sp, #64	@ 0x40
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <xQueueGenericSendFromISR+0x3e>
 800a842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <xQueueGenericSendFromISR+0x42>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <xQueueGenericSendFromISR+0x44>
 800a84e:	2300      	movs	r3, #0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d103      	bne.n	800a87a <xQueueGenericSendFromISR+0x6e>
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <xQueueGenericSendFromISR+0x72>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <xQueueGenericSendFromISR+0x74>
 800a87e:	2300      	movs	r3, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10b      	bne.n	800a89c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	623b      	str	r3, [r7, #32]
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a89c:	f001 ff1c 	bl	800c6d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8a0:	f3ef 8211 	mrs	r2, BASEPRI
 800a8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	61fa      	str	r2, [r7, #28]
 800a8b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d302      	bcc.n	800a8ce <xQueueGenericSendFromISR+0xc2>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d12f      	bne.n	800a92e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a8e4:	f000 f912 	bl	800ab0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d112      	bne.n	800a918 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d016      	beq.n	800a928 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fc:	3324      	adds	r3, #36	@ 0x24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 fedc 	bl	800b6bc <xTaskRemoveFromEventList>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00e      	beq.n	800a928 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00b      	beq.n	800a928 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	e007      	b.n	800a928 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a918:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a91c:	3301      	adds	r3, #1
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	b25a      	sxtb	r2, r3
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a928:	2301      	movs	r3, #1
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a92c:	e001      	b.n	800a932 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a934:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a93c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a940:	4618      	mov	r0, r3
 800a942:	3740      	adds	r7, #64	@ 0x40
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08c      	sub	sp, #48	@ 0x30
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a954:	2300      	movs	r3, #0
 800a956:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10b      	bne.n	800a97a <xQueueReceive+0x32>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	623b      	str	r3, [r7, #32]
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
 800a978:	e7fd      	b.n	800a976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <xQueueReceive+0x40>
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <xQueueReceive+0x44>
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <xQueueReceive+0x46>
 800a98c:	2300      	movs	r3, #0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10b      	bne.n	800a9aa <xQueueReceive+0x62>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	61fb      	str	r3, [r7, #28]
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9aa:	f001 f847 	bl	800ba3c <xTaskGetSchedulerState>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <xQueueReceive+0x72>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <xQueueReceive+0x76>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e000      	b.n	800a9c0 <xQueueReceive+0x78>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10b      	bne.n	800a9dc <xQueueReceive+0x94>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	61bb      	str	r3, [r7, #24]
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	e7fd      	b.n	800a9d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9dc:	f001 fd9c 	bl	800c518 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d01f      	beq.n	800aa2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9f0:	f000 f8f6 	bl	800abe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f6:	1e5a      	subs	r2, r3, #1
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00f      	beq.n	800aa24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	3310      	adds	r3, #16
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fe57 	bl	800b6bc <xTaskRemoveFromEventList>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa14:	4b3c      	ldr	r3, [pc, #240]	@ (800ab08 <xQueueReceive+0x1c0>)
 800aa16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa24:	f001 fdaa 	bl	800c57c <vPortExitCritical>
				return pdPASS;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e069      	b.n	800ab00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa32:	f001 fda3 	bl	800c57c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa36:	2300      	movs	r3, #0
 800aa38:	e062      	b.n	800ab00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa40:	f107 0310 	add.w	r3, r7, #16
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fe9d 	bl	800b784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa4e:	f001 fd95 	bl	800c57c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa52:	f000 fc0d 	bl	800b270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa56:	f001 fd5f 	bl	800c518 <vPortEnterCritical>
 800aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa60:	b25b      	sxtb	r3, r3
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d103      	bne.n	800aa70 <xQueueReceive+0x128>
 800aa68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa76:	b25b      	sxtb	r3, r3
 800aa78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7c:	d103      	bne.n	800aa86 <xQueueReceive+0x13e>
 800aa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa86:	f001 fd79 	bl	800c57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa8a:	1d3a      	adds	r2, r7, #4
 800aa8c:	f107 0310 	add.w	r3, r7, #16
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fe8c 	bl	800b7b0 <xTaskCheckForTimeOut>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d123      	bne.n	800aae6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaa0:	f000 f916 	bl	800acd0 <prvIsQueueEmpty>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d017      	beq.n	800aada <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaac:	3324      	adds	r3, #36	@ 0x24
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fdb0 	bl	800b618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaba:	f000 f8b7 	bl	800ac2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aabe:	f000 fbe5 	bl	800b28c <xTaskResumeAll>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d189      	bne.n	800a9dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aac8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab08 <xQueueReceive+0x1c0>)
 800aaca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	e780      	b.n	800a9dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aadc:	f000 f8a6 	bl	800ac2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aae0:	f000 fbd4 	bl	800b28c <xTaskResumeAll>
 800aae4:	e77a      	b.n	800a9dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aae8:	f000 f8a0 	bl	800ac2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaec:	f000 fbce 	bl	800b28c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaf2:	f000 f8ed 	bl	800acd0 <prvIsQueueEmpty>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f43f af6f 	beq.w	800a9dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aafe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3730      	adds	r7, #48	@ 0x30
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10d      	bne.n	800ab46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d14d      	bne.n	800abce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 ff9e 	bl	800ba78 <xTaskPriorityDisinherit>
 800ab3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	609a      	str	r2, [r3, #8]
 800ab44:	e043      	b.n	800abce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d119      	bne.n	800ab80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6858      	ldr	r0, [r3, #4]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab54:	461a      	mov	r2, r3
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	f002 f8c4 	bl	800cce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab64:	441a      	add	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d32b      	bcc.n	800abce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	605a      	str	r2, [r3, #4]
 800ab7e:	e026      	b.n	800abce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	68d8      	ldr	r0, [r3, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab88:	461a      	mov	r2, r3
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	f002 f8aa 	bl	800cce4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	68da      	ldr	r2, [r3, #12]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	425b      	negs	r3, r3
 800ab9a:	441a      	add	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	68da      	ldr	r2, [r3, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d207      	bcs.n	800abbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb4:	425b      	negs	r3, r3
 800abb6:	441a      	add	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d105      	bne.n	800abce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	3b01      	subs	r3, #1
 800abcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800abd6:	697b      	ldr	r3, [r7, #20]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d018      	beq.n	800ac24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfa:	441a      	add	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68da      	ldr	r2, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d303      	bcc.n	800ac14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68d9      	ldr	r1, [r3, #12]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6838      	ldr	r0, [r7, #0]
 800ac20:	f002 f860 	bl	800cce4 <memcpy>
	}
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac34:	f001 fc70 	bl	800c518 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac40:	e011      	b.n	800ac66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d012      	beq.n	800ac70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3324      	adds	r3, #36	@ 0x24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fd34 	bl	800b6bc <xTaskRemoveFromEventList>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac5a:	f000 fe0d 	bl	800b878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dce9      	bgt.n	800ac42 <prvUnlockQueue+0x16>
 800ac6e:	e000      	b.n	800ac72 <prvUnlockQueue+0x46>
					break;
 800ac70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	22ff      	movs	r2, #255	@ 0xff
 800ac76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac7a:	f001 fc7f 	bl	800c57c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac7e:	f001 fc4b 	bl	800c518 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac8a:	e011      	b.n	800acb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d012      	beq.n	800acba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3310      	adds	r3, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fd0f 	bl	800b6bc <xTaskRemoveFromEventList>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aca4:	f000 fde8 	bl	800b878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	3b01      	subs	r3, #1
 800acac:	b2db      	uxtb	r3, r3
 800acae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dce9      	bgt.n	800ac8c <prvUnlockQueue+0x60>
 800acb8:	e000      	b.n	800acbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	22ff      	movs	r2, #255	@ 0xff
 800acc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800acc4:	f001 fc5a 	bl	800c57c <vPortExitCritical>
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acd8:	f001 fc1e 	bl	800c518 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	e001      	b.n	800acee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acee:	f001 fc45 	bl	800c57c <vPortExitCritical>

	return xReturn;
 800acf2:	68fb      	ldr	r3, [r7, #12]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad04:	f001 fc08 	bl	800c518 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d102      	bne.n	800ad1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	e001      	b.n	800ad1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad1e:	f001 fc2d 	bl	800c57c <vPortExitCritical>

	return xReturn;
 800ad22:	68fb      	ldr	r3, [r7, #12]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
 800ad3a:	e014      	b.n	800ad66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad3c:	4a0f      	ldr	r2, [pc, #60]	@ (800ad7c <vQueueAddToRegistry+0x50>)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10b      	bne.n	800ad60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad48:	490c      	ldr	r1, [pc, #48]	@ (800ad7c <vQueueAddToRegistry+0x50>)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad52:	4a0a      	ldr	r2, [pc, #40]	@ (800ad7c <vQueueAddToRegistry+0x50>)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	4413      	add	r3, r2
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad5e:	e006      	b.n	800ad6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b07      	cmp	r3, #7
 800ad6a:	d9e7      	bls.n	800ad3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	200011f0 	.word	0x200011f0

0800ad80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad90:	f001 fbc2 	bl	800c518 <vPortEnterCritical>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad9a:	b25b      	sxtb	r3, r3
 800ad9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada0:	d103      	bne.n	800adaa <vQueueWaitForMessageRestricted+0x2a>
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adb0:	b25b      	sxtb	r3, r3
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb6:	d103      	bne.n	800adc0 <vQueueWaitForMessageRestricted+0x40>
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adc0:	f001 fbdc 	bl	800c57c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d106      	bne.n	800adda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	3324      	adds	r3, #36	@ 0x24
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fc45 	bl	800b664 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800adda:	6978      	ldr	r0, [r7, #20]
 800addc:	f7ff ff26 	bl	800ac2c <prvUnlockQueue>
	}
 800ade0:	bf00      	nop
 800ade2:	3718      	adds	r7, #24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08e      	sub	sp, #56	@ 0x38
 800adec:	af04      	add	r7, sp, #16
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10b      	bne.n	800ae14 <xTaskCreateStatic+0x2c>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	623b      	str	r3, [r7, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	e7fd      	b.n	800ae10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10b      	bne.n	800ae32 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	61fb      	str	r3, [r7, #28]
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	e7fd      	b.n	800ae2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae32:	235c      	movs	r3, #92	@ 0x5c
 800ae34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae3a:	d00b      	beq.n	800ae54 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	61bb      	str	r3, [r7, #24]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01e      	beq.n	800ae9a <xTaskCreateStatic+0xb2>
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d01b      	beq.n	800ae9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae74:	2300      	movs	r3, #0
 800ae76:	9303      	str	r3, [sp, #12]
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	f107 0314 	add.w	r3, r7, #20
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 f850 	bl	800af32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae94:	f000 f8de 	bl	800b054 <prvAddNewTaskToReadyList>
 800ae98:	e001      	b.n	800ae9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae9e:	697b      	ldr	r3, [r7, #20]
	}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3728      	adds	r7, #40	@ 0x28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08c      	sub	sp, #48	@ 0x30
 800aeac:	af04      	add	r7, sp, #16
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fc4d 	bl	800c75c <pvPortMalloc>
 800aec2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00e      	beq.n	800aee8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aeca:	205c      	movs	r0, #92	@ 0x5c
 800aecc:	f001 fc46 	bl	800c75c <pvPortMalloc>
 800aed0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	631a      	str	r2, [r3, #48]	@ 0x30
 800aede:	e005      	b.n	800aeec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aee0:	6978      	ldr	r0, [r7, #20]
 800aee2:	f001 fd09 	bl	800c8f8 <vPortFree>
 800aee6:	e001      	b.n	800aeec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aee8:	2300      	movs	r3, #0
 800aeea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d017      	beq.n	800af22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aefa:	88fa      	ldrh	r2, [r7, #6]
 800aefc:	2300      	movs	r3, #0
 800aefe:	9303      	str	r3, [sp, #12]
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	9302      	str	r3, [sp, #8]
 800af04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68b9      	ldr	r1, [r7, #8]
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f000 f80e 	bl	800af32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af16:	69f8      	ldr	r0, [r7, #28]
 800af18:	f000 f89c 	bl	800b054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af1c:	2301      	movs	r3, #1
 800af1e:	61bb      	str	r3, [r7, #24]
 800af20:	e002      	b.n	800af28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af22:	f04f 33ff 	mov.w	r3, #4294967295
 800af26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af28:	69bb      	ldr	r3, [r7, #24]
	}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3720      	adds	r7, #32
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b088      	sub	sp, #32
 800af36:	af00      	add	r7, sp, #0
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	607a      	str	r2, [r7, #4]
 800af3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	461a      	mov	r2, r3
 800af4a:	21a5      	movs	r1, #165	@ 0xa5
 800af4c:	f001 fe76 	bl	800cc3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af5a:	3b01      	subs	r3, #1
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	f023 0307 	bic.w	r3, r3, #7
 800af68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	f003 0307 	and.w	r3, r3, #7
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00b      	beq.n	800af8c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	617b      	str	r3, [r7, #20]
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d01f      	beq.n	800afd2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af92:	2300      	movs	r3, #0
 800af94:	61fb      	str	r3, [r7, #28]
 800af96:	e012      	b.n	800afbe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	4413      	add	r3, r2
 800af9e:	7819      	ldrb	r1, [r3, #0]
 800afa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	3334      	adds	r3, #52	@ 0x34
 800afa8:	460a      	mov	r2, r1
 800afaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	4413      	add	r3, r2
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d006      	beq.n	800afc6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	3301      	adds	r3, #1
 800afbc:	61fb      	str	r3, [r7, #28]
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	2b0f      	cmp	r3, #15
 800afc2:	d9e9      	bls.n	800af98 <prvInitialiseNewTask+0x66>
 800afc4:	e000      	b.n	800afc8 <prvInitialiseNewTask+0x96>
			{
				break;
 800afc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800afd0:	e003      	b.n	800afda <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afdc:	2b37      	cmp	r3, #55	@ 0x37
 800afde:	d901      	bls.n	800afe4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afe0:	2337      	movs	r3, #55	@ 0x37
 800afe2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afe8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff2:	2200      	movs	r2, #0
 800aff4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	3304      	adds	r3, #4
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff f966 	bl	800a2cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	3318      	adds	r3, #24
 800b004:	4618      	mov	r0, r3
 800b006:	f7ff f961 	bl	800a2cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b00e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b012:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	2200      	movs	r2, #0
 800b024:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	68f9      	ldr	r1, [r7, #12]
 800b032:	69b8      	ldr	r0, [r7, #24]
 800b034:	f001 f93e 	bl	800c2b4 <pxPortInitialiseStack>
 800b038:	4602      	mov	r2, r0
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b04a:	bf00      	nop
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b05c:	f001 fa5c 	bl	800c518 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b060:	4b2d      	ldr	r3, [pc, #180]	@ (800b118 <prvAddNewTaskToReadyList+0xc4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3301      	adds	r3, #1
 800b066:	4a2c      	ldr	r2, [pc, #176]	@ (800b118 <prvAddNewTaskToReadyList+0xc4>)
 800b068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b06a:	4b2c      	ldr	r3, [pc, #176]	@ (800b11c <prvAddNewTaskToReadyList+0xc8>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d109      	bne.n	800b086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b072:	4a2a      	ldr	r2, [pc, #168]	@ (800b11c <prvAddNewTaskToReadyList+0xc8>)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b078:	4b27      	ldr	r3, [pc, #156]	@ (800b118 <prvAddNewTaskToReadyList+0xc4>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d110      	bne.n	800b0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b080:	f000 fc1e 	bl	800b8c0 <prvInitialiseTaskLists>
 800b084:	e00d      	b.n	800b0a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b086:	4b26      	ldr	r3, [pc, #152]	@ (800b120 <prvAddNewTaskToReadyList+0xcc>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b08e:	4b23      	ldr	r3, [pc, #140]	@ (800b11c <prvAddNewTaskToReadyList+0xc8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b098:	429a      	cmp	r2, r3
 800b09a:	d802      	bhi.n	800b0a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b09c:	4a1f      	ldr	r2, [pc, #124]	@ (800b11c <prvAddNewTaskToReadyList+0xc8>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0a2:	4b20      	ldr	r3, [pc, #128]	@ (800b124 <prvAddNewTaskToReadyList+0xd0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	4a1e      	ldr	r2, [pc, #120]	@ (800b124 <prvAddNewTaskToReadyList+0xd0>)
 800b0aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b124 <prvAddNewTaskToReadyList+0xd0>)
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b8:	4b1b      	ldr	r3, [pc, #108]	@ (800b128 <prvAddNewTaskToReadyList+0xd4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d903      	bls.n	800b0c8 <prvAddNewTaskToReadyList+0x74>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c4:	4a18      	ldr	r2, [pc, #96]	@ (800b128 <prvAddNewTaskToReadyList+0xd4>)
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4a15      	ldr	r2, [pc, #84]	@ (800b12c <prvAddNewTaskToReadyList+0xd8>)
 800b0d6:	441a      	add	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f7ff f901 	bl	800a2e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0e4:	f001 fa4a 	bl	800c57c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <prvAddNewTaskToReadyList+0xcc>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00e      	beq.n	800b10e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b11c <prvAddNewTaskToReadyList+0xc8>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d207      	bcs.n	800b10e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b130 <prvAddNewTaskToReadyList+0xdc>)
 800b100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	20001704 	.word	0x20001704
 800b11c:	20001230 	.word	0x20001230
 800b120:	20001710 	.word	0x20001710
 800b124:	20001720 	.word	0x20001720
 800b128:	2000170c 	.word	0x2000170c
 800b12c:	20001234 	.word	0x20001234
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d018      	beq.n	800b178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b146:	4b14      	ldr	r3, [pc, #80]	@ (800b198 <vTaskDelay+0x64>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00b      	beq.n	800b166 <vTaskDelay+0x32>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60bb      	str	r3, [r7, #8]
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	e7fd      	b.n	800b162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b166:	f000 f883 	bl	800b270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b16a:	2100      	movs	r1, #0
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fcf3 	bl	800bb58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b172:	f000 f88b 	bl	800b28c <xTaskResumeAll>
 800b176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d107      	bne.n	800b18e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b17e:	4b07      	ldr	r3, [pc, #28]	@ (800b19c <vTaskDelay+0x68>)
 800b180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	2000172c 	.word	0x2000172c
 800b19c:	e000ed04 	.word	0xe000ed04

0800b1a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	@ 0x28
 800b1a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1ae:	463a      	mov	r2, r7
 800b1b0:	1d39      	adds	r1, r7, #4
 800b1b2:	f107 0308 	add.w	r3, r7, #8
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff f834 	bl	800a224 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	9202      	str	r2, [sp, #8]
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	460a      	mov	r2, r1
 800b1ce:	4922      	ldr	r1, [pc, #136]	@ (800b258 <vTaskStartScheduler+0xb8>)
 800b1d0:	4822      	ldr	r0, [pc, #136]	@ (800b25c <vTaskStartScheduler+0xbc>)
 800b1d2:	f7ff fe09 	bl	800ade8 <xTaskCreateStatic>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4a21      	ldr	r2, [pc, #132]	@ (800b260 <vTaskStartScheduler+0xc0>)
 800b1da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1dc:	4b20      	ldr	r3, [pc, #128]	@ (800b260 <vTaskStartScheduler+0xc0>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	e001      	b.n	800b1ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d102      	bne.n	800b1fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1f4:	f000 fd04 	bl	800bc00 <xTimerCreateTimerTask>
 800b1f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d116      	bne.n	800b22e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	613b      	str	r3, [r7, #16]
}
 800b212:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b214:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <vTaskStartScheduler+0xc4>)
 800b216:	f04f 32ff 	mov.w	r2, #4294967295
 800b21a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b21c:	4b12      	ldr	r3, [pc, #72]	@ (800b268 <vTaskStartScheduler+0xc8>)
 800b21e:	2201      	movs	r2, #1
 800b220:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b222:	4b12      	ldr	r3, [pc, #72]	@ (800b26c <vTaskStartScheduler+0xcc>)
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b228:	f001 f8d2 	bl	800c3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b22c:	e00f      	b.n	800b24e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b234:	d10b      	bne.n	800b24e <vTaskStartScheduler+0xae>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	e7fd      	b.n	800b24a <vTaskStartScheduler+0xaa>
}
 800b24e:	bf00      	nop
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	0800d828 	.word	0x0800d828
 800b25c:	0800b891 	.word	0x0800b891
 800b260:	20001728 	.word	0x20001728
 800b264:	20001724 	.word	0x20001724
 800b268:	20001710 	.word	0x20001710
 800b26c:	20001708 	.word	0x20001708

0800b270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b270:	b480      	push	{r7}
 800b272:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b274:	4b04      	ldr	r3, [pc, #16]	@ (800b288 <vTaskSuspendAll+0x18>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3301      	adds	r3, #1
 800b27a:	4a03      	ldr	r2, [pc, #12]	@ (800b288 <vTaskSuspendAll+0x18>)
 800b27c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b27e:	bf00      	nop
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	2000172c 	.word	0x2000172c

0800b28c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b296:	2300      	movs	r3, #0
 800b298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b29a:	4b42      	ldr	r3, [pc, #264]	@ (800b3a4 <xTaskResumeAll+0x118>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <xTaskResumeAll+0x2e>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	603b      	str	r3, [r7, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2ba:	f001 f92d 	bl	800c518 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2be:	4b39      	ldr	r3, [pc, #228]	@ (800b3a4 <xTaskResumeAll+0x118>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	4a37      	ldr	r2, [pc, #220]	@ (800b3a4 <xTaskResumeAll+0x118>)
 800b2c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2c8:	4b36      	ldr	r3, [pc, #216]	@ (800b3a4 <xTaskResumeAll+0x118>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d162      	bne.n	800b396 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2d0:	4b35      	ldr	r3, [pc, #212]	@ (800b3a8 <xTaskResumeAll+0x11c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d05e      	beq.n	800b396 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2d8:	e02f      	b.n	800b33a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2da:	4b34      	ldr	r3, [pc, #208]	@ (800b3ac <xTaskResumeAll+0x120>)
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3318      	adds	r3, #24
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff f85a 	bl	800a3a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff f855 	bl	800a3a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fa:	4b2d      	ldr	r3, [pc, #180]	@ (800b3b0 <xTaskResumeAll+0x124>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d903      	bls.n	800b30a <xTaskResumeAll+0x7e>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b306:	4a2a      	ldr	r2, [pc, #168]	@ (800b3b0 <xTaskResumeAll+0x124>)
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b30e:	4613      	mov	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4a27      	ldr	r2, [pc, #156]	@ (800b3b4 <xTaskResumeAll+0x128>)
 800b318:	441a      	add	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3304      	adds	r3, #4
 800b31e:	4619      	mov	r1, r3
 800b320:	4610      	mov	r0, r2
 800b322:	f7fe ffe0 	bl	800a2e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32a:	4b23      	ldr	r3, [pc, #140]	@ (800b3b8 <xTaskResumeAll+0x12c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b330:	429a      	cmp	r2, r3
 800b332:	d302      	bcc.n	800b33a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b334:	4b21      	ldr	r3, [pc, #132]	@ (800b3bc <xTaskResumeAll+0x130>)
 800b336:	2201      	movs	r2, #1
 800b338:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b33a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3ac <xTaskResumeAll+0x120>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1cb      	bne.n	800b2da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b348:	f000 fb58 	bl	800b9fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b34c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3c0 <xTaskResumeAll+0x134>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d010      	beq.n	800b37a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b358:	f000 f846 	bl	800b3e8 <xTaskIncrementTick>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b362:	4b16      	ldr	r3, [pc, #88]	@ (800b3bc <xTaskResumeAll+0x130>)
 800b364:	2201      	movs	r2, #1
 800b366:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1f1      	bne.n	800b358 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b374:	4b12      	ldr	r3, [pc, #72]	@ (800b3c0 <xTaskResumeAll+0x134>)
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b37a:	4b10      	ldr	r3, [pc, #64]	@ (800b3bc <xTaskResumeAll+0x130>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d009      	beq.n	800b396 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b382:	2301      	movs	r3, #1
 800b384:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b386:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c4 <xTaskResumeAll+0x138>)
 800b388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b396:	f001 f8f1 	bl	800c57c <vPortExitCritical>

	return xAlreadyYielded;
 800b39a:	68bb      	ldr	r3, [r7, #8]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	2000172c 	.word	0x2000172c
 800b3a8:	20001704 	.word	0x20001704
 800b3ac:	200016c4 	.word	0x200016c4
 800b3b0:	2000170c 	.word	0x2000170c
 800b3b4:	20001234 	.word	0x20001234
 800b3b8:	20001230 	.word	0x20001230
 800b3bc:	20001718 	.word	0x20001718
 800b3c0:	20001714 	.word	0x20001714
 800b3c4:	e000ed04 	.word	0xe000ed04

0800b3c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3ce:	4b05      	ldr	r3, [pc, #20]	@ (800b3e4 <xTaskGetTickCount+0x1c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3d4:	687b      	ldr	r3, [r7, #4]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	20001708 	.word	0x20001708

0800b3e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3f2:	4b4f      	ldr	r3, [pc, #316]	@ (800b530 <xTaskIncrementTick+0x148>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f040 8090 	bne.w	800b51c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3fc:	4b4d      	ldr	r3, [pc, #308]	@ (800b534 <xTaskIncrementTick+0x14c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b404:	4a4b      	ldr	r2, [pc, #300]	@ (800b534 <xTaskIncrementTick+0x14c>)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d121      	bne.n	800b454 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b410:	4b49      	ldr	r3, [pc, #292]	@ (800b538 <xTaskIncrementTick+0x150>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00b      	beq.n	800b432 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	603b      	str	r3, [r7, #0]
}
 800b42c:	bf00      	nop
 800b42e:	bf00      	nop
 800b430:	e7fd      	b.n	800b42e <xTaskIncrementTick+0x46>
 800b432:	4b41      	ldr	r3, [pc, #260]	@ (800b538 <xTaskIncrementTick+0x150>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	4b40      	ldr	r3, [pc, #256]	@ (800b53c <xTaskIncrementTick+0x154>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a3e      	ldr	r2, [pc, #248]	@ (800b538 <xTaskIncrementTick+0x150>)
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	4a3e      	ldr	r2, [pc, #248]	@ (800b53c <xTaskIncrementTick+0x154>)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	4b3e      	ldr	r3, [pc, #248]	@ (800b540 <xTaskIncrementTick+0x158>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3301      	adds	r3, #1
 800b44c:	4a3c      	ldr	r2, [pc, #240]	@ (800b540 <xTaskIncrementTick+0x158>)
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	f000 fad4 	bl	800b9fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b454:	4b3b      	ldr	r3, [pc, #236]	@ (800b544 <xTaskIncrementTick+0x15c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d349      	bcc.n	800b4f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b45e:	4b36      	ldr	r3, [pc, #216]	@ (800b538 <xTaskIncrementTick+0x150>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d104      	bne.n	800b472 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b468:	4b36      	ldr	r3, [pc, #216]	@ (800b544 <xTaskIncrementTick+0x15c>)
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295
 800b46e:	601a      	str	r2, [r3, #0]
					break;
 800b470:	e03f      	b.n	800b4f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b472:	4b31      	ldr	r3, [pc, #196]	@ (800b538 <xTaskIncrementTick+0x150>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	429a      	cmp	r2, r3
 800b488:	d203      	bcs.n	800b492 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b48a:	4a2e      	ldr	r2, [pc, #184]	@ (800b544 <xTaskIncrementTick+0x15c>)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b490:	e02f      	b.n	800b4f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	3304      	adds	r3, #4
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe ff82 	bl	800a3a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d004      	beq.n	800b4ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	3318      	adds	r3, #24
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fe ff79 	bl	800a3a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b2:	4b25      	ldr	r3, [pc, #148]	@ (800b548 <xTaskIncrementTick+0x160>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d903      	bls.n	800b4c2 <xTaskIncrementTick+0xda>
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4be:	4a22      	ldr	r2, [pc, #136]	@ (800b548 <xTaskIncrementTick+0x160>)
 800b4c0:	6013      	str	r3, [r2, #0]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4a1f      	ldr	r2, [pc, #124]	@ (800b54c <xTaskIncrementTick+0x164>)
 800b4d0:	441a      	add	r2, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	f7fe ff04 	bl	800a2e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b550 <xTaskIncrementTick+0x168>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d3b8      	bcc.n	800b45e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4f0:	e7b5      	b.n	800b45e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4f2:	4b17      	ldr	r3, [pc, #92]	@ (800b550 <xTaskIncrementTick+0x168>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f8:	4914      	ldr	r1, [pc, #80]	@ (800b54c <xTaskIncrementTick+0x164>)
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	440b      	add	r3, r1
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d901      	bls.n	800b50e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b50a:	2301      	movs	r3, #1
 800b50c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b50e:	4b11      	ldr	r3, [pc, #68]	@ (800b554 <xTaskIncrementTick+0x16c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d007      	beq.n	800b526 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b516:	2301      	movs	r3, #1
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	e004      	b.n	800b526 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b51c:	4b0e      	ldr	r3, [pc, #56]	@ (800b558 <xTaskIncrementTick+0x170>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3301      	adds	r3, #1
 800b522:	4a0d      	ldr	r2, [pc, #52]	@ (800b558 <xTaskIncrementTick+0x170>)
 800b524:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b526:	697b      	ldr	r3, [r7, #20]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	2000172c 	.word	0x2000172c
 800b534:	20001708 	.word	0x20001708
 800b538:	200016bc 	.word	0x200016bc
 800b53c:	200016c0 	.word	0x200016c0
 800b540:	2000171c 	.word	0x2000171c
 800b544:	20001724 	.word	0x20001724
 800b548:	2000170c 	.word	0x2000170c
 800b54c:	20001234 	.word	0x20001234
 800b550:	20001230 	.word	0x20001230
 800b554:	20001718 	.word	0x20001718
 800b558:	20001714 	.word	0x20001714

0800b55c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b562:	4b28      	ldr	r3, [pc, #160]	@ (800b604 <vTaskSwitchContext+0xa8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b56a:	4b27      	ldr	r3, [pc, #156]	@ (800b608 <vTaskSwitchContext+0xac>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b570:	e042      	b.n	800b5f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b572:	4b25      	ldr	r3, [pc, #148]	@ (800b608 <vTaskSwitchContext+0xac>)
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b578:	4b24      	ldr	r3, [pc, #144]	@ (800b60c <vTaskSwitchContext+0xb0>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	e011      	b.n	800b5a4 <vTaskSwitchContext+0x48>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10b      	bne.n	800b59e <vTaskSwitchContext+0x42>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	607b      	str	r3, [r7, #4]
}
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	e7fd      	b.n	800b59a <vTaskSwitchContext+0x3e>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	491a      	ldr	r1, [pc, #104]	@ (800b610 <vTaskSwitchContext+0xb4>)
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	440b      	add	r3, r1
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0e3      	beq.n	800b580 <vTaskSwitchContext+0x24>
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4a13      	ldr	r2, [pc, #76]	@ (800b610 <vTaskSwitchContext+0xb4>)
 800b5c4:	4413      	add	r3, r2
 800b5c6:	60bb      	str	r3, [r7, #8]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	605a      	str	r2, [r3, #4]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	3308      	adds	r3, #8
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d104      	bne.n	800b5e8 <vTaskSwitchContext+0x8c>
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	605a      	str	r2, [r3, #4]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	4a09      	ldr	r2, [pc, #36]	@ (800b614 <vTaskSwitchContext+0xb8>)
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	4a06      	ldr	r2, [pc, #24]	@ (800b60c <vTaskSwitchContext+0xb0>)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6013      	str	r3, [r2, #0]
}
 800b5f8:	bf00      	nop
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	2000172c 	.word	0x2000172c
 800b608:	20001718 	.word	0x20001718
 800b60c:	2000170c 	.word	0x2000170c
 800b610:	20001234 	.word	0x20001234
 800b614:	20001230 	.word	0x20001230

0800b618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10b      	bne.n	800b640 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	60fb      	str	r3, [r7, #12]
}
 800b63a:	bf00      	nop
 800b63c:	bf00      	nop
 800b63e:	e7fd      	b.n	800b63c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b640:	4b07      	ldr	r3, [pc, #28]	@ (800b660 <vTaskPlaceOnEventList+0x48>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3318      	adds	r3, #24
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7fe fe70 	bl	800a32e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b64e:	2101      	movs	r1, #1
 800b650:	6838      	ldr	r0, [r7, #0]
 800b652:	f000 fa81 	bl	800bb58 <prvAddCurrentTaskToDelayedList>
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	20001230 	.word	0x20001230

0800b664 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10b      	bne.n	800b68e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	617b      	str	r3, [r7, #20]
}
 800b688:	bf00      	nop
 800b68a:	bf00      	nop
 800b68c:	e7fd      	b.n	800b68a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b68e:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3318      	adds	r3, #24
 800b694:	4619      	mov	r1, r3
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7fe fe25 	bl	800a2e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	68b8      	ldr	r0, [r7, #8]
 800b6ac:	f000 fa54 	bl	800bb58 <prvAddCurrentTaskToDelayedList>
	}
 800b6b0:	bf00      	nop
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	20001230 	.word	0x20001230

0800b6bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10b      	bne.n	800b6ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop
 800b6e8:	e7fd      	b.n	800b6e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3318      	adds	r3, #24
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fe56 	bl	800a3a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b76c <xTaskRemoveFromEventList+0xb0>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d11d      	bne.n	800b738 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	3304      	adds	r3, #4
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fe4d 	bl	800a3a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b70a:	4b19      	ldr	r3, [pc, #100]	@ (800b770 <xTaskRemoveFromEventList+0xb4>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d903      	bls.n	800b71a <xTaskRemoveFromEventList+0x5e>
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b716:	4a16      	ldr	r2, [pc, #88]	@ (800b770 <xTaskRemoveFromEventList+0xb4>)
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4a13      	ldr	r2, [pc, #76]	@ (800b774 <xTaskRemoveFromEventList+0xb8>)
 800b728:	441a      	add	r2, r3
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4619      	mov	r1, r3
 800b730:	4610      	mov	r0, r2
 800b732:	f7fe fdd8 	bl	800a2e6 <vListInsertEnd>
 800b736:	e005      	b.n	800b744 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	3318      	adds	r3, #24
 800b73c:	4619      	mov	r1, r3
 800b73e:	480e      	ldr	r0, [pc, #56]	@ (800b778 <xTaskRemoveFromEventList+0xbc>)
 800b740:	f7fe fdd1 	bl	800a2e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b748:	4b0c      	ldr	r3, [pc, #48]	@ (800b77c <xTaskRemoveFromEventList+0xc0>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74e:	429a      	cmp	r2, r3
 800b750:	d905      	bls.n	800b75e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b752:	2301      	movs	r3, #1
 800b754:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b756:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <xTaskRemoveFromEventList+0xc4>)
 800b758:	2201      	movs	r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e001      	b.n	800b762 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b75e:	2300      	movs	r3, #0
 800b760:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b762:	697b      	ldr	r3, [r7, #20]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	2000172c 	.word	0x2000172c
 800b770:	2000170c 	.word	0x2000170c
 800b774:	20001234 	.word	0x20001234
 800b778:	200016c4 	.word	0x200016c4
 800b77c:	20001230 	.word	0x20001230
 800b780:	20001718 	.word	0x20001718

0800b784 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b78c:	4b06      	ldr	r3, [pc, #24]	@ (800b7a8 <vTaskInternalSetTimeOutState+0x24>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b794:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <vTaskInternalSetTimeOutState+0x28>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	605a      	str	r2, [r3, #4]
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	2000171c 	.word	0x2000171c
 800b7ac:	20001708 	.word	0x20001708

0800b7b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	613b      	str	r3, [r7, #16]
}
 800b7d2:	bf00      	nop
 800b7d4:	bf00      	nop
 800b7d6:	e7fd      	b.n	800b7d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60fb      	str	r3, [r7, #12]
}
 800b7f0:	bf00      	nop
 800b7f2:	bf00      	nop
 800b7f4:	e7fd      	b.n	800b7f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b7f6:	f000 fe8f 	bl	800c518 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b870 <xTaskCheckForTimeOut+0xc0>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	69ba      	ldr	r2, [r7, #24]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b812:	d102      	bne.n	800b81a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b814:	2300      	movs	r3, #0
 800b816:	61fb      	str	r3, [r7, #28]
 800b818:	e023      	b.n	800b862 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4b15      	ldr	r3, [pc, #84]	@ (800b874 <xTaskCheckForTimeOut+0xc4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d007      	beq.n	800b836 <xTaskCheckForTimeOut+0x86>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d302      	bcc.n	800b836 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b830:	2301      	movs	r3, #1
 800b832:	61fb      	str	r3, [r7, #28]
 800b834:	e015      	b.n	800b862 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d20b      	bcs.n	800b858 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff ff99 	bl	800b784 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b852:	2300      	movs	r3, #0
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	e004      	b.n	800b862 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b85e:	2301      	movs	r3, #1
 800b860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b862:	f000 fe8b 	bl	800c57c <vPortExitCritical>

	return xReturn;
 800b866:	69fb      	ldr	r3, [r7, #28]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20001708 	.word	0x20001708
 800b874:	2000171c 	.word	0x2000171c

0800b878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b878:	b480      	push	{r7}
 800b87a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b87c:	4b03      	ldr	r3, [pc, #12]	@ (800b88c <vTaskMissedYield+0x14>)
 800b87e:	2201      	movs	r2, #1
 800b880:	601a      	str	r2, [r3, #0]
}
 800b882:	bf00      	nop
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20001718 	.word	0x20001718

0800b890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b898:	f000 f852 	bl	800b940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b89c:	4b06      	ldr	r3, [pc, #24]	@ (800b8b8 <prvIdleTask+0x28>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d9f9      	bls.n	800b898 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8a4:	4b05      	ldr	r3, [pc, #20]	@ (800b8bc <prvIdleTask+0x2c>)
 800b8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8b4:	e7f0      	b.n	800b898 <prvIdleTask+0x8>
 800b8b6:	bf00      	nop
 800b8b8:	20001234 	.word	0x20001234
 800b8bc:	e000ed04 	.word	0xe000ed04

0800b8c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	607b      	str	r3, [r7, #4]
 800b8ca:	e00c      	b.n	800b8e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4a12      	ldr	r2, [pc, #72]	@ (800b920 <prvInitialiseTaskLists+0x60>)
 800b8d8:	4413      	add	r3, r2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fcd6 	bl	800a28c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	607b      	str	r3, [r7, #4]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b37      	cmp	r3, #55	@ 0x37
 800b8ea:	d9ef      	bls.n	800b8cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8ec:	480d      	ldr	r0, [pc, #52]	@ (800b924 <prvInitialiseTaskLists+0x64>)
 800b8ee:	f7fe fccd 	bl	800a28c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8f2:	480d      	ldr	r0, [pc, #52]	@ (800b928 <prvInitialiseTaskLists+0x68>)
 800b8f4:	f7fe fcca 	bl	800a28c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8f8:	480c      	ldr	r0, [pc, #48]	@ (800b92c <prvInitialiseTaskLists+0x6c>)
 800b8fa:	f7fe fcc7 	bl	800a28c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8fe:	480c      	ldr	r0, [pc, #48]	@ (800b930 <prvInitialiseTaskLists+0x70>)
 800b900:	f7fe fcc4 	bl	800a28c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b904:	480b      	ldr	r0, [pc, #44]	@ (800b934 <prvInitialiseTaskLists+0x74>)
 800b906:	f7fe fcc1 	bl	800a28c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b90a:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <prvInitialiseTaskLists+0x78>)
 800b90c:	4a05      	ldr	r2, [pc, #20]	@ (800b924 <prvInitialiseTaskLists+0x64>)
 800b90e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b910:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <prvInitialiseTaskLists+0x7c>)
 800b912:	4a05      	ldr	r2, [pc, #20]	@ (800b928 <prvInitialiseTaskLists+0x68>)
 800b914:	601a      	str	r2, [r3, #0]
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20001234 	.word	0x20001234
 800b924:	20001694 	.word	0x20001694
 800b928:	200016a8 	.word	0x200016a8
 800b92c:	200016c4 	.word	0x200016c4
 800b930:	200016d8 	.word	0x200016d8
 800b934:	200016f0 	.word	0x200016f0
 800b938:	200016bc 	.word	0x200016bc
 800b93c:	200016c0 	.word	0x200016c0

0800b940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b946:	e019      	b.n	800b97c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b948:	f000 fde6 	bl	800c518 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b94c:	4b10      	ldr	r3, [pc, #64]	@ (800b990 <prvCheckTasksWaitingTermination+0x50>)
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3304      	adds	r3, #4
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fd21 	bl	800a3a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b95e:	4b0d      	ldr	r3, [pc, #52]	@ (800b994 <prvCheckTasksWaitingTermination+0x54>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3b01      	subs	r3, #1
 800b964:	4a0b      	ldr	r2, [pc, #44]	@ (800b994 <prvCheckTasksWaitingTermination+0x54>)
 800b966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b968:	4b0b      	ldr	r3, [pc, #44]	@ (800b998 <prvCheckTasksWaitingTermination+0x58>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	4a0a      	ldr	r2, [pc, #40]	@ (800b998 <prvCheckTasksWaitingTermination+0x58>)
 800b970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b972:	f000 fe03 	bl	800c57c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f810 	bl	800b99c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <prvCheckTasksWaitingTermination+0x58>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e1      	bne.n	800b948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200016d8 	.word	0x200016d8
 800b994:	20001704 	.word	0x20001704
 800b998:	200016ec 	.word	0x200016ec

0800b99c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d108      	bne.n	800b9c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 ffa0 	bl	800c8f8 <vPortFree>
				vPortFree( pxTCB );
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 ff9d 	bl	800c8f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9be:	e019      	b.n	800b9f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d103      	bne.n	800b9d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 ff94 	bl	800c8f8 <vPortFree>
	}
 800b9d0:	e010      	b.n	800b9f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d00b      	beq.n	800b9f4 <prvDeleteTCB+0x58>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	60fb      	str	r3, [r7, #12]
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	e7fd      	b.n	800b9f0 <prvDeleteTCB+0x54>
	}
 800b9f4:	bf00      	nop
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba02:	4b0c      	ldr	r3, [pc, #48]	@ (800ba34 <prvResetNextTaskUnblockTime+0x38>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba38 <prvResetNextTaskUnblockTime+0x3c>)
 800ba0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba14:	e008      	b.n	800ba28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba16:	4b07      	ldr	r3, [pc, #28]	@ (800ba34 <prvResetNextTaskUnblockTime+0x38>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	4a04      	ldr	r2, [pc, #16]	@ (800ba38 <prvResetNextTaskUnblockTime+0x3c>)
 800ba26:	6013      	str	r3, [r2, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	200016bc 	.word	0x200016bc
 800ba38:	20001724 	.word	0x20001724

0800ba3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba42:	4b0b      	ldr	r3, [pc, #44]	@ (800ba70 <xTaskGetSchedulerState+0x34>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	607b      	str	r3, [r7, #4]
 800ba4e:	e008      	b.n	800ba62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba50:	4b08      	ldr	r3, [pc, #32]	@ (800ba74 <xTaskGetSchedulerState+0x38>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	607b      	str	r3, [r7, #4]
 800ba5c:	e001      	b.n	800ba62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba62:	687b      	ldr	r3, [r7, #4]
	}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20001710 	.word	0x20001710
 800ba74:	2000172c 	.word	0x2000172c

0800ba78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d058      	beq.n	800bb40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba8e:	4b2f      	ldr	r3, [pc, #188]	@ (800bb4c <xTaskPriorityDisinherit+0xd4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d00b      	beq.n	800bab0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
}
 800baaa:	bf00      	nop
 800baac:	bf00      	nop
 800baae:	e7fd      	b.n	800baac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10b      	bne.n	800bad0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60bb      	str	r3, [r7, #8]
}
 800baca:	bf00      	nop
 800bacc:	bf00      	nop
 800bace:	e7fd      	b.n	800bacc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bad4:	1e5a      	subs	r2, r3, #1
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d02c      	beq.n	800bb40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baea:	2b00      	cmp	r3, #0
 800baec:	d128      	bne.n	800bb40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe fc54 	bl	800a3a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb10:	4b0f      	ldr	r3, [pc, #60]	@ (800bb50 <xTaskPriorityDisinherit+0xd8>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d903      	bls.n	800bb20 <xTaskPriorityDisinherit+0xa8>
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1c:	4a0c      	ldr	r2, [pc, #48]	@ (800bb50 <xTaskPriorityDisinherit+0xd8>)
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4a09      	ldr	r2, [pc, #36]	@ (800bb54 <xTaskPriorityDisinherit+0xdc>)
 800bb2e:	441a      	add	r2, r3
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	3304      	adds	r3, #4
 800bb34:	4619      	mov	r1, r3
 800bb36:	4610      	mov	r0, r2
 800bb38:	f7fe fbd5 	bl	800a2e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb40:	697b      	ldr	r3, [r7, #20]
	}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20001230 	.word	0x20001230
 800bb50:	2000170c 	.word	0x2000170c
 800bb54:	20001234 	.word	0x20001234

0800bb58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb62:	4b21      	ldr	r3, [pc, #132]	@ (800bbe8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb68:	4b20      	ldr	r3, [pc, #128]	@ (800bbec <prvAddCurrentTaskToDelayedList+0x94>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fe fc16 	bl	800a3a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7a:	d10a      	bne.n	800bb92 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d007      	beq.n	800bb92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb82:	4b1a      	ldr	r3, [pc, #104]	@ (800bbec <prvAddCurrentTaskToDelayedList+0x94>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4819      	ldr	r0, [pc, #100]	@ (800bbf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb8c:	f7fe fbab 	bl	800a2e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb90:	e026      	b.n	800bbe0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4413      	add	r3, r2
 800bb98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb9a:	4b14      	ldr	r3, [pc, #80]	@ (800bbec <prvAddCurrentTaskToDelayedList+0x94>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bba2:	68ba      	ldr	r2, [r7, #8]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d209      	bcs.n	800bbbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbaa:	4b12      	ldr	r3, [pc, #72]	@ (800bbf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	4b0f      	ldr	r3, [pc, #60]	@ (800bbec <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f7fe fbb9 	bl	800a32e <vListInsert>
}
 800bbbc:	e010      	b.n	800bbe0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbec <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7fe fbaf 	bl	800a32e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d202      	bcs.n	800bbe0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbda:	4a08      	ldr	r2, [pc, #32]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	6013      	str	r3, [r2, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20001708 	.word	0x20001708
 800bbec:	20001230 	.word	0x20001230
 800bbf0:	200016f0 	.word	0x200016f0
 800bbf4:	200016c0 	.word	0x200016c0
 800bbf8:	200016bc 	.word	0x200016bc
 800bbfc:	20001724 	.word	0x20001724

0800bc00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08a      	sub	sp, #40	@ 0x28
 800bc04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc0a:	f000 fb13 	bl	800c234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc0e:	4b1d      	ldr	r3, [pc, #116]	@ (800bc84 <xTimerCreateTimerTask+0x84>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d021      	beq.n	800bc5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc1e:	1d3a      	adds	r2, r7, #4
 800bc20:	f107 0108 	add.w	r1, r7, #8
 800bc24:	f107 030c 	add.w	r3, r7, #12
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe fb15 	bl	800a258 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	9202      	str	r2, [sp, #8]
 800bc36:	9301      	str	r3, [sp, #4]
 800bc38:	2302      	movs	r3, #2
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	460a      	mov	r2, r1
 800bc40:	4911      	ldr	r1, [pc, #68]	@ (800bc88 <xTimerCreateTimerTask+0x88>)
 800bc42:	4812      	ldr	r0, [pc, #72]	@ (800bc8c <xTimerCreateTimerTask+0x8c>)
 800bc44:	f7ff f8d0 	bl	800ade8 <xTaskCreateStatic>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	4a11      	ldr	r2, [pc, #68]	@ (800bc90 <xTimerCreateTimerTask+0x90>)
 800bc4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc4e:	4b10      	ldr	r3, [pc, #64]	@ (800bc90 <xTimerCreateTimerTask+0x90>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc56:	2301      	movs	r3, #1
 800bc58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10b      	bne.n	800bc78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	613b      	str	r3, [r7, #16]
}
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	e7fd      	b.n	800bc74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc78:	697b      	ldr	r3, [r7, #20]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20001760 	.word	0x20001760
 800bc88:	0800d830 	.word	0x0800d830
 800bc8c:	0800bdcd 	.word	0x0800bdcd
 800bc90:	20001764 	.word	0x20001764

0800bc94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	@ 0x28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bca2:	2300      	movs	r3, #0
 800bca4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10b      	bne.n	800bcc4 <xTimerGenericCommand+0x30>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	623b      	str	r3, [r7, #32]
}
 800bcbe:	bf00      	nop
 800bcc0:	bf00      	nop
 800bcc2:	e7fd      	b.n	800bcc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcc4:	4b19      	ldr	r3, [pc, #100]	@ (800bd2c <xTimerGenericCommand+0x98>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d02a      	beq.n	800bd22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b05      	cmp	r3, #5
 800bcdc:	dc18      	bgt.n	800bd10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bcde:	f7ff fead 	bl	800ba3c <xTaskGetSchedulerState>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d109      	bne.n	800bcfc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bce8:	4b10      	ldr	r3, [pc, #64]	@ (800bd2c <xTimerGenericCommand+0x98>)
 800bcea:	6818      	ldr	r0, [r3, #0]
 800bcec:	f107 0110 	add.w	r1, r7, #16
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcf4:	f7fe fc88 	bl	800a608 <xQueueGenericSend>
 800bcf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800bcfa:	e012      	b.n	800bd22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	@ (800bd2c <xTimerGenericCommand+0x98>)
 800bcfe:	6818      	ldr	r0, [r3, #0]
 800bd00:	f107 0110 	add.w	r1, r7, #16
 800bd04:	2300      	movs	r3, #0
 800bd06:	2200      	movs	r2, #0
 800bd08:	f7fe fc7e 	bl	800a608 <xQueueGenericSend>
 800bd0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd0e:	e008      	b.n	800bd22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd10:	4b06      	ldr	r3, [pc, #24]	@ (800bd2c <xTimerGenericCommand+0x98>)
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	f107 0110 	add.w	r1, r7, #16
 800bd18:	2300      	movs	r3, #0
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	f7fe fd76 	bl	800a80c <xQueueGenericSendFromISR>
 800bd20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3728      	adds	r7, #40	@ 0x28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20001760 	.word	0x20001760

0800bd30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3a:	4b23      	ldr	r3, [pc, #140]	@ (800bdc8 <prvProcessExpiredTimer+0x98>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe fb29 	bl	800a3a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d023      	beq.n	800bda4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	699a      	ldr	r2, [r3, #24]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	18d1      	adds	r1, r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	6978      	ldr	r0, [r7, #20]
 800bd6a:	f000 f8d5 	bl	800bf18 <prvInsertTimerInActiveList>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d020      	beq.n	800bdb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd74:	2300      	movs	r3, #0
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	6978      	ldr	r0, [r7, #20]
 800bd80:	f7ff ff88 	bl	800bc94 <xTimerGenericCommand>
 800bd84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d114      	bne.n	800bdb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	60fb      	str	r3, [r7, #12]
}
 800bd9e:	bf00      	nop
 800bda0:	bf00      	nop
 800bda2:	e7fd      	b.n	800bda0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdaa:	f023 0301 	bic.w	r3, r3, #1
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	6978      	ldr	r0, [r7, #20]
 800bdbc:	4798      	blx	r3
}
 800bdbe:	bf00      	nop
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20001758 	.word	0x20001758

0800bdcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdd4:	f107 0308 	add.w	r3, r7, #8
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f859 	bl	800be90 <prvGetNextExpireTime>
 800bdde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	4619      	mov	r1, r3
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 f805 	bl	800bdf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bdea:	f000 f8d7 	bl	800bf9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdee:	bf00      	nop
 800bdf0:	e7f0      	b.n	800bdd4 <prvTimerTask+0x8>
	...

0800bdf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bdfe:	f7ff fa37 	bl	800b270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be02:	f107 0308 	add.w	r3, r7, #8
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f866 	bl	800bed8 <prvSampleTimeNow>
 800be0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d130      	bne.n	800be76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10a      	bne.n	800be30 <prvProcessTimerOrBlockTask+0x3c>
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d806      	bhi.n	800be30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be22:	f7ff fa33 	bl	800b28c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be26:	68f9      	ldr	r1, [r7, #12]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff ff81 	bl	800bd30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be2e:	e024      	b.n	800be7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d008      	beq.n	800be48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be36:	4b13      	ldr	r3, [pc, #76]	@ (800be84 <prvProcessTimerOrBlockTask+0x90>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <prvProcessTimerOrBlockTask+0x50>
 800be40:	2301      	movs	r3, #1
 800be42:	e000      	b.n	800be46 <prvProcessTimerOrBlockTask+0x52>
 800be44:	2300      	movs	r3, #0
 800be46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be48:	4b0f      	ldr	r3, [pc, #60]	@ (800be88 <prvProcessTimerOrBlockTask+0x94>)
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	4619      	mov	r1, r3
 800be56:	f7fe ff93 	bl	800ad80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be5a:	f7ff fa17 	bl	800b28c <xTaskResumeAll>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be64:	4b09      	ldr	r3, [pc, #36]	@ (800be8c <prvProcessTimerOrBlockTask+0x98>)
 800be66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	f3bf 8f6f 	isb	sy
}
 800be74:	e001      	b.n	800be7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be76:	f7ff fa09 	bl	800b28c <xTaskResumeAll>
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	2000175c 	.word	0x2000175c
 800be88:	20001760 	.word	0x20001760
 800be8c:	e000ed04 	.word	0xe000ed04

0800be90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be98:	4b0e      	ldr	r3, [pc, #56]	@ (800bed4 <prvGetNextExpireTime+0x44>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <prvGetNextExpireTime+0x16>
 800bea2:	2201      	movs	r2, #1
 800bea4:	e000      	b.n	800bea8 <prvGetNextExpireTime+0x18>
 800bea6:	2200      	movs	r2, #0
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d105      	bne.n	800bec0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800beb4:	4b07      	ldr	r3, [pc, #28]	@ (800bed4 <prvGetNextExpireTime+0x44>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e001      	b.n	800bec4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bec4:	68fb      	ldr	r3, [r7, #12]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20001758 	.word	0x20001758

0800bed8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bee0:	f7ff fa72 	bl	800b3c8 <xTaskGetTickCount>
 800bee4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bee6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf14 <prvSampleTimeNow+0x3c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	429a      	cmp	r2, r3
 800beee:	d205      	bcs.n	800befc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bef0:	f000 f93a 	bl	800c168 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	e002      	b.n	800bf02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf02:	4a04      	ldr	r2, [pc, #16]	@ (800bf14 <prvSampleTimeNow+0x3c>)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf08:	68fb      	ldr	r3, [r7, #12]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20001768 	.word	0x20001768

0800bf18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d812      	bhi.n	800bf64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	1ad2      	subs	r2, r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d302      	bcc.n	800bf52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	e01b      	b.n	800bf8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf52:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <prvInsertTimerInActiveList+0x7c>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	f7fe f9e6 	bl	800a32e <vListInsert>
 800bf62:	e012      	b.n	800bf8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d206      	bcs.n	800bf7a <prvInsertTimerInActiveList+0x62>
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d302      	bcc.n	800bf7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf74:	2301      	movs	r3, #1
 800bf76:	617b      	str	r3, [r7, #20]
 800bf78:	e007      	b.n	800bf8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf7a:	4b07      	ldr	r3, [pc, #28]	@ (800bf98 <prvInsertTimerInActiveList+0x80>)
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3304      	adds	r3, #4
 800bf82:	4619      	mov	r1, r3
 800bf84:	4610      	mov	r0, r2
 800bf86:	f7fe f9d2 	bl	800a32e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf8a:	697b      	ldr	r3, [r7, #20]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	2000175c 	.word	0x2000175c
 800bf98:	20001758 	.word	0x20001758

0800bf9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b08e      	sub	sp, #56	@ 0x38
 800bfa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfa2:	e0ce      	b.n	800c142 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	da19      	bge.n	800bfde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfaa:	1d3b      	adds	r3, r7, #4
 800bfac:	3304      	adds	r3, #4
 800bfae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	61fb      	str	r3, [r7, #28]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfd4:	6850      	ldr	r0, [r2, #4]
 800bfd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfd8:	6892      	ldr	r2, [r2, #8]
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f2c0 80ae 	blt.w	800c142 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d004      	beq.n	800bffc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	3304      	adds	r3, #4
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe f9d2 	bl	800a3a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bffc:	463b      	mov	r3, r7
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff ff6a 	bl	800bed8 <prvSampleTimeNow>
 800c004:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b09      	cmp	r3, #9
 800c00a:	f200 8097 	bhi.w	800c13c <prvProcessReceivedCommands+0x1a0>
 800c00e:	a201      	add	r2, pc, #4	@ (adr r2, 800c014 <prvProcessReceivedCommands+0x78>)
 800c010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c014:	0800c03d 	.word	0x0800c03d
 800c018:	0800c03d 	.word	0x0800c03d
 800c01c:	0800c03d 	.word	0x0800c03d
 800c020:	0800c0b3 	.word	0x0800c0b3
 800c024:	0800c0c7 	.word	0x0800c0c7
 800c028:	0800c113 	.word	0x0800c113
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c03d 	.word	0x0800c03d
 800c034:	0800c0b3 	.word	0x0800c0b3
 800c038:	0800c0c7 	.word	0x0800c0c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c042:	f043 0301 	orr.w	r3, r3, #1
 800c046:	b2da      	uxtb	r2, r3
 800c048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	18d1      	adds	r1, r2, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c05a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c05c:	f7ff ff5c 	bl	800bf18 <prvInsertTimerInActiveList>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d06c      	beq.n	800c140 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c06c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d061      	beq.n	800c140 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	441a      	add	r2, r3
 800c084:	2300      	movs	r3, #0
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	2300      	movs	r3, #0
 800c08a:	2100      	movs	r1, #0
 800c08c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c08e:	f7ff fe01 	bl	800bc94 <xTimerGenericCommand>
 800c092:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d152      	bne.n	800c140 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	61bb      	str	r3, [r7, #24]
}
 800c0ac:	bf00      	nop
 800c0ae:	bf00      	nop
 800c0b0:	e7fd      	b.n	800c0ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0b8:	f023 0301 	bic.w	r3, r3, #1
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c0c4:	e03d      	b.n	800c142 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0cc:	f043 0301 	orr.w	r3, r3, #1
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e0:	699b      	ldr	r3, [r3, #24]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10b      	bne.n	800c0fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	617b      	str	r3, [r7, #20]
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	e7fd      	b.n	800c0fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c100:	699a      	ldr	r2, [r3, #24]
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c104:	18d1      	adds	r1, r2, r3
 800c106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c10a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c10c:	f7ff ff04 	bl	800bf18 <prvInsertTimerInActiveList>
					break;
 800c110:	e017      	b.n	800c142 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c118:	f003 0302 	and.w	r3, r3, #2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d103      	bne.n	800c128 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c120:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c122:	f000 fbe9 	bl	800c8f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c126:	e00c      	b.n	800c142 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c12e:	f023 0301 	bic.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c136:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c13a:	e002      	b.n	800c142 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c13c:	bf00      	nop
 800c13e:	e000      	b.n	800c142 <prvProcessReceivedCommands+0x1a6>
					break;
 800c140:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c142:	4b08      	ldr	r3, [pc, #32]	@ (800c164 <prvProcessReceivedCommands+0x1c8>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	1d39      	adds	r1, r7, #4
 800c148:	2200      	movs	r2, #0
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fbfc 	bl	800a948 <xQueueReceive>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	f47f af26 	bne.w	800bfa4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	3730      	adds	r7, #48	@ 0x30
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20001760 	.word	0x20001760

0800c168 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c16e:	e049      	b.n	800c204 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c170:	4b2e      	ldr	r3, [pc, #184]	@ (800c22c <prvSwitchTimerLists+0xc4>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c17a:	4b2c      	ldr	r3, [pc, #176]	@ (800c22c <prvSwitchTimerLists+0xc4>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3304      	adds	r3, #4
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe f909 	bl	800a3a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c19c:	f003 0304 	and.w	r3, r3, #4
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d02f      	beq.n	800c204 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d90e      	bls.n	800c1d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c22c <prvSwitchTimerLists+0xc4>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fe f8ae 	bl	800a32e <vListInsert>
 800c1d2:	e017      	b.n	800c204 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	2100      	movs	r1, #0
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f7ff fd58 	bl	800bc94 <xTimerGenericCommand>
 800c1e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10b      	bne.n	800c204 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	603b      	str	r3, [r7, #0]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c204:	4b09      	ldr	r3, [pc, #36]	@ (800c22c <prvSwitchTimerLists+0xc4>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1b0      	bne.n	800c170 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c20e:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <prvSwitchTimerLists+0xc4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c214:	4b06      	ldr	r3, [pc, #24]	@ (800c230 <prvSwitchTimerLists+0xc8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a04      	ldr	r2, [pc, #16]	@ (800c22c <prvSwitchTimerLists+0xc4>)
 800c21a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c21c:	4a04      	ldr	r2, [pc, #16]	@ (800c230 <prvSwitchTimerLists+0xc8>)
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	6013      	str	r3, [r2, #0]
}
 800c222:	bf00      	nop
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20001758 	.word	0x20001758
 800c230:	2000175c 	.word	0x2000175c

0800c234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c23a:	f000 f96d 	bl	800c518 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c23e:	4b15      	ldr	r3, [pc, #84]	@ (800c294 <prvCheckForValidListAndQueue+0x60>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d120      	bne.n	800c288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c246:	4814      	ldr	r0, [pc, #80]	@ (800c298 <prvCheckForValidListAndQueue+0x64>)
 800c248:	f7fe f820 	bl	800a28c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c24c:	4813      	ldr	r0, [pc, #76]	@ (800c29c <prvCheckForValidListAndQueue+0x68>)
 800c24e:	f7fe f81d 	bl	800a28c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c252:	4b13      	ldr	r3, [pc, #76]	@ (800c2a0 <prvCheckForValidListAndQueue+0x6c>)
 800c254:	4a10      	ldr	r2, [pc, #64]	@ (800c298 <prvCheckForValidListAndQueue+0x64>)
 800c256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c258:	4b12      	ldr	r3, [pc, #72]	@ (800c2a4 <prvCheckForValidListAndQueue+0x70>)
 800c25a:	4a10      	ldr	r2, [pc, #64]	@ (800c29c <prvCheckForValidListAndQueue+0x68>)
 800c25c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c25e:	2300      	movs	r3, #0
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	4b11      	ldr	r3, [pc, #68]	@ (800c2a8 <prvCheckForValidListAndQueue+0x74>)
 800c264:	4a11      	ldr	r2, [pc, #68]	@ (800c2ac <prvCheckForValidListAndQueue+0x78>)
 800c266:	2110      	movs	r1, #16
 800c268:	200a      	movs	r0, #10
 800c26a:	f7fe f92d 	bl	800a4c8 <xQueueGenericCreateStatic>
 800c26e:	4603      	mov	r3, r0
 800c270:	4a08      	ldr	r2, [pc, #32]	@ (800c294 <prvCheckForValidListAndQueue+0x60>)
 800c272:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c274:	4b07      	ldr	r3, [pc, #28]	@ (800c294 <prvCheckForValidListAndQueue+0x60>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c27c:	4b05      	ldr	r3, [pc, #20]	@ (800c294 <prvCheckForValidListAndQueue+0x60>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	490b      	ldr	r1, [pc, #44]	@ (800c2b0 <prvCheckForValidListAndQueue+0x7c>)
 800c282:	4618      	mov	r0, r3
 800c284:	f7fe fd52 	bl	800ad2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c288:	f000 f978 	bl	800c57c <vPortExitCritical>
}
 800c28c:	bf00      	nop
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20001760 	.word	0x20001760
 800c298:	20001730 	.word	0x20001730
 800c29c:	20001744 	.word	0x20001744
 800c2a0:	20001758 	.word	0x20001758
 800c2a4:	2000175c 	.word	0x2000175c
 800c2a8:	2000180c 	.word	0x2000180c
 800c2ac:	2000176c 	.word	0x2000176c
 800c2b0:	0800d838 	.word	0x0800d838

0800c2b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	3b04      	subs	r3, #4
 800c2c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c2cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3b04      	subs	r3, #4
 800c2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	f023 0201 	bic.w	r2, r3, #1
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3b04      	subs	r3, #4
 800c2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2e4:	4a0c      	ldr	r2, [pc, #48]	@ (800c318 <pxPortInitialiseStack+0x64>)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3b14      	subs	r3, #20
 800c2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3b04      	subs	r3, #4
 800c2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f06f 0202 	mvn.w	r2, #2
 800c302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3b20      	subs	r3, #32
 800c308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c30a:	68fb      	ldr	r3, [r7, #12]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	0800c31d 	.word	0x0800c31d

0800c31c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c326:	4b13      	ldr	r3, [pc, #76]	@ (800c374 <prvTaskExitError+0x58>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32e:	d00b      	beq.n	800c348 <prvTaskExitError+0x2c>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	60fb      	str	r3, [r7, #12]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <prvTaskExitError+0x28>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	60bb      	str	r3, [r7, #8]
}
 800c35a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c35c:	bf00      	nop
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0fc      	beq.n	800c35e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	200001c4 	.word	0x200001c4
	...

0800c380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c380:	4b07      	ldr	r3, [pc, #28]	@ (800c3a0 <pxCurrentTCBConst2>)
 800c382:	6819      	ldr	r1, [r3, #0]
 800c384:	6808      	ldr	r0, [r1, #0]
 800c386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f380 8809 	msr	PSP, r0
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f04f 0000 	mov.w	r0, #0
 800c396:	f380 8811 	msr	BASEPRI, r0
 800c39a:	4770      	bx	lr
 800c39c:	f3af 8000 	nop.w

0800c3a0 <pxCurrentTCBConst2>:
 800c3a0:	20001230 	.word	0x20001230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop

0800c3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3a8:	4808      	ldr	r0, [pc, #32]	@ (800c3cc <prvPortStartFirstTask+0x24>)
 800c3aa:	6800      	ldr	r0, [r0, #0]
 800c3ac:	6800      	ldr	r0, [r0, #0]
 800c3ae:	f380 8808 	msr	MSP, r0
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f380 8814 	msr	CONTROL, r0
 800c3ba:	b662      	cpsie	i
 800c3bc:	b661      	cpsie	f
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	df00      	svc	0
 800c3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3ca:	bf00      	nop
 800c3cc:	e000ed08 	.word	0xe000ed08

0800c3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3d6:	4b47      	ldr	r3, [pc, #284]	@ (800c4f4 <xPortStartScheduler+0x124>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a47      	ldr	r2, [pc, #284]	@ (800c4f8 <xPortStartScheduler+0x128>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d10b      	bne.n	800c3f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60fb      	str	r3, [r7, #12]
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4f4 <xPortStartScheduler+0x124>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c4fc <xPortStartScheduler+0x12c>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d10b      	bne.n	800c41a <xPortStartScheduler+0x4a>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	613b      	str	r3, [r7, #16]
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	e7fd      	b.n	800c416 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c41a:	4b39      	ldr	r3, [pc, #228]	@ (800c500 <xPortStartScheduler+0x130>)
 800c41c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	b2db      	uxtb	r3, r3
 800c424:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	22ff      	movs	r2, #255	@ 0xff
 800c42a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c434:	78fb      	ldrb	r3, [r7, #3]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	4b31      	ldr	r3, [pc, #196]	@ (800c504 <xPortStartScheduler+0x134>)
 800c440:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c442:	4b31      	ldr	r3, [pc, #196]	@ (800c508 <xPortStartScheduler+0x138>)
 800c444:	2207      	movs	r2, #7
 800c446:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c448:	e009      	b.n	800c45e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c44a:	4b2f      	ldr	r3, [pc, #188]	@ (800c508 <xPortStartScheduler+0x138>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3b01      	subs	r3, #1
 800c450:	4a2d      	ldr	r2, [pc, #180]	@ (800c508 <xPortStartScheduler+0x138>)
 800c452:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	b2db      	uxtb	r3, r3
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c466:	2b80      	cmp	r3, #128	@ 0x80
 800c468:	d0ef      	beq.n	800c44a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c46a:	4b27      	ldr	r3, [pc, #156]	@ (800c508 <xPortStartScheduler+0x138>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f1c3 0307 	rsb	r3, r3, #7
 800c472:	2b04      	cmp	r3, #4
 800c474:	d00b      	beq.n	800c48e <xPortStartScheduler+0xbe>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	60bb      	str	r3, [r7, #8]
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	e7fd      	b.n	800c48a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c48e:	4b1e      	ldr	r3, [pc, #120]	@ (800c508 <xPortStartScheduler+0x138>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	021b      	lsls	r3, r3, #8
 800c494:	4a1c      	ldr	r2, [pc, #112]	@ (800c508 <xPortStartScheduler+0x138>)
 800c496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c498:	4b1b      	ldr	r3, [pc, #108]	@ (800c508 <xPortStartScheduler+0x138>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4a0:	4a19      	ldr	r2, [pc, #100]	@ (800c508 <xPortStartScheduler+0x138>)
 800c4a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4ac:	4b17      	ldr	r3, [pc, #92]	@ (800c50c <xPortStartScheduler+0x13c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a16      	ldr	r2, [pc, #88]	@ (800c50c <xPortStartScheduler+0x13c>)
 800c4b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4b8:	4b14      	ldr	r3, [pc, #80]	@ (800c50c <xPortStartScheduler+0x13c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a13      	ldr	r2, [pc, #76]	@ (800c50c <xPortStartScheduler+0x13c>)
 800c4be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4c4:	f000 f8da 	bl	800c67c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4c8:	4b11      	ldr	r3, [pc, #68]	@ (800c510 <xPortStartScheduler+0x140>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4ce:	f000 f8f9 	bl	800c6c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4d2:	4b10      	ldr	r3, [pc, #64]	@ (800c514 <xPortStartScheduler+0x144>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c514 <xPortStartScheduler+0x144>)
 800c4d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c4dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4de:	f7ff ff63 	bl	800c3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4e2:	f7ff f83b 	bl	800b55c <vTaskSwitchContext>
	prvTaskExitError();
 800c4e6:	f7ff ff19 	bl	800c31c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	e000ed00 	.word	0xe000ed00
 800c4f8:	410fc271 	.word	0x410fc271
 800c4fc:	410fc270 	.word	0x410fc270
 800c500:	e000e400 	.word	0xe000e400
 800c504:	2000185c 	.word	0x2000185c
 800c508:	20001860 	.word	0x20001860
 800c50c:	e000ed20 	.word	0xe000ed20
 800c510:	200001c4 	.word	0x200001c4
 800c514:	e000ef34 	.word	0xe000ef34

0800c518 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	607b      	str	r3, [r7, #4]
}
 800c530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c532:	4b10      	ldr	r3, [pc, #64]	@ (800c574 <vPortEnterCritical+0x5c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3301      	adds	r3, #1
 800c538:	4a0e      	ldr	r2, [pc, #56]	@ (800c574 <vPortEnterCritical+0x5c>)
 800c53a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c53c:	4b0d      	ldr	r3, [pc, #52]	@ (800c574 <vPortEnterCritical+0x5c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d110      	bne.n	800c566 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c544:	4b0c      	ldr	r3, [pc, #48]	@ (800c578 <vPortEnterCritical+0x60>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00b      	beq.n	800c566 <vPortEnterCritical+0x4e>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	603b      	str	r3, [r7, #0]
}
 800c560:	bf00      	nop
 800c562:	bf00      	nop
 800c564:	e7fd      	b.n	800c562 <vPortEnterCritical+0x4a>
	}
}
 800c566:	bf00      	nop
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	200001c4 	.word	0x200001c4
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c582:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <vPortExitCritical+0x50>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10b      	bne.n	800c5a2 <vPortExitCritical+0x26>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	607b      	str	r3, [r7, #4]
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	e7fd      	b.n	800c59e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5cc <vPortExitCritical+0x50>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	4a08      	ldr	r2, [pc, #32]	@ (800c5cc <vPortExitCritical+0x50>)
 800c5aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5ac:	4b07      	ldr	r3, [pc, #28]	@ (800c5cc <vPortExitCritical+0x50>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <vPortExitCritical+0x44>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	f383 8811 	msr	BASEPRI, r3
}
 800c5be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	200001c4 	.word	0x200001c4

0800c5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5d0:	f3ef 8009 	mrs	r0, PSP
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	4b15      	ldr	r3, [pc, #84]	@ (800c630 <pxCurrentTCBConst>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	f01e 0f10 	tst.w	lr, #16
 800c5e0:	bf08      	it	eq
 800c5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ea:	6010      	str	r0, [r2, #0]
 800c5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c5f4:	f380 8811 	msr	BASEPRI, r0
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f7fe ffac 	bl	800b55c <vTaskSwitchContext>
 800c604:	f04f 0000 	mov.w	r0, #0
 800c608:	f380 8811 	msr	BASEPRI, r0
 800c60c:	bc09      	pop	{r0, r3}
 800c60e:	6819      	ldr	r1, [r3, #0]
 800c610:	6808      	ldr	r0, [r1, #0]
 800c612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c616:	f01e 0f10 	tst.w	lr, #16
 800c61a:	bf08      	it	eq
 800c61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c620:	f380 8809 	msr	PSP, r0
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	f3af 8000 	nop.w

0800c630 <pxCurrentTCBConst>:
 800c630:	20001230 	.word	0x20001230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop

0800c638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	607b      	str	r3, [r7, #4]
}
 800c650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c652:	f7fe fec9 	bl	800b3e8 <xTaskIncrementTick>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c65c:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <xPortSysTickHandler+0x40>)
 800c65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	f383 8811 	msr	BASEPRI, r3
}
 800c66e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c680:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b0 <vPortSetupTimerInterrupt+0x34>)
 800c682:	2200      	movs	r2, #0
 800c684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c686:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b4 <vPortSetupTimerInterrupt+0x38>)
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c68c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <vPortSetupTimerInterrupt+0x3c>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a0a      	ldr	r2, [pc, #40]	@ (800c6bc <vPortSetupTimerInterrupt+0x40>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	099b      	lsrs	r3, r3, #6
 800c698:	4a09      	ldr	r2, [pc, #36]	@ (800c6c0 <vPortSetupTimerInterrupt+0x44>)
 800c69a:	3b01      	subs	r3, #1
 800c69c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c69e:	4b04      	ldr	r3, [pc, #16]	@ (800c6b0 <vPortSetupTimerInterrupt+0x34>)
 800c6a0:	2207      	movs	r2, #7
 800c6a2:	601a      	str	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	e000e010 	.word	0xe000e010
 800c6b4:	e000e018 	.word	0xe000e018
 800c6b8:	200001b8 	.word	0x200001b8
 800c6bc:	10624dd3 	.word	0x10624dd3
 800c6c0:	e000e014 	.word	0xe000e014

0800c6c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c6d4 <vPortEnableVFP+0x10>
 800c6c8:	6801      	ldr	r1, [r0, #0]
 800c6ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6ce:	6001      	str	r1, [r0, #0]
 800c6d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6d2:	bf00      	nop
 800c6d4:	e000ed88 	.word	0xe000ed88

0800c6d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6de:	f3ef 8305 	mrs	r3, IPSR
 800c6e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b0f      	cmp	r3, #15
 800c6e8:	d915      	bls.n	800c716 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6ea:	4a18      	ldr	r2, [pc, #96]	@ (800c74c <vPortValidateInterruptPriority+0x74>)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6f4:	4b16      	ldr	r3, [pc, #88]	@ (800c750 <vPortValidateInterruptPriority+0x78>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	7afa      	ldrb	r2, [r7, #11]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d20b      	bcs.n	800c716 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	607b      	str	r3, [r7, #4]
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	e7fd      	b.n	800c712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c716:	4b0f      	ldr	r3, [pc, #60]	@ (800c754 <vPortValidateInterruptPriority+0x7c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c71e:	4b0e      	ldr	r3, [pc, #56]	@ (800c758 <vPortValidateInterruptPriority+0x80>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d90b      	bls.n	800c73e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	603b      	str	r3, [r7, #0]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <vPortValidateInterruptPriority+0x62>
	}
 800c73e:	bf00      	nop
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	e000e3f0 	.word	0xe000e3f0
 800c750:	2000185c 	.word	0x2000185c
 800c754:	e000ed0c 	.word	0xe000ed0c
 800c758:	20001860 	.word	0x20001860

0800c75c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08a      	sub	sp, #40	@ 0x28
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c764:	2300      	movs	r3, #0
 800c766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c768:	f7fe fd82 	bl	800b270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c76c:	4b5c      	ldr	r3, [pc, #368]	@ (800c8e0 <pvPortMalloc+0x184>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d101      	bne.n	800c778 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c774:	f000 f924 	bl	800c9c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c778:	4b5a      	ldr	r3, [pc, #360]	@ (800c8e4 <pvPortMalloc+0x188>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4013      	ands	r3, r2
 800c780:	2b00      	cmp	r3, #0
 800c782:	f040 8095 	bne.w	800c8b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01e      	beq.n	800c7ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c78c:	2208      	movs	r2, #8
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4413      	add	r3, r2
 800c792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f003 0307 	and.w	r3, r3, #7
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d015      	beq.n	800c7ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f023 0307 	bic.w	r3, r3, #7
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00b      	beq.n	800c7ca <pvPortMalloc+0x6e>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	617b      	str	r3, [r7, #20]
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
 800c7c8:	e7fd      	b.n	800c7c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d06f      	beq.n	800c8b0 <pvPortMalloc+0x154>
 800c7d0:	4b45      	ldr	r3, [pc, #276]	@ (800c8e8 <pvPortMalloc+0x18c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d86a      	bhi.n	800c8b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7da:	4b44      	ldr	r3, [pc, #272]	@ (800c8ec <pvPortMalloc+0x190>)
 800c7dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7de:	4b43      	ldr	r3, [pc, #268]	@ (800c8ec <pvPortMalloc+0x190>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7e4:	e004      	b.n	800c7f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d903      	bls.n	800c802 <pvPortMalloc+0xa6>
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1f1      	bne.n	800c7e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c802:	4b37      	ldr	r3, [pc, #220]	@ (800c8e0 <pvPortMalloc+0x184>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c808:	429a      	cmp	r2, r3
 800c80a:	d051      	beq.n	800c8b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2208      	movs	r2, #8
 800c812:	4413      	add	r3, r2
 800c814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c820:	685a      	ldr	r2, [r3, #4]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	1ad2      	subs	r2, r2, r3
 800c826:	2308      	movs	r3, #8
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d920      	bls.n	800c870 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c82e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4413      	add	r3, r2
 800c834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	f003 0307 	and.w	r3, r3, #7
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00b      	beq.n	800c858 <pvPortMalloc+0xfc>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	613b      	str	r3, [r7, #16]
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	e7fd      	b.n	800c854 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	1ad2      	subs	r2, r2, r3
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c86a:	69b8      	ldr	r0, [r7, #24]
 800c86c:	f000 f90a 	bl	800ca84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c870:	4b1d      	ldr	r3, [pc, #116]	@ (800c8e8 <pvPortMalloc+0x18c>)
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e8 <pvPortMalloc+0x18c>)
 800c87c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c87e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e8 <pvPortMalloc+0x18c>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f0 <pvPortMalloc+0x194>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	429a      	cmp	r2, r3
 800c888:	d203      	bcs.n	800c892 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c88a:	4b17      	ldr	r3, [pc, #92]	@ (800c8e8 <pvPortMalloc+0x18c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a18      	ldr	r2, [pc, #96]	@ (800c8f0 <pvPortMalloc+0x194>)
 800c890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	4b13      	ldr	r3, [pc, #76]	@ (800c8e4 <pvPortMalloc+0x188>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	431a      	orrs	r2, r3
 800c89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8a6:	4b13      	ldr	r3, [pc, #76]	@ (800c8f4 <pvPortMalloc+0x198>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	4a11      	ldr	r2, [pc, #68]	@ (800c8f4 <pvPortMalloc+0x198>)
 800c8ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8b0:	f7fe fcec 	bl	800b28c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00b      	beq.n	800c8d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	60fb      	str	r3, [r7, #12]
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3728      	adds	r7, #40	@ 0x28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20003f7c 	.word	0x20003f7c
 800c8e4:	20003f90 	.word	0x20003f90
 800c8e8:	20003f80 	.word	0x20003f80
 800c8ec:	20003f74 	.word	0x20003f74
 800c8f0:	20003f84 	.word	0x20003f84
 800c8f4:	20003f88 	.word	0x20003f88

0800c8f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d04f      	beq.n	800c9aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c90a:	2308      	movs	r3, #8
 800c90c:	425b      	negs	r3, r3
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4413      	add	r3, r2
 800c912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	4b25      	ldr	r3, [pc, #148]	@ (800c9b4 <vPortFree+0xbc>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4013      	ands	r3, r2
 800c922:	2b00      	cmp	r3, #0
 800c924:	d10b      	bne.n	800c93e <vPortFree+0x46>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	60fb      	str	r3, [r7, #12]
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	e7fd      	b.n	800c93a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00b      	beq.n	800c95e <vPortFree+0x66>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60bb      	str	r3, [r7, #8]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	4b14      	ldr	r3, [pc, #80]	@ (800c9b4 <vPortFree+0xbc>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4013      	ands	r3, r2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d01e      	beq.n	800c9aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d11a      	bne.n	800c9aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	4b0e      	ldr	r3, [pc, #56]	@ (800c9b4 <vPortFree+0xbc>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	43db      	mvns	r3, r3
 800c97e:	401a      	ands	r2, r3
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c984:	f7fe fc74 	bl	800b270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b8 <vPortFree+0xc0>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4413      	add	r3, r2
 800c992:	4a09      	ldr	r2, [pc, #36]	@ (800c9b8 <vPortFree+0xc0>)
 800c994:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c996:	6938      	ldr	r0, [r7, #16]
 800c998:	f000 f874 	bl	800ca84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c99c:	4b07      	ldr	r3, [pc, #28]	@ (800c9bc <vPortFree+0xc4>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	4a06      	ldr	r2, [pc, #24]	@ (800c9bc <vPortFree+0xc4>)
 800c9a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9a6:	f7fe fc71 	bl	800b28c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9aa:	bf00      	nop
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20003f90 	.word	0x20003f90
 800c9b8:	20003f80 	.word	0x20003f80
 800c9bc:	20003f8c 	.word	0x20003f8c

0800c9c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9c6:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c9ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9cc:	4b27      	ldr	r3, [pc, #156]	@ (800ca6c <prvHeapInit+0xac>)
 800c9ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00c      	beq.n	800c9f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3307      	adds	r3, #7
 800c9de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0307 	bic.w	r3, r3, #7
 800c9e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	4a1f      	ldr	r2, [pc, #124]	@ (800ca6c <prvHeapInit+0xac>)
 800c9f0:	4413      	add	r3, r2
 800c9f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca70 <prvHeapInit+0xb0>)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9fe:	4b1c      	ldr	r3, [pc, #112]	@ (800ca70 <prvHeapInit+0xb0>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	4413      	add	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f023 0307 	bic.w	r3, r3, #7
 800ca1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4a15      	ldr	r2, [pc, #84]	@ (800ca74 <prvHeapInit+0xb4>)
 800ca20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca22:	4b14      	ldr	r3, [pc, #80]	@ (800ca74 <prvHeapInit+0xb4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2200      	movs	r2, #0
 800ca28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca2a:	4b12      	ldr	r3, [pc, #72]	@ (800ca74 <prvHeapInit+0xb4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	1ad2      	subs	r2, r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca40:	4b0c      	ldr	r3, [pc, #48]	@ (800ca74 <prvHeapInit+0xb4>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	4a0a      	ldr	r2, [pc, #40]	@ (800ca78 <prvHeapInit+0xb8>)
 800ca4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	4a09      	ldr	r2, [pc, #36]	@ (800ca7c <prvHeapInit+0xbc>)
 800ca56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca58:	4b09      	ldr	r3, [pc, #36]	@ (800ca80 <prvHeapInit+0xc0>)
 800ca5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca5e:	601a      	str	r2, [r3, #0]
}
 800ca60:	bf00      	nop
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr
 800ca6c:	20001864 	.word	0x20001864
 800ca70:	20003f74 	.word	0x20003f74
 800ca74:	20003f7c 	.word	0x20003f7c
 800ca78:	20003f84 	.word	0x20003f84
 800ca7c:	20003f80 	.word	0x20003f80
 800ca80:	20003f90 	.word	0x20003f90

0800ca84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca8c:	4b28      	ldr	r3, [pc, #160]	@ (800cb30 <prvInsertBlockIntoFreeList+0xac>)
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	e002      	b.n	800ca98 <prvInsertBlockIntoFreeList+0x14>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d8f7      	bhi.n	800ca92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	4413      	add	r3, r2
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d108      	bne.n	800cac6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	441a      	add	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	441a      	add	r2, r3
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d118      	bne.n	800cb0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	4b15      	ldr	r3, [pc, #84]	@ (800cb34 <prvInsertBlockIntoFreeList+0xb0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d00d      	beq.n	800cb02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	441a      	add	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	e008      	b.n	800cb14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb02:	4b0c      	ldr	r3, [pc, #48]	@ (800cb34 <prvInsertBlockIntoFreeList+0xb0>)
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e003      	b.n	800cb14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d002      	beq.n	800cb22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb22:	bf00      	nop
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	20003f74 	.word	0x20003f74
 800cb34:	20003f7c 	.word	0x20003f7c

0800cb38 <sniprintf>:
 800cb38:	b40c      	push	{r2, r3}
 800cb3a:	b530      	push	{r4, r5, lr}
 800cb3c:	4b18      	ldr	r3, [pc, #96]	@ (800cba0 <sniprintf+0x68>)
 800cb3e:	1e0c      	subs	r4, r1, #0
 800cb40:	681d      	ldr	r5, [r3, #0]
 800cb42:	b09d      	sub	sp, #116	@ 0x74
 800cb44:	da08      	bge.n	800cb58 <sniprintf+0x20>
 800cb46:	238b      	movs	r3, #139	@ 0x8b
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4e:	b01d      	add	sp, #116	@ 0x74
 800cb50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb54:	b002      	add	sp, #8
 800cb56:	4770      	bx	lr
 800cb58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb66:	bf14      	ite	ne
 800cb68:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb6c:	4623      	moveq	r3, r4
 800cb6e:	9304      	str	r3, [sp, #16]
 800cb70:	9307      	str	r3, [sp, #28]
 800cb72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb76:	9002      	str	r0, [sp, #8]
 800cb78:	9006      	str	r0, [sp, #24]
 800cb7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb80:	ab21      	add	r3, sp, #132	@ 0x84
 800cb82:	a902      	add	r1, sp, #8
 800cb84:	4628      	mov	r0, r5
 800cb86:	9301      	str	r3, [sp, #4]
 800cb88:	f000 fa0e 	bl	800cfa8 <_svfiprintf_r>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	bfbc      	itt	lt
 800cb90:	238b      	movlt	r3, #139	@ 0x8b
 800cb92:	602b      	strlt	r3, [r5, #0]
 800cb94:	2c00      	cmp	r4, #0
 800cb96:	d0da      	beq.n	800cb4e <sniprintf+0x16>
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	e7d6      	b.n	800cb4e <sniprintf+0x16>
 800cba0:	200001c8 	.word	0x200001c8

0800cba4 <_vsniprintf_r>:
 800cba4:	b530      	push	{r4, r5, lr}
 800cba6:	4614      	mov	r4, r2
 800cba8:	2c00      	cmp	r4, #0
 800cbaa:	b09b      	sub	sp, #108	@ 0x6c
 800cbac:	4605      	mov	r5, r0
 800cbae:	461a      	mov	r2, r3
 800cbb0:	da05      	bge.n	800cbbe <_vsniprintf_r+0x1a>
 800cbb2:	238b      	movs	r3, #139	@ 0x8b
 800cbb4:	6003      	str	r3, [r0, #0]
 800cbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbba:	b01b      	add	sp, #108	@ 0x6c
 800cbbc:	bd30      	pop	{r4, r5, pc}
 800cbbe:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cbc2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cbc6:	f04f 0300 	mov.w	r3, #0
 800cbca:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbcc:	bf14      	ite	ne
 800cbce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cbd2:	4623      	moveq	r3, r4
 800cbd4:	9302      	str	r3, [sp, #8]
 800cbd6:	9305      	str	r3, [sp, #20]
 800cbd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbdc:	9100      	str	r1, [sp, #0]
 800cbde:	9104      	str	r1, [sp, #16]
 800cbe0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cbe4:	4669      	mov	r1, sp
 800cbe6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cbe8:	f000 f9de 	bl	800cfa8 <_svfiprintf_r>
 800cbec:	1c43      	adds	r3, r0, #1
 800cbee:	bfbc      	itt	lt
 800cbf0:	238b      	movlt	r3, #139	@ 0x8b
 800cbf2:	602b      	strlt	r3, [r5, #0]
 800cbf4:	2c00      	cmp	r4, #0
 800cbf6:	d0e0      	beq.n	800cbba <_vsniprintf_r+0x16>
 800cbf8:	9b00      	ldr	r3, [sp, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	e7dc      	b.n	800cbba <_vsniprintf_r+0x16>

0800cc00 <vsniprintf>:
 800cc00:	b507      	push	{r0, r1, r2, lr}
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	460a      	mov	r2, r1
 800cc08:	4601      	mov	r1, r0
 800cc0a:	4803      	ldr	r0, [pc, #12]	@ (800cc18 <vsniprintf+0x18>)
 800cc0c:	6800      	ldr	r0, [r0, #0]
 800cc0e:	f7ff ffc9 	bl	800cba4 <_vsniprintf_r>
 800cc12:	b003      	add	sp, #12
 800cc14:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc18:	200001c8 	.word	0x200001c8

0800cc1c <memcmp>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	3901      	subs	r1, #1
 800cc20:	4402      	add	r2, r0
 800cc22:	4290      	cmp	r0, r2
 800cc24:	d101      	bne.n	800cc2a <memcmp+0xe>
 800cc26:	2000      	movs	r0, #0
 800cc28:	e005      	b.n	800cc36 <memcmp+0x1a>
 800cc2a:	7803      	ldrb	r3, [r0, #0]
 800cc2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc30:	42a3      	cmp	r3, r4
 800cc32:	d001      	beq.n	800cc38 <memcmp+0x1c>
 800cc34:	1b18      	subs	r0, r3, r4
 800cc36:	bd10      	pop	{r4, pc}
 800cc38:	3001      	adds	r0, #1
 800cc3a:	e7f2      	b.n	800cc22 <memcmp+0x6>

0800cc3c <memset>:
 800cc3c:	4402      	add	r2, r0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d100      	bne.n	800cc46 <memset+0xa>
 800cc44:	4770      	bx	lr
 800cc46:	f803 1b01 	strb.w	r1, [r3], #1
 800cc4a:	e7f9      	b.n	800cc40 <memset+0x4>

0800cc4c <strncpy>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	3901      	subs	r1, #1
 800cc50:	4603      	mov	r3, r0
 800cc52:	b132      	cbz	r2, 800cc62 <strncpy+0x16>
 800cc54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc58:	f803 4b01 	strb.w	r4, [r3], #1
 800cc5c:	3a01      	subs	r2, #1
 800cc5e:	2c00      	cmp	r4, #0
 800cc60:	d1f7      	bne.n	800cc52 <strncpy+0x6>
 800cc62:	441a      	add	r2, r3
 800cc64:	2100      	movs	r1, #0
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d100      	bne.n	800cc6c <strncpy+0x20>
 800cc6a:	bd10      	pop	{r4, pc}
 800cc6c:	f803 1b01 	strb.w	r1, [r3], #1
 800cc70:	e7f9      	b.n	800cc66 <strncpy+0x1a>

0800cc72 <strnlen>:
 800cc72:	b510      	push	{r4, lr}
 800cc74:	4602      	mov	r2, r0
 800cc76:	4401      	add	r1, r0
 800cc78:	428a      	cmp	r2, r1
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	d003      	beq.n	800cc86 <strnlen+0x14>
 800cc7e:	781c      	ldrb	r4, [r3, #0]
 800cc80:	3201      	adds	r2, #1
 800cc82:	2c00      	cmp	r4, #0
 800cc84:	d1f8      	bne.n	800cc78 <strnlen+0x6>
 800cc86:	1a18      	subs	r0, r3, r0
 800cc88:	bd10      	pop	{r4, pc}
	...

0800cc8c <__errno>:
 800cc8c:	4b01      	ldr	r3, [pc, #4]	@ (800cc94 <__errno+0x8>)
 800cc8e:	6818      	ldr	r0, [r3, #0]
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	200001c8 	.word	0x200001c8

0800cc98 <__libc_init_array>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	4d0d      	ldr	r5, [pc, #52]	@ (800ccd0 <__libc_init_array+0x38>)
 800cc9c:	4c0d      	ldr	r4, [pc, #52]	@ (800ccd4 <__libc_init_array+0x3c>)
 800cc9e:	1b64      	subs	r4, r4, r5
 800cca0:	10a4      	asrs	r4, r4, #2
 800cca2:	2600      	movs	r6, #0
 800cca4:	42a6      	cmp	r6, r4
 800cca6:	d109      	bne.n	800ccbc <__libc_init_array+0x24>
 800cca8:	4d0b      	ldr	r5, [pc, #44]	@ (800ccd8 <__libc_init_array+0x40>)
 800ccaa:	4c0c      	ldr	r4, [pc, #48]	@ (800ccdc <__libc_init_array+0x44>)
 800ccac:	f000 fc64 	bl	800d578 <_init>
 800ccb0:	1b64      	subs	r4, r4, r5
 800ccb2:	10a4      	asrs	r4, r4, #2
 800ccb4:	2600      	movs	r6, #0
 800ccb6:	42a6      	cmp	r6, r4
 800ccb8:	d105      	bne.n	800ccc6 <__libc_init_array+0x2e>
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc0:	4798      	blx	r3
 800ccc2:	3601      	adds	r6, #1
 800ccc4:	e7ee      	b.n	800cca4 <__libc_init_array+0xc>
 800ccc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccca:	4798      	blx	r3
 800cccc:	3601      	adds	r6, #1
 800ccce:	e7f2      	b.n	800ccb6 <__libc_init_array+0x1e>
 800ccd0:	0800d954 	.word	0x0800d954
 800ccd4:	0800d954 	.word	0x0800d954
 800ccd8:	0800d954 	.word	0x0800d954
 800ccdc:	0800d958 	.word	0x0800d958

0800cce0 <__retarget_lock_acquire_recursive>:
 800cce0:	4770      	bx	lr

0800cce2 <__retarget_lock_release_recursive>:
 800cce2:	4770      	bx	lr

0800cce4 <memcpy>:
 800cce4:	440a      	add	r2, r1
 800cce6:	4291      	cmp	r1, r2
 800cce8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccec:	d100      	bne.n	800ccf0 <memcpy+0xc>
 800ccee:	4770      	bx	lr
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccfa:	4291      	cmp	r1, r2
 800ccfc:	d1f9      	bne.n	800ccf2 <memcpy+0xe>
 800ccfe:	bd10      	pop	{r4, pc}

0800cd00 <_free_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4605      	mov	r5, r0
 800cd04:	2900      	cmp	r1, #0
 800cd06:	d041      	beq.n	800cd8c <_free_r+0x8c>
 800cd08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd0c:	1f0c      	subs	r4, r1, #4
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bfb8      	it	lt
 800cd12:	18e4      	addlt	r4, r4, r3
 800cd14:	f000 f8e0 	bl	800ced8 <__malloc_lock>
 800cd18:	4a1d      	ldr	r2, [pc, #116]	@ (800cd90 <_free_r+0x90>)
 800cd1a:	6813      	ldr	r3, [r2, #0]
 800cd1c:	b933      	cbnz	r3, 800cd2c <_free_r+0x2c>
 800cd1e:	6063      	str	r3, [r4, #4]
 800cd20:	6014      	str	r4, [r2, #0]
 800cd22:	4628      	mov	r0, r5
 800cd24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd28:	f000 b8dc 	b.w	800cee4 <__malloc_unlock>
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	d908      	bls.n	800cd42 <_free_r+0x42>
 800cd30:	6820      	ldr	r0, [r4, #0]
 800cd32:	1821      	adds	r1, r4, r0
 800cd34:	428b      	cmp	r3, r1
 800cd36:	bf01      	itttt	eq
 800cd38:	6819      	ldreq	r1, [r3, #0]
 800cd3a:	685b      	ldreq	r3, [r3, #4]
 800cd3c:	1809      	addeq	r1, r1, r0
 800cd3e:	6021      	streq	r1, [r4, #0]
 800cd40:	e7ed      	b.n	800cd1e <_free_r+0x1e>
 800cd42:	461a      	mov	r2, r3
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	b10b      	cbz	r3, 800cd4c <_free_r+0x4c>
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	d9fa      	bls.n	800cd42 <_free_r+0x42>
 800cd4c:	6811      	ldr	r1, [r2, #0]
 800cd4e:	1850      	adds	r0, r2, r1
 800cd50:	42a0      	cmp	r0, r4
 800cd52:	d10b      	bne.n	800cd6c <_free_r+0x6c>
 800cd54:	6820      	ldr	r0, [r4, #0]
 800cd56:	4401      	add	r1, r0
 800cd58:	1850      	adds	r0, r2, r1
 800cd5a:	4283      	cmp	r3, r0
 800cd5c:	6011      	str	r1, [r2, #0]
 800cd5e:	d1e0      	bne.n	800cd22 <_free_r+0x22>
 800cd60:	6818      	ldr	r0, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	6053      	str	r3, [r2, #4]
 800cd66:	4408      	add	r0, r1
 800cd68:	6010      	str	r0, [r2, #0]
 800cd6a:	e7da      	b.n	800cd22 <_free_r+0x22>
 800cd6c:	d902      	bls.n	800cd74 <_free_r+0x74>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	602b      	str	r3, [r5, #0]
 800cd72:	e7d6      	b.n	800cd22 <_free_r+0x22>
 800cd74:	6820      	ldr	r0, [r4, #0]
 800cd76:	1821      	adds	r1, r4, r0
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf04      	itt	eq
 800cd7c:	6819      	ldreq	r1, [r3, #0]
 800cd7e:	685b      	ldreq	r3, [r3, #4]
 800cd80:	6063      	str	r3, [r4, #4]
 800cd82:	bf04      	itt	eq
 800cd84:	1809      	addeq	r1, r1, r0
 800cd86:	6021      	streq	r1, [r4, #0]
 800cd88:	6054      	str	r4, [r2, #4]
 800cd8a:	e7ca      	b.n	800cd22 <_free_r+0x22>
 800cd8c:	bd38      	pop	{r3, r4, r5, pc}
 800cd8e:	bf00      	nop
 800cd90:	200040d8 	.word	0x200040d8

0800cd94 <sbrk_aligned>:
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	4e0f      	ldr	r6, [pc, #60]	@ (800cdd4 <sbrk_aligned+0x40>)
 800cd98:	460c      	mov	r4, r1
 800cd9a:	6831      	ldr	r1, [r6, #0]
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	b911      	cbnz	r1, 800cda6 <sbrk_aligned+0x12>
 800cda0:	f000 fba4 	bl	800d4ec <_sbrk_r>
 800cda4:	6030      	str	r0, [r6, #0]
 800cda6:	4621      	mov	r1, r4
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f000 fb9f 	bl	800d4ec <_sbrk_r>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d103      	bne.n	800cdba <sbrk_aligned+0x26>
 800cdb2:	f04f 34ff 	mov.w	r4, #4294967295
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	bd70      	pop	{r4, r5, r6, pc}
 800cdba:	1cc4      	adds	r4, r0, #3
 800cdbc:	f024 0403 	bic.w	r4, r4, #3
 800cdc0:	42a0      	cmp	r0, r4
 800cdc2:	d0f8      	beq.n	800cdb6 <sbrk_aligned+0x22>
 800cdc4:	1a21      	subs	r1, r4, r0
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 fb90 	bl	800d4ec <_sbrk_r>
 800cdcc:	3001      	adds	r0, #1
 800cdce:	d1f2      	bne.n	800cdb6 <sbrk_aligned+0x22>
 800cdd0:	e7ef      	b.n	800cdb2 <sbrk_aligned+0x1e>
 800cdd2:	bf00      	nop
 800cdd4:	200040d4 	.word	0x200040d4

0800cdd8 <_malloc_r>:
 800cdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cddc:	1ccd      	adds	r5, r1, #3
 800cdde:	f025 0503 	bic.w	r5, r5, #3
 800cde2:	3508      	adds	r5, #8
 800cde4:	2d0c      	cmp	r5, #12
 800cde6:	bf38      	it	cc
 800cde8:	250c      	movcc	r5, #12
 800cdea:	2d00      	cmp	r5, #0
 800cdec:	4606      	mov	r6, r0
 800cdee:	db01      	blt.n	800cdf4 <_malloc_r+0x1c>
 800cdf0:	42a9      	cmp	r1, r5
 800cdf2:	d904      	bls.n	800cdfe <_malloc_r+0x26>
 800cdf4:	230c      	movs	r3, #12
 800cdf6:	6033      	str	r3, [r6, #0]
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ced4 <_malloc_r+0xfc>
 800ce02:	f000 f869 	bl	800ced8 <__malloc_lock>
 800ce06:	f8d8 3000 	ldr.w	r3, [r8]
 800ce0a:	461c      	mov	r4, r3
 800ce0c:	bb44      	cbnz	r4, 800ce60 <_malloc_r+0x88>
 800ce0e:	4629      	mov	r1, r5
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7ff ffbf 	bl	800cd94 <sbrk_aligned>
 800ce16:	1c43      	adds	r3, r0, #1
 800ce18:	4604      	mov	r4, r0
 800ce1a:	d158      	bne.n	800cece <_malloc_r+0xf6>
 800ce1c:	f8d8 4000 	ldr.w	r4, [r8]
 800ce20:	4627      	mov	r7, r4
 800ce22:	2f00      	cmp	r7, #0
 800ce24:	d143      	bne.n	800ceae <_malloc_r+0xd6>
 800ce26:	2c00      	cmp	r4, #0
 800ce28:	d04b      	beq.n	800cec2 <_malloc_r+0xea>
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	4630      	mov	r0, r6
 800ce30:	eb04 0903 	add.w	r9, r4, r3
 800ce34:	f000 fb5a 	bl	800d4ec <_sbrk_r>
 800ce38:	4581      	cmp	r9, r0
 800ce3a:	d142      	bne.n	800cec2 <_malloc_r+0xea>
 800ce3c:	6821      	ldr	r1, [r4, #0]
 800ce3e:	1a6d      	subs	r5, r5, r1
 800ce40:	4629      	mov	r1, r5
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7ff ffa6 	bl	800cd94 <sbrk_aligned>
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d03a      	beq.n	800cec2 <_malloc_r+0xea>
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	442b      	add	r3, r5
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	f8d8 3000 	ldr.w	r3, [r8]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	bb62      	cbnz	r2, 800ceb4 <_malloc_r+0xdc>
 800ce5a:	f8c8 7000 	str.w	r7, [r8]
 800ce5e:	e00f      	b.n	800ce80 <_malloc_r+0xa8>
 800ce60:	6822      	ldr	r2, [r4, #0]
 800ce62:	1b52      	subs	r2, r2, r5
 800ce64:	d420      	bmi.n	800cea8 <_malloc_r+0xd0>
 800ce66:	2a0b      	cmp	r2, #11
 800ce68:	d917      	bls.n	800ce9a <_malloc_r+0xc2>
 800ce6a:	1961      	adds	r1, r4, r5
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	6025      	str	r5, [r4, #0]
 800ce70:	bf18      	it	ne
 800ce72:	6059      	strne	r1, [r3, #4]
 800ce74:	6863      	ldr	r3, [r4, #4]
 800ce76:	bf08      	it	eq
 800ce78:	f8c8 1000 	streq.w	r1, [r8]
 800ce7c:	5162      	str	r2, [r4, r5]
 800ce7e:	604b      	str	r3, [r1, #4]
 800ce80:	4630      	mov	r0, r6
 800ce82:	f000 f82f 	bl	800cee4 <__malloc_unlock>
 800ce86:	f104 000b 	add.w	r0, r4, #11
 800ce8a:	1d23      	adds	r3, r4, #4
 800ce8c:	f020 0007 	bic.w	r0, r0, #7
 800ce90:	1ac2      	subs	r2, r0, r3
 800ce92:	bf1c      	itt	ne
 800ce94:	1a1b      	subne	r3, r3, r0
 800ce96:	50a3      	strne	r3, [r4, r2]
 800ce98:	e7af      	b.n	800cdfa <_malloc_r+0x22>
 800ce9a:	6862      	ldr	r2, [r4, #4]
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	bf0c      	ite	eq
 800cea0:	f8c8 2000 	streq.w	r2, [r8]
 800cea4:	605a      	strne	r2, [r3, #4]
 800cea6:	e7eb      	b.n	800ce80 <_malloc_r+0xa8>
 800cea8:	4623      	mov	r3, r4
 800ceaa:	6864      	ldr	r4, [r4, #4]
 800ceac:	e7ae      	b.n	800ce0c <_malloc_r+0x34>
 800ceae:	463c      	mov	r4, r7
 800ceb0:	687f      	ldr	r7, [r7, #4]
 800ceb2:	e7b6      	b.n	800ce22 <_malloc_r+0x4a>
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	d1fb      	bne.n	800ceb4 <_malloc_r+0xdc>
 800cebc:	2300      	movs	r3, #0
 800cebe:	6053      	str	r3, [r2, #4]
 800cec0:	e7de      	b.n	800ce80 <_malloc_r+0xa8>
 800cec2:	230c      	movs	r3, #12
 800cec4:	6033      	str	r3, [r6, #0]
 800cec6:	4630      	mov	r0, r6
 800cec8:	f000 f80c 	bl	800cee4 <__malloc_unlock>
 800cecc:	e794      	b.n	800cdf8 <_malloc_r+0x20>
 800cece:	6005      	str	r5, [r0, #0]
 800ced0:	e7d6      	b.n	800ce80 <_malloc_r+0xa8>
 800ced2:	bf00      	nop
 800ced4:	200040d8 	.word	0x200040d8

0800ced8 <__malloc_lock>:
 800ced8:	4801      	ldr	r0, [pc, #4]	@ (800cee0 <__malloc_lock+0x8>)
 800ceda:	f7ff bf01 	b.w	800cce0 <__retarget_lock_acquire_recursive>
 800cede:	bf00      	nop
 800cee0:	200040d0 	.word	0x200040d0

0800cee4 <__malloc_unlock>:
 800cee4:	4801      	ldr	r0, [pc, #4]	@ (800ceec <__malloc_unlock+0x8>)
 800cee6:	f7ff befc 	b.w	800cce2 <__retarget_lock_release_recursive>
 800ceea:	bf00      	nop
 800ceec:	200040d0 	.word	0x200040d0

0800cef0 <__ssputs_r>:
 800cef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef4:	688e      	ldr	r6, [r1, #8]
 800cef6:	461f      	mov	r7, r3
 800cef8:	42be      	cmp	r6, r7
 800cefa:	680b      	ldr	r3, [r1, #0]
 800cefc:	4682      	mov	sl, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	4690      	mov	r8, r2
 800cf02:	d82d      	bhi.n	800cf60 <__ssputs_r+0x70>
 800cf04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf0c:	d026      	beq.n	800cf5c <__ssputs_r+0x6c>
 800cf0e:	6965      	ldr	r5, [r4, #20]
 800cf10:	6909      	ldr	r1, [r1, #16]
 800cf12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf16:	eba3 0901 	sub.w	r9, r3, r1
 800cf1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf1e:	1c7b      	adds	r3, r7, #1
 800cf20:	444b      	add	r3, r9
 800cf22:	106d      	asrs	r5, r5, #1
 800cf24:	429d      	cmp	r5, r3
 800cf26:	bf38      	it	cc
 800cf28:	461d      	movcc	r5, r3
 800cf2a:	0553      	lsls	r3, r2, #21
 800cf2c:	d527      	bpl.n	800cf7e <__ssputs_r+0x8e>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f7ff ff52 	bl	800cdd8 <_malloc_r>
 800cf34:	4606      	mov	r6, r0
 800cf36:	b360      	cbz	r0, 800cf92 <__ssputs_r+0xa2>
 800cf38:	6921      	ldr	r1, [r4, #16]
 800cf3a:	464a      	mov	r2, r9
 800cf3c:	f7ff fed2 	bl	800cce4 <memcpy>
 800cf40:	89a3      	ldrh	r3, [r4, #12]
 800cf42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	6126      	str	r6, [r4, #16]
 800cf4e:	6165      	str	r5, [r4, #20]
 800cf50:	444e      	add	r6, r9
 800cf52:	eba5 0509 	sub.w	r5, r5, r9
 800cf56:	6026      	str	r6, [r4, #0]
 800cf58:	60a5      	str	r5, [r4, #8]
 800cf5a:	463e      	mov	r6, r7
 800cf5c:	42be      	cmp	r6, r7
 800cf5e:	d900      	bls.n	800cf62 <__ssputs_r+0x72>
 800cf60:	463e      	mov	r6, r7
 800cf62:	6820      	ldr	r0, [r4, #0]
 800cf64:	4632      	mov	r2, r6
 800cf66:	4641      	mov	r1, r8
 800cf68:	f000 faa6 	bl	800d4b8 <memmove>
 800cf6c:	68a3      	ldr	r3, [r4, #8]
 800cf6e:	1b9b      	subs	r3, r3, r6
 800cf70:	60a3      	str	r3, [r4, #8]
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	4433      	add	r3, r6
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf7e:	462a      	mov	r2, r5
 800cf80:	f000 fac4 	bl	800d50c <_realloc_r>
 800cf84:	4606      	mov	r6, r0
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d1e0      	bne.n	800cf4c <__ssputs_r+0x5c>
 800cf8a:	6921      	ldr	r1, [r4, #16]
 800cf8c:	4650      	mov	r0, sl
 800cf8e:	f7ff feb7 	bl	800cd00 <_free_r>
 800cf92:	230c      	movs	r3, #12
 800cf94:	f8ca 3000 	str.w	r3, [sl]
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	e7e9      	b.n	800cf7a <__ssputs_r+0x8a>
	...

0800cfa8 <_svfiprintf_r>:
 800cfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	4698      	mov	r8, r3
 800cfae:	898b      	ldrh	r3, [r1, #12]
 800cfb0:	061b      	lsls	r3, r3, #24
 800cfb2:	b09d      	sub	sp, #116	@ 0x74
 800cfb4:	4607      	mov	r7, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	4614      	mov	r4, r2
 800cfba:	d510      	bpl.n	800cfde <_svfiprintf_r+0x36>
 800cfbc:	690b      	ldr	r3, [r1, #16]
 800cfbe:	b973      	cbnz	r3, 800cfde <_svfiprintf_r+0x36>
 800cfc0:	2140      	movs	r1, #64	@ 0x40
 800cfc2:	f7ff ff09 	bl	800cdd8 <_malloc_r>
 800cfc6:	6028      	str	r0, [r5, #0]
 800cfc8:	6128      	str	r0, [r5, #16]
 800cfca:	b930      	cbnz	r0, 800cfda <_svfiprintf_r+0x32>
 800cfcc:	230c      	movs	r3, #12
 800cfce:	603b      	str	r3, [r7, #0]
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	b01d      	add	sp, #116	@ 0x74
 800cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfda:	2340      	movs	r3, #64	@ 0x40
 800cfdc:	616b      	str	r3, [r5, #20]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfe2:	2320      	movs	r3, #32
 800cfe4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfec:	2330      	movs	r3, #48	@ 0x30
 800cfee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d18c <_svfiprintf_r+0x1e4>
 800cff2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cff6:	f04f 0901 	mov.w	r9, #1
 800cffa:	4623      	mov	r3, r4
 800cffc:	469a      	mov	sl, r3
 800cffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d002:	b10a      	cbz	r2, 800d008 <_svfiprintf_r+0x60>
 800d004:	2a25      	cmp	r2, #37	@ 0x25
 800d006:	d1f9      	bne.n	800cffc <_svfiprintf_r+0x54>
 800d008:	ebba 0b04 	subs.w	fp, sl, r4
 800d00c:	d00b      	beq.n	800d026 <_svfiprintf_r+0x7e>
 800d00e:	465b      	mov	r3, fp
 800d010:	4622      	mov	r2, r4
 800d012:	4629      	mov	r1, r5
 800d014:	4638      	mov	r0, r7
 800d016:	f7ff ff6b 	bl	800cef0 <__ssputs_r>
 800d01a:	3001      	adds	r0, #1
 800d01c:	f000 80a7 	beq.w	800d16e <_svfiprintf_r+0x1c6>
 800d020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d022:	445a      	add	r2, fp
 800d024:	9209      	str	r2, [sp, #36]	@ 0x24
 800d026:	f89a 3000 	ldrb.w	r3, [sl]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	f000 809f 	beq.w	800d16e <_svfiprintf_r+0x1c6>
 800d030:	2300      	movs	r3, #0
 800d032:	f04f 32ff 	mov.w	r2, #4294967295
 800d036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d03a:	f10a 0a01 	add.w	sl, sl, #1
 800d03e:	9304      	str	r3, [sp, #16]
 800d040:	9307      	str	r3, [sp, #28]
 800d042:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d046:	931a      	str	r3, [sp, #104]	@ 0x68
 800d048:	4654      	mov	r4, sl
 800d04a:	2205      	movs	r2, #5
 800d04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d050:	484e      	ldr	r0, [pc, #312]	@ (800d18c <_svfiprintf_r+0x1e4>)
 800d052:	f7f3 f8d5 	bl	8000200 <memchr>
 800d056:	9a04      	ldr	r2, [sp, #16]
 800d058:	b9d8      	cbnz	r0, 800d092 <_svfiprintf_r+0xea>
 800d05a:	06d0      	lsls	r0, r2, #27
 800d05c:	bf44      	itt	mi
 800d05e:	2320      	movmi	r3, #32
 800d060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d064:	0711      	lsls	r1, r2, #28
 800d066:	bf44      	itt	mi
 800d068:	232b      	movmi	r3, #43	@ 0x2b
 800d06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d06e:	f89a 3000 	ldrb.w	r3, [sl]
 800d072:	2b2a      	cmp	r3, #42	@ 0x2a
 800d074:	d015      	beq.n	800d0a2 <_svfiprintf_r+0xfa>
 800d076:	9a07      	ldr	r2, [sp, #28]
 800d078:	4654      	mov	r4, sl
 800d07a:	2000      	movs	r0, #0
 800d07c:	f04f 0c0a 	mov.w	ip, #10
 800d080:	4621      	mov	r1, r4
 800d082:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d086:	3b30      	subs	r3, #48	@ 0x30
 800d088:	2b09      	cmp	r3, #9
 800d08a:	d94b      	bls.n	800d124 <_svfiprintf_r+0x17c>
 800d08c:	b1b0      	cbz	r0, 800d0bc <_svfiprintf_r+0x114>
 800d08e:	9207      	str	r2, [sp, #28]
 800d090:	e014      	b.n	800d0bc <_svfiprintf_r+0x114>
 800d092:	eba0 0308 	sub.w	r3, r0, r8
 800d096:	fa09 f303 	lsl.w	r3, r9, r3
 800d09a:	4313      	orrs	r3, r2
 800d09c:	9304      	str	r3, [sp, #16]
 800d09e:	46a2      	mov	sl, r4
 800d0a0:	e7d2      	b.n	800d048 <_svfiprintf_r+0xa0>
 800d0a2:	9b03      	ldr	r3, [sp, #12]
 800d0a4:	1d19      	adds	r1, r3, #4
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	9103      	str	r1, [sp, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	bfbb      	ittet	lt
 800d0ae:	425b      	neglt	r3, r3
 800d0b0:	f042 0202 	orrlt.w	r2, r2, #2
 800d0b4:	9307      	strge	r3, [sp, #28]
 800d0b6:	9307      	strlt	r3, [sp, #28]
 800d0b8:	bfb8      	it	lt
 800d0ba:	9204      	strlt	r2, [sp, #16]
 800d0bc:	7823      	ldrb	r3, [r4, #0]
 800d0be:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0c0:	d10a      	bne.n	800d0d8 <_svfiprintf_r+0x130>
 800d0c2:	7863      	ldrb	r3, [r4, #1]
 800d0c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0c6:	d132      	bne.n	800d12e <_svfiprintf_r+0x186>
 800d0c8:	9b03      	ldr	r3, [sp, #12]
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	9203      	str	r2, [sp, #12]
 800d0d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0d4:	3402      	adds	r4, #2
 800d0d6:	9305      	str	r3, [sp, #20]
 800d0d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d19c <_svfiprintf_r+0x1f4>
 800d0dc:	7821      	ldrb	r1, [r4, #0]
 800d0de:	2203      	movs	r2, #3
 800d0e0:	4650      	mov	r0, sl
 800d0e2:	f7f3 f88d 	bl	8000200 <memchr>
 800d0e6:	b138      	cbz	r0, 800d0f8 <_svfiprintf_r+0x150>
 800d0e8:	9b04      	ldr	r3, [sp, #16]
 800d0ea:	eba0 000a 	sub.w	r0, r0, sl
 800d0ee:	2240      	movs	r2, #64	@ 0x40
 800d0f0:	4082      	lsls	r2, r0
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	3401      	adds	r4, #1
 800d0f6:	9304      	str	r3, [sp, #16]
 800d0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fc:	4824      	ldr	r0, [pc, #144]	@ (800d190 <_svfiprintf_r+0x1e8>)
 800d0fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d102:	2206      	movs	r2, #6
 800d104:	f7f3 f87c 	bl	8000200 <memchr>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d036      	beq.n	800d17a <_svfiprintf_r+0x1d2>
 800d10c:	4b21      	ldr	r3, [pc, #132]	@ (800d194 <_svfiprintf_r+0x1ec>)
 800d10e:	bb1b      	cbnz	r3, 800d158 <_svfiprintf_r+0x1b0>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	3307      	adds	r3, #7
 800d114:	f023 0307 	bic.w	r3, r3, #7
 800d118:	3308      	adds	r3, #8
 800d11a:	9303      	str	r3, [sp, #12]
 800d11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d11e:	4433      	add	r3, r6
 800d120:	9309      	str	r3, [sp, #36]	@ 0x24
 800d122:	e76a      	b.n	800cffa <_svfiprintf_r+0x52>
 800d124:	fb0c 3202 	mla	r2, ip, r2, r3
 800d128:	460c      	mov	r4, r1
 800d12a:	2001      	movs	r0, #1
 800d12c:	e7a8      	b.n	800d080 <_svfiprintf_r+0xd8>
 800d12e:	2300      	movs	r3, #0
 800d130:	3401      	adds	r4, #1
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	4619      	mov	r1, r3
 800d136:	f04f 0c0a 	mov.w	ip, #10
 800d13a:	4620      	mov	r0, r4
 800d13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d140:	3a30      	subs	r2, #48	@ 0x30
 800d142:	2a09      	cmp	r2, #9
 800d144:	d903      	bls.n	800d14e <_svfiprintf_r+0x1a6>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0c6      	beq.n	800d0d8 <_svfiprintf_r+0x130>
 800d14a:	9105      	str	r1, [sp, #20]
 800d14c:	e7c4      	b.n	800d0d8 <_svfiprintf_r+0x130>
 800d14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d152:	4604      	mov	r4, r0
 800d154:	2301      	movs	r3, #1
 800d156:	e7f0      	b.n	800d13a <_svfiprintf_r+0x192>
 800d158:	ab03      	add	r3, sp, #12
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	462a      	mov	r2, r5
 800d15e:	4b0e      	ldr	r3, [pc, #56]	@ (800d198 <_svfiprintf_r+0x1f0>)
 800d160:	a904      	add	r1, sp, #16
 800d162:	4638      	mov	r0, r7
 800d164:	f3af 8000 	nop.w
 800d168:	1c42      	adds	r2, r0, #1
 800d16a:	4606      	mov	r6, r0
 800d16c:	d1d6      	bne.n	800d11c <_svfiprintf_r+0x174>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	065b      	lsls	r3, r3, #25
 800d172:	f53f af2d 	bmi.w	800cfd0 <_svfiprintf_r+0x28>
 800d176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d178:	e72c      	b.n	800cfd4 <_svfiprintf_r+0x2c>
 800d17a:	ab03      	add	r3, sp, #12
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	462a      	mov	r2, r5
 800d180:	4b05      	ldr	r3, [pc, #20]	@ (800d198 <_svfiprintf_r+0x1f0>)
 800d182:	a904      	add	r1, sp, #16
 800d184:	4638      	mov	r0, r7
 800d186:	f000 f879 	bl	800d27c <_printf_i>
 800d18a:	e7ed      	b.n	800d168 <_svfiprintf_r+0x1c0>
 800d18c:	0800d918 	.word	0x0800d918
 800d190:	0800d922 	.word	0x0800d922
 800d194:	00000000 	.word	0x00000000
 800d198:	0800cef1 	.word	0x0800cef1
 800d19c:	0800d91e 	.word	0x0800d91e

0800d1a0 <_printf_common>:
 800d1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a4:	4616      	mov	r6, r2
 800d1a6:	4698      	mov	r8, r3
 800d1a8:	688a      	ldr	r2, [r1, #8]
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	bfb8      	it	lt
 800d1b4:	4613      	movlt	r3, r2
 800d1b6:	6033      	str	r3, [r6, #0]
 800d1b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1bc:	4607      	mov	r7, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b10a      	cbz	r2, 800d1c6 <_printf_common+0x26>
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	6033      	str	r3, [r6, #0]
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	0699      	lsls	r1, r3, #26
 800d1ca:	bf42      	ittt	mi
 800d1cc:	6833      	ldrmi	r3, [r6, #0]
 800d1ce:	3302      	addmi	r3, #2
 800d1d0:	6033      	strmi	r3, [r6, #0]
 800d1d2:	6825      	ldr	r5, [r4, #0]
 800d1d4:	f015 0506 	ands.w	r5, r5, #6
 800d1d8:	d106      	bne.n	800d1e8 <_printf_common+0x48>
 800d1da:	f104 0a19 	add.w	sl, r4, #25
 800d1de:	68e3      	ldr	r3, [r4, #12]
 800d1e0:	6832      	ldr	r2, [r6, #0]
 800d1e2:	1a9b      	subs	r3, r3, r2
 800d1e4:	42ab      	cmp	r3, r5
 800d1e6:	dc26      	bgt.n	800d236 <_printf_common+0x96>
 800d1e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1ec:	6822      	ldr	r2, [r4, #0]
 800d1ee:	3b00      	subs	r3, #0
 800d1f0:	bf18      	it	ne
 800d1f2:	2301      	movne	r3, #1
 800d1f4:	0692      	lsls	r2, r2, #26
 800d1f6:	d42b      	bmi.n	800d250 <_printf_common+0xb0>
 800d1f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1fc:	4641      	mov	r1, r8
 800d1fe:	4638      	mov	r0, r7
 800d200:	47c8      	blx	r9
 800d202:	3001      	adds	r0, #1
 800d204:	d01e      	beq.n	800d244 <_printf_common+0xa4>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	6922      	ldr	r2, [r4, #16]
 800d20a:	f003 0306 	and.w	r3, r3, #6
 800d20e:	2b04      	cmp	r3, #4
 800d210:	bf02      	ittt	eq
 800d212:	68e5      	ldreq	r5, [r4, #12]
 800d214:	6833      	ldreq	r3, [r6, #0]
 800d216:	1aed      	subeq	r5, r5, r3
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	bf0c      	ite	eq
 800d21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d220:	2500      	movne	r5, #0
 800d222:	4293      	cmp	r3, r2
 800d224:	bfc4      	itt	gt
 800d226:	1a9b      	subgt	r3, r3, r2
 800d228:	18ed      	addgt	r5, r5, r3
 800d22a:	2600      	movs	r6, #0
 800d22c:	341a      	adds	r4, #26
 800d22e:	42b5      	cmp	r5, r6
 800d230:	d11a      	bne.n	800d268 <_printf_common+0xc8>
 800d232:	2000      	movs	r0, #0
 800d234:	e008      	b.n	800d248 <_printf_common+0xa8>
 800d236:	2301      	movs	r3, #1
 800d238:	4652      	mov	r2, sl
 800d23a:	4641      	mov	r1, r8
 800d23c:	4638      	mov	r0, r7
 800d23e:	47c8      	blx	r9
 800d240:	3001      	adds	r0, #1
 800d242:	d103      	bne.n	800d24c <_printf_common+0xac>
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24c:	3501      	adds	r5, #1
 800d24e:	e7c6      	b.n	800d1de <_printf_common+0x3e>
 800d250:	18e1      	adds	r1, r4, r3
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	2030      	movs	r0, #48	@ 0x30
 800d256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d25a:	4422      	add	r2, r4
 800d25c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d264:	3302      	adds	r3, #2
 800d266:	e7c7      	b.n	800d1f8 <_printf_common+0x58>
 800d268:	2301      	movs	r3, #1
 800d26a:	4622      	mov	r2, r4
 800d26c:	4641      	mov	r1, r8
 800d26e:	4638      	mov	r0, r7
 800d270:	47c8      	blx	r9
 800d272:	3001      	adds	r0, #1
 800d274:	d0e6      	beq.n	800d244 <_printf_common+0xa4>
 800d276:	3601      	adds	r6, #1
 800d278:	e7d9      	b.n	800d22e <_printf_common+0x8e>
	...

0800d27c <_printf_i>:
 800d27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	7e0f      	ldrb	r7, [r1, #24]
 800d282:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d284:	2f78      	cmp	r7, #120	@ 0x78
 800d286:	4691      	mov	r9, r2
 800d288:	4680      	mov	r8, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	469a      	mov	sl, r3
 800d28e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d292:	d807      	bhi.n	800d2a4 <_printf_i+0x28>
 800d294:	2f62      	cmp	r7, #98	@ 0x62
 800d296:	d80a      	bhi.n	800d2ae <_printf_i+0x32>
 800d298:	2f00      	cmp	r7, #0
 800d29a:	f000 80d1 	beq.w	800d440 <_printf_i+0x1c4>
 800d29e:	2f58      	cmp	r7, #88	@ 0x58
 800d2a0:	f000 80b8 	beq.w	800d414 <_printf_i+0x198>
 800d2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2ac:	e03a      	b.n	800d324 <_printf_i+0xa8>
 800d2ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2b2:	2b15      	cmp	r3, #21
 800d2b4:	d8f6      	bhi.n	800d2a4 <_printf_i+0x28>
 800d2b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d2bc <_printf_i+0x40>)
 800d2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2bc:	0800d315 	.word	0x0800d315
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d2a5 	.word	0x0800d2a5
 800d2c8:	0800d2a5 	.word	0x0800d2a5
 800d2cc:	0800d2a5 	.word	0x0800d2a5
 800d2d0:	0800d2a5 	.word	0x0800d2a5
 800d2d4:	0800d329 	.word	0x0800d329
 800d2d8:	0800d2a5 	.word	0x0800d2a5
 800d2dc:	0800d2a5 	.word	0x0800d2a5
 800d2e0:	0800d2a5 	.word	0x0800d2a5
 800d2e4:	0800d2a5 	.word	0x0800d2a5
 800d2e8:	0800d427 	.word	0x0800d427
 800d2ec:	0800d353 	.word	0x0800d353
 800d2f0:	0800d3e1 	.word	0x0800d3e1
 800d2f4:	0800d2a5 	.word	0x0800d2a5
 800d2f8:	0800d2a5 	.word	0x0800d2a5
 800d2fc:	0800d449 	.word	0x0800d449
 800d300:	0800d2a5 	.word	0x0800d2a5
 800d304:	0800d353 	.word	0x0800d353
 800d308:	0800d2a5 	.word	0x0800d2a5
 800d30c:	0800d2a5 	.word	0x0800d2a5
 800d310:	0800d3e9 	.word	0x0800d3e9
 800d314:	6833      	ldr	r3, [r6, #0]
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6032      	str	r2, [r6, #0]
 800d31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d324:	2301      	movs	r3, #1
 800d326:	e09c      	b.n	800d462 <_printf_i+0x1e6>
 800d328:	6833      	ldr	r3, [r6, #0]
 800d32a:	6820      	ldr	r0, [r4, #0]
 800d32c:	1d19      	adds	r1, r3, #4
 800d32e:	6031      	str	r1, [r6, #0]
 800d330:	0606      	lsls	r6, r0, #24
 800d332:	d501      	bpl.n	800d338 <_printf_i+0xbc>
 800d334:	681d      	ldr	r5, [r3, #0]
 800d336:	e003      	b.n	800d340 <_printf_i+0xc4>
 800d338:	0645      	lsls	r5, r0, #25
 800d33a:	d5fb      	bpl.n	800d334 <_printf_i+0xb8>
 800d33c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d340:	2d00      	cmp	r5, #0
 800d342:	da03      	bge.n	800d34c <_printf_i+0xd0>
 800d344:	232d      	movs	r3, #45	@ 0x2d
 800d346:	426d      	negs	r5, r5
 800d348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d34c:	4858      	ldr	r0, [pc, #352]	@ (800d4b0 <_printf_i+0x234>)
 800d34e:	230a      	movs	r3, #10
 800d350:	e011      	b.n	800d376 <_printf_i+0xfa>
 800d352:	6821      	ldr	r1, [r4, #0]
 800d354:	6833      	ldr	r3, [r6, #0]
 800d356:	0608      	lsls	r0, r1, #24
 800d358:	f853 5b04 	ldr.w	r5, [r3], #4
 800d35c:	d402      	bmi.n	800d364 <_printf_i+0xe8>
 800d35e:	0649      	lsls	r1, r1, #25
 800d360:	bf48      	it	mi
 800d362:	b2ad      	uxthmi	r5, r5
 800d364:	2f6f      	cmp	r7, #111	@ 0x6f
 800d366:	4852      	ldr	r0, [pc, #328]	@ (800d4b0 <_printf_i+0x234>)
 800d368:	6033      	str	r3, [r6, #0]
 800d36a:	bf14      	ite	ne
 800d36c:	230a      	movne	r3, #10
 800d36e:	2308      	moveq	r3, #8
 800d370:	2100      	movs	r1, #0
 800d372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d376:	6866      	ldr	r6, [r4, #4]
 800d378:	60a6      	str	r6, [r4, #8]
 800d37a:	2e00      	cmp	r6, #0
 800d37c:	db05      	blt.n	800d38a <_printf_i+0x10e>
 800d37e:	6821      	ldr	r1, [r4, #0]
 800d380:	432e      	orrs	r6, r5
 800d382:	f021 0104 	bic.w	r1, r1, #4
 800d386:	6021      	str	r1, [r4, #0]
 800d388:	d04b      	beq.n	800d422 <_printf_i+0x1a6>
 800d38a:	4616      	mov	r6, r2
 800d38c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d390:	fb03 5711 	mls	r7, r3, r1, r5
 800d394:	5dc7      	ldrb	r7, [r0, r7]
 800d396:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d39a:	462f      	mov	r7, r5
 800d39c:	42bb      	cmp	r3, r7
 800d39e:	460d      	mov	r5, r1
 800d3a0:	d9f4      	bls.n	800d38c <_printf_i+0x110>
 800d3a2:	2b08      	cmp	r3, #8
 800d3a4:	d10b      	bne.n	800d3be <_printf_i+0x142>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	07df      	lsls	r7, r3, #31
 800d3aa:	d508      	bpl.n	800d3be <_printf_i+0x142>
 800d3ac:	6923      	ldr	r3, [r4, #16]
 800d3ae:	6861      	ldr	r1, [r4, #4]
 800d3b0:	4299      	cmp	r1, r3
 800d3b2:	bfde      	ittt	le
 800d3b4:	2330      	movle	r3, #48	@ 0x30
 800d3b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3be:	1b92      	subs	r2, r2, r6
 800d3c0:	6122      	str	r2, [r4, #16]
 800d3c2:	f8cd a000 	str.w	sl, [sp]
 800d3c6:	464b      	mov	r3, r9
 800d3c8:	aa03      	add	r2, sp, #12
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	f7ff fee7 	bl	800d1a0 <_printf_common>
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	d14a      	bne.n	800d46c <_printf_i+0x1f0>
 800d3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3da:	b004      	add	sp, #16
 800d3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	f043 0320 	orr.w	r3, r3, #32
 800d3e6:	6023      	str	r3, [r4, #0]
 800d3e8:	4832      	ldr	r0, [pc, #200]	@ (800d4b4 <_printf_i+0x238>)
 800d3ea:	2778      	movs	r7, #120	@ 0x78
 800d3ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	6831      	ldr	r1, [r6, #0]
 800d3f4:	061f      	lsls	r7, r3, #24
 800d3f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3fa:	d402      	bmi.n	800d402 <_printf_i+0x186>
 800d3fc:	065f      	lsls	r7, r3, #25
 800d3fe:	bf48      	it	mi
 800d400:	b2ad      	uxthmi	r5, r5
 800d402:	6031      	str	r1, [r6, #0]
 800d404:	07d9      	lsls	r1, r3, #31
 800d406:	bf44      	itt	mi
 800d408:	f043 0320 	orrmi.w	r3, r3, #32
 800d40c:	6023      	strmi	r3, [r4, #0]
 800d40e:	b11d      	cbz	r5, 800d418 <_printf_i+0x19c>
 800d410:	2310      	movs	r3, #16
 800d412:	e7ad      	b.n	800d370 <_printf_i+0xf4>
 800d414:	4826      	ldr	r0, [pc, #152]	@ (800d4b0 <_printf_i+0x234>)
 800d416:	e7e9      	b.n	800d3ec <_printf_i+0x170>
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	f023 0320 	bic.w	r3, r3, #32
 800d41e:	6023      	str	r3, [r4, #0]
 800d420:	e7f6      	b.n	800d410 <_printf_i+0x194>
 800d422:	4616      	mov	r6, r2
 800d424:	e7bd      	b.n	800d3a2 <_printf_i+0x126>
 800d426:	6833      	ldr	r3, [r6, #0]
 800d428:	6825      	ldr	r5, [r4, #0]
 800d42a:	6961      	ldr	r1, [r4, #20]
 800d42c:	1d18      	adds	r0, r3, #4
 800d42e:	6030      	str	r0, [r6, #0]
 800d430:	062e      	lsls	r6, r5, #24
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	d501      	bpl.n	800d43a <_printf_i+0x1be>
 800d436:	6019      	str	r1, [r3, #0]
 800d438:	e002      	b.n	800d440 <_printf_i+0x1c4>
 800d43a:	0668      	lsls	r0, r5, #25
 800d43c:	d5fb      	bpl.n	800d436 <_printf_i+0x1ba>
 800d43e:	8019      	strh	r1, [r3, #0]
 800d440:	2300      	movs	r3, #0
 800d442:	6123      	str	r3, [r4, #16]
 800d444:	4616      	mov	r6, r2
 800d446:	e7bc      	b.n	800d3c2 <_printf_i+0x146>
 800d448:	6833      	ldr	r3, [r6, #0]
 800d44a:	1d1a      	adds	r2, r3, #4
 800d44c:	6032      	str	r2, [r6, #0]
 800d44e:	681e      	ldr	r6, [r3, #0]
 800d450:	6862      	ldr	r2, [r4, #4]
 800d452:	2100      	movs	r1, #0
 800d454:	4630      	mov	r0, r6
 800d456:	f7f2 fed3 	bl	8000200 <memchr>
 800d45a:	b108      	cbz	r0, 800d460 <_printf_i+0x1e4>
 800d45c:	1b80      	subs	r0, r0, r6
 800d45e:	6060      	str	r0, [r4, #4]
 800d460:	6863      	ldr	r3, [r4, #4]
 800d462:	6123      	str	r3, [r4, #16]
 800d464:	2300      	movs	r3, #0
 800d466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d46a:	e7aa      	b.n	800d3c2 <_printf_i+0x146>
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	4632      	mov	r2, r6
 800d470:	4649      	mov	r1, r9
 800d472:	4640      	mov	r0, r8
 800d474:	47d0      	blx	sl
 800d476:	3001      	adds	r0, #1
 800d478:	d0ad      	beq.n	800d3d6 <_printf_i+0x15a>
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	079b      	lsls	r3, r3, #30
 800d47e:	d413      	bmi.n	800d4a8 <_printf_i+0x22c>
 800d480:	68e0      	ldr	r0, [r4, #12]
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	4298      	cmp	r0, r3
 800d486:	bfb8      	it	lt
 800d488:	4618      	movlt	r0, r3
 800d48a:	e7a6      	b.n	800d3da <_printf_i+0x15e>
 800d48c:	2301      	movs	r3, #1
 800d48e:	4632      	mov	r2, r6
 800d490:	4649      	mov	r1, r9
 800d492:	4640      	mov	r0, r8
 800d494:	47d0      	blx	sl
 800d496:	3001      	adds	r0, #1
 800d498:	d09d      	beq.n	800d3d6 <_printf_i+0x15a>
 800d49a:	3501      	adds	r5, #1
 800d49c:	68e3      	ldr	r3, [r4, #12]
 800d49e:	9903      	ldr	r1, [sp, #12]
 800d4a0:	1a5b      	subs	r3, r3, r1
 800d4a2:	42ab      	cmp	r3, r5
 800d4a4:	dcf2      	bgt.n	800d48c <_printf_i+0x210>
 800d4a6:	e7eb      	b.n	800d480 <_printf_i+0x204>
 800d4a8:	2500      	movs	r5, #0
 800d4aa:	f104 0619 	add.w	r6, r4, #25
 800d4ae:	e7f5      	b.n	800d49c <_printf_i+0x220>
 800d4b0:	0800d929 	.word	0x0800d929
 800d4b4:	0800d93a 	.word	0x0800d93a

0800d4b8 <memmove>:
 800d4b8:	4288      	cmp	r0, r1
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	eb01 0402 	add.w	r4, r1, r2
 800d4c0:	d902      	bls.n	800d4c8 <memmove+0x10>
 800d4c2:	4284      	cmp	r4, r0
 800d4c4:	4623      	mov	r3, r4
 800d4c6:	d807      	bhi.n	800d4d8 <memmove+0x20>
 800d4c8:	1e43      	subs	r3, r0, #1
 800d4ca:	42a1      	cmp	r1, r4
 800d4cc:	d008      	beq.n	800d4e0 <memmove+0x28>
 800d4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4d6:	e7f8      	b.n	800d4ca <memmove+0x12>
 800d4d8:	4402      	add	r2, r0
 800d4da:	4601      	mov	r1, r0
 800d4dc:	428a      	cmp	r2, r1
 800d4de:	d100      	bne.n	800d4e2 <memmove+0x2a>
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4ea:	e7f7      	b.n	800d4dc <memmove+0x24>

0800d4ec <_sbrk_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	4d06      	ldr	r5, [pc, #24]	@ (800d508 <_sbrk_r+0x1c>)
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	f7f6 f9c4 	bl	8003884 <_sbrk>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_sbrk_r+0x1a>
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	b103      	cbz	r3, 800d506 <_sbrk_r+0x1a>
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	200040cc 	.word	0x200040cc

0800d50c <_realloc_r>:
 800d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d510:	4607      	mov	r7, r0
 800d512:	4614      	mov	r4, r2
 800d514:	460d      	mov	r5, r1
 800d516:	b921      	cbnz	r1, 800d522 <_realloc_r+0x16>
 800d518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	4611      	mov	r1, r2
 800d51e:	f7ff bc5b 	b.w	800cdd8 <_malloc_r>
 800d522:	b92a      	cbnz	r2, 800d530 <_realloc_r+0x24>
 800d524:	f7ff fbec 	bl	800cd00 <_free_r>
 800d528:	4625      	mov	r5, r4
 800d52a:	4628      	mov	r0, r5
 800d52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d530:	f000 f81a 	bl	800d568 <_malloc_usable_size_r>
 800d534:	4284      	cmp	r4, r0
 800d536:	4606      	mov	r6, r0
 800d538:	d802      	bhi.n	800d540 <_realloc_r+0x34>
 800d53a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d53e:	d8f4      	bhi.n	800d52a <_realloc_r+0x1e>
 800d540:	4621      	mov	r1, r4
 800d542:	4638      	mov	r0, r7
 800d544:	f7ff fc48 	bl	800cdd8 <_malloc_r>
 800d548:	4680      	mov	r8, r0
 800d54a:	b908      	cbnz	r0, 800d550 <_realloc_r+0x44>
 800d54c:	4645      	mov	r5, r8
 800d54e:	e7ec      	b.n	800d52a <_realloc_r+0x1e>
 800d550:	42b4      	cmp	r4, r6
 800d552:	4622      	mov	r2, r4
 800d554:	4629      	mov	r1, r5
 800d556:	bf28      	it	cs
 800d558:	4632      	movcs	r2, r6
 800d55a:	f7ff fbc3 	bl	800cce4 <memcpy>
 800d55e:	4629      	mov	r1, r5
 800d560:	4638      	mov	r0, r7
 800d562:	f7ff fbcd 	bl	800cd00 <_free_r>
 800d566:	e7f1      	b.n	800d54c <_realloc_r+0x40>

0800d568 <_malloc_usable_size_r>:
 800d568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d56c:	1f18      	subs	r0, r3, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bfbc      	itt	lt
 800d572:	580b      	ldrlt	r3, [r1, r0]
 800d574:	18c0      	addlt	r0, r0, r3
 800d576:	4770      	bx	lr

0800d578 <_init>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	bf00      	nop
 800d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d57e:	bc08      	pop	{r3}
 800d580:	469e      	mov	lr, r3
 800d582:	4770      	bx	lr

0800d584 <_fini>:
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d586:	bf00      	nop
 800d588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58a:	bc08      	pop	{r3}
 800d58c:	469e      	mov	lr, r3
 800d58e:	4770      	bx	lr
